// modules are defined as an array
// [ module function, map of requires ]
//
// map of requires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the require for previous bundles

(function (modules, entry, mainEntry, parcelRequireName, globalName) {
  /* eslint-disable no-undef */
  var globalObject =
    typeof globalThis !== 'undefined'
      ? globalThis
      : typeof self !== 'undefined'
      ? self
      : typeof window !== 'undefined'
      ? window
      : typeof global !== 'undefined'
      ? global
      : {};
  /* eslint-enable no-undef */

  // Save the require from previous bundle to this closure if any
  var previousRequire =
    typeof globalObject[parcelRequireName] === 'function' &&
    globalObject[parcelRequireName];

  var cache = previousRequire.cache || {};
  // Do not use `require` to prevent Webpack from trying to bundle this call
  var nodeRequire =
    typeof module !== 'undefined' &&
    typeof module.require === 'function' &&
    module.require.bind(module);

  function newRequire(name, jumped) {
    if (!cache[name]) {
      if (!modules[name]) {
        // if we cannot find the module within our internal map or
        // cache jump to the current global require ie. the last bundle
        // that was added to the page.
        var currentRequire =
          typeof globalObject[parcelRequireName] === 'function' &&
          globalObject[parcelRequireName];
        if (!jumped && currentRequire) {
          return currentRequire(name, true);
        }

        // If there are other bundles on this page the require from the
        // previous one is saved to 'previousRequire'. Repeat this as
        // many times as there are bundles until the module is found or
        // we exhaust the require chain.
        if (previousRequire) {
          return previousRequire(name, true);
        }

        // Try the node require function if it exists.
        if (nodeRequire && typeof name === 'string') {
          return nodeRequire(name);
        }

        var err = new Error("Cannot find module '" + name + "'");
        err.code = 'MODULE_NOT_FOUND';
        throw err;
      }

      localRequire.resolve = resolve;
      localRequire.cache = {};

      var module = (cache[name] = new newRequire.Module(name));

      modules[name][0].call(
        module.exports,
        localRequire,
        module,
        module.exports,
        this
      );
    }

    return cache[name].exports;

    function localRequire(x) {
      var res = localRequire.resolve(x);
      return res === false ? {} : newRequire(res);
    }

    function resolve(x) {
      var id = modules[name][1][x];
      return id != null ? id : x;
    }
  }

  function Module(moduleName) {
    this.id = moduleName;
    this.bundle = newRequire;
    this.exports = {};
  }

  newRequire.isParcelRequire = true;
  newRequire.Module = Module;
  newRequire.modules = modules;
  newRequire.cache = cache;
  newRequire.parent = previousRequire;
  newRequire.register = function (id, exports) {
    modules[id] = [
      function (require, module) {
        module.exports = exports;
      },
      {},
    ];
  };

  Object.defineProperty(newRequire, 'root', {
    get: function () {
      return globalObject[parcelRequireName];
    },
  });

  globalObject[parcelRequireName] = newRequire;

  for (var i = 0; i < entry.length; i++) {
    newRequire(entry[i]);
  }

  if (mainEntry) {
    // Expose entry point to Node, AMD or browser globals
    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js
    var mainExports = newRequire(mainEntry);

    // CommonJS
    if (typeof exports === 'object' && typeof module !== 'undefined') {
      module.exports = mainExports;

      // RequireJS
    } else if (typeof define === 'function' && define.amd) {
      define(function () {
        return mainExports;
      });

      // <script>
    } else if (globalName) {
      this[globalName] = mainExports;
    }
  }
})({"69IND":[function(require,module,exports) {
var global = arguments[3];
var HMR_HOST = null;
var HMR_PORT = null;
var HMR_SECURE = false;
var HMR_ENV_HASH = "d6ea1d42532a7575";
module.bundle.HMR_BUNDLE_ID = "ed679c9d189cd996";
"use strict";
/* global HMR_HOST, HMR_PORT, HMR_ENV_HASH, HMR_SECURE, chrome, browser, __parcel__import__, __parcel__importScripts__, ServiceWorkerGlobalScope */ /*::
import type {
  HMRAsset,
  HMRMessage,
} from '@parcel/reporter-dev-server/src/HMRServer.js';
interface ParcelRequire {
  (string): mixed;
  cache: {|[string]: ParcelModule|};
  hotData: {|[string]: mixed|};
  Module: any;
  parent: ?ParcelRequire;
  isParcelRequire: true;
  modules: {|[string]: [Function, {|[string]: string|}]|};
  HMR_BUNDLE_ID: string;
  root: ParcelRequire;
}
interface ParcelModule {
  hot: {|
    data: mixed,
    accept(cb: (Function) => void): void,
    dispose(cb: (mixed) => void): void,
    // accept(deps: Array<string> | string, cb: (Function) => void): void,
    // decline(): void,
    _acceptCallbacks: Array<(Function) => void>,
    _disposeCallbacks: Array<(mixed) => void>,
  |};
}
interface ExtensionContext {
  runtime: {|
    reload(): void,
    getURL(url: string): string;
    getManifest(): {manifest_version: number, ...};
  |};
}
declare var module: {bundle: ParcelRequire, ...};
declare var HMR_HOST: string;
declare var HMR_PORT: string;
declare var HMR_ENV_HASH: string;
declare var HMR_SECURE: boolean;
declare var chrome: ExtensionContext;
declare var browser: ExtensionContext;
declare var __parcel__import__: (string) => Promise<void>;
declare var __parcel__importScripts__: (string) => Promise<void>;
declare var globalThis: typeof self;
declare var ServiceWorkerGlobalScope: Object;
*/ var OVERLAY_ID = "__parcel__error__overlay__";
var OldModule = module.bundle.Module;
function Module(moduleName) {
    OldModule.call(this, moduleName);
    this.hot = {
        data: module.bundle.hotData[moduleName],
        _acceptCallbacks: [],
        _disposeCallbacks: [],
        accept: function(fn) {
            this._acceptCallbacks.push(fn || function() {});
        },
        dispose: function(fn) {
            this._disposeCallbacks.push(fn);
        }
    };
    module.bundle.hotData[moduleName] = undefined;
}
module.bundle.Module = Module;
module.bundle.hotData = {};
var checkedAssets /*: {|[string]: boolean|} */ , assetsToDispose /*: Array<[ParcelRequire, string]> */ , assetsToAccept /*: Array<[ParcelRequire, string]> */ ;
function getHostname() {
    return HMR_HOST || (location.protocol.indexOf("http") === 0 ? location.hostname : "localhost");
}
function getPort() {
    return HMR_PORT || location.port;
}
// eslint-disable-next-line no-redeclare
var parent = module.bundle.parent;
if ((!parent || !parent.isParcelRequire) && typeof WebSocket !== "undefined") {
    var hostname = getHostname();
    var port = getPort();
    var protocol = HMR_SECURE || location.protocol == "https:" && ![
        "localhost",
        "127.0.0.1",
        "0.0.0.0"
    ].includes(hostname) ? "wss" : "ws";
    var ws;
    try {
        ws = new WebSocket(protocol + "://" + hostname + (port ? ":" + port : "") + "/");
    } catch (err) {
        if (err.message) console.error(err.message);
        ws = {};
    }
    // Web extension context
    var extCtx = typeof browser === "undefined" ? typeof chrome === "undefined" ? null : chrome : browser;
    // Safari doesn't support sourceURL in error stacks.
    // eval may also be disabled via CSP, so do a quick check.
    var supportsSourceURL = false;
    try {
        (0, eval)('throw new Error("test"); //# sourceURL=test.js');
    } catch (err) {
        supportsSourceURL = err.stack.includes("test.js");
    }
    // $FlowFixMe
    ws.onmessage = async function(event /*: {data: string, ...} */ ) {
        checkedAssets = {} /*: {|[string]: boolean|} */ ;
        assetsToAccept = [];
        assetsToDispose = [];
        var data /*: HMRMessage */  = JSON.parse(event.data);
        if (data.type === "update") {
            // Remove error overlay if there is one
            if (typeof document !== "undefined") removeErrorOverlay();
            let assets = data.assets.filter((asset)=>asset.envHash === HMR_ENV_HASH);
            // Handle HMR Update
            let handled = assets.every((asset)=>{
                return asset.type === "css" || asset.type === "js" && hmrAcceptCheck(module.bundle.root, asset.id, asset.depsByBundle);
            });
            if (handled) {
                console.clear();
                // Dispatch custom event so other runtimes (e.g React Refresh) are aware.
                if (typeof window !== "undefined" && typeof CustomEvent !== "undefined") window.dispatchEvent(new CustomEvent("parcelhmraccept"));
                await hmrApplyUpdates(assets);
                // Dispose all old assets.
                let processedAssets = {} /*: {|[string]: boolean|} */ ;
                for(let i = 0; i < assetsToDispose.length; i++){
                    let id = assetsToDispose[i][1];
                    if (!processedAssets[id]) {
                        hmrDispose(assetsToDispose[i][0], id);
                        processedAssets[id] = true;
                    }
                }
                // Run accept callbacks. This will also re-execute other disposed assets in topological order.
                processedAssets = {};
                for(let i = 0; i < assetsToAccept.length; i++){
                    let id = assetsToAccept[i][1];
                    if (!processedAssets[id]) {
                        hmrAccept(assetsToAccept[i][0], id);
                        processedAssets[id] = true;
                    }
                }
            } else fullReload();
        }
        if (data.type === "error") {
            // Log parcel errors to console
            for (let ansiDiagnostic of data.diagnostics.ansi){
                let stack = ansiDiagnostic.codeframe ? ansiDiagnostic.codeframe : ansiDiagnostic.stack;
                console.error("\uD83D\uDEA8 [parcel]: " + ansiDiagnostic.message + "\n" + stack + "\n\n" + ansiDiagnostic.hints.join("\n"));
            }
            if (typeof document !== "undefined") {
                // Render the fancy html overlay
                removeErrorOverlay();
                var overlay = createErrorOverlay(data.diagnostics.html);
                // $FlowFixMe
                document.body.appendChild(overlay);
            }
        }
    };
    ws.onerror = function(e) {
        if (e.message) console.error(e.message);
    };
    ws.onclose = function() {
        console.warn("[parcel] \uD83D\uDEA8 Connection to the HMR server was lost");
    };
}
function removeErrorOverlay() {
    var overlay = document.getElementById(OVERLAY_ID);
    if (overlay) {
        overlay.remove();
        console.log("[parcel] \u2728 Error resolved");
    }
}
function createErrorOverlay(diagnostics) {
    var overlay = document.createElement("div");
    overlay.id = OVERLAY_ID;
    let errorHTML = '<div style="background: black; opacity: 0.85; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; font-family: Menlo, Consolas, monospace; z-index: 9999;">';
    for (let diagnostic of diagnostics){
        let stack = diagnostic.frames.length ? diagnostic.frames.reduce((p, frame)=>{
            return `${p}
<a href="/__parcel_launch_editor?file=${encodeURIComponent(frame.location)}" style="text-decoration: underline; color: #888" onclick="fetch(this.href); return false">${frame.location}</a>
${frame.code}`;
        }, "") : diagnostic.stack;
        errorHTML += `
      <div>
        <div style="font-size: 18px; font-weight: bold; margin-top: 20px;">
          \u{1F6A8} ${diagnostic.message}
        </div>
        <pre>${stack}</pre>
        <div>
          ${diagnostic.hints.map((hint)=>"<div>\uD83D\uDCA1 " + hint + "</div>").join("")}
        </div>
        ${diagnostic.documentation ? `<div>\u{1F4DD} <a style="color: violet" href="${diagnostic.documentation}" target="_blank">Learn more</a></div>` : ""}
      </div>
    `;
    }
    errorHTML += "</div>";
    overlay.innerHTML = errorHTML;
    return overlay;
}
function fullReload() {
    if ("reload" in location) location.reload();
    else if (extCtx && extCtx.runtime && extCtx.runtime.reload) extCtx.runtime.reload();
}
function getParents(bundle, id) /*: Array<[ParcelRequire, string]> */ {
    var modules = bundle.modules;
    if (!modules) return [];
    var parents = [];
    var k, d, dep;
    for(k in modules)for(d in modules[k][1]){
        dep = modules[k][1][d];
        if (dep === id || Array.isArray(dep) && dep[dep.length - 1] === id) parents.push([
            bundle,
            k
        ]);
    }
    if (bundle.parent) parents = parents.concat(getParents(bundle.parent, id));
    return parents;
}
function updateLink(link) {
    var href = link.getAttribute("href");
    if (!href) return;
    var newLink = link.cloneNode();
    newLink.onload = function() {
        if (link.parentNode !== null) // $FlowFixMe
        link.parentNode.removeChild(link);
    };
    newLink.setAttribute("href", // $FlowFixMe
    href.split("?")[0] + "?" + Date.now());
    // $FlowFixMe
    link.parentNode.insertBefore(newLink, link.nextSibling);
}
var cssTimeout = null;
function reloadCSS() {
    if (cssTimeout) return;
    cssTimeout = setTimeout(function() {
        var links = document.querySelectorAll('link[rel="stylesheet"]');
        for(var i = 0; i < links.length; i++){
            // $FlowFixMe[incompatible-type]
            var href /*: string */  = links[i].getAttribute("href");
            var hostname = getHostname();
            var servedFromHMRServer = hostname === "localhost" ? new RegExp("^(https?:\\/\\/(0.0.0.0|127.0.0.1)|localhost):" + getPort()).test(href) : href.indexOf(hostname + ":" + getPort());
            var absolute = /^https?:\/\//i.test(href) && href.indexOf(location.origin) !== 0 && !servedFromHMRServer;
            if (!absolute) updateLink(links[i]);
        }
        cssTimeout = null;
    }, 50);
}
function hmrDownload(asset) {
    if (asset.type === "js") {
        if (typeof document !== "undefined") {
            let script = document.createElement("script");
            script.src = asset.url + "?t=" + Date.now();
            if (asset.outputFormat === "esmodule") script.type = "module";
            return new Promise((resolve, reject)=>{
                var _document$head;
                script.onload = ()=>resolve(script);
                script.onerror = reject;
                (_document$head = document.head) === null || _document$head === void 0 || _document$head.appendChild(script);
            });
        } else if (typeof importScripts === "function") {
            // Worker scripts
            if (asset.outputFormat === "esmodule") return import(asset.url + "?t=" + Date.now());
            else return new Promise((resolve, reject)=>{
                try {
                    importScripts(asset.url + "?t=" + Date.now());
                    resolve();
                } catch (err) {
                    reject(err);
                }
            });
        }
    }
}
async function hmrApplyUpdates(assets) {
    global.parcelHotUpdate = Object.create(null);
    let scriptsToRemove;
    try {
        // If sourceURL comments aren't supported in eval, we need to load
        // the update from the dev server over HTTP so that stack traces
        // are correct in errors/logs. This is much slower than eval, so
        // we only do it if needed (currently just Safari).
        // https://bugs.webkit.org/show_bug.cgi?id=137297
        // This path is also taken if a CSP disallows eval.
        if (!supportsSourceURL) {
            let promises = assets.map((asset)=>{
                var _hmrDownload;
                return (_hmrDownload = hmrDownload(asset)) === null || _hmrDownload === void 0 ? void 0 : _hmrDownload.catch((err)=>{
                    // Web extension fix
                    if (extCtx && extCtx.runtime && extCtx.runtime.getManifest().manifest_version == 3 && typeof ServiceWorkerGlobalScope != "undefined" && global instanceof ServiceWorkerGlobalScope) {
                        extCtx.runtime.reload();
                        return;
                    }
                    throw err;
                });
            });
            scriptsToRemove = await Promise.all(promises);
        }
        assets.forEach(function(asset) {
            hmrApply(module.bundle.root, asset);
        });
    } finally{
        delete global.parcelHotUpdate;
        if (scriptsToRemove) scriptsToRemove.forEach((script)=>{
            if (script) {
                var _document$head2;
                (_document$head2 = document.head) === null || _document$head2 === void 0 || _document$head2.removeChild(script);
            }
        });
    }
}
function hmrApply(bundle /*: ParcelRequire */ , asset /*:  HMRAsset */ ) {
    var modules = bundle.modules;
    if (!modules) return;
    if (asset.type === "css") reloadCSS();
    else if (asset.type === "js") {
        let deps = asset.depsByBundle[bundle.HMR_BUNDLE_ID];
        if (deps) {
            if (modules[asset.id]) {
                // Remove dependencies that are removed and will become orphaned.
                // This is necessary so that if the asset is added back again, the cache is gone, and we prevent a full page reload.
                let oldDeps = modules[asset.id][1];
                for(let dep in oldDeps)if (!deps[dep] || deps[dep] !== oldDeps[dep]) {
                    let id = oldDeps[dep];
                    let parents = getParents(module.bundle.root, id);
                    if (parents.length === 1) hmrDelete(module.bundle.root, id);
                }
            }
            if (supportsSourceURL) // Global eval. We would use `new Function` here but browser
            // support for source maps is better with eval.
            (0, eval)(asset.output);
            // $FlowFixMe
            let fn = global.parcelHotUpdate[asset.id];
            modules[asset.id] = [
                fn,
                deps
            ];
        } else if (bundle.parent) hmrApply(bundle.parent, asset);
    }
}
function hmrDelete(bundle, id) {
    let modules = bundle.modules;
    if (!modules) return;
    if (modules[id]) {
        // Collect dependencies that will become orphaned when this module is deleted.
        let deps = modules[id][1];
        let orphans = [];
        for(let dep in deps){
            let parents = getParents(module.bundle.root, deps[dep]);
            if (parents.length === 1) orphans.push(deps[dep]);
        }
        // Delete the module. This must be done before deleting dependencies in case of circular dependencies.
        delete modules[id];
        delete bundle.cache[id];
        // Now delete the orphans.
        orphans.forEach((id)=>{
            hmrDelete(module.bundle.root, id);
        });
    } else if (bundle.parent) hmrDelete(bundle.parent, id);
}
function hmrAcceptCheck(bundle /*: ParcelRequire */ , id /*: string */ , depsByBundle /*: ?{ [string]: { [string]: string } }*/ ) {
    if (hmrAcceptCheckOne(bundle, id, depsByBundle)) return true;
    // Traverse parents breadth first. All possible ancestries must accept the HMR update, or we'll reload.
    let parents = getParents(module.bundle.root, id);
    let accepted = false;
    while(parents.length > 0){
        let v = parents.shift();
        let a = hmrAcceptCheckOne(v[0], v[1], null);
        if (a) // If this parent accepts, stop traversing upward, but still consider siblings.
        accepted = true;
        else {
            // Otherwise, queue the parents in the next level upward.
            let p = getParents(module.bundle.root, v[1]);
            if (p.length === 0) {
                // If there are no parents, then we've reached an entry without accepting. Reload.
                accepted = false;
                break;
            }
            parents.push(...p);
        }
    }
    return accepted;
}
function hmrAcceptCheckOne(bundle /*: ParcelRequire */ , id /*: string */ , depsByBundle /*: ?{ [string]: { [string]: string } }*/ ) {
    var modules = bundle.modules;
    if (!modules) return;
    if (depsByBundle && !depsByBundle[bundle.HMR_BUNDLE_ID]) {
        // If we reached the root bundle without finding where the asset should go,
        // there's nothing to do. Mark as "accepted" so we don't reload the page.
        if (!bundle.parent) return true;
        return hmrAcceptCheck(bundle.parent, id, depsByBundle);
    }
    if (checkedAssets[id]) return true;
    checkedAssets[id] = true;
    var cached = bundle.cache[id];
    assetsToDispose.push([
        bundle,
        id
    ]);
    if (!cached || cached.hot && cached.hot._acceptCallbacks.length) {
        assetsToAccept.push([
            bundle,
            id
        ]);
        return true;
    }
}
function hmrDispose(bundle /*: ParcelRequire */ , id /*: string */ ) {
    var cached = bundle.cache[id];
    bundle.hotData[id] = {};
    if (cached && cached.hot) cached.hot.data = bundle.hotData[id];
    if (cached && cached.hot && cached.hot._disposeCallbacks.length) cached.hot._disposeCallbacks.forEach(function(cb) {
        cb(bundle.hotData[id]);
    });
    delete bundle.cache[id];
}
function hmrAccept(bundle /*: ParcelRequire */ , id /*: string */ ) {
    // Execute the module.
    bundle(id);
    // Run the accept callbacks in the new version of the module.
    var cached = bundle.cache[id];
    if (cached && cached.hot && cached.hot._acceptCallbacks.length) cached.hot._acceptCallbacks.forEach(function(cb) {
        var assetsToAlsoAccept = cb(function() {
            return getParents(module.bundle.root, id);
        });
        if (assetsToAlsoAccept && assetsToAccept.length) {
            assetsToAlsoAccept.forEach(function(a) {
                hmrDispose(a[0], a[1]);
            });
            // $FlowFixMe[method-unbinding]
            assetsToAccept.push.apply(assetsToAccept, assetsToAlsoAccept);
        }
    });
}

},{}],"9CAwl":[function(require,module,exports) {
/*
This file is part of web3.js.

web3.js is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

web3.js is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/ /**
 * This is the main (or 'umbrella') class of the web3.js library.
 *
 * ```ts
 * import Web3 from 'web3';
 *
 * > Web3.utils
 * > Web3.version
 * > Web3.givenProvider
 * > Web3.providers
 * > Web3.modules
 * ```
 *
 * # Web3.modules
 *
 * ```ts
 * Web3.modules
 * ```
 *
 * Will return an object with the classes of all major sub modules, to be able to instantiate them manually.
 *
 * #### Returns
 *
 *  `Object` A list of module constructors:
 *
 *
 *  + `Eth` - `Constructor`: The Eth module for interacting with the Ethereum network
 *
 *
 *  + `Net` - `Constructor`: The Net module for interacting with network properties.
 *
 *
 *  + `Personal` - `constructor`: The Personal module for interacting with the Ethereum accounts (web3.eth.personal).
 *
 * #### Example
 *
 * ```ts
 * Web3.modules
 * > {
 *   	Eth: Eth(provider),
 *   	Net: Net(provider),
 *   	Personal: Personal(provider),
 *   }
 * ```
 *
 * See details: {@link Web3.modules}
 *
 * # Web3 Instance
 *
 * The Web3 class is an umbrella package to house all Ethereum related modules.
 *
 * ```ts
 * import Web3 from 'web3';
 *
 * // "Web3.givenProvider" will be set if in an Ethereum supported browser.
 * const web3 = new Web3(Web3.givenProvider || 'ws://some.local-or-remote.node:8546');
 *
 * > web3.eth
 * > web3.utils
 * > web3.version
 * ```
 *
 * ### version
 *
 * Contains the current package version of the web3.js library.
 *
 * #### Returns
 * //todo enable when functionality added
 * // @see Web3.version
 *
 * ### utils
 *
 * Static accessible property of the Web3 class and property of the instance as well.
 *
 * ```ts
 * Web3.utils
 * web3.utils
 * ```
 *
 * Utility functions are also exposed on the `Web3` class object diretly.
 *
 * //todo enable when implemented
 * //See details: {@link Web3.utils}
 *
 * ### setProvider
 *
 * ```ts
 * web3.setProvider(myProvider)
 * web3.eth.setProvider(myProvider)
 * ...
 * ```
 *
 * Will change the provider for its module.
 *
 * **_NOTE:_** When called on the umbrella package web3 it will also set the provider for all sub modules web3.eth  etc.
 *
 * #### Parameters
 *  `Object`  - `myProvider`: a valid provider.
 *
 * #### Returns
 * `Boolean`
 *
 * See details: {@link Web3.setProvider}
 *
 * #### Example: Local Geth Node
 * ```ts
 * import Web3 from "web3";
 * let web3: Web3 = new Web3('http://localhost:8545');
 * // or
 * let web3: Web3 = new Web3(new Web3.providers.HttpProvider('http://localhost:8545'));
 *
 * // change provider
 * web3.setProvider('ws://localhost:8546');
 * // or
 * web3.setProvider(new Web3.providers.WebsocketProvider('ws://localhost:8546'));
 *
 * //todo add IPC provider
 * ```
 *
 * #### Example: Remote Geth Node
 *
 * ```ts
 * // Using a remote node provider, like Alchemy (https://www.alchemyapi.io/supernode), is simple.
 * import Web3 from "web3";
 * let web3: Web3 = new Web3("https://eth-mainnet.alchemyapi.io/v2/your-api-key");
 * ```
 *
 * ### providers
 *
 * ```ts
 * web3.providers
 * web3.eth.providers
 * ```
 * Contains the current available providers.
 *
 * #### Returns
 *  `Object` with the following providers:
 *
 *
 *  + `Object` - `HttpProvider`: HTTP provider, does not support subscriptions.
 *
 *
 *  + `Object` - `WebSocketProvider`: The WebSocket provider is the standard for usage in legacy browsers.
 *
 *
 *  + `Object` - `IpcProvider`: The IPC provider is used in node.js dapps when running a local node. Gives the most secure connection.
 *
 *
 * #### Example
 * ```ts
 * import { Web3 } from 'web3';
 * // use the given Provider or instantiate a new websocket provider
 * let web3 = new Web3(Web3.givenProvider || 'ws://remotenode.com:8546');
 * // or
 * let web3 = new Web3(Web3.givenProvider || new Web3.providers.WebsocketProvider('ws://remotenode.com:8546'));
 *
 * // Using the IPC provider in node.js
 * import { Web3 } from 'web3';
 * import { IpcProvider } from 'web3-providers-ipc';
 * var web3 = new Web3(new IpcProvider('/Users/myuser/Library/Ethereum/geth.ipc')); // mac os path
 * // on windows the path is: "\\\\.\\pipe\\geth.ipc"
 * // on linux the path is: "/users/myuser/.ethereum/geth.ipc"
 * ```
 * #### Configuration
 *
 * ```ts
 *
 * //===
 * //Http
 * //===
 *
 * import Web3HttpProvider, { HttpProviderOptions } from "web3-providers-http";
 *
 * let options: HttpProviderOptions = {
 * 	providerOptions: {
 * 		keepalive: true,
 * 		credentials: "omit",
 * 		headers: {
 * 			"Access-Control-Allow-Origin": "*",
 * 		},
 * 	},
 * };
 *
 *
 * var provider = new Web3HttpProvider("http://localhost:8545", options);
 * web3.setProvider(provider);
 *
 * //===
 * //WebSockets
 * //===
 * import Web3WsProvider, {
 * 	ClientOptions,
 * 	ClientRequestArgs,
 * 	ReconnectOptions,
 * } from "web3-providers-ws";
 *
 *
 * let clientOptions: ClientOptions = {
 * 	// Useful for credentialed urls, e.g: ws://username:password@localhost:8546
 * 	headers: {
 * 		authorization: "Basic username:password",
 * 	},
 * 	maxPayload: 100000000,
 * };
 *
 * // Enable auto reconnection
 * let reconnectOptions: ReconnectOptions = {
 * 	autoReconnect: true,
 * 	delay: 5000, // ms
 * 	maxAttempts: 5,
 * };
 *
 * //clientOptions and reconnectOptions are optional
 * //clientOptions: ClientOptions | ClientRequestArgs
 * let ws = new Web3WsProvider(
 * "ws://localhost:8546",
 * clientOptions,
 * reconnectOptions
 * );
 * web3.setProvider(ws);
 *
 * ```
 * More information for the Http and Websocket provider modules can be found here:
 *
 *
 * - {@link HttpProvider}
 *
 *
 * - {@link WebSocketProvider}
 *
 * See details: {@link Web3.providers}
 *
 *
 * ### givenProvider
 *
 * ```ts
 * web3.givenProvider
 * web3.eth.givenProvider
 * ...
 * ```
 * When using web3.js in an Ethereum compatible browser, it will set with the current native provider by that browser.
 * Will return the given provider by the (browser) environment, otherwise `undefined`.
 *
 * #### Returns
 * `Object` -  The given provider set or `undefined`.
 *
 * See details: {@link Web3.givenProvider}
 *
 * ### currentProvider
 *
 * ```ts
 * web3.currentProvider
 * web3.eth.currentProvider
 * ...
 * ```
 * Will return the current provider, otherwise `undefined`.
 *
 * #### Returns
 * `Object`: The current provider, otherwise `undefined`.
 *
 * See details: {@link Web3.currentProvider}
 *
 * ### BatchRequest
 *
 * ```ts
 * new web3.BatchRequest()
 * new web3.BatchRequest()
 * ...
 * ```
 * Class to create and execute batch requests.
 *
 *  #### Parameters
 *  none
 *
 * #### Returns
 * `Object`: With the following methods:
 *
 * + `add(request)`: To add a request object to the batch call.
 *
 * + `execute()` : To execute the batch request.
 *
 * #### Example
 * ```ts
 * let request1: JsonRpcOptionalRequest = {
 * 	id: 10,
 * 	method: 'eth_getBalance',
 * 	params: ["0xdc6bad79dab7ea733098f66f6c6f9dd008da3258", 'latest'],
 * };
 * let request2: JsonRpcOptionalRequest = {
 * 	id: 11,
 * 	method: 'eth_getBalance',
 * 	params: ["0x962f9a9c2a6c092474d24def35eccb3d9363265e", 'latest'],
 * };
 *
 * const batch = new web3.BatchRequest();
 *
 *  batch.add(request1);
 *  batch.add(request2);
 * // add returns a deferred promise which can be used to run specific code after completion of each respective request.
 * //const request2Promise = batch.add(request2);
 *
 * const response = await batch.execute();
 * ```
 * See details: {@link Web3.BatchRequest}
 */ /**
 * This comment _supports3_ [Markdown](https://marked.js.org/)
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Web3Context", ()=>(0, _web3Core.Web3Context));
parcelHelpers.export(exports, "Web3PluginBase", ()=>(0, _web3Core.Web3PluginBase));
parcelHelpers.export(exports, "Web3EthPluginBase", ()=>(0, _web3Core.Web3EthPluginBase));
parcelHelpers.export(exports, "Web3Eth", ()=>(0, _web3Eth.Web3Eth));
parcelHelpers.export(exports, "Contract", ()=>(0, _web3EthContract.Contract));
parcelHelpers.export(exports, "Iban", ()=>(0, _web3EthIban.Iban));
parcelHelpers.export(exports, "Personal", ()=>(0, _web3EthPersonal.Personal));
parcelHelpers.export(exports, "Net", ()=>(0, _web3Net.Net));
parcelHelpers.export(exports, "HttpProvider", ()=>(0, _web3ProvidersHttp.HttpProvider));
parcelHelpers.export(exports, "WebSocketProvider", ()=>(0, _web3ProvidersWs.WebSocketProvider));
parcelHelpers.export(exports, "Web3Validator", ()=>(0, _web3Validator.Web3Validator));
/**
 * Export all packages grouped by name spaces
 */ parcelHelpers.export(exports, "core", ()=>_web3Core);
parcelHelpers.export(exports, "errors", ()=>_web3Errors);
parcelHelpers.export(exports, "eth", ()=>_ethExportsJs);
parcelHelpers.export(exports, "net", ()=>_web3Net);
parcelHelpers.export(exports, "providers", ()=>_providersExportsJs);
parcelHelpers.export(exports, "rpcMethods", ()=>_web3RpcMethods);
parcelHelpers.export(exports, "types", ()=>_web3Types);
parcelHelpers.export(exports, "utils", ()=>_web3Utils);
parcelHelpers.export(exports, "validator", ()=>_web3Validator);
/**
 * Named exports for all objects which are the default-exported-object in their packages
 */ parcelHelpers.export(exports, "Web3", ()=>(0, _web3JsDefault.default));
var _web3Js = require("./web3.js");
var _web3JsDefault = parcelHelpers.interopDefault(_web3Js);
var _typesJs = require("./types.js");
parcelHelpers.exportAll(_typesJs, exports);
var _web3Core = require("web3-core");
var _web3Eth = require("web3-eth");
var _web3EthContract = require("web3-eth-contract");
var _web3EthIban = require("web3-eth-iban");
var _web3EthPersonal = require("web3-eth-personal");
var _web3Net = require("web3-net");
var _web3ProvidersHttp = require("web3-providers-http");
var _web3ProvidersWs = require("web3-providers-ws");
var _web3Validator = require("web3-validator");
var _web3Errors = require("web3-errors");
var _ethExportsJs = require("./eth.exports.js");
var _providersExportsJs = require("./providers.exports.js");
var _web3RpcMethods = require("web3-rpc-methods");
var _web3Types = require("web3-types");
var _web3Utils = require("web3-utils");
/**
 * Export all types from `web3-types` without a namespace (in addition to being available at `types` namespace).
 * To enable the user to write: `function something(): Web3Api` without the need for `types.Web3Api`.
 * And the same for `web3-errors`. Because this package contains error classes and constants.
 */ parcelHelpers.exportAll(_web3Errors, exports);
parcelHelpers.exportAll(_web3Types, exports);
exports.default = (0, _web3JsDefault.default);

},{"./web3.js":"jujbk","./types.js":"bgjGn","web3-core":"4Uu6H","web3-eth":"k52UE","web3-eth-contract":"arHxy","web3-eth-iban":"kmwjX","web3-eth-personal":"1awcp","web3-net":"3i7EA","web3-providers-http":"a3cbP","web3-providers-ws":"8zbJW","web3-validator":"6HK71","web3-errors":"jDvsn","./eth.exports.js":"GnyZJ","./providers.exports.js":"6bQ3D","web3-rpc-methods":"eT6LI","web3-types":"g7Ztk","web3-utils":"8WsWI","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jujbk":[function(require,module,exports) {
/*
This file is part of web3.js.

web3.js is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

web3.js is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/ // eslint-disable-next-line max-classes-per-file
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Web3", ()=>Web3);
var _web3Core = require("web3-core");
var _web3Eth = require("web3-eth");
var _web3EthContract = require("web3-eth-contract");
var _web3EthContractDefault = parcelHelpers.interopDefault(_web3EthContract);
var _web3EthEns = require("web3-eth-ens");
var _web3EthIban = require("web3-eth-iban");
var _web3EthPersonal = require("web3-eth-personal");
var _web3Net = require("web3-net");
var _web3Utils = require("web3-utils");
var _web3Types = require("web3-types");
var _web3Errors = require("web3-errors");
var _abiJs = require("./abi.js");
var _abiJsDefault = parcelHelpers.interopDefault(_abiJs);
var _accountsJs = require("./accounts.js");
var _versionJs = require("./version.js");
class Web3 extends (0, _web3Core.Web3Context) {
    constructor(providerOrContext){
        var _a;
        if ((0, _web3Utils.isNullish)(providerOrContext) || typeof providerOrContext === "string" && providerOrContext.trim() === "" || typeof providerOrContext !== "string" && !(0, _web3Core.isSupportedProvider)(providerOrContext) && !providerOrContext.provider) console.warn("NOTE: web3.js is running without provider. You need to pass a provider in order to interact with the network!");
        let contextInitOptions = {};
        if (typeof providerOrContext === "string" || (0, _web3Core.isSupportedProvider)(providerOrContext)) contextInitOptions.provider = providerOrContext;
        else if (providerOrContext) contextInitOptions = providerOrContext;
        else contextInitOptions = {};
        contextInitOptions.registeredSubscriptions = Object.assign(Object.assign({}, (0, _web3Eth.registeredSubscriptions)), (_a = contextInitOptions.registeredSubscriptions) !== null && _a !== void 0 ? _a : {});
        super(contextInitOptions);
        const accounts = (0, _accountsJs.initAccountsForContext)(this);
        // Init protected properties
        this._wallet = accounts.wallet;
        this._accountProvider = accounts;
        this.utils = _web3Utils;
        // Have to use local alias to initiate contract context
        // eslint-disable-next-line @typescript-eslint/no-this-alias
        const self = this;
        class ContractBuilder extends (0, _web3EthContractDefault.default) {
            constructor(jsonInterface, addressOrOptionsOrContext, optionsOrContextOrReturnFormat, contextOrReturnFormat, returnFormat){
                if ((0, _web3Utils.isContractInitOptions)(addressOrOptionsOrContext) && (0, _web3Utils.isContractInitOptions)(optionsOrContextOrReturnFormat)) throw new (0, _web3Errors.InvalidMethodParamsError)("Should not provide options at both 2nd and 3rd parameters");
                let address;
                let options = {};
                let context;
                let dataFormat = (0, _web3Types.DEFAULT_RETURN_FORMAT);
                // add validation so its not a breaking change
                if (!(0, _web3Utils.isNullish)(addressOrOptionsOrContext) && typeof addressOrOptionsOrContext !== "object" && typeof addressOrOptionsOrContext !== "string") throw new (0, _web3Errors.InvalidMethodParamsError)();
                if (typeof addressOrOptionsOrContext === "string") address = addressOrOptionsOrContext;
                if ((0, _web3Utils.isContractInitOptions)(addressOrOptionsOrContext)) options = addressOrOptionsOrContext;
                else if ((0, _web3Utils.isContractInitOptions)(optionsOrContextOrReturnFormat)) options = optionsOrContextOrReturnFormat;
                else options = {};
                if (addressOrOptionsOrContext instanceof (0, _web3Core.Web3Context)) context = addressOrOptionsOrContext;
                else if (optionsOrContextOrReturnFormat instanceof (0, _web3Core.Web3Context)) context = optionsOrContextOrReturnFormat;
                else if (contextOrReturnFormat instanceof (0, _web3Core.Web3Context)) context = contextOrReturnFormat;
                else context = self.getContextObject();
                if (returnFormat) dataFormat = returnFormat;
                else if ((0, _web3Utils.isDataFormat)(optionsOrContextOrReturnFormat)) dataFormat = optionsOrContextOrReturnFormat;
                else if ((0, _web3Utils.isDataFormat)(contextOrReturnFormat)) dataFormat = contextOrReturnFormat;
                super(jsonInterface, address, options, context, dataFormat);
                super.subscribeToContextEvents(self);
            }
        }
        const eth = self.use((0, _web3Eth.Web3Eth));
        // Eth Module
        this.eth = Object.assign(eth, {
            // ENS module
            ens: self.use((0, _web3EthEns.ENS), (0, _web3EthEns.registryAddresses).main),
            Iban: // Iban helpers
            (0, _web3EthIban.Iban),
            net: self.use((0, _web3Net.Net)),
            personal: self.use((0, _web3EthPersonal.Personal)),
            // Contract helper and module
            Contract: ContractBuilder,
            abi: // ABI Helpers
            (0, _abiJsDefault.default),
            // Accounts helper
            accounts
        });
    }
}
Web3.version = (0, _versionJs.Web3PkgInfo).version;
Web3.utils = _web3Utils;
Web3.modules = {
    Web3Eth: (0, _web3Eth.Web3Eth),
    Iban: (0, _web3EthIban.Iban),
    Net: (0, _web3Net.Net),
    ENS: (0, _web3EthEns.ENS),
    Personal: (0, _web3EthPersonal.Personal)
};
exports.default = Web3;

},{"web3-core":"4Uu6H","web3-eth":"k52UE","web3-eth-contract":"arHxy","web3-eth-ens":"hsBVO","web3-eth-iban":"kmwjX","web3-eth-personal":"1awcp","web3-net":"3i7EA","web3-utils":"8WsWI","web3-types":"g7Ztk","web3-errors":"jDvsn","./abi.js":"8HU1J","./accounts.js":"jm2wV","./version.js":"1xGaw","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4Uu6H":[function(require,module,exports) {
/*
This file is part of web3.js.

web3.js is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

web3.js is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
// For backward usability export as namespace
parcelHelpers.export(exports, "formatters", ()=>_formattersJs);
var _web3ConfigJs = require("./web3_config.js");
parcelHelpers.exportAll(_web3ConfigJs, exports);
var _web3RequestManagerJs = require("./web3_request_manager.js");
parcelHelpers.exportAll(_web3RequestManagerJs, exports);
var _web3SubscriptionManagerJs = require("./web3_subscription_manager.js");
parcelHelpers.exportAll(_web3SubscriptionManagerJs, exports);
var _web3SubscriptionsJs = require("./web3_subscriptions.js");
parcelHelpers.exportAll(_web3SubscriptionsJs, exports);
var _web3ContextJs = require("./web3_context.js");
parcelHelpers.exportAll(_web3ContextJs, exports);
var _web3BatchRequestJs = require("./web3_batch_request.js");
parcelHelpers.exportAll(_web3BatchRequestJs, exports);
var _utilsJs = require("./utils.js");
parcelHelpers.exportAll(_utilsJs, exports);
var _typesJs = require("./types.js");
parcelHelpers.exportAll(_typesJs, exports);
var _formattersJs = require("./formatters.js");
parcelHelpers.exportAll(_formattersJs, exports);
var _web3PromiEventJs = require("./web3_promi_event.js");
parcelHelpers.exportAll(_web3PromiEventJs, exports);
var _web3EventEmitterJs = require("./web3_event_emitter.js");
parcelHelpers.exportAll(_web3EventEmitterJs, exports);

},{"./web3_config.js":"7786Q","./web3_request_manager.js":"85GmO","./web3_subscription_manager.js":"kQHE5","./web3_subscriptions.js":"ilVf2","./web3_context.js":"fF91X","./web3_batch_request.js":"iPEUh","./utils.js":"2DPv6","./types.js":"7PFp0","./formatters.js":"2Rhbt","./web3_promi_event.js":"7LNQs","./web3_event_emitter.js":"4LX4F","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7786Q":[function(require,module,exports) {
/*
This file is part of web3.js.

web3.js is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

web3.js is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Web3ConfigEvent", ()=>Web3ConfigEvent);
parcelHelpers.export(exports, "Web3Config", ()=>Web3Config);
var _web3Errors = require("web3-errors");
var _web3Utils = require("web3-utils");
var _web3EventEmitterJs = require("./web3_event_emitter.js");
var Web3ConfigEvent;
(function(Web3ConfigEvent) {
    Web3ConfigEvent["CONFIG_CHANGE"] = "CONFIG_CHANGE";
})(Web3ConfigEvent || (Web3ConfigEvent = {}));
class Web3Config extends (0, _web3EventEmitterJs.Web3EventEmitter) {
    constructor(options){
        super();
        this.config = {
            handleRevert: false,
            defaultAccount: undefined,
            defaultBlock: "latest",
            transactionBlockTimeout: 50,
            transactionConfirmationBlocks: 24,
            transactionPollingInterval: 1000,
            transactionPollingTimeout: 750000,
            transactionReceiptPollingInterval: undefined,
            transactionSendTimeout: 750000,
            transactionConfirmationPollingInterval: undefined,
            blockHeaderTimeout: 10,
            maxListenersWarningThreshold: 100,
            contractDataInputFill: "data",
            defaultNetworkId: undefined,
            defaultChain: "mainnet",
            defaultHardfork: "london",
            // TODO - Check if there is a default Common
            defaultCommon: undefined,
            defaultTransactionType: "0x2",
            defaultMaxPriorityFeePerGas: (0, _web3Utils.toHex)(2500000000),
            enableExperimentalFeatures: {
                useSubscriptionWhenCheckingBlockTimeout: false,
                useRpcCallSpecification: false
            },
            transactionBuilder: undefined,
            transactionTypeParser: undefined
        };
        this.setConfig(options !== null && options !== void 0 ? options : {});
    }
    setConfig(options) {
        // TODO: Improve and add key check
        const keys = Object.keys(options);
        for (const key of keys)this._triggerConfigChange(key, options[key]);
        Object.assign(this.config, options);
    }
    /**
     * The `handleRevert` options property returns the revert reason string if enabled for the following methods:
     * - web3.eth.sendTransaction()
     * - web3.eth.call()
     * - myContract.methods.myMethod().call()
     * - myContract.methods.myMethod().send()
     * Default is `false`.
     *
     * `Note`: At the moment `handleRevert` is only supported for `sendTransaction` and not for `sendSignedTransaction`
     */ get handleRevert() {
        return this.config.handleRevert;
    }
    /**
     * Will set the handleRevert
     */ set handleRevert(val) {
        this._triggerConfigChange("handleRevert", val);
        this.config.handleRevert = val;
    }
    /**
     * The `contractDataInputFill` options property will allow you to set the hash of the method signature and encoded parameters to the property
     * either `data`, `input` or both within your contract.
     * This will affect the contracts send, call and estimateGas methods
     * Default is `input`.
     */ get contractDataInputFill() {
        return this.config.contractDataInputFill;
    }
    /**
     * Will set the contractDataInputFill
     */ set contractDataInputFill(val) {
        this._triggerConfigChange("contractDataInputFill", val);
        this.config.contractDataInputFill = val;
    }
    /**
     * This default address is used as the default `from` property, if no `from` property is specified in for the following methods:
     * - web3.eth.sendTransaction()
     * - web3.eth.call()
     * - myContract.methods.myMethod().call()
     * - myContract.methods.myMethod().send()
     */ get defaultAccount() {
        return this.config.defaultAccount;
    }
    /**
     * Will set the default account.
     */ set defaultAccount(val) {
        this._triggerConfigChange("defaultAccount", val);
        this.config.defaultAccount = val;
    }
    /**
     * The default block is used for certain methods. You can override it by passing in the defaultBlock as last parameter. The default value is `"latest"`.
     * - web3.eth.getBalance()
     * - web3.eth.getCode()
     * - web3.eth.getTransactionCount()
     * - web3.eth.getStorageAt()
     * - web3.eth.call()
     * - myContract.methods.myMethod().call()
     */ get defaultBlock() {
        return this.config.defaultBlock;
    }
    /**
     * Will set the default block.
     *
     * - A block number
     * - `"earliest"` - String: The genesis block
     * - `"latest"` - String: The latest block (current head of the blockchain)
     * - `"pending"` - String: The currently mined block (including pending transactions)
     * - `"finalized"` - String: (For POS networks) The finalized block is one which has been accepted as canonical by greater than 2/3 of validators
     * - `"safe"` - String: (For POS networks) The safe head block is one which under normal network conditions, is expected to be included in the canonical chain. Under normal network conditions the safe head and the actual tip of the chain will be equivalent (with safe head trailing only by a few seconds). Safe heads will be less likely to be reorged than the proof of work network`s latest blocks.
     */ set defaultBlock(val) {
        this._triggerConfigChange("defaultBlock", val);
        this.config.defaultBlock = val;
    }
    /**
     * The time used to wait for Ethereum Node to return the sent transaction result.
     * Note: If the RPC call stuck at the Node and therefor timed-out, the transaction may still be pending or even mined by the Network. We recommend checking the pending transactions in such a case.
     * Default is `750` seconds (12.5 minutes).
     */ get transactionSendTimeout() {
        return this.config.transactionSendTimeout;
    }
    /**
     * Will set the transactionSendTimeout.
     */ set transactionSendTimeout(val) {
        this._triggerConfigChange("transactionSendTimeout", val);
        this.config.transactionSendTimeout = val;
    }
    /**
     * The `transactionBlockTimeout` is used over socket-based connections. This option defines the amount of new blocks it should wait until the first confirmation happens, otherwise the PromiEvent rejects with a timeout error.
     * Default is `50`.
     */ get transactionBlockTimeout() {
        return this.config.transactionBlockTimeout;
    }
    /**
     * Will set the transactionBlockTimeout.
     */ set transactionBlockTimeout(val) {
        this._triggerConfigChange("transactionBlockTimeout", val);
        this.config.transactionBlockTimeout = val;
    }
    /**
     * This defines the number of blocks it requires until a transaction is considered confirmed.
     * Default is `24`.
     */ get transactionConfirmationBlocks() {
        return this.config.transactionConfirmationBlocks;
    }
    /**
     * Will set the transactionConfirmationBlocks.
     */ set transactionConfirmationBlocks(val) {
        this._triggerConfigChange("transactionConfirmationBlocks", val);
        this.config.transactionConfirmationBlocks = val;
    }
    /**
     * Used over HTTP connections. This option defines the number of seconds between Web3 calls for a receipt which confirms that a transaction was mined by the network.
     * Default is `1000` ms.
     */ get transactionPollingInterval() {
        return this.config.transactionPollingInterval;
    }
    /**
     * Will set the transactionPollingInterval.
     */ set transactionPollingInterval(val) {
        this._triggerConfigChange("transactionPollingInterval", val);
        this.config.transactionPollingInterval = val;
        this.transactionReceiptPollingInterval = val;
        this.transactionConfirmationPollingInterval = val;
    }
    /**
     * Used over HTTP connections. This option defines the number of seconds Web3 will wait for a receipt which confirms that a transaction was mined by the network. Note: If this method times out, the transaction may still be pending.
     * Default is `750` seconds (12.5 minutes).
     */ get transactionPollingTimeout() {
        return this.config.transactionPollingTimeout;
    }
    /**
     * Will set the transactionPollingTimeout.
     */ set transactionPollingTimeout(val) {
        this._triggerConfigChange("transactionPollingTimeout", val);
        this.config.transactionPollingTimeout = val;
    }
    /**
     * The `transactionPollingInterval` is used over HTTP connections. This option defines the number of seconds between Web3 calls for a receipt which confirms that a transaction was mined by the network.
     * Default is `undefined`
     */ get transactionReceiptPollingInterval() {
        return this.config.transactionReceiptPollingInterval;
    }
    /**
     * Will set the transactionReceiptPollingInterval
     */ set transactionReceiptPollingInterval(val) {
        this._triggerConfigChange("transactionReceiptPollingInterval", val);
        this.config.transactionReceiptPollingInterval = val;
    }
    get transactionConfirmationPollingInterval() {
        return this.config.transactionConfirmationPollingInterval;
    }
    set transactionConfirmationPollingInterval(val) {
        this._triggerConfigChange("transactionConfirmationPollingInterval", val);
        this.config.transactionConfirmationPollingInterval = val;
    }
    /**
     * The blockHeaderTimeout is used over socket-based connections. This option defines the amount seconds it should wait for `'newBlockHeaders'` event before falling back to polling to fetch transaction receipt.
     * Default is `10` seconds.
     */ get blockHeaderTimeout() {
        return this.config.blockHeaderTimeout;
    }
    /**
     * Will set the blockHeaderTimeout
     */ set blockHeaderTimeout(val) {
        this._triggerConfigChange("blockHeaderTimeout", val);
        this.config.blockHeaderTimeout = val;
    }
    /**
     * The enableExperimentalFeatures is used to enable trying new experimental features that are still not fully implemented or not fully tested or still have some related issues.
     * Default is `false` for every feature.
     */ get enableExperimentalFeatures() {
        return this.config.enableExperimentalFeatures;
    }
    /**
     * Will set the enableExperimentalFeatures
     */ set enableExperimentalFeatures(val) {
        this._triggerConfigChange("enableExperimentalFeatures", val);
        this.config.enableExperimentalFeatures = val;
    }
    get maxListenersWarningThreshold() {
        return this.config.maxListenersWarningThreshold;
    }
    set maxListenersWarningThreshold(val) {
        this._triggerConfigChange("maxListenersWarningThreshold", val);
        this.setMaxListenerWarningThreshold(val);
        this.config.maxListenersWarningThreshold = val;
    }
    get defaultNetworkId() {
        return this.config.defaultNetworkId;
    }
    set defaultNetworkId(val) {
        this._triggerConfigChange("defaultNetworkId", val);
        this.config.defaultNetworkId = val;
    }
    get defaultChain() {
        return this.config.defaultChain;
    }
    set defaultChain(val) {
        if (!(0, _web3Utils.isNullish)(this.config.defaultCommon) && !(0, _web3Utils.isNullish)(this.config.defaultCommon.baseChain) && val !== this.config.defaultCommon.baseChain) throw new (0, _web3Errors.ConfigChainMismatchError)(this.config.defaultChain, val);
        this._triggerConfigChange("defaultChain", val);
        this.config.defaultChain = val;
    }
    /**
     * Will return the default hardfork. Default is `london`
     * The default hardfork property can be one of the following:
     * - `chainstart`
     * - `homestead`
     * - `dao`
     * - `tangerineWhistle`
     * - `spuriousDragon`
     * - `byzantium`
     * - `constantinople`
     * - `petersburg`
     * - `istanbul`
     * - `berlin`
     * - `london`
     * - 'arrowGlacier',
     * - 'tangerineWhistle',
     * - 'muirGlacier'
     *
     */ get defaultHardfork() {
        return this.config.defaultHardfork;
    }
    /**
     * Will set the default hardfork.
     *
     */ set defaultHardfork(val) {
        if (!(0, _web3Utils.isNullish)(this.config.defaultCommon) && !(0, _web3Utils.isNullish)(this.config.defaultCommon.hardfork) && val !== this.config.defaultCommon.hardfork) throw new (0, _web3Errors.ConfigHardforkMismatchError)(this.config.defaultCommon.hardfork, val);
        this._triggerConfigChange("defaultHardfork", val);
        this.config.defaultHardfork = val;
    }
    /**
     *
     * Will get the default common property
     * The default common property does contain the following Common object:
     * - `customChain` - `Object`: The custom chain properties
     * 	- `name` - `string`: (optional) The name of the chain
     * 	- `networkId` - `number`: Network ID of the custom chain
     * 	- `chainId` - `number`: Chain ID of the custom chain
     * - `baseChain` - `string`: (optional) mainnet, goerli, kovan, rinkeby, or ropsten
     * - `hardfork` - `string`: (optional) chainstart, homestead, dao, tangerineWhistle, spuriousDragon, byzantium, constantinople, petersburg, istanbul, berlin, or london
     * Default is `undefined`.
     *
     */ get defaultCommon() {
        return this.config.defaultCommon;
    }
    /**
     * Will set the default common property
     *
     */ set defaultCommon(val) {
        // validation check if default hardfork is set and matches defaultCommon hardfork
        if (!(0, _web3Utils.isNullish)(this.config.defaultHardfork) && !(0, _web3Utils.isNullish)(val) && !(0, _web3Utils.isNullish)(val.hardfork) && this.config.defaultHardfork !== val.hardfork) throw new (0, _web3Errors.ConfigHardforkMismatchError)(this.config.defaultHardfork, val.hardfork);
        if (!(0, _web3Utils.isNullish)(this.config.defaultChain) && !(0, _web3Utils.isNullish)(val) && !(0, _web3Utils.isNullish)(val.baseChain) && this.config.defaultChain !== val.baseChain) throw new (0, _web3Errors.ConfigChainMismatchError)(this.config.defaultChain, val.baseChain);
        this._triggerConfigChange("defaultCommon", val);
        this.config.defaultCommon = val;
    }
    get defaultTransactionType() {
        return this.config.defaultTransactionType;
    }
    set defaultTransactionType(val) {
        this._triggerConfigChange("defaultTransactionType", val);
        this.config.defaultTransactionType = val;
    }
    get defaultMaxPriorityFeePerGas() {
        return this.config.defaultMaxPriorityFeePerGas;
    }
    set defaultMaxPriorityFeePerGas(val) {
        this._triggerConfigChange("defaultMaxPriorityFeePerGas", val);
        this.config.defaultMaxPriorityFeePerGas = val;
    }
    get transactionBuilder() {
        return this.config.transactionBuilder;
    }
    set transactionBuilder(val) {
        this._triggerConfigChange("transactionBuilder", val);
        this.config.transactionBuilder = val;
    }
    get transactionTypeParser() {
        return this.config.transactionTypeParser;
    }
    set transactionTypeParser(val) {
        this._triggerConfigChange("transactionTypeParser", val);
        this.config.transactionTypeParser = val;
    }
    _triggerConfigChange(config, newValue) {
        this.emit(Web3ConfigEvent.CONFIG_CHANGE, {
            name: config,
            oldValue: this.config[config],
            newValue
        });
    }
}

},{"web3-errors":"jDvsn","web3-utils":"8WsWI","./web3_event_emitter.js":"4LX4F","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jDvsn":[function(require,module,exports) {
/*
This file is part of web3.js.

web3.js is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

web3.js is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _errorCodesJs = require("./error_codes.js");
parcelHelpers.exportAll(_errorCodesJs, exports);
var _web3ErrorBaseJs = require("./web3_error_base.js");
parcelHelpers.exportAll(_web3ErrorBaseJs, exports);
var _accountErrorsJs = require("./errors/account_errors.js");
parcelHelpers.exportAll(_accountErrorsJs, exports);
var _connectionErrorsJs = require("./errors/connection_errors.js");
parcelHelpers.exportAll(_connectionErrorsJs, exports);
var _contractErrorsJs = require("./errors/contract_errors.js");
parcelHelpers.exportAll(_contractErrorsJs, exports);
var _ensErrorsJs = require("./errors/ens_errors.js");
parcelHelpers.exportAll(_ensErrorsJs, exports);
var _genericErrorsJs = require("./errors/generic_errors.js");
parcelHelpers.exportAll(_genericErrorsJs, exports);
var _providerErrorsJs = require("./errors/provider_errors.js");
parcelHelpers.exportAll(_providerErrorsJs, exports);
var _signatureErrorsJs = require("./errors/signature_errors.js");
parcelHelpers.exportAll(_signatureErrorsJs, exports);
var _transactionErrorsJs = require("./errors/transaction_errors.js");
parcelHelpers.exportAll(_transactionErrorsJs, exports);
var _utilsErrorsJs = require("./errors/utils_errors.js");
parcelHelpers.exportAll(_utilsErrorsJs, exports);
var _responseErrorsJs = require("./errors/response_errors.js");
parcelHelpers.exportAll(_responseErrorsJs, exports);
var _coreErrorsJs = require("./errors/core_errors.js");
parcelHelpers.exportAll(_coreErrorsJs, exports);
var _rpcErrorsJs = require("./errors/rpc_errors.js");
parcelHelpers.exportAll(_rpcErrorsJs, exports);
var _rpcErrorMessagesJs = require("./errors/rpc_error_messages.js");
parcelHelpers.exportAll(_rpcErrorMessagesJs, exports);
var _schemaErrorsJs = require("./errors/schema_errors.js");
parcelHelpers.exportAll(_schemaErrorsJs, exports);

},{"./error_codes.js":"fx0w5","./web3_error_base.js":"lObzJ","./errors/account_errors.js":"5q7zC","./errors/connection_errors.js":"l5kfR","./errors/contract_errors.js":"kWyBW","./errors/ens_errors.js":"elT1l","./errors/generic_errors.js":"4ShXr","./errors/provider_errors.js":"51AwO","./errors/signature_errors.js":"jEjJE","./errors/transaction_errors.js":"eCF2N","./errors/utils_errors.js":"iHHCO","./errors/response_errors.js":"9jpAW","./errors/core_errors.js":"bXNjq","./errors/rpc_errors.js":"iOUOr","./errors/rpc_error_messages.js":"9H59W","./errors/schema_errors.js":"iVGyh","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fx0w5":[function(require,module,exports) {
/*
This file is part of web3.js.

web3.js is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

web3.js is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/ // Response error
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ERR_RESPONSE", ()=>ERR_RESPONSE);
parcelHelpers.export(exports, "ERR_INVALID_RESPONSE", ()=>ERR_INVALID_RESPONSE);
parcelHelpers.export(exports, "ERR_PARAM", ()=>ERR_PARAM);
parcelHelpers.export(exports, "ERR_FORMATTERS", ()=>ERR_FORMATTERS);
parcelHelpers.export(exports, "ERR_METHOD_NOT_IMPLEMENTED", ()=>ERR_METHOD_NOT_IMPLEMENTED);
parcelHelpers.export(exports, "ERR_OPERATION_TIMEOUT", ()=>ERR_OPERATION_TIMEOUT);
parcelHelpers.export(exports, "ERR_OPERATION_ABORT", ()=>ERR_OPERATION_ABORT);
parcelHelpers.export(exports, "ERR_ABI_ENCODING", ()=>ERR_ABI_ENCODING);
parcelHelpers.export(exports, "ERR_EXISTING_PLUGIN_NAMESPACE", ()=>ERR_EXISTING_PLUGIN_NAMESPACE);
parcelHelpers.export(exports, "ERR_INVALID_METHOD_PARAMS", ()=>ERR_INVALID_METHOD_PARAMS);
parcelHelpers.export(exports, "ERR_CONTRACT", ()=>ERR_CONTRACT);
parcelHelpers.export(exports, "ERR_CONTRACT_RESOLVER_MISSING", ()=>ERR_CONTRACT_RESOLVER_MISSING);
parcelHelpers.export(exports, "ERR_CONTRACT_ABI_MISSING", ()=>ERR_CONTRACT_ABI_MISSING);
parcelHelpers.export(exports, "ERR_CONTRACT_REQUIRED_CALLBACK", ()=>ERR_CONTRACT_REQUIRED_CALLBACK);
parcelHelpers.export(exports, "ERR_CONTRACT_EVENT_NOT_EXISTS", ()=>ERR_CONTRACT_EVENT_NOT_EXISTS);
parcelHelpers.export(exports, "ERR_CONTRACT_RESERVED_EVENT", ()=>ERR_CONTRACT_RESERVED_EVENT);
parcelHelpers.export(exports, "ERR_CONTRACT_MISSING_DEPLOY_DATA", ()=>ERR_CONTRACT_MISSING_DEPLOY_DATA);
parcelHelpers.export(exports, "ERR_CONTRACT_MISSING_ADDRESS", ()=>ERR_CONTRACT_MISSING_ADDRESS);
parcelHelpers.export(exports, "ERR_CONTRACT_MISSING_FROM_ADDRESS", ()=>ERR_CONTRACT_MISSING_FROM_ADDRESS);
parcelHelpers.export(exports, "ERR_CONTRACT_INSTANTIATION", ()=>ERR_CONTRACT_INSTANTIATION);
parcelHelpers.export(exports, "ERR_CONTRACT_EXECUTION_REVERTED", ()=>ERR_CONTRACT_EXECUTION_REVERTED);
parcelHelpers.export(exports, "ERR_CONTRACT_TX_DATA_AND_INPUT", ()=>ERR_CONTRACT_TX_DATA_AND_INPUT);
parcelHelpers.export(exports, "ERR_TX", ()=>ERR_TX);
parcelHelpers.export(exports, "ERR_TX_REVERT_INSTRUCTION", ()=>ERR_TX_REVERT_INSTRUCTION);
parcelHelpers.export(exports, "ERR_TX_REVERT_TRANSACTION", ()=>ERR_TX_REVERT_TRANSACTION);
parcelHelpers.export(exports, "ERR_TX_NO_CONTRACT_ADDRESS", ()=>ERR_TX_NO_CONTRACT_ADDRESS);
parcelHelpers.export(exports, "ERR_TX_CONTRACT_NOT_STORED", ()=>ERR_TX_CONTRACT_NOT_STORED);
parcelHelpers.export(exports, "ERR_TX_REVERT_WITHOUT_REASON", ()=>ERR_TX_REVERT_WITHOUT_REASON);
parcelHelpers.export(exports, "ERR_TX_OUT_OF_GAS", ()=>ERR_TX_OUT_OF_GAS);
parcelHelpers.export(exports, "ERR_RAW_TX_UNDEFINED", ()=>ERR_RAW_TX_UNDEFINED);
parcelHelpers.export(exports, "ERR_TX_INVALID_SENDER", ()=>ERR_TX_INVALID_SENDER);
parcelHelpers.export(exports, "ERR_TX_INVALID_CALL", ()=>ERR_TX_INVALID_CALL);
parcelHelpers.export(exports, "ERR_TX_MISSING_CUSTOM_CHAIN", ()=>ERR_TX_MISSING_CUSTOM_CHAIN);
parcelHelpers.export(exports, "ERR_TX_MISSING_CUSTOM_CHAIN_ID", ()=>ERR_TX_MISSING_CUSTOM_CHAIN_ID);
parcelHelpers.export(exports, "ERR_TX_CHAIN_ID_MISMATCH", ()=>ERR_TX_CHAIN_ID_MISMATCH);
parcelHelpers.export(exports, "ERR_TX_INVALID_CHAIN_INFO", ()=>ERR_TX_INVALID_CHAIN_INFO);
parcelHelpers.export(exports, "ERR_TX_MISSING_CHAIN_INFO", ()=>ERR_TX_MISSING_CHAIN_INFO);
parcelHelpers.export(exports, "ERR_TX_MISSING_GAS", ()=>ERR_TX_MISSING_GAS);
parcelHelpers.export(exports, "ERR_TX_INVALID_LEGACY_GAS", ()=>ERR_TX_INVALID_LEGACY_GAS);
parcelHelpers.export(exports, "ERR_TX_INVALID_FEE_MARKET_GAS", ()=>ERR_TX_INVALID_FEE_MARKET_GAS);
parcelHelpers.export(exports, "ERR_TX_INVALID_FEE_MARKET_GAS_PRICE", ()=>ERR_TX_INVALID_FEE_MARKET_GAS_PRICE);
parcelHelpers.export(exports, "ERR_TX_INVALID_LEGACY_FEE_MARKET", ()=>ERR_TX_INVALID_LEGACY_FEE_MARKET);
parcelHelpers.export(exports, "ERR_TX_INVALID_OBJECT", ()=>ERR_TX_INVALID_OBJECT);
parcelHelpers.export(exports, "ERR_TX_INVALID_NONCE_OR_CHAIN_ID", ()=>ERR_TX_INVALID_NONCE_OR_CHAIN_ID);
parcelHelpers.export(exports, "ERR_TX_UNABLE_TO_POPULATE_NONCE", ()=>ERR_TX_UNABLE_TO_POPULATE_NONCE);
parcelHelpers.export(exports, "ERR_TX_UNSUPPORTED_EIP_1559", ()=>ERR_TX_UNSUPPORTED_EIP_1559);
parcelHelpers.export(exports, "ERR_TX_UNSUPPORTED_TYPE", ()=>ERR_TX_UNSUPPORTED_TYPE);
parcelHelpers.export(exports, "ERR_TX_DATA_AND_INPUT", ()=>ERR_TX_DATA_AND_INPUT);
parcelHelpers.export(exports, "ERR_TX_POLLING_TIMEOUT", ()=>ERR_TX_POLLING_TIMEOUT);
parcelHelpers.export(exports, "ERR_TX_RECEIPT_MISSING_OR_BLOCKHASH_NULL", ()=>ERR_TX_RECEIPT_MISSING_OR_BLOCKHASH_NULL);
parcelHelpers.export(exports, "ERR_TX_RECEIPT_MISSING_BLOCK_NUMBER", ()=>ERR_TX_RECEIPT_MISSING_BLOCK_NUMBER);
parcelHelpers.export(exports, "ERR_TX_LOCAL_WALLET_NOT_AVAILABLE", ()=>ERR_TX_LOCAL_WALLET_NOT_AVAILABLE);
parcelHelpers.export(exports, "ERR_TX_NOT_FOUND", ()=>ERR_TX_NOT_FOUND);
parcelHelpers.export(exports, "ERR_TX_SEND_TIMEOUT", ()=>ERR_TX_SEND_TIMEOUT);
parcelHelpers.export(exports, "ERR_TX_BLOCK_TIMEOUT", ()=>ERR_TX_BLOCK_TIMEOUT);
parcelHelpers.export(exports, "ERR_TX_SIGNING", ()=>ERR_TX_SIGNING);
parcelHelpers.export(exports, "ERR_TX_GAS_MISMATCH", ()=>ERR_TX_GAS_MISMATCH);
parcelHelpers.export(exports, "ERR_TX_CHAIN_MISMATCH", ()=>ERR_TX_CHAIN_MISMATCH);
parcelHelpers.export(exports, "ERR_TX_HARDFORK_MISMATCH", ()=>ERR_TX_HARDFORK_MISMATCH);
parcelHelpers.export(exports, "ERR_TX_INVALID_RECEIVER", ()=>ERR_TX_INVALID_RECEIVER);
parcelHelpers.export(exports, "ERR_TX_REVERT_TRANSACTION_CUSTOM_ERROR", ()=>ERR_TX_REVERT_TRANSACTION_CUSTOM_ERROR);
parcelHelpers.export(exports, "ERR_TX_INVALID_PROPERTIES_FOR_TYPE", ()=>ERR_TX_INVALID_PROPERTIES_FOR_TYPE);
parcelHelpers.export(exports, "ERR_TX_MISSING_GAS_INNER_ERROR", ()=>ERR_TX_MISSING_GAS_INNER_ERROR);
parcelHelpers.export(exports, "ERR_TX_GAS_MISMATCH_INNER_ERROR", ()=>ERR_TX_GAS_MISMATCH_INNER_ERROR);
parcelHelpers.export(exports, "ERR_CONN", ()=>ERR_CONN);
parcelHelpers.export(exports, "ERR_CONN_INVALID", ()=>ERR_CONN_INVALID);
parcelHelpers.export(exports, "ERR_CONN_TIMEOUT", ()=>ERR_CONN_TIMEOUT);
parcelHelpers.export(exports, "ERR_CONN_NOT_OPEN", ()=>ERR_CONN_NOT_OPEN);
parcelHelpers.export(exports, "ERR_CONN_CLOSE", ()=>ERR_CONN_CLOSE);
parcelHelpers.export(exports, "ERR_CONN_MAX_ATTEMPTS", ()=>ERR_CONN_MAX_ATTEMPTS);
parcelHelpers.export(exports, "ERR_CONN_PENDING_REQUESTS", ()=>ERR_CONN_PENDING_REQUESTS);
parcelHelpers.export(exports, "ERR_REQ_ALREADY_SENT", ()=>ERR_REQ_ALREADY_SENT);
parcelHelpers.export(exports, "ERR_PROVIDER", ()=>ERR_PROVIDER);
parcelHelpers.export(exports, "ERR_INVALID_PROVIDER", ()=>ERR_INVALID_PROVIDER);
parcelHelpers.export(exports, "ERR_INVALID_CLIENT", ()=>ERR_INVALID_CLIENT);
parcelHelpers.export(exports, "ERR_SUBSCRIPTION", ()=>ERR_SUBSCRIPTION);
parcelHelpers.export(exports, "ERR_WS_PROVIDER", ()=>ERR_WS_PROVIDER);
parcelHelpers.export(exports, "ERR_PRIVATE_KEY_LENGTH", ()=>ERR_PRIVATE_KEY_LENGTH);
parcelHelpers.export(exports, "ERR_INVALID_PRIVATE_KEY", ()=>ERR_INVALID_PRIVATE_KEY);
parcelHelpers.export(exports, "ERR_UNSUPPORTED_KDF", ()=>ERR_UNSUPPORTED_KDF);
parcelHelpers.export(exports, "ERR_KEY_DERIVATION_FAIL", ()=>ERR_KEY_DERIVATION_FAIL);
parcelHelpers.export(exports, "ERR_KEY_VERSION_UNSUPPORTED", ()=>ERR_KEY_VERSION_UNSUPPORTED);
parcelHelpers.export(exports, "ERR_INVALID_PASSWORD", ()=>ERR_INVALID_PASSWORD);
parcelHelpers.export(exports, "ERR_IV_LENGTH", ()=>ERR_IV_LENGTH);
parcelHelpers.export(exports, "ERR_INVALID_KEYSTORE", ()=>ERR_INVALID_KEYSTORE);
parcelHelpers.export(exports, "ERR_PBKDF2_ITERATIONS", ()=>ERR_PBKDF2_ITERATIONS);
parcelHelpers.export(exports, "ERR_SIGNATURE_FAILED", ()=>ERR_SIGNATURE_FAILED);
parcelHelpers.export(exports, "ERR_INVALID_SIGNATURE", ()=>ERR_INVALID_SIGNATURE);
parcelHelpers.export(exports, "GENESIS_BLOCK_NUMBER", ()=>GENESIS_BLOCK_NUMBER);
parcelHelpers.export(exports, "JSONRPC_ERR_REJECTED_REQUEST", ()=>JSONRPC_ERR_REJECTED_REQUEST);
parcelHelpers.export(exports, "JSONRPC_ERR_UNAUTHORIZED", ()=>JSONRPC_ERR_UNAUTHORIZED);
parcelHelpers.export(exports, "JSONRPC_ERR_UNSUPPORTED_METHOD", ()=>JSONRPC_ERR_UNSUPPORTED_METHOD);
parcelHelpers.export(exports, "JSONRPC_ERR_DISCONNECTED", ()=>JSONRPC_ERR_DISCONNECTED);
parcelHelpers.export(exports, "JSONRPC_ERR_CHAIN_DISCONNECTED", ()=>JSONRPC_ERR_CHAIN_DISCONNECTED);
parcelHelpers.export(exports, "ERR_ENS_CHECK_INTERFACE_SUPPORT", ()=>ERR_ENS_CHECK_INTERFACE_SUPPORT);
parcelHelpers.export(exports, "ERR_ENS_UNSUPPORTED_NETWORK", ()=>ERR_ENS_UNSUPPORTED_NETWORK);
parcelHelpers.export(exports, "ERR_ENS_NETWORK_NOT_SYNCED", ()=>ERR_ENS_NETWORK_NOT_SYNCED);
parcelHelpers.export(exports, "ERR_INVALID_STRING", ()=>ERR_INVALID_STRING);
parcelHelpers.export(exports, "ERR_INVALID_BYTES", ()=>ERR_INVALID_BYTES);
parcelHelpers.export(exports, "ERR_INVALID_NUMBER", ()=>ERR_INVALID_NUMBER);
parcelHelpers.export(exports, "ERR_INVALID_UNIT", ()=>ERR_INVALID_UNIT);
parcelHelpers.export(exports, "ERR_INVALID_ADDRESS", ()=>ERR_INVALID_ADDRESS);
parcelHelpers.export(exports, "ERR_INVALID_HEX", ()=>ERR_INVALID_HEX);
parcelHelpers.export(exports, "ERR_INVALID_TYPE", ()=>ERR_INVALID_TYPE);
parcelHelpers.export(exports, "ERR_INVALID_BOOLEAN", ()=>ERR_INVALID_BOOLEAN);
parcelHelpers.export(exports, "ERR_INVALID_UNSIGNED_INTEGER", ()=>ERR_INVALID_UNSIGNED_INTEGER);
parcelHelpers.export(exports, "ERR_INVALID_SIZE", ()=>ERR_INVALID_SIZE);
parcelHelpers.export(exports, "ERR_INVALID_LARGE_VALUE", ()=>ERR_INVALID_LARGE_VALUE);
parcelHelpers.export(exports, "ERR_INVALID_BLOCK", ()=>ERR_INVALID_BLOCK);
parcelHelpers.export(exports, "ERR_INVALID_TYPE_ABI", ()=>ERR_INVALID_TYPE_ABI);
parcelHelpers.export(exports, "ERR_INVALID_NIBBLE_WIDTH", ()=>ERR_INVALID_NIBBLE_WIDTH);
parcelHelpers.export(exports, "ERR_VALIDATION", ()=>ERR_VALIDATION);
parcelHelpers.export(exports, "ERR_CORE_HARDFORK_MISMATCH", ()=>ERR_CORE_HARDFORK_MISMATCH);
parcelHelpers.export(exports, "ERR_CORE_CHAIN_MISMATCH", ()=>ERR_CORE_CHAIN_MISMATCH);
parcelHelpers.export(exports, "ERR_SCHEMA_FORMAT", ()=>ERR_SCHEMA_FORMAT);
parcelHelpers.export(exports, "ERR_RPC_INVALID_JSON", ()=>ERR_RPC_INVALID_JSON);
parcelHelpers.export(exports, "ERR_RPC_INVALID_REQUEST", ()=>ERR_RPC_INVALID_REQUEST);
parcelHelpers.export(exports, "ERR_RPC_INVALID_METHOD", ()=>ERR_RPC_INVALID_METHOD);
parcelHelpers.export(exports, "ERR_RPC_INVALID_PARAMS", ()=>ERR_RPC_INVALID_PARAMS);
parcelHelpers.export(exports, "ERR_RPC_INTERNAL_ERROR", ()=>ERR_RPC_INTERNAL_ERROR);
parcelHelpers.export(exports, "ERR_RPC_INVALID_INPUT", ()=>ERR_RPC_INVALID_INPUT);
parcelHelpers.export(exports, "ERR_RPC_MISSING_RESOURCE", ()=>ERR_RPC_MISSING_RESOURCE);
parcelHelpers.export(exports, "ERR_RPC_UNAVAILABLE_RESOURCE", ()=>ERR_RPC_UNAVAILABLE_RESOURCE);
parcelHelpers.export(exports, "ERR_RPC_TRANSACTION_REJECTED", ()=>ERR_RPC_TRANSACTION_REJECTED);
parcelHelpers.export(exports, "ERR_RPC_UNSUPPORTED_METHOD", ()=>ERR_RPC_UNSUPPORTED_METHOD);
parcelHelpers.export(exports, "ERR_RPC_LIMIT_EXCEEDED", ()=>ERR_RPC_LIMIT_EXCEEDED);
parcelHelpers.export(exports, "ERR_RPC_NOT_SUPPORTED", ()=>ERR_RPC_NOT_SUPPORTED);
const ERR_RESPONSE = 100;
const ERR_INVALID_RESPONSE = 101;
const ERR_PARAM = 200;
const ERR_FORMATTERS = 201;
const ERR_METHOD_NOT_IMPLEMENTED = 202;
const ERR_OPERATION_TIMEOUT = 203;
const ERR_OPERATION_ABORT = 204;
const ERR_ABI_ENCODING = 205;
const ERR_EXISTING_PLUGIN_NAMESPACE = 206;
const ERR_INVALID_METHOD_PARAMS = 207;
const ERR_CONTRACT = 300;
const ERR_CONTRACT_RESOLVER_MISSING = 301;
const ERR_CONTRACT_ABI_MISSING = 302;
const ERR_CONTRACT_REQUIRED_CALLBACK = 303;
const ERR_CONTRACT_EVENT_NOT_EXISTS = 304;
const ERR_CONTRACT_RESERVED_EVENT = 305;
const ERR_CONTRACT_MISSING_DEPLOY_DATA = 306;
const ERR_CONTRACT_MISSING_ADDRESS = 307;
const ERR_CONTRACT_MISSING_FROM_ADDRESS = 308;
const ERR_CONTRACT_INSTANTIATION = 309;
const ERR_CONTRACT_EXECUTION_REVERTED = 310;
const ERR_CONTRACT_TX_DATA_AND_INPUT = 311;
const ERR_TX = 400;
const ERR_TX_REVERT_INSTRUCTION = 401;
const ERR_TX_REVERT_TRANSACTION = 402;
const ERR_TX_NO_CONTRACT_ADDRESS = 403;
const ERR_TX_CONTRACT_NOT_STORED = 404;
const ERR_TX_REVERT_WITHOUT_REASON = 405;
const ERR_TX_OUT_OF_GAS = 406;
const ERR_RAW_TX_UNDEFINED = 407;
const ERR_TX_INVALID_SENDER = 408;
const ERR_TX_INVALID_CALL = 409;
const ERR_TX_MISSING_CUSTOM_CHAIN = 410;
const ERR_TX_MISSING_CUSTOM_CHAIN_ID = 411;
const ERR_TX_CHAIN_ID_MISMATCH = 412;
const ERR_TX_INVALID_CHAIN_INFO = 413;
const ERR_TX_MISSING_CHAIN_INFO = 414;
const ERR_TX_MISSING_GAS = 415;
const ERR_TX_INVALID_LEGACY_GAS = 416;
const ERR_TX_INVALID_FEE_MARKET_GAS = 417;
const ERR_TX_INVALID_FEE_MARKET_GAS_PRICE = 418;
const ERR_TX_INVALID_LEGACY_FEE_MARKET = 419;
const ERR_TX_INVALID_OBJECT = 420;
const ERR_TX_INVALID_NONCE_OR_CHAIN_ID = 421;
const ERR_TX_UNABLE_TO_POPULATE_NONCE = 422;
const ERR_TX_UNSUPPORTED_EIP_1559 = 423;
const ERR_TX_UNSUPPORTED_TYPE = 424;
const ERR_TX_DATA_AND_INPUT = 425;
const ERR_TX_POLLING_TIMEOUT = 426;
const ERR_TX_RECEIPT_MISSING_OR_BLOCKHASH_NULL = 427;
const ERR_TX_RECEIPT_MISSING_BLOCK_NUMBER = 428;
const ERR_TX_LOCAL_WALLET_NOT_AVAILABLE = 429;
const ERR_TX_NOT_FOUND = 430;
const ERR_TX_SEND_TIMEOUT = 431;
const ERR_TX_BLOCK_TIMEOUT = 432;
const ERR_TX_SIGNING = 433;
const ERR_TX_GAS_MISMATCH = 434;
const ERR_TX_CHAIN_MISMATCH = 435;
const ERR_TX_HARDFORK_MISMATCH = 436;
const ERR_TX_INVALID_RECEIVER = 437;
const ERR_TX_REVERT_TRANSACTION_CUSTOM_ERROR = 438;
const ERR_TX_INVALID_PROPERTIES_FOR_TYPE = 439;
const ERR_TX_MISSING_GAS_INNER_ERROR = 440;
const ERR_TX_GAS_MISMATCH_INNER_ERROR = 441;
const ERR_CONN = 500;
const ERR_CONN_INVALID = 501;
const ERR_CONN_TIMEOUT = 502;
const ERR_CONN_NOT_OPEN = 503;
const ERR_CONN_CLOSE = 504;
const ERR_CONN_MAX_ATTEMPTS = 505;
const ERR_CONN_PENDING_REQUESTS = 506;
const ERR_REQ_ALREADY_SENT = 507;
const ERR_PROVIDER = 600;
const ERR_INVALID_PROVIDER = 601;
const ERR_INVALID_CLIENT = 602;
const ERR_SUBSCRIPTION = 603;
const ERR_WS_PROVIDER = 604;
const ERR_PRIVATE_KEY_LENGTH = 701;
const ERR_INVALID_PRIVATE_KEY = 702;
const ERR_UNSUPPORTED_KDF = 703;
const ERR_KEY_DERIVATION_FAIL = 704;
const ERR_KEY_VERSION_UNSUPPORTED = 705;
const ERR_INVALID_PASSWORD = 706;
const ERR_IV_LENGTH = 707;
const ERR_INVALID_KEYSTORE = 708;
const ERR_PBKDF2_ITERATIONS = 709;
const ERR_SIGNATURE_FAILED = 801;
const ERR_INVALID_SIGNATURE = 802;
const GENESIS_BLOCK_NUMBER = "0x0";
const JSONRPC_ERR_REJECTED_REQUEST = 4001;
const JSONRPC_ERR_UNAUTHORIZED = 4100;
const JSONRPC_ERR_UNSUPPORTED_METHOD = 4200;
const JSONRPC_ERR_DISCONNECTED = 4900;
const JSONRPC_ERR_CHAIN_DISCONNECTED = 4901;
const ERR_ENS_CHECK_INTERFACE_SUPPORT = 901;
const ERR_ENS_UNSUPPORTED_NETWORK = 902;
const ERR_ENS_NETWORK_NOT_SYNCED = 903;
const ERR_INVALID_STRING = 1001;
const ERR_INVALID_BYTES = 1002;
const ERR_INVALID_NUMBER = 1003;
const ERR_INVALID_UNIT = 1004;
const ERR_INVALID_ADDRESS = 1005;
const ERR_INVALID_HEX = 1006;
const ERR_INVALID_TYPE = 1007;
const ERR_INVALID_BOOLEAN = 1008;
const ERR_INVALID_UNSIGNED_INTEGER = 1009;
const ERR_INVALID_SIZE = 1010;
const ERR_INVALID_LARGE_VALUE = 1011;
const ERR_INVALID_BLOCK = 1012;
const ERR_INVALID_TYPE_ABI = 1013;
const ERR_INVALID_NIBBLE_WIDTH = 1014;
const ERR_VALIDATION = 1100;
const ERR_CORE_HARDFORK_MISMATCH = 1101;
const ERR_CORE_CHAIN_MISMATCH = 1102;
const ERR_SCHEMA_FORMAT = 1200;
const ERR_RPC_INVALID_JSON = -32700;
const ERR_RPC_INVALID_REQUEST = -32600;
const ERR_RPC_INVALID_METHOD = -32601;
const ERR_RPC_INVALID_PARAMS = -32602;
const ERR_RPC_INTERNAL_ERROR = -32603;
const ERR_RPC_INVALID_INPUT = -32000;
const ERR_RPC_MISSING_RESOURCE = -32001;
const ERR_RPC_UNAVAILABLE_RESOURCE = -32002;
const ERR_RPC_TRANSACTION_REJECTED = -32003;
const ERR_RPC_UNSUPPORTED_METHOD = -32004;
const ERR_RPC_LIMIT_EXCEEDED = -32005;
const ERR_RPC_NOT_SUPPORTED = -32006;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gkKU3":[function(require,module,exports) {
exports.interopDefault = function(a) {
    return a && a.__esModule ? a : {
        default: a
    };
};
exports.defineInteropFlag = function(a) {
    Object.defineProperty(a, "__esModule", {
        value: true
    });
};
exports.exportAll = function(source, dest) {
    Object.keys(source).forEach(function(key) {
        if (key === "default" || key === "__esModule" || Object.prototype.hasOwnProperty.call(dest, key)) return;
        Object.defineProperty(dest, key, {
            enumerable: true,
            get: function() {
                return source[key];
            }
        });
    });
    return dest;
};
exports.export = function(dest, destName, get) {
    Object.defineProperty(dest, destName, {
        enumerable: true,
        get: get
    });
};

},{}],"lObzJ":[function(require,module,exports) {
/*
This file is part of web3.js.

web3.js is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

web3.js is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "BaseWeb3Error", ()=>BaseWeb3Error);
parcelHelpers.export(exports, "InvalidValueError", ()=>InvalidValueError);
class BaseWeb3Error extends Error {
    constructor(msg, innerError){
        super(msg);
        this.innerError = innerError;
        this.name = this.constructor.name;
        if (typeof Error.captureStackTrace === "function") Error.captureStackTrace(new.target.constructor);
        else this.stack = new Error().stack;
    }
    static convertToString(value, unquotValue = false) {
        // Using "null" value intentionally for validation
        // eslint-disable-next-line no-null/no-null
        if (value === null || value === undefined) return "undefined";
        const result = JSON.stringify(value, (_, v)=>typeof v === "bigint" ? v.toString() : v);
        return unquotValue && [
            "bigint",
            "string"
        ].includes(typeof value) ? result.replace(/['\\"]+/g, "") : result;
    }
    toJSON() {
        return {
            name: this.name,
            code: this.code,
            message: this.message,
            innerError: this.innerError
        };
    }
}
class InvalidValueError extends BaseWeb3Error {
    constructor(value, msg){
        super(`Invalid value given "${BaseWeb3Error.convertToString(value, true)}". Error: ${msg}.`);
        this.name = this.constructor.name;
    }
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5q7zC":[function(require,module,exports) {
/*
This file is part of web3.js.

web3.js is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

web3.js is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/ /* eslint-disable max-classes-per-file */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "PrivateKeyLengthError", ()=>PrivateKeyLengthError);
parcelHelpers.export(exports, "InvalidPrivateKeyError", ()=>InvalidPrivateKeyError);
parcelHelpers.export(exports, "InvalidSignatureError", ()=>InvalidSignatureError);
parcelHelpers.export(exports, "InvalidKdfError", ()=>InvalidKdfError);
parcelHelpers.export(exports, "KeyDerivationError", ()=>KeyDerivationError);
parcelHelpers.export(exports, "KeyStoreVersionError", ()=>KeyStoreVersionError);
parcelHelpers.export(exports, "InvalidPasswordError", ()=>InvalidPasswordError);
parcelHelpers.export(exports, "IVLengthError", ()=>IVLengthError);
parcelHelpers.export(exports, "PBKDF2IterationsError", ()=>PBKDF2IterationsError);
var _errorCodesJs = require("../error_codes.js");
var _web3ErrorBaseJs = require("../web3_error_base.js");
class PrivateKeyLengthError extends (0, _web3ErrorBaseJs.BaseWeb3Error) {
    constructor(){
        super(`Private key must be 32 bytes.`);
        this.code = (0, _errorCodesJs.ERR_PRIVATE_KEY_LENGTH);
    }
}
class InvalidPrivateKeyError extends (0, _web3ErrorBaseJs.BaseWeb3Error) {
    constructor(){
        super(`Invalid Private Key, Not a valid string or uint8Array`);
        this.code = (0, _errorCodesJs.ERR_INVALID_PRIVATE_KEY);
    }
}
class InvalidSignatureError extends (0, _web3ErrorBaseJs.BaseWeb3Error) {
    constructor(errorDetails){
        super(`"${errorDetails}"`);
        this.code = (0, _errorCodesJs.ERR_INVALID_SIGNATURE);
    }
}
class InvalidKdfError extends (0, _web3ErrorBaseJs.BaseWeb3Error) {
    constructor(){
        super(`Invalid key derivation function`);
        this.code = (0, _errorCodesJs.ERR_UNSUPPORTED_KDF);
    }
}
class KeyDerivationError extends (0, _web3ErrorBaseJs.BaseWeb3Error) {
    constructor(){
        super(`Key derivation failed - possibly wrong password`);
        this.code = (0, _errorCodesJs.ERR_KEY_DERIVATION_FAIL);
    }
}
class KeyStoreVersionError extends (0, _web3ErrorBaseJs.BaseWeb3Error) {
    constructor(){
        super("Unsupported key store version");
        this.code = (0, _errorCodesJs.ERR_KEY_VERSION_UNSUPPORTED);
    }
}
class InvalidPasswordError extends (0, _web3ErrorBaseJs.BaseWeb3Error) {
    constructor(){
        super("Password cannot be empty");
        this.code = (0, _errorCodesJs.ERR_INVALID_PASSWORD);
    }
}
class IVLengthError extends (0, _web3ErrorBaseJs.BaseWeb3Error) {
    constructor(){
        super("Initialization vector must be 16 bytes");
        this.code = (0, _errorCodesJs.ERR_IV_LENGTH);
    }
}
class PBKDF2IterationsError extends (0, _web3ErrorBaseJs.BaseWeb3Error) {
    constructor(){
        super("c > 1000, pbkdf2 is less secure with less iterations");
        this.code = (0, _errorCodesJs.ERR_PBKDF2_ITERATIONS);
    }
}

},{"../error_codes.js":"fx0w5","../web3_error_base.js":"lObzJ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"l5kfR":[function(require,module,exports) {
/*
This file is part of web3.js.

web3.js is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

web3.js is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ConnectionError", ()=>ConnectionError);
parcelHelpers.export(exports, "InvalidConnectionError", ()=>InvalidConnectionError);
parcelHelpers.export(exports, "ConnectionTimeoutError", ()=>ConnectionTimeoutError);
parcelHelpers.export(exports, "ConnectionNotOpenError", ()=>ConnectionNotOpenError);
parcelHelpers.export(exports, "ConnectionCloseError", ()=>ConnectionCloseError);
parcelHelpers.export(exports, "MaxAttemptsReachedOnReconnectingError", ()=>MaxAttemptsReachedOnReconnectingError);
parcelHelpers.export(exports, "PendingRequestsOnReconnectingError", ()=>PendingRequestsOnReconnectingError);
parcelHelpers.export(exports, "RequestAlreadySentError", ()=>RequestAlreadySentError);
var _errorCodesJs = require("../error_codes.js");
var _web3ErrorBaseJs = require("../web3_error_base.js");
class ConnectionError extends (0, _web3ErrorBaseJs.BaseWeb3Error) {
    constructor(message, event){
        super(message);
        this.code = (0, _errorCodesJs.ERR_CONN);
        if (event) {
            this.errorCode = event.code;
            this.errorReason = event.reason;
        }
    }
    toJSON() {
        return Object.assign(Object.assign({}, super.toJSON()), {
            errorCode: this.errorCode,
            errorReason: this.errorReason
        });
    }
}
class InvalidConnectionError extends ConnectionError {
    constructor(host, event){
        super(`CONNECTION ERROR: Couldn't connect to node ${host}.`, event);
        this.host = host;
        this.code = (0, _errorCodesJs.ERR_CONN_INVALID);
    }
    toJSON() {
        return Object.assign(Object.assign({}, super.toJSON()), {
            host: this.host
        });
    }
}
class ConnectionTimeoutError extends ConnectionError {
    constructor(duration){
        super(`CONNECTION TIMEOUT: timeout of ${duration}ms achieved`);
        this.duration = duration;
        this.code = (0, _errorCodesJs.ERR_CONN_TIMEOUT);
    }
    toJSON() {
        return Object.assign(Object.assign({}, super.toJSON()), {
            duration: this.duration
        });
    }
}
class ConnectionNotOpenError extends ConnectionError {
    constructor(event){
        super("Connection not open", event);
        this.code = (0, _errorCodesJs.ERR_CONN_NOT_OPEN);
    }
}
class ConnectionCloseError extends ConnectionError {
    constructor(event){
        var _a, _b;
        super(`CONNECTION ERROR: The connection got closed with the close code ${(_a = event === null || event === void 0 ? void 0 : event.code) !== null && _a !== void 0 ? _a : ""} and the following reason string ${(_b = event === null || event === void 0 ? void 0 : event.reason) !== null && _b !== void 0 ? _b : ""}`, event);
        this.code = (0, _errorCodesJs.ERR_CONN_CLOSE);
    }
}
class MaxAttemptsReachedOnReconnectingError extends ConnectionError {
    constructor(numberOfAttempts){
        super(`Maximum number of reconnect attempts reached! (${numberOfAttempts})`);
        this.code = (0, _errorCodesJs.ERR_CONN_MAX_ATTEMPTS);
    }
}
class PendingRequestsOnReconnectingError extends ConnectionError {
    constructor(){
        super("CONNECTION ERROR: Provider started to reconnect before the response got received!");
        this.code = (0, _errorCodesJs.ERR_CONN_PENDING_REQUESTS);
    }
}
class RequestAlreadySentError extends ConnectionError {
    constructor(id){
        super(`Request already sent with following id: ${id}`);
        this.code = (0, _errorCodesJs.ERR_REQ_ALREADY_SENT);
    }
}

},{"../error_codes.js":"fx0w5","../web3_error_base.js":"lObzJ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kWyBW":[function(require,module,exports) {
/*
This file is part of web3.js.

web3.js is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

web3.js is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Web3ContractError", ()=>Web3ContractError);
parcelHelpers.export(exports, "ResolverMethodMissingError", ()=>ResolverMethodMissingError);
parcelHelpers.export(exports, "ContractMissingABIError", ()=>ContractMissingABIError);
parcelHelpers.export(exports, "ContractOnceRequiresCallbackError", ()=>ContractOnceRequiresCallbackError);
parcelHelpers.export(exports, "ContractEventDoesNotExistError", ()=>ContractEventDoesNotExistError);
parcelHelpers.export(exports, "ContractReservedEventError", ()=>ContractReservedEventError);
parcelHelpers.export(exports, "ContractMissingDeployDataError", ()=>ContractMissingDeployDataError);
parcelHelpers.export(exports, "ContractNoAddressDefinedError", ()=>ContractNoAddressDefinedError);
parcelHelpers.export(exports, "ContractNoFromAddressDefinedError", ()=>ContractNoFromAddressDefinedError);
parcelHelpers.export(exports, "ContractInstantiationError", ()=>ContractInstantiationError);
/**
 * This class is expected to be set as an `innerError` inside ContractExecutionError
 * The properties would be typically decoded from the `data` if it was encoded according to EIP-838
 */ parcelHelpers.export(exports, "Eip838ExecutionError", ()=>Eip838ExecutionError);
/**
 * Used when an error is raised while executing a function inside a smart contract.
 * The data is expected to be encoded according to EIP-848.
 */ parcelHelpers.export(exports, "ContractExecutionError", ()=>ContractExecutionError);
parcelHelpers.export(exports, "ContractTransactionDataAndInputError", ()=>ContractTransactionDataAndInputError);
var _errorCodesJs = require("../error_codes.js");
var _web3ErrorBaseJs = require("../web3_error_base.js");
class Web3ContractError extends (0, _web3ErrorBaseJs.BaseWeb3Error) {
    constructor(message, receipt){
        super(message);
        this.code = (0, _errorCodesJs.ERR_CONTRACT);
        this.receipt = receipt;
    }
}
class ResolverMethodMissingError extends (0, _web3ErrorBaseJs.BaseWeb3Error) {
    constructor(address, name){
        super(`The resolver at ${address} does not implement requested method: "${name}".`);
        this.address = address;
        this.name = name;
        this.code = (0, _errorCodesJs.ERR_CONTRACT_RESOLVER_MISSING);
    }
    toJSON() {
        return Object.assign(Object.assign({}, super.toJSON()), {
            address: this.address,
            name: this.name
        });
    }
}
class ContractMissingABIError extends (0, _web3ErrorBaseJs.BaseWeb3Error) {
    constructor(){
        super("You must provide the json interface of the contract when instantiating a contract object.");
        this.code = (0, _errorCodesJs.ERR_CONTRACT_ABI_MISSING);
    }
}
class ContractOnceRequiresCallbackError extends (0, _web3ErrorBaseJs.BaseWeb3Error) {
    constructor(){
        super("Once requires a callback as the second parameter.");
        this.code = (0, _errorCodesJs.ERR_CONTRACT_REQUIRED_CALLBACK);
    }
}
class ContractEventDoesNotExistError extends (0, _web3ErrorBaseJs.BaseWeb3Error) {
    constructor(eventName){
        super(`Event "${eventName}" doesn't exist in this contract.`);
        this.eventName = eventName;
        this.code = (0, _errorCodesJs.ERR_CONTRACT_EVENT_NOT_EXISTS);
    }
    toJSON() {
        return Object.assign(Object.assign({}, super.toJSON()), {
            eventName: this.eventName
        });
    }
}
class ContractReservedEventError extends (0, _web3ErrorBaseJs.BaseWeb3Error) {
    constructor(type){
        super(`Event "${type}" doesn't exist in this contract.`);
        this.type = type;
        this.code = (0, _errorCodesJs.ERR_CONTRACT_RESERVED_EVENT);
    }
    toJSON() {
        return Object.assign(Object.assign({}, super.toJSON()), {
            type: this.type
        });
    }
}
class ContractMissingDeployDataError extends (0, _web3ErrorBaseJs.BaseWeb3Error) {
    constructor(){
        super(`No "data" specified in neither the given options, nor the default options.`);
        this.code = (0, _errorCodesJs.ERR_CONTRACT_MISSING_DEPLOY_DATA);
    }
}
class ContractNoAddressDefinedError extends (0, _web3ErrorBaseJs.BaseWeb3Error) {
    constructor(){
        super("This contract object doesn't have address set yet, please set an address first.");
        this.code = (0, _errorCodesJs.ERR_CONTRACT_MISSING_ADDRESS);
    }
}
class ContractNoFromAddressDefinedError extends (0, _web3ErrorBaseJs.BaseWeb3Error) {
    constructor(){
        super('No "from" address specified in neither the given options, nor the default options.');
        this.code = (0, _errorCodesJs.ERR_CONTRACT_MISSING_FROM_ADDRESS);
    }
}
class ContractInstantiationError extends (0, _web3ErrorBaseJs.BaseWeb3Error) {
    constructor(){
        super(...arguments);
        this.code = (0, _errorCodesJs.ERR_CONTRACT_INSTANTIATION);
    }
}
class Eip838ExecutionError extends Web3ContractError {
    constructor(error){
        super(error.message || "Error");
        this.name = "name" in error && error.name || this.constructor.name;
        this.stack = "stack" in error && error.stack || undefined;
        this.code = error.code;
        // get embedded error details got from some providers like MetaMask
        // and set this.data from the inner error data for easier read.
        // note: the data is a hex string inside either:
        //	 error.data, error.data.data or error.data.originalError.data (https://github.com/web3/web3.js/issues/4454#issuecomment-1485953455)
        if (typeof error.data === "object") {
            let originalError;
            if ("originalError" in error.data) originalError = error.data.originalError;
            else // Ganache has no `originalError` sub-object unlike others
            originalError = error.data;
            this.data = originalError.data;
            this.innerError = new Eip838ExecutionError(originalError);
        } else this.data = error.data;
    }
    setDecodedProperties(errorName, errorSignature, errorArgs) {
        this.errorName = errorName;
        this.errorSignature = errorSignature;
        this.errorArgs = errorArgs;
    }
    toJSON() {
        let json = Object.assign(Object.assign({}, super.toJSON()), {
            data: this.data
        });
        if (this.errorName) json = Object.assign(Object.assign({}, json), {
            errorName: this.errorName,
            errorSignature: this.errorSignature,
            errorArgs: this.errorArgs
        });
        return json;
    }
}
class ContractExecutionError extends Web3ContractError {
    constructor(rpcError){
        super("Error happened while trying to execute a function inside a smart contract");
        this.code = (0, _errorCodesJs.ERR_CONTRACT_EXECUTION_REVERTED);
        this.innerError = new Eip838ExecutionError(rpcError);
    }
}
class ContractTransactionDataAndInputError extends (0, _web3ErrorBaseJs.InvalidValueError) {
    constructor(value){
        var _a, _b;
        super(`data: ${(_a = value.data) !== null && _a !== void 0 ? _a : "undefined"}, input: ${(_b = value.input) !== null && _b !== void 0 ? _b : "undefined"}`, 'You can\'t have "data" and "input" as properties of a contract at the same time, please use either "data" or "input" instead.');
        this.code = (0, _errorCodesJs.ERR_CONTRACT_TX_DATA_AND_INPUT);
    }
}

},{"../error_codes.js":"fx0w5","../web3_error_base.js":"lObzJ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"elT1l":[function(require,module,exports) {
/*
This file is part of web3.js.

web3.js is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

web3.js is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/ /* eslint-disable max-classes-per-file */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ENSCheckInterfaceSupportError", ()=>ENSCheckInterfaceSupportError);
parcelHelpers.export(exports, "ENSUnsupportedNetworkError", ()=>ENSUnsupportedNetworkError);
parcelHelpers.export(exports, "ENSNetworkNotSyncedError", ()=>ENSNetworkNotSyncedError);
var _errorCodesJs = require("../error_codes.js");
var _web3ErrorBaseJs = require("../web3_error_base.js");
class ENSCheckInterfaceSupportError extends (0, _web3ErrorBaseJs.BaseWeb3Error) {
    constructor(errorDetails){
        super(`ENS resolver check interface support error. "${errorDetails}"`);
        this.code = (0, _errorCodesJs.ERR_ENS_CHECK_INTERFACE_SUPPORT);
    }
}
class ENSUnsupportedNetworkError extends (0, _web3ErrorBaseJs.BaseWeb3Error) {
    constructor(networkType){
        super(`ENS is not supported on network ${networkType}`);
        this.code = (0, _errorCodesJs.ERR_ENS_UNSUPPORTED_NETWORK);
    }
}
class ENSNetworkNotSyncedError extends (0, _web3ErrorBaseJs.BaseWeb3Error) {
    constructor(){
        super(`Network not synced`);
        this.code = (0, _errorCodesJs.ERR_ENS_NETWORK_NOT_SYNCED);
    }
}

},{"../error_codes.js":"fx0w5","../web3_error_base.js":"lObzJ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4ShXr":[function(require,module,exports) {
/*
This file is part of web3.js.

web3.js is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

web3.js is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/ /* eslint-disable max-classes-per-file */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "InvalidNumberOfParamsError", ()=>InvalidNumberOfParamsError);
parcelHelpers.export(exports, "InvalidMethodParamsError", ()=>InvalidMethodParamsError);
parcelHelpers.export(exports, "FormatterError", ()=>FormatterError);
parcelHelpers.export(exports, "MethodNotImplementedError", ()=>MethodNotImplementedError);
parcelHelpers.export(exports, "OperationTimeoutError", ()=>OperationTimeoutError);
parcelHelpers.export(exports, "OperationAbortError", ()=>OperationAbortError);
parcelHelpers.export(exports, "AbiError", ()=>AbiError);
parcelHelpers.export(exports, "ExistingPluginNamespaceError", ()=>ExistingPluginNamespaceError);
var _errorCodesJs = require("../error_codes.js");
var _web3ErrorBaseJs = require("../web3_error_base.js");
class InvalidNumberOfParamsError extends (0, _web3ErrorBaseJs.BaseWeb3Error) {
    constructor(got, expected, method){
        super(`Invalid number of parameters for "${method}". Got "${got}" expected "${expected}"!`);
        this.got = got;
        this.expected = expected;
        this.method = method;
        this.code = (0, _errorCodesJs.ERR_PARAM);
    }
    toJSON() {
        return Object.assign(Object.assign({}, super.toJSON()), {
            got: this.got,
            expected: this.expected,
            method: this.method
        });
    }
}
class InvalidMethodParamsError extends (0, _web3ErrorBaseJs.BaseWeb3Error) {
    constructor(hint){
        super(`Invalid parameters passed. "${typeof hint !== "undefined" ? hint : ""}"`);
        this.hint = hint;
        this.code = (0, _errorCodesJs.ERR_INVALID_METHOD_PARAMS);
    }
    toJSON() {
        return Object.assign(Object.assign({}, super.toJSON()), {
            hint: this.hint
        });
    }
}
class FormatterError extends (0, _web3ErrorBaseJs.BaseWeb3Error) {
    constructor(){
        super(...arguments);
        this.code = (0, _errorCodesJs.ERR_FORMATTERS);
    }
}
class MethodNotImplementedError extends (0, _web3ErrorBaseJs.BaseWeb3Error) {
    constructor(){
        super("The method you're trying to call is not implemented.");
        this.code = (0, _errorCodesJs.ERR_METHOD_NOT_IMPLEMENTED);
    }
}
class OperationTimeoutError extends (0, _web3ErrorBaseJs.BaseWeb3Error) {
    constructor(){
        super(...arguments);
        this.code = (0, _errorCodesJs.ERR_OPERATION_TIMEOUT);
    }
}
class OperationAbortError extends (0, _web3ErrorBaseJs.BaseWeb3Error) {
    constructor(){
        super(...arguments);
        this.code = (0, _errorCodesJs.ERR_OPERATION_ABORT);
    }
}
class AbiError extends (0, _web3ErrorBaseJs.BaseWeb3Error) {
    constructor(message, props){
        super(message);
        this.code = (0, _errorCodesJs.ERR_ABI_ENCODING);
        this.props = props !== null && props !== void 0 ? props : {};
    }
}
class ExistingPluginNamespaceError extends (0, _web3ErrorBaseJs.BaseWeb3Error) {
    constructor(pluginNamespace){
        super(`A plugin with the namespace: ${pluginNamespace} has already been registered.`);
        this.code = (0, _errorCodesJs.ERR_EXISTING_PLUGIN_NAMESPACE);
    }
}

},{"../error_codes.js":"fx0w5","../web3_error_base.js":"lObzJ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"51AwO":[function(require,module,exports) {
/*
This file is part of web3.js.

web3.js is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

web3.js is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/ /* eslint-disable max-classes-per-file */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ProviderError", ()=>ProviderError);
parcelHelpers.export(exports, "InvalidProviderError", ()=>InvalidProviderError);
parcelHelpers.export(exports, "InvalidClientError", ()=>InvalidClientError);
parcelHelpers.export(exports, "SubscriptionError", ()=>SubscriptionError);
parcelHelpers.export(exports, "Web3WSProviderError", ()=>Web3WSProviderError);
var _errorCodesJs = require("../error_codes.js");
var _web3ErrorBaseJs = require("../web3_error_base.js");
class ProviderError extends (0, _web3ErrorBaseJs.BaseWeb3Error) {
    constructor(){
        super(...arguments);
        this.code = (0, _errorCodesJs.ERR_PROVIDER);
    }
}
class InvalidProviderError extends (0, _web3ErrorBaseJs.BaseWeb3Error) {
    constructor(clientUrl){
        super(`Provider with url "${clientUrl}" is not set or invalid`);
        this.clientUrl = clientUrl;
        this.code = (0, _errorCodesJs.ERR_INVALID_PROVIDER);
    }
}
class InvalidClientError extends (0, _web3ErrorBaseJs.BaseWeb3Error) {
    constructor(clientUrl){
        super(`Client URL "${clientUrl}" is invalid.`);
        this.code = (0, _errorCodesJs.ERR_INVALID_CLIENT);
    }
}
class SubscriptionError extends (0, _web3ErrorBaseJs.BaseWeb3Error) {
    constructor(){
        super(...arguments);
        this.code = (0, _errorCodesJs.ERR_SUBSCRIPTION);
    }
}
class Web3WSProviderError extends (0, _web3ErrorBaseJs.BaseWeb3Error) {
    constructor(){
        super(...arguments);
        this.code = (0, _errorCodesJs.ERR_WS_PROVIDER); // this had duplicate code with generic provider
    }
}

},{"../error_codes.js":"fx0w5","../web3_error_base.js":"lObzJ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jEjJE":[function(require,module,exports) {
/*
This file is part of web3.js.

web3.js is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

web3.js is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "SignatureError", ()=>SignatureError);
var _errorCodesJs = require("../error_codes.js");
var _web3ErrorBaseJs = require("../web3_error_base.js");
class SignatureError extends (0, _web3ErrorBaseJs.InvalidValueError) {
    constructor(){
        super(...arguments);
        this.code = (0, _errorCodesJs.ERR_SIGNATURE_FAILED);
    }
}

},{"../error_codes.js":"fx0w5","../web3_error_base.js":"lObzJ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eCF2N":[function(require,module,exports) {
/*
This file is part of web3.js.

web3.js is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

web3.js is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "TransactionError", ()=>TransactionError);
parcelHelpers.export(exports, "RevertInstructionError", ()=>RevertInstructionError);
parcelHelpers.export(exports, "TransactionRevertInstructionError", ()=>TransactionRevertInstructionError);
/**
 * This error is used when a transaction to a smart contract fails and
 * a custom user error (https://blog.soliditylang.org/2021/04/21/custom-errors/)
 * is able to be parsed from the revert reason
 */ parcelHelpers.export(exports, "TransactionRevertWithCustomError", ()=>TransactionRevertWithCustomError);
parcelHelpers.export(exports, "NoContractAddressFoundError", ()=>NoContractAddressFoundError);
parcelHelpers.export(exports, "ContractCodeNotStoredError", ()=>ContractCodeNotStoredError);
parcelHelpers.export(exports, "TransactionRevertedWithoutReasonError", ()=>TransactionRevertedWithoutReasonError);
parcelHelpers.export(exports, "TransactionOutOfGasError", ()=>TransactionOutOfGasError);
parcelHelpers.export(exports, "UndefinedRawTransactionError", ()=>UndefinedRawTransactionError);
parcelHelpers.export(exports, "TransactionNotFound", ()=>TransactionNotFound);
parcelHelpers.export(exports, "InvalidTransactionWithSender", ()=>InvalidTransactionWithSender);
parcelHelpers.export(exports, "InvalidTransactionWithReceiver", ()=>InvalidTransactionWithReceiver);
parcelHelpers.export(exports, "InvalidTransactionCall", ()=>InvalidTransactionCall);
parcelHelpers.export(exports, "MissingCustomChainError", ()=>MissingCustomChainError);
parcelHelpers.export(exports, "MissingCustomChainIdError", ()=>MissingCustomChainIdError);
parcelHelpers.export(exports, "ChainIdMismatchError", ()=>ChainIdMismatchError);
parcelHelpers.export(exports, "ChainMismatchError", ()=>ChainMismatchError);
parcelHelpers.export(exports, "HardforkMismatchError", ()=>HardforkMismatchError);
parcelHelpers.export(exports, "CommonOrChainAndHardforkError", ()=>CommonOrChainAndHardforkError);
parcelHelpers.export(exports, "MissingChainOrHardforkError", ()=>MissingChainOrHardforkError);
parcelHelpers.export(exports, "MissingGasInnerError", ()=>MissingGasInnerError);
parcelHelpers.export(exports, "MissingGasError", ()=>MissingGasError);
parcelHelpers.export(exports, "TransactionGasMismatchInnerError", ()=>TransactionGasMismatchInnerError);
parcelHelpers.export(exports, "TransactionGasMismatchError", ()=>TransactionGasMismatchError);
parcelHelpers.export(exports, "InvalidGasOrGasPrice", ()=>InvalidGasOrGasPrice);
parcelHelpers.export(exports, "InvalidMaxPriorityFeePerGasOrMaxFeePerGas", ()=>InvalidMaxPriorityFeePerGasOrMaxFeePerGas);
parcelHelpers.export(exports, "Eip1559GasPriceError", ()=>Eip1559GasPriceError);
parcelHelpers.export(exports, "UnsupportedFeeMarketError", ()=>UnsupportedFeeMarketError);
parcelHelpers.export(exports, "InvalidTransactionObjectError", ()=>InvalidTransactionObjectError);
parcelHelpers.export(exports, "InvalidNonceOrChainIdError", ()=>InvalidNonceOrChainIdError);
parcelHelpers.export(exports, "UnableToPopulateNonceError", ()=>UnableToPopulateNonceError);
parcelHelpers.export(exports, "Eip1559NotSupportedError", ()=>Eip1559NotSupportedError);
parcelHelpers.export(exports, "UnsupportedTransactionTypeError", ()=>UnsupportedTransactionTypeError);
parcelHelpers.export(exports, "TransactionDataAndInputError", ()=>TransactionDataAndInputError);
parcelHelpers.export(exports, "TransactionSendTimeoutError", ()=>TransactionSendTimeoutError);
parcelHelpers.export(exports, "TransactionPollingTimeoutError", ()=>TransactionPollingTimeoutError);
parcelHelpers.export(exports, "TransactionBlockTimeoutError", ()=>TransactionBlockTimeoutError);
parcelHelpers.export(exports, "TransactionMissingReceiptOrBlockHashError", ()=>TransactionMissingReceiptOrBlockHashError);
parcelHelpers.export(exports, "TransactionReceiptMissingBlockNumberError", ()=>TransactionReceiptMissingBlockNumberError);
parcelHelpers.export(exports, "TransactionSigningError", ()=>TransactionSigningError);
parcelHelpers.export(exports, "LocalWalletNotAvailableError", ()=>LocalWalletNotAvailableError);
parcelHelpers.export(exports, "InvalidPropertiesForTransactionTypeError", ()=>InvalidPropertiesForTransactionTypeError);
var _errorCodesJs = require("../error_codes.js");
var _web3ErrorBaseJs = require("../web3_error_base.js");
class TransactionError extends (0, _web3ErrorBaseJs.BaseWeb3Error) {
    constructor(message, receipt){
        super(message);
        this.receipt = receipt;
        this.code = (0, _errorCodesJs.ERR_TX);
    }
    toJSON() {
        return Object.assign(Object.assign({}, super.toJSON()), {
            receipt: this.receipt
        });
    }
}
class RevertInstructionError extends (0, _web3ErrorBaseJs.BaseWeb3Error) {
    constructor(reason, signature){
        super(`Your request got reverted with the following reason string: ${reason}`);
        this.reason = reason;
        this.signature = signature;
        this.code = (0, _errorCodesJs.ERR_TX_REVERT_INSTRUCTION);
    }
    toJSON() {
        return Object.assign(Object.assign({}, super.toJSON()), {
            reason: this.reason,
            signature: this.signature
        });
    }
}
class TransactionRevertInstructionError extends (0, _web3ErrorBaseJs.BaseWeb3Error) {
    constructor(reason, signature, receipt, data){
        super(`Transaction has been reverted by the EVM${receipt === undefined ? "" : `:\n ${(0, _web3ErrorBaseJs.BaseWeb3Error).convertToString(receipt)}`}`);
        this.reason = reason;
        this.signature = signature;
        this.receipt = receipt;
        this.data = data;
        this.code = (0, _errorCodesJs.ERR_TX_REVERT_TRANSACTION);
    }
    toJSON() {
        return Object.assign(Object.assign({}, super.toJSON()), {
            reason: this.reason,
            signature: this.signature,
            receipt: this.receipt,
            data: this.data
        });
    }
}
class TransactionRevertWithCustomError extends TransactionRevertInstructionError {
    constructor(reason, customErrorName, customErrorDecodedSignature, customErrorArguments, signature, receipt, data){
        super(reason);
        this.reason = reason;
        this.customErrorName = customErrorName;
        this.customErrorDecodedSignature = customErrorDecodedSignature;
        this.customErrorArguments = customErrorArguments;
        this.signature = signature;
        this.receipt = receipt;
        this.data = data;
        this.code = (0, _errorCodesJs.ERR_TX_REVERT_TRANSACTION_CUSTOM_ERROR);
    }
    toJSON() {
        return Object.assign(Object.assign({}, super.toJSON()), {
            reason: this.reason,
            customErrorName: this.customErrorName,
            customErrorDecodedSignature: this.customErrorDecodedSignature,
            customErrorArguments: this.customErrorArguments,
            signature: this.signature,
            receipt: this.receipt,
            data: this.data
        });
    }
}
class NoContractAddressFoundError extends TransactionError {
    constructor(receipt){
        super("The transaction receipt didn't contain a contract address.", receipt);
        this.code = (0, _errorCodesJs.ERR_TX_NO_CONTRACT_ADDRESS);
    }
    toJSON() {
        return Object.assign(Object.assign({}, super.toJSON()), {
            receipt: this.receipt
        });
    }
}
class ContractCodeNotStoredError extends TransactionError {
    constructor(receipt){
        super("The contract code couldn't be stored, please check your gas limit.", receipt);
        this.code = (0, _errorCodesJs.ERR_TX_CONTRACT_NOT_STORED);
    }
}
class TransactionRevertedWithoutReasonError extends TransactionError {
    constructor(receipt){
        super(`Transaction has been reverted by the EVM${receipt === undefined ? "" : `:\n ${(0, _web3ErrorBaseJs.BaseWeb3Error).convertToString(receipt)}`}`, receipt);
        this.code = (0, _errorCodesJs.ERR_TX_REVERT_WITHOUT_REASON);
    }
}
class TransactionOutOfGasError extends TransactionError {
    constructor(receipt){
        super(`Transaction ran out of gas. Please provide more gas:\n ${JSON.stringify(receipt, undefined, 2)}`, receipt);
        this.code = (0, _errorCodesJs.ERR_TX_OUT_OF_GAS);
    }
}
class UndefinedRawTransactionError extends TransactionError {
    constructor(){
        super(`Raw transaction undefined`);
        this.code = (0, _errorCodesJs.ERR_RAW_TX_UNDEFINED);
    }
}
class TransactionNotFound extends TransactionError {
    constructor(){
        super("Transaction not found");
        this.code = (0, _errorCodesJs.ERR_TX_NOT_FOUND);
    }
}
class InvalidTransactionWithSender extends (0, _web3ErrorBaseJs.InvalidValueError) {
    constructor(value){
        super(value, "invalid transaction with invalid sender");
        this.code = (0, _errorCodesJs.ERR_TX_INVALID_SENDER);
    }
}
class InvalidTransactionWithReceiver extends (0, _web3ErrorBaseJs.InvalidValueError) {
    constructor(value){
        super(value, "invalid transaction with invalid receiver");
        this.code = (0, _errorCodesJs.ERR_TX_INVALID_RECEIVER);
    }
}
class InvalidTransactionCall extends (0, _web3ErrorBaseJs.InvalidValueError) {
    constructor(value){
        super(value, "invalid transaction call");
        this.code = (0, _errorCodesJs.ERR_TX_INVALID_CALL);
    }
}
class MissingCustomChainError extends (0, _web3ErrorBaseJs.InvalidValueError) {
    constructor(){
        super("MissingCustomChainError", "If tx.common is provided it must have tx.common.customChain");
        this.code = (0, _errorCodesJs.ERR_TX_MISSING_CUSTOM_CHAIN);
    }
}
class MissingCustomChainIdError extends (0, _web3ErrorBaseJs.InvalidValueError) {
    constructor(){
        super("MissingCustomChainIdError", "If tx.common is provided it must have tx.common.customChain and tx.common.customChain.chainId");
        this.code = (0, _errorCodesJs.ERR_TX_MISSING_CUSTOM_CHAIN_ID);
    }
}
class ChainIdMismatchError extends (0, _web3ErrorBaseJs.InvalidValueError) {
    constructor(value){
        super(JSON.stringify(value), // https://github.com/ChainSafe/web3.js/blob/8783f4d64e424456bdc53b34ef1142d0a7cee4d7/packages/web3-eth-accounts/src/index.js#L176
        "Chain Id doesnt match in tx.chainId tx.common.customChain.chainId");
        this.code = (0, _errorCodesJs.ERR_TX_CHAIN_ID_MISMATCH);
    }
}
class ChainMismatchError extends (0, _web3ErrorBaseJs.InvalidValueError) {
    constructor(value){
        super(JSON.stringify(value), "Chain doesnt match in tx.chain tx.common.basechain");
        this.code = (0, _errorCodesJs.ERR_TX_CHAIN_MISMATCH);
    }
}
class HardforkMismatchError extends (0, _web3ErrorBaseJs.InvalidValueError) {
    constructor(value){
        super(JSON.stringify(value), "hardfork doesnt match in tx.hardfork tx.common.hardfork");
        this.code = (0, _errorCodesJs.ERR_TX_HARDFORK_MISMATCH);
    }
}
class CommonOrChainAndHardforkError extends (0, _web3ErrorBaseJs.InvalidValueError) {
    constructor(){
        super("CommonOrChainAndHardforkError", "Please provide the common object or the chain and hardfork property but not all together.");
        this.code = (0, _errorCodesJs.ERR_TX_INVALID_CHAIN_INFO);
    }
}
class MissingChainOrHardforkError extends (0, _web3ErrorBaseJs.InvalidValueError) {
    constructor(value){
        var _a, _b;
        super("MissingChainOrHardforkError", `When specifying chain and hardfork, both values must be defined. Received "chain": ${(_a = value.chain) !== null && _a !== void 0 ? _a : "undefined"}, "hardfork": ${(_b = value.hardfork) !== null && _b !== void 0 ? _b : "undefined"}`);
        this.code = (0, _errorCodesJs.ERR_TX_MISSING_CHAIN_INFO);
    }
}
class MissingGasInnerError extends (0, _web3ErrorBaseJs.BaseWeb3Error) {
    constructor(){
        super('Missing properties in transaction, either define "gas" and "gasPrice" for type 0 transactions or "gas", "maxPriorityFeePerGas" and "maxFeePerGas" for type 2 transactions');
        this.code = (0, _errorCodesJs.ERR_TX_MISSING_GAS_INNER_ERROR);
    }
}
class MissingGasError extends (0, _web3ErrorBaseJs.InvalidValueError) {
    constructor(value){
        var _a, _b, _c, _d;
        super(`gas: ${(_a = value.gas) !== null && _a !== void 0 ? _a : "undefined"}, gasPrice: ${(_b = value.gasPrice) !== null && _b !== void 0 ? _b : "undefined"}, maxPriorityFeePerGas: ${(_c = value.maxPriorityFeePerGas) !== null && _c !== void 0 ? _c : "undefined"}, maxFeePerGas: ${(_d = value.maxFeePerGas) !== null && _d !== void 0 ? _d : "undefined"}`, '"gas" is missing');
        this.code = (0, _errorCodesJs.ERR_TX_MISSING_GAS);
        this.innerError = new MissingGasInnerError();
    }
}
class TransactionGasMismatchInnerError extends (0, _web3ErrorBaseJs.BaseWeb3Error) {
    constructor(){
        super('Missing properties in transaction, either define "gas" and "gasPrice" for type 0 transactions or "gas", "maxPriorityFeePerGas" and "maxFeePerGas" for type 2 transactions, not both');
        this.code = (0, _errorCodesJs.ERR_TX_GAS_MISMATCH_INNER_ERROR);
    }
}
class TransactionGasMismatchError extends (0, _web3ErrorBaseJs.InvalidValueError) {
    constructor(value){
        var _a, _b, _c, _d;
        super(`gas: ${(_a = value.gas) !== null && _a !== void 0 ? _a : "undefined"}, gasPrice: ${(_b = value.gasPrice) !== null && _b !== void 0 ? _b : "undefined"}, maxPriorityFeePerGas: ${(_c = value.maxPriorityFeePerGas) !== null && _c !== void 0 ? _c : "undefined"}, maxFeePerGas: ${(_d = value.maxFeePerGas) !== null && _d !== void 0 ? _d : "undefined"}`, "transaction must specify legacy or fee market gas properties, not both");
        this.code = (0, _errorCodesJs.ERR_TX_GAS_MISMATCH);
        this.innerError = new TransactionGasMismatchInnerError();
    }
}
class InvalidGasOrGasPrice extends (0, _web3ErrorBaseJs.InvalidValueError) {
    constructor(value){
        var _a, _b;
        super(`gas: ${(_a = value.gas) !== null && _a !== void 0 ? _a : "undefined"}, gasPrice: ${(_b = value.gasPrice) !== null && _b !== void 0 ? _b : "undefined"}`, "Gas or gasPrice is lower than 0");
        this.code = (0, _errorCodesJs.ERR_TX_INVALID_LEGACY_GAS);
    }
}
class InvalidMaxPriorityFeePerGasOrMaxFeePerGas extends (0, _web3ErrorBaseJs.InvalidValueError) {
    constructor(value){
        var _a, _b;
        super(`maxPriorityFeePerGas: ${(_a = value.maxPriorityFeePerGas) !== null && _a !== void 0 ? _a : "undefined"}, maxFeePerGas: ${(_b = value.maxFeePerGas) !== null && _b !== void 0 ? _b : "undefined"}`, "maxPriorityFeePerGas or maxFeePerGas is lower than 0");
        this.code = (0, _errorCodesJs.ERR_TX_INVALID_FEE_MARKET_GAS);
    }
}
class Eip1559GasPriceError extends (0, _web3ErrorBaseJs.InvalidValueError) {
    constructor(value){
        super(value, "eip-1559 transactions don't support gasPrice");
        this.code = (0, _errorCodesJs.ERR_TX_INVALID_FEE_MARKET_GAS_PRICE);
    }
}
class UnsupportedFeeMarketError extends (0, _web3ErrorBaseJs.InvalidValueError) {
    constructor(value){
        var _a, _b;
        super(`maxPriorityFeePerGas: ${(_a = value.maxPriorityFeePerGas) !== null && _a !== void 0 ? _a : "undefined"}, maxFeePerGas: ${(_b = value.maxFeePerGas) !== null && _b !== void 0 ? _b : "undefined"}`, "pre-eip-1559 transaction don't support maxFeePerGas/maxPriorityFeePerGas");
        this.code = (0, _errorCodesJs.ERR_TX_INVALID_LEGACY_FEE_MARKET);
    }
}
class InvalidTransactionObjectError extends (0, _web3ErrorBaseJs.InvalidValueError) {
    constructor(value){
        super(value, "invalid transaction object");
        this.code = (0, _errorCodesJs.ERR_TX_INVALID_OBJECT);
    }
}
class InvalidNonceOrChainIdError extends (0, _web3ErrorBaseJs.InvalidValueError) {
    constructor(value){
        var _a, _b;
        super(`nonce: ${(_a = value.nonce) !== null && _a !== void 0 ? _a : "undefined"}, chainId: ${(_b = value.chainId) !== null && _b !== void 0 ? _b : "undefined"}`, "Nonce or chainId is lower than 0");
        this.code = (0, _errorCodesJs.ERR_TX_INVALID_NONCE_OR_CHAIN_ID);
    }
}
class UnableToPopulateNonceError extends (0, _web3ErrorBaseJs.InvalidValueError) {
    constructor(){
        super("UnableToPopulateNonceError", "unable to populate nonce, no from address available");
        this.code = (0, _errorCodesJs.ERR_TX_UNABLE_TO_POPULATE_NONCE);
    }
}
class Eip1559NotSupportedError extends (0, _web3ErrorBaseJs.InvalidValueError) {
    constructor(){
        super("Eip1559NotSupportedError", "Network doesn't support eip-1559");
        this.code = (0, _errorCodesJs.ERR_TX_UNSUPPORTED_EIP_1559);
    }
}
class UnsupportedTransactionTypeError extends (0, _web3ErrorBaseJs.InvalidValueError) {
    constructor(value){
        super(value, "unsupported transaction type");
        this.code = (0, _errorCodesJs.ERR_TX_UNSUPPORTED_TYPE);
    }
}
class TransactionDataAndInputError extends (0, _web3ErrorBaseJs.InvalidValueError) {
    constructor(value){
        var _a, _b;
        super(`data: ${(_a = value.data) !== null && _a !== void 0 ? _a : "undefined"}, input: ${(_b = value.input) !== null && _b !== void 0 ? _b : "undefined"}`, 'You can\'t have "data" and "input" as properties of transactions at the same time, please use either "data" or "input" instead.');
        this.code = (0, _errorCodesJs.ERR_TX_DATA_AND_INPUT);
    }
}
class TransactionSendTimeoutError extends (0, _web3ErrorBaseJs.BaseWeb3Error) {
    constructor(value){
        super(`The connected Ethereum Node did not respond within ${value.numberOfSeconds} seconds, please make sure your transaction was properly sent and you are connected to a healthy Node. Be aware that transaction might still be pending or mined!\n\tTransaction Hash: ${value.transactionHash ? value.transactionHash.toString() : "not available"}`);
        this.code = (0, _errorCodesJs.ERR_TX_SEND_TIMEOUT);
    }
}
function transactionTimeoutHint(transactionHash) {
    return `Please make sure your transaction was properly sent and there are no previous pending transaction for the same account. However, be aware that it might still be mined!\n\tTransaction Hash: ${transactionHash ? transactionHash.toString() : "not available"}`;
}
class TransactionPollingTimeoutError extends (0, _web3ErrorBaseJs.BaseWeb3Error) {
    constructor(value){
        super(`Transaction was not mined within ${value.numberOfSeconds} seconds. ${transactionTimeoutHint(value.transactionHash)}`);
        this.code = (0, _errorCodesJs.ERR_TX_POLLING_TIMEOUT);
    }
}
class TransactionBlockTimeoutError extends (0, _web3ErrorBaseJs.BaseWeb3Error) {
    constructor(value){
        super(`Transaction started at ${value.starterBlockNumber} but was not mined within ${value.numberOfBlocks} blocks. ${transactionTimeoutHint(value.transactionHash)}`);
        this.code = (0, _errorCodesJs.ERR_TX_BLOCK_TIMEOUT);
    }
}
class TransactionMissingReceiptOrBlockHashError extends (0, _web3ErrorBaseJs.InvalidValueError) {
    constructor(value){
        var _a, _b;
        super(`receipt: ${JSON.stringify(value.receipt)}, blockHash: ${(_a = value.blockHash) === null || _a === void 0 ? void 0 : _a.toString()}, transactionHash: ${(_b = value.transactionHash) === null || _b === void 0 ? void 0 : _b.toString()}`, `Receipt missing or blockHash null`);
        this.code = (0, _errorCodesJs.ERR_TX_RECEIPT_MISSING_OR_BLOCKHASH_NULL);
    }
}
class TransactionReceiptMissingBlockNumberError extends (0, _web3ErrorBaseJs.InvalidValueError) {
    constructor(value){
        super(`receipt: ${JSON.stringify(value.receipt)}`, `Receipt missing block number`);
        this.code = (0, _errorCodesJs.ERR_TX_RECEIPT_MISSING_BLOCK_NUMBER);
    }
}
class TransactionSigningError extends (0, _web3ErrorBaseJs.BaseWeb3Error) {
    constructor(errorDetails){
        super(`Invalid signature. "${errorDetails}"`);
        this.code = (0, _errorCodesJs.ERR_TX_SIGNING);
    }
}
class LocalWalletNotAvailableError extends (0, _web3ErrorBaseJs.InvalidValueError) {
    constructor(){
        super("LocalWalletNotAvailableError", `Attempted to index account in local wallet, but no wallet is available`);
        this.code = (0, _errorCodesJs.ERR_TX_LOCAL_WALLET_NOT_AVAILABLE);
    }
}
class InvalidPropertiesForTransactionTypeError extends (0, _web3ErrorBaseJs.BaseWeb3Error) {
    constructor(validationError, txType){
        const invalidPropertyNames = [];
        validationError.forEach((error)=>invalidPropertyNames.push(error.keyword));
        super(`The following properties are invalid for the transaction type ${txType}: ${invalidPropertyNames.join(", ")}`);
        this.code = (0, _errorCodesJs.ERR_TX_INVALID_PROPERTIES_FOR_TYPE);
    }
}

},{"../error_codes.js":"fx0w5","../web3_error_base.js":"lObzJ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"iHHCO":[function(require,module,exports) {
/*
This file is part of web3.js.

web3.js is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

web3.js is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/ /* eslint-disable max-classes-per-file */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "InvalidBytesError", ()=>InvalidBytesError);
parcelHelpers.export(exports, "InvalidNumberError", ()=>InvalidNumberError);
parcelHelpers.export(exports, "InvalidAddressError", ()=>InvalidAddressError);
parcelHelpers.export(exports, "InvalidStringError", ()=>InvalidStringError);
parcelHelpers.export(exports, "InvalidUnitError", ()=>InvalidUnitError);
parcelHelpers.export(exports, "HexProcessingError", ()=>HexProcessingError);
parcelHelpers.export(exports, "NibbleWidthError", ()=>NibbleWidthError);
parcelHelpers.export(exports, "InvalidTypeError", ()=>InvalidTypeError);
parcelHelpers.export(exports, "InvalidBooleanError", ()=>InvalidBooleanError);
parcelHelpers.export(exports, "InvalidUnsignedIntegerError", ()=>InvalidUnsignedIntegerError);
parcelHelpers.export(exports, "InvalidSizeError", ()=>InvalidSizeError);
parcelHelpers.export(exports, "InvalidLargeValueError", ()=>InvalidLargeValueError);
parcelHelpers.export(exports, "InvalidBlockError", ()=>InvalidBlockError);
parcelHelpers.export(exports, "InvalidTypeAbiInputError", ()=>InvalidTypeAbiInputError);
var _errorCodesJs = require("../error_codes.js");
var _web3ErrorBaseJs = require("../web3_error_base.js");
class InvalidBytesError extends (0, _web3ErrorBaseJs.InvalidValueError) {
    constructor(value){
        super(value, "can not parse as byte data");
        this.code = (0, _errorCodesJs.ERR_INVALID_BYTES);
    }
}
class InvalidNumberError extends (0, _web3ErrorBaseJs.InvalidValueError) {
    constructor(value){
        super(value, "can not parse as number data");
        this.code = (0, _errorCodesJs.ERR_INVALID_NUMBER);
    }
}
class InvalidAddressError extends (0, _web3ErrorBaseJs.InvalidValueError) {
    constructor(value){
        super(value, "invalid ethereum address");
        this.code = (0, _errorCodesJs.ERR_INVALID_ADDRESS);
    }
}
class InvalidStringError extends (0, _web3ErrorBaseJs.InvalidValueError) {
    constructor(value){
        super(value, "not a valid string");
        this.code = (0, _errorCodesJs.ERR_INVALID_STRING);
    }
}
class InvalidUnitError extends (0, _web3ErrorBaseJs.InvalidValueError) {
    constructor(value){
        super(value, "invalid unit");
        this.code = (0, _errorCodesJs.ERR_INVALID_UNIT);
    }
}
class HexProcessingError extends (0, _web3ErrorBaseJs.InvalidValueError) {
    constructor(value){
        super(value, "can not be converted to hex");
        this.code = (0, _errorCodesJs.ERR_INVALID_HEX);
    }
}
class NibbleWidthError extends (0, _web3ErrorBaseJs.InvalidValueError) {
    constructor(value){
        super(value, "value greater than the nibble width");
        this.code = (0, _errorCodesJs.ERR_INVALID_NIBBLE_WIDTH);
    }
}
class InvalidTypeError extends (0, _web3ErrorBaseJs.InvalidValueError) {
    constructor(value){
        super(value, "invalid type, type not supported");
        this.code = (0, _errorCodesJs.ERR_INVALID_TYPE);
    }
}
class InvalidBooleanError extends (0, _web3ErrorBaseJs.InvalidValueError) {
    constructor(value){
        super(value, "not a valid boolean.");
        this.code = (0, _errorCodesJs.ERR_INVALID_BOOLEAN);
    }
}
class InvalidUnsignedIntegerError extends (0, _web3ErrorBaseJs.InvalidValueError) {
    constructor(value){
        super(value, "not a valid unsigned integer.");
        this.code = (0, _errorCodesJs.ERR_INVALID_UNSIGNED_INTEGER);
    }
}
class InvalidSizeError extends (0, _web3ErrorBaseJs.InvalidValueError) {
    constructor(value){
        super(value, "invalid size given.");
        this.code = (0, _errorCodesJs.ERR_INVALID_SIZE);
    }
}
class InvalidLargeValueError extends (0, _web3ErrorBaseJs.InvalidValueError) {
    constructor(value){
        super(value, "value is larger than size.");
        this.code = (0, _errorCodesJs.ERR_INVALID_LARGE_VALUE);
    }
}
class InvalidBlockError extends (0, _web3ErrorBaseJs.InvalidValueError) {
    constructor(value){
        super(value, "invalid string given");
        this.code = (0, _errorCodesJs.ERR_INVALID_BLOCK);
    }
}
class InvalidTypeAbiInputError extends (0, _web3ErrorBaseJs.InvalidValueError) {
    constructor(value){
        super(value, "components found but type is not tuple");
        this.code = (0, _errorCodesJs.ERR_INVALID_TYPE_ABI);
    }
}

},{"../error_codes.js":"fx0w5","../web3_error_base.js":"lObzJ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9jpAW":[function(require,module,exports) {
/*
This file is part of web3.js.

web3.js is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

web3.js is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ResponseError", ()=>ResponseError);
parcelHelpers.export(exports, "InvalidResponseError", ()=>InvalidResponseError);
var _web3ErrorBaseJs = require("../web3_error_base.js");
var _errorCodesJs = require("../error_codes.js");
// To avoid circular package dependency, copied to code here. If you update this please update same function in `json_rpc.ts`
const isResponseWithError = (response)=>!Array.isArray(response) && response.jsonrpc === "2.0" && !!response && // eslint-disable-next-line no-null/no-null
    (response.result === undefined || response.result === null) && // JSON RPC consider "null" as valid response
    "error" in response && (typeof response.id === "number" || typeof response.id === "string");
const buildErrorMessage = (response)=>isResponseWithError(response) ? response.error.message : "";
class ResponseError extends (0, _web3ErrorBaseJs.BaseWeb3Error) {
    constructor(response, message, request){
        var _a;
        super(message !== null && message !== void 0 ? message : `Returned error: ${Array.isArray(response) ? response.map((r)=>buildErrorMessage(r)).join(",") : buildErrorMessage(response)}`);
        this.code = (0, _errorCodesJs.ERR_RESPONSE);
        if (!message) this.data = Array.isArray(response) ? response.map((r)=>{
            var _a;
            return (_a = r.error) === null || _a === void 0 ? void 0 : _a.data;
        }) : (_a = response === null || response === void 0 ? void 0 : response.error) === null || _a === void 0 ? void 0 : _a.data;
        this.request = request;
        let errorOrErrors;
        if (`error` in response) errorOrErrors = response.error;
        else if (response instanceof Array) errorOrErrors = response.map((r)=>r.error);
        this.innerError = errorOrErrors;
    }
    toJSON() {
        return Object.assign(Object.assign({}, super.toJSON()), {
            data: this.data,
            request: this.request
        });
    }
}
class InvalidResponseError extends ResponseError {
    constructor(result, request){
        super(result, undefined, request);
        this.code = (0, _errorCodesJs.ERR_INVALID_RESPONSE);
        let errorOrErrors;
        if (`error` in result) errorOrErrors = result.error;
        else if (result instanceof Array) errorOrErrors = result.map((r)=>r.error);
        this.innerError = errorOrErrors;
    }
}

},{"../web3_error_base.js":"lObzJ","../error_codes.js":"fx0w5","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bXNjq":[function(require,module,exports) {
/*
This file is part of web3.js.

web3.js is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

web3.js is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/ /* eslint-disable max-classes-per-file */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ConfigHardforkMismatchError", ()=>ConfigHardforkMismatchError);
parcelHelpers.export(exports, "ConfigChainMismatchError", ()=>ConfigChainMismatchError);
var _web3ErrorBaseJs = require("../web3_error_base.js");
var _errorCodesJs = require("../error_codes.js");
class ConfigHardforkMismatchError extends (0, _web3ErrorBaseJs.BaseWeb3Error) {
    constructor(defaultHardfork, commonHardFork){
        super(`Web3Config hardfork doesnt match in defaultHardfork ${defaultHardfork} and common.hardfork ${commonHardFork}`);
        this.code = (0, _errorCodesJs.ERR_CORE_HARDFORK_MISMATCH);
    }
}
class ConfigChainMismatchError extends (0, _web3ErrorBaseJs.BaseWeb3Error) {
    constructor(defaultHardfork, commonHardFork){
        super(`Web3Config chain doesnt match in defaultHardfork ${defaultHardfork} and common.hardfork ${commonHardFork}`);
        this.code = (0, _errorCodesJs.ERR_CORE_HARDFORK_MISMATCH);
    }
}

},{"../web3_error_base.js":"lObzJ","../error_codes.js":"fx0w5","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"iOUOr":[function(require,module,exports) {
/*
This file is part of web3.js.

web3.js is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

web3.js is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "RpcError", ()=>RpcError);
parcelHelpers.export(exports, "EIP1193ProviderRpcError", ()=>EIP1193ProviderRpcError);
parcelHelpers.export(exports, "ParseError", ()=>ParseError);
parcelHelpers.export(exports, "InvalidRequestError", ()=>InvalidRequestError);
parcelHelpers.export(exports, "MethodNotFoundError", ()=>MethodNotFoundError);
parcelHelpers.export(exports, "InvalidParamsError", ()=>InvalidParamsError);
parcelHelpers.export(exports, "InternalError", ()=>InternalError);
parcelHelpers.export(exports, "InvalidInputError", ()=>InvalidInputError);
parcelHelpers.export(exports, "MethodNotSupported", ()=>MethodNotSupported);
parcelHelpers.export(exports, "ResourceUnavailableError", ()=>ResourceUnavailableError);
parcelHelpers.export(exports, "ResourcesNotFoundError", ()=>ResourcesNotFoundError);
parcelHelpers.export(exports, "VersionNotSupportedError", ()=>VersionNotSupportedError);
parcelHelpers.export(exports, "TransactionRejectedError", ()=>TransactionRejectedError);
parcelHelpers.export(exports, "LimitExceededError", ()=>LimitExceededError);
parcelHelpers.export(exports, "rpcErrorsMap", ()=>rpcErrorsMap);
var _web3ErrorBaseJs = require("../web3_error_base.js");
var _errorCodesJs = require("../error_codes.js");
var _rpcErrorMessagesJs = require("./rpc_error_messages.js");
class RpcError extends (0, _web3ErrorBaseJs.BaseWeb3Error) {
    constructor(rpcError, message){
        super(message !== null && message !== void 0 ? message : (0, _rpcErrorMessagesJs.genericRpcErrorMessageTemplate).replace("*code*", rpcError.error.code.toString()));
        this.code = rpcError.error.code;
        this.id = rpcError.id;
        this.jsonrpc = rpcError.jsonrpc;
        this.jsonRpcError = rpcError.error;
    }
    toJSON() {
        return Object.assign(Object.assign({}, super.toJSON()), {
            error: this.jsonRpcError,
            id: this.id,
            jsonRpc: this.jsonrpc
        });
    }
}
class EIP1193ProviderRpcError extends (0, _web3ErrorBaseJs.BaseWeb3Error) {
    constructor(code, data){
        var _a, _b, _c, _d;
        if (!code) // this case should ideally not happen
        super();
        else if ((_a = (0, _rpcErrorMessagesJs.RpcErrorMessages)[code]) === null || _a === void 0 ? void 0 : _a.message) super((0, _rpcErrorMessagesJs.RpcErrorMessages)[code].message);
        else {
            // Retrieve the status code object for the given code from the table, by searching through the appropriate range
            const statusCodeRange = Object.keys((0, _rpcErrorMessagesJs.RpcErrorMessages)).find((statusCode)=>typeof statusCode === "string" && code >= parseInt(statusCode.split("-")[0], 10) && code <= parseInt(statusCode.split("-")[1], 10));
            super((_c = (_b = (0, _rpcErrorMessagesJs.RpcErrorMessages)[statusCodeRange !== null && statusCodeRange !== void 0 ? statusCodeRange : ""]) === null || _b === void 0 ? void 0 : _b.message) !== null && _c !== void 0 ? _c : (0, _rpcErrorMessagesJs.genericRpcErrorMessageTemplate).replace("*code*", (_d = code === null || code === void 0 ? void 0 : code.toString()) !== null && _d !== void 0 ? _d : '""'));
        }
        this.code = code;
        this.data = data;
    }
}
class ParseError extends RpcError {
    constructor(rpcError){
        super(rpcError, (0, _rpcErrorMessagesJs.RpcErrorMessages)[0, _errorCodesJs.ERR_RPC_INVALID_JSON].message);
        this.code = (0, _errorCodesJs.ERR_RPC_INVALID_JSON);
    }
}
class InvalidRequestError extends RpcError {
    constructor(rpcError){
        super(rpcError, (0, _rpcErrorMessagesJs.RpcErrorMessages)[0, _errorCodesJs.ERR_RPC_INVALID_REQUEST].message);
        this.code = (0, _errorCodesJs.ERR_RPC_INVALID_REQUEST);
    }
}
class MethodNotFoundError extends RpcError {
    constructor(rpcError){
        super(rpcError, (0, _rpcErrorMessagesJs.RpcErrorMessages)[0, _errorCodesJs.ERR_RPC_INVALID_METHOD].message);
        this.code = (0, _errorCodesJs.ERR_RPC_INVALID_METHOD);
    }
}
class InvalidParamsError extends RpcError {
    constructor(rpcError){
        super(rpcError, (0, _rpcErrorMessagesJs.RpcErrorMessages)[0, _errorCodesJs.ERR_RPC_INVALID_PARAMS].message);
        this.code = (0, _errorCodesJs.ERR_RPC_INVALID_PARAMS);
    }
}
class InternalError extends RpcError {
    constructor(rpcError){
        super(rpcError, (0, _rpcErrorMessagesJs.RpcErrorMessages)[0, _errorCodesJs.ERR_RPC_INTERNAL_ERROR].message);
        this.code = (0, _errorCodesJs.ERR_RPC_INTERNAL_ERROR);
    }
}
class InvalidInputError extends RpcError {
    constructor(rpcError){
        super(rpcError, (0, _rpcErrorMessagesJs.RpcErrorMessages)[0, _errorCodesJs.ERR_RPC_INVALID_INPUT].message);
        this.code = (0, _errorCodesJs.ERR_RPC_INVALID_INPUT);
    }
}
class MethodNotSupported extends RpcError {
    constructor(rpcError){
        super(rpcError, (0, _rpcErrorMessagesJs.RpcErrorMessages)[0, _errorCodesJs.ERR_RPC_UNSUPPORTED_METHOD].message);
        this.code = (0, _errorCodesJs.ERR_RPC_UNSUPPORTED_METHOD);
    }
}
class ResourceUnavailableError extends RpcError {
    constructor(rpcError){
        super(rpcError, (0, _rpcErrorMessagesJs.RpcErrorMessages)[0, _errorCodesJs.ERR_RPC_UNAVAILABLE_RESOURCE].message);
        this.code = (0, _errorCodesJs.ERR_RPC_UNAVAILABLE_RESOURCE);
    }
}
class ResourcesNotFoundError extends RpcError {
    constructor(rpcError){
        super(rpcError, (0, _rpcErrorMessagesJs.RpcErrorMessages)[0, _errorCodesJs.ERR_RPC_MISSING_RESOURCE].message);
        this.code = (0, _errorCodesJs.ERR_RPC_MISSING_RESOURCE);
    }
}
class VersionNotSupportedError extends RpcError {
    constructor(rpcError){
        super(rpcError, (0, _rpcErrorMessagesJs.RpcErrorMessages)[0, _errorCodesJs.ERR_RPC_NOT_SUPPORTED].message);
        this.code = (0, _errorCodesJs.ERR_RPC_NOT_SUPPORTED);
    }
}
class TransactionRejectedError extends RpcError {
    constructor(rpcError){
        super(rpcError, (0, _rpcErrorMessagesJs.RpcErrorMessages)[0, _errorCodesJs.ERR_RPC_TRANSACTION_REJECTED].message);
        this.code = (0, _errorCodesJs.ERR_RPC_TRANSACTION_REJECTED);
    }
}
class LimitExceededError extends RpcError {
    constructor(rpcError){
        super(rpcError, (0, _rpcErrorMessagesJs.RpcErrorMessages)[0, _errorCodesJs.ERR_RPC_LIMIT_EXCEEDED].message);
        this.code = (0, _errorCodesJs.ERR_RPC_LIMIT_EXCEEDED);
    }
}
const rpcErrorsMap = new Map();
rpcErrorsMap.set((0, _errorCodesJs.ERR_RPC_INVALID_JSON), {
    error: ParseError
});
rpcErrorsMap.set((0, _errorCodesJs.ERR_RPC_INVALID_REQUEST), {
    error: InvalidRequestError
});
rpcErrorsMap.set((0, _errorCodesJs.ERR_RPC_INVALID_METHOD), {
    error: MethodNotFoundError
});
rpcErrorsMap.set((0, _errorCodesJs.ERR_RPC_INVALID_PARAMS), {
    error: InvalidParamsError
});
rpcErrorsMap.set((0, _errorCodesJs.ERR_RPC_INTERNAL_ERROR), {
    error: InternalError
});
rpcErrorsMap.set((0, _errorCodesJs.ERR_RPC_INVALID_INPUT), {
    error: InvalidInputError
});
rpcErrorsMap.set((0, _errorCodesJs.ERR_RPC_UNSUPPORTED_METHOD), {
    error: MethodNotSupported
});
rpcErrorsMap.set((0, _errorCodesJs.ERR_RPC_UNAVAILABLE_RESOURCE), {
    error: ResourceUnavailableError
});
rpcErrorsMap.set((0, _errorCodesJs.ERR_RPC_TRANSACTION_REJECTED), {
    error: TransactionRejectedError
});
rpcErrorsMap.set((0, _errorCodesJs.ERR_RPC_MISSING_RESOURCE), {
    error: ResourcesNotFoundError
});
rpcErrorsMap.set((0, _errorCodesJs.ERR_RPC_NOT_SUPPORTED), {
    error: VersionNotSupportedError
});
rpcErrorsMap.set((0, _errorCodesJs.ERR_RPC_LIMIT_EXCEEDED), {
    error: LimitExceededError
});

},{"../web3_error_base.js":"lObzJ","../error_codes.js":"fx0w5","./rpc_error_messages.js":"9H59W","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9H59W":[function(require,module,exports) {
/*
This file is part of web3.js.

web3.js is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

web3.js is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "genericRpcErrorMessageTemplate", ()=>genericRpcErrorMessageTemplate);
parcelHelpers.export(exports, "RpcErrorMessages", ()=>RpcErrorMessages);
var _errorCodesJs = require("../error_codes.js");
const genericRpcErrorMessageTemplate = "An Rpc error has occured with a code of *code*";
const RpcErrorMessages = {
    //  EIP-1474 & JSON RPC 2.0
    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-1474.md
    [(0, _errorCodesJs.ERR_RPC_INVALID_JSON)]: {
        message: "Parse error",
        description: "Invalid JSON"
    },
    [(0, _errorCodesJs.ERR_RPC_INVALID_REQUEST)]: {
        message: "Invalid request",
        description: "JSON is not a valid request object	"
    },
    [(0, _errorCodesJs.ERR_RPC_INVALID_METHOD)]: {
        message: "Method not found",
        description: "Method does not exist	"
    },
    [(0, _errorCodesJs.ERR_RPC_INVALID_PARAMS)]: {
        message: "Invalid params",
        description: "Invalid method parameters"
    },
    [(0, _errorCodesJs.ERR_RPC_INTERNAL_ERROR)]: {
        message: "Internal error",
        description: "Internal JSON-RPC error"
    },
    [(0, _errorCodesJs.ERR_RPC_INVALID_INPUT)]: {
        message: "Invalid input",
        description: "Missing or invalid parameters"
    },
    [(0, _errorCodesJs.ERR_RPC_MISSING_RESOURCE)]: {
        message: "Resource not found",
        description: "Requested resource not found"
    },
    [(0, _errorCodesJs.ERR_RPC_UNAVAILABLE_RESOURCE)]: {
        message: "Resource unavailable",
        description: "Requested resource not available"
    },
    [(0, _errorCodesJs.ERR_RPC_TRANSACTION_REJECTED)]: {
        message: "Transaction rejected",
        description: "Transaction creation failed"
    },
    [(0, _errorCodesJs.ERR_RPC_UNSUPPORTED_METHOD)]: {
        message: "Method not supported",
        description: "Method is not implemented"
    },
    [(0, _errorCodesJs.ERR_RPC_LIMIT_EXCEEDED)]: {
        message: "Limit exceeded",
        description: "Request exceeds defined limit"
    },
    [(0, _errorCodesJs.ERR_RPC_NOT_SUPPORTED)]: {
        message: "JSON-RPC version not supported",
        description: "Version of JSON-RPC protocol is not supported"
    },
    // EIP-1193
    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-1193.md#provider-errors
    [(0, _errorCodesJs.JSONRPC_ERR_REJECTED_REQUEST)]: {
        name: "User Rejected Request",
        message: "The user rejected the request."
    },
    [(0, _errorCodesJs.JSONRPC_ERR_UNAUTHORIZED)]: {
        name: "Unauthorized",
        message: "The requested method and/or account has not been authorized by the user."
    },
    [(0, _errorCodesJs.JSONRPC_ERR_UNSUPPORTED_METHOD)]: {
        name: "Unsupported Method",
        message: "The Provider does not support the requested method."
    },
    [(0, _errorCodesJs.JSONRPC_ERR_DISCONNECTED)]: {
        name: "Disconnected",
        message: "The Provider is disconnected from all chains."
    },
    [(0, _errorCodesJs.JSONRPC_ERR_CHAIN_DISCONNECTED)]: {
        name: "Chain Disconnected",
        message: "The Provider is not connected to the requested chain."
    },
    // EIP-1193 - CloseEvent
    // https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent/code
    "0-999": {
        name: "",
        message: "Not used."
    },
    1000: {
        name: "Normal Closure",
        message: "The connection successfully completed the purpose for which it was created."
    },
    1001: {
        name: "Going Away",
        message: "The endpoint is going away, either because of a server failure or because the browser is navigating away from the page that opened the connection."
    },
    1002: {
        name: "Protocol error",
        message: "The endpoint is terminating the connection due to a protocol error."
    },
    1003: {
        name: "Unsupported Data",
        message: "The connection is being terminated because the endpoint received data of a type it cannot accept. (For example, a text-only endpoint received binary data.)"
    },
    1004: {
        name: "Reserved",
        message: "Reserved. A meaning might be defined in the future."
    },
    1005: {
        name: "No Status Rcvd",
        message: "Reserved. Indicates that no status code was provided even though one was expected."
    },
    1006: {
        name: "Abnormal Closure",
        message: "Reserved. Indicates that a connection was closed abnormally (that is, with no close frame being sent) when a status code is expected."
    },
    1007: {
        name: "Invalid frame payload data",
        message: "The endpoint is terminating the connection because a message was received that contained inconsistent data (e.g., non-UTF-8 data within a text message)."
    },
    1008: {
        name: "Policy Violation",
        message: "The endpoint is terminating the connection because it received a message that violates its policy. This is a generic status code, used when codes 1003 and 1009 are not suitable."
    },
    1009: {
        name: "Message Too Big",
        message: "The endpoint is terminating the connection because a data frame was received that is too large."
    },
    1010: {
        name: "Mandatory Ext.",
        message: "The client is terminating the connection because it expected the server to negotiate one or more extension, but the server didn't."
    },
    1011: {
        name: "Internal Error",
        message: "The server is terminating the connection because it encountered an unexpected condition that prevented it from fulfilling the request."
    },
    1012: {
        name: "Service Restart",
        message: "The server is terminating the connection because it is restarting."
    },
    1013: {
        name: "Try Again Later",
        message: "The server is terminating the connection due to a temporary condition, e.g. it is overloaded and is casting off some of its clients."
    },
    1014: {
        name: "Bad Gateway",
        message: "The server was acting as a gateway or proxy and received an invalid response from the upstream server. This is similar to 502 HTTP Status Code."
    },
    1015: {
        name: "TLS handshake",
        message: "Reserved. Indicates that the connection was closed due to a failure to perform a TLS handshake (e.g., the server certificate can't be verified)."
    },
    "1016-2999": {
        name: "",
        message: "For definition by future revisions of the WebSocket Protocol specification, and for definition by extension specifications."
    },
    "3000-3999": {
        name: "",
        message: "For use by libraries, frameworks, and applications. These status codes are registered directly with IANA. The interpretation of these codes is undefined by the WebSocket protocol."
    },
    "4000-4999": {
        name: "",
        message: "For private use, and thus can't be registered. Such codes can be used by prior agreements between WebSocket applications. The interpretation of these codes is undefined by the WebSocket protocol."
    }
};

},{"../error_codes.js":"fx0w5","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"iVGyh":[function(require,module,exports) {
/*
This file is part of web3.js.

web3.js is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

web3.js is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "SchemaFormatError", ()=>SchemaFormatError);
var _errorCodesJs = require("../error_codes.js");
var _web3ErrorBaseJs = require("../web3_error_base.js");
class SchemaFormatError extends (0, _web3ErrorBaseJs.BaseWeb3Error) {
    constructor(type){
        super(`Format for the type ${type} is unsupported`);
        this.type = type;
        this.code = (0, _errorCodesJs.ERR_SCHEMA_FORMAT);
    }
    toJSON() {
        return Object.assign(Object.assign({}, super.toJSON()), {
            type: this.type
        });
    }
}

},{"../error_codes.js":"fx0w5","../web3_error_base.js":"lObzJ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8WsWI":[function(require,module,exports) {
/*
This file is part of web3.js.

web3.js is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

web3.js is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "jsonRpc", ()=>_jsonRpcJs);
var _convertersJs = require("./converters.js");
parcelHelpers.exportAll(_convertersJs, exports);
var _eventEmitterJs = require("./event_emitter.js");
parcelHelpers.exportAll(_eventEmitterJs, exports);
var _validationJs = require("./validation.js");
parcelHelpers.exportAll(_validationJs, exports);
var _formatterJs = require("./formatter.js");
parcelHelpers.exportAll(_formatterJs, exports);
var _hashJs = require("./hash.js");
parcelHelpers.exportAll(_hashJs, exports);
var _randomJs = require("./random.js");
parcelHelpers.exportAll(_randomJs, exports);
var _stringManipulationJs = require("./string_manipulation.js");
parcelHelpers.exportAll(_stringManipulationJs, exports);
var _objectsJs = require("./objects.js");
parcelHelpers.exportAll(_objectsJs, exports);
var _promiseHelpersJs = require("./promise_helpers.js");
parcelHelpers.exportAll(_promiseHelpersJs, exports);
var _jsonRpcJs = require("./json_rpc.js");
parcelHelpers.exportAll(_jsonRpcJs, exports);
var _web3DeferredPromiseJs = require("./web3_deferred_promise.js");
parcelHelpers.exportAll(_web3DeferredPromiseJs, exports);
var _chunkResponseParserJs = require("./chunk_response_parser.js");
parcelHelpers.exportAll(_chunkResponseParserJs, exports);
var _uuidJs = require("./uuid.js");
parcelHelpers.exportAll(_uuidJs, exports);
var _web3Eip1193ProviderJs = require("./web3_eip1193_provider.js");
parcelHelpers.exportAll(_web3Eip1193ProviderJs, exports);
var _socketProviderJs = require("./socket_provider.js");
parcelHelpers.exportAll(_socketProviderJs, exports);
var _uint8ArrayJs = require("./uint8array.js");
parcelHelpers.exportAll(_uint8ArrayJs, exports);

},{"./converters.js":"cAcnb","./event_emitter.js":"erJkq","./validation.js":"fIuWC","./formatter.js":"c7J3D","./hash.js":"jzvcl","./random.js":"hHFaB","./string_manipulation.js":"bbM94","./objects.js":"2BdUa","./promise_helpers.js":"kP4Ha","./json_rpc.js":"3FJjW","./web3_deferred_promise.js":"6iZz7","./chunk_response_parser.js":"lvzz5","./uuid.js":"6YJu7","./web3_eip1193_provider.js":"dMHzk","./socket_provider.js":"8C0xR","./uint8array.js":"kTJXO","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cAcnb":[function(require,module,exports) {
/*
This file is part of web3.js.

web3.js is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

web3.js is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/ /**
 * @module Utils
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ethUnitMap", ()=>ethUnitMap);
parcelHelpers.export(exports, "bytesToUint8Array", ()=>bytesToUint8Array);
parcelHelpers.export(exports, "bytesToHex", ()=>bytesToHex);
parcelHelpers.export(exports, "hexToBytes", ()=>hexToBytes);
parcelHelpers.export(exports, "hexToNumber", ()=>hexToNumber);
parcelHelpers.export(exports, "toDecimal", ()=>toDecimal);
parcelHelpers.export(exports, "numberToHex", ()=>numberToHex);
parcelHelpers.export(exports, "fromDecimal", ()=>fromDecimal);
parcelHelpers.export(exports, "hexToNumberString", ()=>hexToNumberString);
parcelHelpers.export(exports, "utf8ToHex", ()=>utf8ToHex);
parcelHelpers.export(exports, "fromUtf8", ()=>fromUtf8);
parcelHelpers.export(exports, "stringToHex", ()=>stringToHex);
parcelHelpers.export(exports, "hexToUtf8", ()=>hexToUtf8);
parcelHelpers.export(exports, "toUtf8", ()=>toUtf8);
parcelHelpers.export(exports, "utf8ToBytes", ()=>utf8ToBytes);
parcelHelpers.export(exports, "hexToString", ()=>hexToString);
parcelHelpers.export(exports, "asciiToHex", ()=>asciiToHex);
parcelHelpers.export(exports, "fromAscii", ()=>fromAscii);
parcelHelpers.export(exports, "hexToAscii", ()=>hexToAscii);
parcelHelpers.export(exports, "toAscii", ()=>toAscii);
parcelHelpers.export(exports, "toHex", ()=>toHex);
parcelHelpers.export(exports, "toNumber", ()=>toNumber);
parcelHelpers.export(exports, "toBigInt", ()=>toBigInt);
parcelHelpers.export(exports, "fromWei", ()=>fromWei);
parcelHelpers.export(exports, "toWei", ()=>toWei);
parcelHelpers.export(exports, "toChecksumAddress", ()=>toChecksumAddress);
parcelHelpers.export(exports, "toBool", ()=>toBool);
var _keccakJs = require("ethereum-cryptography/keccak.js");
var _utilsJs = require("ethereum-cryptography/utils.js");
var _web3Validator = require("web3-validator");
var _web3Errors = require("web3-errors");
const ethUnitMap = {
    noether: BigInt(0),
    wei: BigInt(1),
    kwei: BigInt(1000),
    Kwei: BigInt(1000),
    babbage: BigInt(1000),
    femtoether: BigInt(1000),
    mwei: BigInt(1000000),
    Mwei: BigInt(1000000),
    lovelace: BigInt(1000000),
    picoether: BigInt(1000000),
    gwei: BigInt(1000000000),
    Gwei: BigInt(1000000000),
    shannon: BigInt(1000000000),
    nanoether: BigInt(1000000000),
    nano: BigInt(1000000000),
    szabo: BigInt(1000000000000),
    microether: BigInt(1000000000000),
    micro: BigInt(1000000000000),
    finney: BigInt(1000000000000000),
    milliether: BigInt(1000000000000000),
    milli: BigInt(1000000000000000),
    ether: BigInt("1000000000000000000"),
    kether: BigInt("1000000000000000000000"),
    grand: BigInt("1000000000000000000000"),
    mether: BigInt("1000000000000000000000000"),
    gether: BigInt("1000000000000000000000000000"),
    tether: BigInt("1000000000000000000000000000000")
};
const bytesToUint8Array = (data)=>{
    (0, _web3Validator.validator).validate([
        "bytes"
    ], [
        data
    ]);
    if (data instanceof Uint8Array) return data;
    if (Array.isArray(data)) return new Uint8Array(data);
    if (typeof data === "string") return (0, _web3Validator.utils).hexToUint8Array(data);
    throw new (0, _web3Errors.InvalidBytesError)(data);
};
/**
 * @internal
 */ const { uint8ArrayToHexString } = (0, _web3Validator.utils);
const bytesToHex = (bytes)=>uint8ArrayToHexString(bytesToUint8Array(bytes));
const hexToBytes = (bytes)=>{
    if (typeof bytes === "string" && bytes.slice(0, 2).toLowerCase() !== "0x") return bytesToUint8Array(`0x${bytes}`);
    return bytesToUint8Array(bytes);
};
const hexToNumber = (value)=>{
    (0, _web3Validator.validator).validate([
        "hex"
    ], [
        value
    ]);
    // To avoid duplicate code and circular dependency we will
    // use `hexToNumber` implementation from `web3-validator`
    return (0, _web3Validator.utils).hexToNumber(value);
};
const toDecimal = hexToNumber;
const numberToHex = (value, hexstrict)=>{
    if (typeof value !== "bigint") (0, _web3Validator.validator).validate([
        "int"
    ], [
        value
    ]);
    // To avoid duplicate code and circular dependency we will
    // use `numberToHex` implementation from `web3-validator`
    let updatedValue = (0, _web3Validator.utils).numberToHex(value);
    if (hexstrict) {
        if (!updatedValue.startsWith("-") && updatedValue.length % 2 === 1) // To avoid duplicate a circular dependancy we will not be using the padLeft method
        updatedValue = "0x0".concat(updatedValue.slice(2));
        else if (updatedValue.length % 2 === 0 && updatedValue.startsWith("-")) updatedValue = "-0x0".concat(updatedValue.slice(3));
    }
    return updatedValue;
};
const fromDecimal = numberToHex;
const hexToNumberString = (data)=>hexToNumber(data).toString();
const utf8ToHex = (str)=>{
    (0, _web3Validator.validator).validate([
        "string"
    ], [
        str
    ]);
    // To be compatible with 1.x trim null character
    // eslint-disable-next-line no-control-regex
    let strWithoutNullCharacter = str.replace(/^(?:\u0000)/, "");
    // eslint-disable-next-line no-control-regex
    strWithoutNullCharacter = strWithoutNullCharacter.replace(/(?:\u0000)$/, "");
    return bytesToHex(new TextEncoder().encode(strWithoutNullCharacter));
};
const fromUtf8 = utf8ToHex;
const stringToHex = utf8ToHex;
const hexToUtf8 = (str)=>(0, _utilsJs.bytesToUtf8)(hexToBytes(str));
const toUtf8 = (input)=>{
    if (typeof input === "string") return hexToUtf8(input);
    (0, _web3Validator.validator).validate([
        "bytes"
    ], [
        input
    ]);
    return (0, _utilsJs.bytesToUtf8)(input);
};
const utf8ToBytes = (0, _utilsJs.utf8ToBytes);
const hexToString = hexToUtf8;
const asciiToHex = (str)=>{
    (0, _web3Validator.validator).validate([
        "string"
    ], [
        str
    ]);
    let hexString = "";
    for(let i = 0; i < str.length; i += 1){
        const hexCharCode = str.charCodeAt(i).toString(16);
        // might need a leading 0
        hexString += hexCharCode.length % 2 !== 0 ? `0${hexCharCode}` : hexCharCode;
    }
    return `0x${hexString}`;
};
const fromAscii = asciiToHex;
const hexToAscii = (str)=>{
    const decoder = new TextDecoder("ascii");
    return decoder.decode(hexToBytes(str));
};
const toAscii = hexToAscii;
const toHex = (value, returnType)=>{
    if (typeof value === "string" && (0, _web3Validator.isAddress)(value)) return returnType ? "address" : `0x${value.toLowerCase().replace(/^0x/i, "")}`;
    if (typeof value === "boolean") // eslint-disable-next-line no-nested-ternary
    return returnType ? "bool" : value ? "0x01" : "0x00";
    if (typeof value === "number") // eslint-disable-next-line no-nested-ternary
    return returnType ? value < 0 ? "int256" : "uint256" : numberToHex(value);
    if (typeof value === "bigint") return returnType ? "bigint" : numberToHex(value);
    if (typeof value === "object" && !!value) return returnType ? "string" : utf8ToHex(JSON.stringify(value));
    if (typeof value === "string") {
        if (value.startsWith("-0x") || value.startsWith("-0X")) return returnType ? "int256" : numberToHex(value);
        if ((0, _web3Validator.isHexStrict)(value)) return returnType ? "bytes" : value;
        if ((0, _web3Validator.isHex)(value) && !(0, _web3Validator.isInt)(value)) return returnType ? "bytes" : `0x${value}`;
        if (!Number.isFinite(value)) return returnType ? "string" : utf8ToHex(value);
    }
    throw new (0, _web3Errors.HexProcessingError)(value);
};
const toNumber = (value)=>{
    if (typeof value === "number") return value;
    if (typeof value === "bigint") return value >= Number.MIN_SAFE_INTEGER && value <= Number.MAX_SAFE_INTEGER ? Number(value) : value;
    if (typeof value === "string" && (0, _web3Validator.isHexStrict)(value)) return hexToNumber(value);
    try {
        return toNumber(BigInt(value));
    } catch (_a) {
        throw new (0, _web3Errors.InvalidNumberError)(value);
    }
};
const toBigInt = (value)=>{
    if (typeof value === "number") return BigInt(value);
    if (typeof value === "bigint") return value;
    // isHex passes for dec, too
    if (typeof value === "string" && (0, _web3Validator.isHex)(value)) {
        if (value.startsWith("-")) return -BigInt(value.substring(1));
        return BigInt(value);
    }
    throw new (0, _web3Errors.InvalidNumberError)(value);
};
const fromWei = (number, unit)=>{
    const denomination = ethUnitMap[unit];
    if (!denomination) throw new (0, _web3Errors.InvalidUnitError)(unit);
    // value in wei would always be integer
    // 13456789, 1234
    const value = String(toNumber(number));
    // count number of zeros in denomination
    // 1000000 -> 6
    const numberOfZerosInDenomination = denomination.toString().length - 1;
    if (numberOfZerosInDenomination <= 0) return value.toString();
    // pad the value with required zeros
    // 13456789 -> 13456789, 1234 -> 001234
    const zeroPaddedValue = value.padStart(numberOfZerosInDenomination, "0");
    // get the integer part of value by counting number of zeros from start
    // 13456789 -> '13'
    // 001234 -> ''
    const integer = zeroPaddedValue.slice(0, -numberOfZerosInDenomination);
    // get the fraction part of value by counting number of zeros backward
    // 13456789 -> '456789'
    // 001234 -> '001234'
    const fraction = zeroPaddedValue.slice(-numberOfZerosInDenomination).replace(/\.?0+$/, "");
    if (integer === "") return `0.${fraction}`;
    if (fraction === "") return integer;
    return `${integer}.${fraction}`;
};
const toWei = (number, unit)=>{
    (0, _web3Validator.validator).validate([
        "number"
    ], [
        number
    ]);
    const denomination = ethUnitMap[unit];
    if (!denomination) throw new (0, _web3Errors.InvalidUnitError)(unit);
    // if value is decimal e.g. 24.56 extract `integer` and `fraction` part
    // to avoid `fraction` to be null use `concat` with empty string
    const [integer, fraction] = String(typeof number === "string" && !(0, _web3Validator.isHexStrict)(number) ? number : toNumber(number)).split(".").concat("");
    // join the value removing `.` from
    // 24.56 -> 2456
    const value = BigInt(`${integer}${fraction}`);
    // multiply value with denomination
    // 2456 * 1000000 -> 2456000000
    const updatedValue = value * denomination;
    // count number of zeros in denomination
    const numberOfZerosInDenomination = denomination.toString().length - 1;
    // check which either `fraction` or `denomination` have lower number of zeros
    const decimals = Math.min(fraction.length, numberOfZerosInDenomination);
    if (decimals === 0) return updatedValue.toString();
    // Add zeros to make length equal to required decimal points
    // If string is larger than decimal points required then remove last zeros
    return updatedValue.toString().padStart(decimals, "0").slice(0, -decimals);
};
const toChecksumAddress = (address)=>{
    if (!(0, _web3Validator.isAddress)(address, false)) throw new (0, _web3Errors.InvalidAddressError)(address);
    const lowerCaseAddress = address.toLowerCase().replace(/^0x/i, "");
    const hash = (0, _web3Validator.utils).uint8ArrayToHexString((0, _keccakJs.keccak256)(utf8ToBytes(lowerCaseAddress)));
    if ((0, _web3Validator.isNullish)(hash) || hash === "0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470") return ""; // // EIP-1052 if hash is equal to c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470, keccak was given empty data
    let checksumAddress = "0x";
    const addressHash = hash.replace(/^0x/i, "");
    for(let i = 0; i < lowerCaseAddress.length; i += 1)// If ith character is 8 to f then make it uppercase
    if (parseInt(addressHash[i], 16) > 7) checksumAddress += lowerCaseAddress[i].toUpperCase();
    else checksumAddress += lowerCaseAddress[i];
    return checksumAddress;
};
const toBool = (value)=>{
    if (typeof value === "boolean") return value;
    if (typeof value === "number" && (value === 0 || value === 1)) return Boolean(value);
    if (typeof value === "bigint" && (value === BigInt(0) || value === BigInt(1))) return Boolean(value);
    if (typeof value === "string" && !(0, _web3Validator.isHexStrict)(value) && (value === "1" || value === "0" || value === "false" || value === "true")) {
        if (value === "true") return true;
        if (value === "false") return false;
        return Boolean(Number(value));
    }
    if (typeof value === "string" && (0, _web3Validator.isHexStrict)(value) && (value === "0x1" || value === "0x0")) return Boolean(toNumber(value));
    throw new (0, _web3Errors.InvalidBooleanError)(value);
};

},{"ethereum-cryptography/keccak.js":"5j5ih","ethereum-cryptography/utils.js":"l6KG0","web3-validator":"6HK71","web3-errors":"jDvsn","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5j5ih":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "keccak224", ()=>keccak224);
parcelHelpers.export(exports, "keccak256", ()=>keccak256);
parcelHelpers.export(exports, "keccak384", ()=>keccak384);
parcelHelpers.export(exports, "keccak512", ()=>keccak512);
var _sha3 = require("@noble/hashes/sha3");
var _utilsJs = require("./utils.js");
const keccak224 = (0, _utilsJs.wrapHash)((0, _sha3.keccak_224));
const keccak256 = (()=>{
    const k = (0, _utilsJs.wrapHash)((0, _sha3.keccak_256));
    k.create = (0, _sha3.keccak_256).create;
    return k;
})();
const keccak384 = (0, _utilsJs.wrapHash)((0, _sha3.keccak_384));
const keccak512 = (0, _utilsJs.wrapHash)((0, _sha3.keccak_512));

},{"@noble/hashes/sha3":"a4VX2","./utils.js":"l6KG0","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"a4VX2":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
// Same as keccakf1600, but allows to skip some rounds
parcelHelpers.export(exports, "keccakP", ()=>keccakP);
parcelHelpers.export(exports, "Keccak", ()=>Keccak);
parcelHelpers.export(exports, "sha3_224", ()=>sha3_224);
parcelHelpers.export(exports, "sha3_256", ()=>sha3_256);
parcelHelpers.export(exports, "sha3_384", ()=>sha3_384);
parcelHelpers.export(exports, "sha3_512", ()=>sha3_512);
parcelHelpers.export(exports, "keccak_224", ()=>keccak_224);
parcelHelpers.export(exports, "keccak_256", ()=>keccak_256);
parcelHelpers.export(exports, "keccak_384", ()=>keccak_384);
parcelHelpers.export(exports, "keccak_512", ()=>keccak_512);
parcelHelpers.export(exports, "shake128", ()=>shake128);
parcelHelpers.export(exports, "shake256", ()=>shake256);
var _assertJs = require("./_assert.js");
var _assertJsDefault = parcelHelpers.interopDefault(_assertJs);
var _u64Js = require("./_u64.js");
var _u64JsDefault = parcelHelpers.interopDefault(_u64Js);
var _utilsJs = require("./utils.js");
// Various per round constants calculations
const [SHA3_PI, SHA3_ROTL, _SHA3_IOTA] = [
    [],
    [],
    []
];
const _0n = BigInt(0);
const _1n = BigInt(1);
const _2n = BigInt(2);
const _7n = BigInt(7);
const _256n = BigInt(256);
const _0x71n = BigInt(0x71);
for(let round = 0, R = _1n, x = 1, y = 0; round < 24; round++){
    // Pi
    [x, y] = [
        y,
        (2 * x + 3 * y) % 5
    ];
    SHA3_PI.push(2 * (5 * y + x));
    // Rotational
    SHA3_ROTL.push((round + 1) * (round + 2) / 2 % 64);
    // Iota
    let t = _0n;
    for(let j = 0; j < 7; j++){
        R = (R << _1n ^ (R >> _7n) * _0x71n) % _256n;
        if (R & _2n) t ^= _1n << (_1n << BigInt(j)) - _1n;
    }
    _SHA3_IOTA.push(t);
}
const [SHA3_IOTA_H, SHA3_IOTA_L] = (0, _u64JsDefault.default).split(_SHA3_IOTA, true);
// Left rotation (without 0, 32, 64)
const rotlH = (h, l, s)=>s > 32 ? (0, _u64JsDefault.default).rotlBH(h, l, s) : (0, _u64JsDefault.default).rotlSH(h, l, s);
const rotlL = (h, l, s)=>s > 32 ? (0, _u64JsDefault.default).rotlBL(h, l, s) : (0, _u64JsDefault.default).rotlSL(h, l, s);
function keccakP(s, rounds = 24) {
    const B = new Uint32Array(10);
    // NOTE: all indices are x2 since we store state as u32 instead of u64 (bigints to slow in js)
    for(let round = 24 - rounds; round < 24; round++){
        // Theta θ
        for(let x = 0; x < 10; x++)B[x] = s[x] ^ s[x + 10] ^ s[x + 20] ^ s[x + 30] ^ s[x + 40];
        for(let x = 0; x < 10; x += 2){
            const idx1 = (x + 8) % 10;
            const idx0 = (x + 2) % 10;
            const B0 = B[idx0];
            const B1 = B[idx0 + 1];
            const Th = rotlH(B0, B1, 1) ^ B[idx1];
            const Tl = rotlL(B0, B1, 1) ^ B[idx1 + 1];
            for(let y = 0; y < 50; y += 10){
                s[x + y] ^= Th;
                s[x + y + 1] ^= Tl;
            }
        }
        // Rho (ρ) and Pi (π)
        let curH = s[2];
        let curL = s[3];
        for(let t = 0; t < 24; t++){
            const shift = SHA3_ROTL[t];
            const Th = rotlH(curH, curL, shift);
            const Tl = rotlL(curH, curL, shift);
            const PI = SHA3_PI[t];
            curH = s[PI];
            curL = s[PI + 1];
            s[PI] = Th;
            s[PI + 1] = Tl;
        }
        // Chi (χ)
        for(let y = 0; y < 50; y += 10){
            for(let x = 0; x < 10; x++)B[x] = s[y + x];
            for(let x = 0; x < 10; x++)s[y + x] ^= ~B[(x + 2) % 10] & B[(x + 4) % 10];
        }
        // Iota (ι)
        s[0] ^= SHA3_IOTA_H[round];
        s[1] ^= SHA3_IOTA_L[round];
    }
    B.fill(0);
}
class Keccak extends (0, _utilsJs.Hash) {
    // NOTE: we accept arguments in bytes instead of bits here.
    constructor(blockLen, suffix, outputLen, enableXOF = false, rounds = 24){
        super();
        this.blockLen = blockLen;
        this.suffix = suffix;
        this.outputLen = outputLen;
        this.enableXOF = enableXOF;
        this.rounds = rounds;
        this.pos = 0;
        this.posOut = 0;
        this.finished = false;
        this.destroyed = false;
        // Can be passed from user as dkLen
        (0, _assertJsDefault.default).number(outputLen);
        // 1600 = 5x5 matrix of 64bit.  1600 bits === 200 bytes
        if (0 >= this.blockLen || this.blockLen >= 200) throw new Error("Sha3 supports only keccak-f1600 function");
        this.state = new Uint8Array(200);
        this.state32 = (0, _utilsJs.u32)(this.state);
    }
    keccak() {
        keccakP(this.state32, this.rounds);
        this.posOut = 0;
        this.pos = 0;
    }
    update(data) {
        (0, _assertJsDefault.default).exists(this);
        const { blockLen, state } = this;
        data = (0, _utilsJs.toBytes)(data);
        const len = data.length;
        for(let pos = 0; pos < len;){
            const take = Math.min(blockLen - this.pos, len - pos);
            for(let i = 0; i < take; i++)state[this.pos++] ^= data[pos++];
            if (this.pos === blockLen) this.keccak();
        }
        return this;
    }
    finish() {
        if (this.finished) return;
        this.finished = true;
        const { state, suffix, pos, blockLen } = this;
        // Do the padding
        state[pos] ^= suffix;
        if ((suffix & 0x80) !== 0 && pos === blockLen - 1) this.keccak();
        state[blockLen - 1] ^= 0x80;
        this.keccak();
    }
    writeInto(out) {
        (0, _assertJsDefault.default).exists(this, false);
        (0, _assertJsDefault.default).bytes(out);
        this.finish();
        const bufferOut = this.state;
        const { blockLen } = this;
        for(let pos = 0, len = out.length; pos < len;){
            if (this.posOut >= blockLen) this.keccak();
            const take = Math.min(blockLen - this.posOut, len - pos);
            out.set(bufferOut.subarray(this.posOut, this.posOut + take), pos);
            this.posOut += take;
            pos += take;
        }
        return out;
    }
    xofInto(out) {
        // Sha3/Keccak usage with XOF is probably mistake, only SHAKE instances can do XOF
        if (!this.enableXOF) throw new Error("XOF is not possible for this instance");
        return this.writeInto(out);
    }
    xof(bytes) {
        (0, _assertJsDefault.default).number(bytes);
        return this.xofInto(new Uint8Array(bytes));
    }
    digestInto(out) {
        (0, _assertJsDefault.default).output(out, this);
        if (this.finished) throw new Error("digest() was already called");
        this.writeInto(out);
        this.destroy();
        return out;
    }
    digest() {
        return this.digestInto(new Uint8Array(this.outputLen));
    }
    destroy() {
        this.destroyed = true;
        this.state.fill(0);
    }
    _cloneInto(to) {
        const { blockLen, suffix, outputLen, rounds, enableXOF } = this;
        to || (to = new Keccak(blockLen, suffix, outputLen, enableXOF, rounds));
        to.state32.set(this.state32);
        to.pos = this.pos;
        to.posOut = this.posOut;
        to.finished = this.finished;
        to.rounds = rounds;
        // Suffix can change in cSHAKE
        to.suffix = suffix;
        to.outputLen = outputLen;
        to.enableXOF = enableXOF;
        to.destroyed = this.destroyed;
        return to;
    }
}
const gen = (suffix, blockLen, outputLen)=>(0, _utilsJs.wrapConstructor)(()=>new Keccak(blockLen, suffix, outputLen));
const sha3_224 = gen(0x06, 144, 28);
const sha3_256 = gen(0x06, 136, 32);
const sha3_384 = gen(0x06, 104, 48);
const sha3_512 = gen(0x06, 72, 64);
const keccak_224 = gen(0x01, 144, 28);
const keccak_256 = gen(0x01, 136, 32);
const keccak_384 = gen(0x01, 104, 48);
const keccak_512 = gen(0x01, 72, 64);
const genShake = (suffix, blockLen, outputLen)=>(0, _utilsJs.wrapXOFConstructorWithOpts)((opts = {})=>new Keccak(blockLen, suffix, opts.dkLen === undefined ? outputLen : opts.dkLen, true));
const shake128 = genShake(0x1f, 168, 16);
const shake256 = genShake(0x1f, 136, 32);

},{"./_assert.js":"5Bz9G","./_u64.js":"23WBG","./utils.js":"eYkBB","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5Bz9G":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "number", ()=>number);
parcelHelpers.export(exports, "bool", ()=>bool);
parcelHelpers.export(exports, "bytes", ()=>bytes);
parcelHelpers.export(exports, "hash", ()=>hash);
parcelHelpers.export(exports, "exists", ()=>exists);
parcelHelpers.export(exports, "output", ()=>output);
function number(n) {
    if (!Number.isSafeInteger(n) || n < 0) throw new Error(`Wrong positive integer: ${n}`);
}
function bool(b) {
    if (typeof b !== "boolean") throw new Error(`Expected boolean, not ${b}`);
}
function bytes(b, ...lengths) {
    if (!(b instanceof Uint8Array)) throw new Error("Expected Uint8Array");
    if (lengths.length > 0 && !lengths.includes(b.length)) throw new Error(`Expected Uint8Array of length ${lengths}, not of length=${b.length}`);
}
function hash(hash) {
    if (typeof hash !== "function" || typeof hash.create !== "function") throw new Error("Hash should be wrapped by utils.wrapConstructor");
    number(hash.outputLen);
    number(hash.blockLen);
}
function exists(instance, checkFinished = true) {
    if (instance.destroyed) throw new Error("Hash instance has been destroyed");
    if (checkFinished && instance.finished) throw new Error("Hash#digest() has already been called");
}
function output(out, instance) {
    bytes(out);
    const min = instance.outputLen;
    if (out.length < min) throw new Error(`digestInto() expects output buffer of length at least ${min}`);
}
const assert = {
    number,
    bool,
    bytes,
    hash,
    exists,
    output
};
exports.default = assert;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"23WBG":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
// We are not using BigUint64Array, because they are extremely slow as per 2022
parcelHelpers.export(exports, "fromBig", ()=>fromBig);
parcelHelpers.export(exports, "split", ()=>split);
parcelHelpers.export(exports, "toBig", ()=>toBig);
// JS uses 32-bit signed integers for bitwise operations which means we cannot
// simple take carry out of low bit sum by shift, we need to use division.
// Removing "export" has 5% perf penalty -_-
parcelHelpers.export(exports, "add", ()=>add);
const U32_MASK64 = BigInt(2 ** 32 - 1);
const _32n = BigInt(32);
function fromBig(n, le = false) {
    if (le) return {
        h: Number(n & U32_MASK64),
        l: Number(n >> _32n & U32_MASK64)
    };
    return {
        h: Number(n >> _32n & U32_MASK64) | 0,
        l: Number(n & U32_MASK64) | 0
    };
}
function split(lst, le = false) {
    let Ah = new Uint32Array(lst.length);
    let Al = new Uint32Array(lst.length);
    for(let i = 0; i < lst.length; i++){
        const { h, l } = fromBig(lst[i], le);
        [Ah[i], Al[i]] = [
            h,
            l
        ];
    }
    return [
        Ah,
        Al
    ];
}
const toBig = (h, l)=>BigInt(h >>> 0) << _32n | BigInt(l >>> 0);
// for Shift in [0, 32)
const shrSH = (h, l, s)=>h >>> s;
const shrSL = (h, l, s)=>h << 32 - s | l >>> s;
// Right rotate for Shift in [1, 32)
const rotrSH = (h, l, s)=>h >>> s | l << 32 - s;
const rotrSL = (h, l, s)=>h << 32 - s | l >>> s;
// Right rotate for Shift in (32, 64), NOTE: 32 is special case.
const rotrBH = (h, l, s)=>h << 64 - s | l >>> s - 32;
const rotrBL = (h, l, s)=>h >>> s - 32 | l << 64 - s;
// Right rotate for shift===32 (just swaps l&h)
const rotr32H = (h, l)=>l;
const rotr32L = (h, l)=>h;
// Left rotate for Shift in [1, 32)
const rotlSH = (h, l, s)=>h << s | l >>> 32 - s;
const rotlSL = (h, l, s)=>l << s | h >>> 32 - s;
// Left rotate for Shift in (32, 64), NOTE: 32 is special case.
const rotlBH = (h, l, s)=>l << s - 32 | h >>> 64 - s;
const rotlBL = (h, l, s)=>h << s - 32 | l >>> 64 - s;
function add(Ah, Al, Bh, Bl) {
    const l = (Al >>> 0) + (Bl >>> 0);
    return {
        h: Ah + Bh + (l / 2 ** 32 | 0) | 0,
        l: l | 0
    };
}
// Addition with more than 2 elements
const add3L = (Al, Bl, Cl)=>(Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);
const add3H = (low, Ah, Bh, Ch)=>Ah + Bh + Ch + (low / 2 ** 32 | 0) | 0;
const add4L = (Al, Bl, Cl, Dl)=>(Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);
const add4H = (low, Ah, Bh, Ch, Dh)=>Ah + Bh + Ch + Dh + (low / 2 ** 32 | 0) | 0;
const add5L = (Al, Bl, Cl, Dl, El)=>(Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);
const add5H = (low, Ah, Bh, Ch, Dh, Eh)=>Ah + Bh + Ch + Dh + Eh + (low / 2 ** 32 | 0) | 0;
// prettier-ignore
const u64 = {
    fromBig,
    split,
    toBig,
    shrSH,
    shrSL,
    rotrSH,
    rotrSL,
    rotrBH,
    rotrBL,
    rotr32H,
    rotr32L,
    rotlSH,
    rotlSL,
    rotlBH,
    rotlBL,
    add,
    add3L,
    add3H,
    add4L,
    add4H,
    add5H,
    add5L
};
exports.default = u64;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eYkBB":[function(require,module,exports) {
/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */ // We use WebCrypto aka globalThis.crypto, which exists in browsers and node.js 16+.
// node.js versions earlier than v19 don't declare it in global scope.
// For node.js, package.json#exports field mapping rewrites import
// from `crypto` to `cryptoNode`, which imports native module.
// Makes the utils un-importable in browsers without a bundler.
// Once node.js 18 is deprecated, we can just drop the import.
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "u8", ()=>u8);
parcelHelpers.export(exports, "u32", ()=>u32);
parcelHelpers.export(exports, "createView", ()=>createView);
parcelHelpers.export(exports, "rotr", ()=>rotr);
parcelHelpers.export(exports, "isLE", ()=>isLE);
/**
 * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'
 */ parcelHelpers.export(exports, "bytesToHex", ()=>bytesToHex);
/**
 * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])
 */ parcelHelpers.export(exports, "hexToBytes", ()=>hexToBytes);
parcelHelpers.export(exports, "nextTick", ()=>nextTick);
// Returns control to thread each 'tick' ms to avoid blocking
parcelHelpers.export(exports, "asyncLoop", ()=>asyncLoop);
/**
 * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])
 */ parcelHelpers.export(exports, "utf8ToBytes", ()=>utf8ToBytes);
/**
 * Normalizes (non-hex) string or Uint8Array to Uint8Array.
 * Warning: when Uint8Array is passed, it would NOT get copied.
 * Keep in mind for future mutable operations.
 */ parcelHelpers.export(exports, "toBytes", ()=>toBytes);
/**
 * Copies several Uint8Arrays into one.
 */ parcelHelpers.export(exports, "concatBytes", ()=>concatBytes);
// For runtime check if class implements interface
parcelHelpers.export(exports, "Hash", ()=>Hash);
parcelHelpers.export(exports, "checkOpts", ()=>checkOpts);
parcelHelpers.export(exports, "wrapConstructor", ()=>wrapConstructor);
parcelHelpers.export(exports, "wrapConstructorWithOpts", ()=>wrapConstructorWithOpts);
parcelHelpers.export(exports, "wrapXOFConstructorWithOpts", ()=>wrapXOFConstructorWithOpts);
/**
 * Secure PRNG. Uses `crypto.getRandomValues`, which defers to OS.
 */ parcelHelpers.export(exports, "randomBytes", ()=>randomBytes);
var _crypto = require("@noble/hashes/crypto");
const u8a = (a)=>a instanceof Uint8Array;
const u8 = (arr)=>new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);
const u32 = (arr)=>new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));
const createView = (arr)=>new DataView(arr.buffer, arr.byteOffset, arr.byteLength);
const rotr = (word, shift)=>word << 32 - shift | word >>> shift;
const isLE = new Uint8Array(new Uint32Array([
    0x11223344
]).buffer)[0] === 0x44;
if (!isLE) throw new Error("Non little-endian hardware is not supported");
const hexes = Array.from({
    length: 256
}, (v, i)=>i.toString(16).padStart(2, "0"));
function bytesToHex(bytes) {
    if (!u8a(bytes)) throw new Error("Uint8Array expected");
    // pre-caching improves the speed 6x
    let hex = "";
    for(let i = 0; i < bytes.length; i++)hex += hexes[bytes[i]];
    return hex;
}
function hexToBytes(hex) {
    if (typeof hex !== "string") throw new Error("hex string expected, got " + typeof hex);
    const len = hex.length;
    if (len % 2) throw new Error("padded hex string expected, got unpadded hex of length " + len);
    const array = new Uint8Array(len / 2);
    for(let i = 0; i < array.length; i++){
        const j = i * 2;
        const hexByte = hex.slice(j, j + 2);
        const byte = Number.parseInt(hexByte, 16);
        if (Number.isNaN(byte) || byte < 0) throw new Error("Invalid byte sequence");
        array[i] = byte;
    }
    return array;
}
const nextTick = async ()=>{};
async function asyncLoop(iters, tick, cb) {
    let ts = Date.now();
    for(let i = 0; i < iters; i++){
        cb(i);
        // Date.now() is not monotonic, so in case if clock goes backwards we return return control too
        const diff = Date.now() - ts;
        if (diff >= 0 && diff < tick) continue;
        await nextTick();
        ts += diff;
    }
}
function utf8ToBytes(str) {
    if (typeof str !== "string") throw new Error(`utf8ToBytes expected string, got ${typeof str}`);
    return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809
}
function toBytes(data) {
    if (typeof data === "string") data = utf8ToBytes(data);
    if (!u8a(data)) throw new Error(`expected Uint8Array, got ${typeof data}`);
    return data;
}
function concatBytes(...arrays) {
    const r = new Uint8Array(arrays.reduce((sum, a)=>sum + a.length, 0));
    let pad = 0; // walk through each item, ensure they have proper type
    arrays.forEach((a)=>{
        if (!u8a(a)) throw new Error("Uint8Array expected");
        r.set(a, pad);
        pad += a.length;
    });
    return r;
}
class Hash {
    // Safe version that clones internal state
    clone() {
        return this._cloneInto();
    }
}
// Check if object doens't have custom constructor (like Uint8Array/Array)
const isPlainObject = (obj)=>Object.prototype.toString.call(obj) === "[object Object]" && obj.constructor === Object;
function checkOpts(defaults, opts) {
    if (opts !== undefined && (typeof opts !== "object" || !isPlainObject(opts))) throw new Error("Options should be object or undefined");
    const merged = Object.assign(defaults, opts);
    return merged;
}
function wrapConstructor(hashCons) {
    const hashC = (msg)=>hashCons().update(toBytes(msg)).digest();
    const tmp = hashCons();
    hashC.outputLen = tmp.outputLen;
    hashC.blockLen = tmp.blockLen;
    hashC.create = ()=>hashCons();
    return hashC;
}
function wrapConstructorWithOpts(hashCons) {
    const hashC = (msg, opts)=>hashCons(opts).update(toBytes(msg)).digest();
    const tmp = hashCons({});
    hashC.outputLen = tmp.outputLen;
    hashC.blockLen = tmp.blockLen;
    hashC.create = (opts)=>hashCons(opts);
    return hashC;
}
function wrapXOFConstructorWithOpts(hashCons) {
    const hashC = (msg, opts)=>hashCons(opts).update(toBytes(msg)).digest();
    const tmp = hashCons({});
    hashC.outputLen = tmp.outputLen;
    hashC.blockLen = tmp.blockLen;
    hashC.create = (opts)=>hashCons(opts);
    return hashC;
}
function randomBytes(bytesLength = 32) {
    if ((0, _crypto.crypto) && typeof (0, _crypto.crypto).getRandomValues === "function") return (0, _crypto.crypto).getRandomValues(new Uint8Array(bytesLength));
    throw new Error("crypto.getRandomValues must be defined");
}

},{"@noble/hashes/crypto":"1zMk1","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1zMk1":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "crypto", ()=>crypto);
const crypto = typeof globalThis === "object" && "crypto" in globalThis ? globalThis.crypto : undefined;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"l6KG0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "bytesToHex", ()=>(0, _utils.bytesToHex));
parcelHelpers.export(exports, "toHex", ()=>(0, _utils.bytesToHex));
parcelHelpers.export(exports, "concatBytes", ()=>(0, _utils.concatBytes));
parcelHelpers.export(exports, "createView", ()=>(0, _utils.createView));
parcelHelpers.export(exports, "utf8ToBytes", ()=>(0, _utils.utf8ToBytes));
parcelHelpers.export(exports, "assertBool", ()=>assertBool);
parcelHelpers.export(exports, "assertBytes", ()=>assertBytes);
// buf.toString('utf8') -> bytesToUtf8(buf)
parcelHelpers.export(exports, "bytesToUtf8", ()=>bytesToUtf8);
parcelHelpers.export(exports, "hexToBytes", ()=>hexToBytes);
// buf.equals(buf2) -> equalsBytes(buf, buf2)
parcelHelpers.export(exports, "equalsBytes", ()=>equalsBytes);
// Internal utils
parcelHelpers.export(exports, "wrapHash", ()=>wrapHash);
parcelHelpers.export(exports, "crypto", ()=>crypto);
var _assert = require("@noble/hashes/_assert");
var _assertDefault = parcelHelpers.interopDefault(_assert);
var _utils = require("@noble/hashes/utils");
const assertBool = (0, _assertDefault.default).bool;
const assertBytes = (0, _assertDefault.default).bytes;
function bytesToUtf8(data) {
    if (!(data instanceof Uint8Array)) throw new TypeError(`bytesToUtf8 expected Uint8Array, got ${typeof data}`);
    return new TextDecoder().decode(data);
}
function hexToBytes(data) {
    const sliced = data.startsWith("0x") ? data.substring(2) : data;
    return (0, _utils.hexToBytes)(sliced);
}
function equalsBytes(a, b) {
    if (a.length !== b.length) return false;
    for(let i = 0; i < a.length; i++){
        if (a[i] !== b[i]) return false;
    }
    return true;
}
function wrapHash(hash) {
    return (msg)=>{
        (0, _assertDefault.default).bytes(msg);
        return hash(msg);
    };
}
const crypto = (()=>{
    const webCrypto = typeof globalThis === "object" && "crypto" in globalThis ? globalThis.crypto : undefined;
    const nodeRequire = typeof module.require === "function" && module.require.bind(module);
    return {
        node: nodeRequire && !webCrypto ? nodeRequire("crypto") : undefined,
        web: webCrypto
    };
})();

},{"@noble/hashes/_assert":"5Bz9G","@noble/hashes/utils":"eYkBB","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6HK71":[function(require,module,exports) {
/*
This file is part of web3.js.

web3.js is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

web3.js is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "utils", ()=>_utilsJs);
var _web3ValidatorJs = require("./web3_validator.js");
parcelHelpers.exportAll(_web3ValidatorJs, exports);
var _defaultValidatorJs = require("./default_validator.js");
parcelHelpers.exportAll(_defaultValidatorJs, exports);
var _typesJs = require("./types.js");
parcelHelpers.exportAll(_typesJs, exports);
var _utilsJs = require("./utils.js");
var _errorsJs = require("./errors.js");
parcelHelpers.exportAll(_errorsJs, exports);
var _constantsJs = require("./constants.js");
parcelHelpers.exportAll(_constantsJs, exports);
var _indexJs = require("./validation/index.js");
parcelHelpers.exportAll(_indexJs, exports);

},{"./web3_validator.js":"4QNMT","./default_validator.js":"gHFsJ","./types.js":"3cGLN","./utils.js":"l63qP","./errors.js":"2J9Jr","./constants.js":"b0W4y","./validation/index.js":"6tCxo","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4QNMT":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Web3Validator", ()=>Web3Validator);
var _validatorJs = require("./validator.js");
var _utilsJs = require("./utils.js");
var _errorsJs = require("./errors.js");
class Web3Validator {
    constructor(){
        this._validator = (0, _validatorJs.Validator).factory();
    }
    validateJSONSchema(schema, data, options) {
        return this._validator.validate(schema, data, options);
    }
    validate(schema, data, options = {
        silent: false
    }) {
        var _a, _b;
        const jsonSchema = (0, _utilsJs.ethAbiToJsonSchema)(schema);
        if (Array.isArray(jsonSchema.items) && ((_a = jsonSchema.items) === null || _a === void 0 ? void 0 : _a.length) === 0 && data.length === 0) return undefined;
        if (Array.isArray(jsonSchema.items) && ((_b = jsonSchema.items) === null || _b === void 0 ? void 0 : _b.length) === 0 && data.length !== 0) throw new (0, _errorsJs.Web3ValidatorError)([
            {
                instancePath: "/0",
                schemaPath: "/",
                keyword: "required",
                message: "empty schema against data can not be validated",
                params: data
            }
        ]);
        return this._validator.validate(jsonSchema, data, options);
    }
}

},{"./validator.js":"5XO9o","./utils.js":"l63qP","./errors.js":"2J9Jr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5XO9o":[function(require,module,exports) {
/*
This file is part of web3.js.

web3.js is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

web3.js is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Validator", ()=>Validator);
var _web3Errors = require("web3-errors");
var _zod = require("zod");
var _errorsJs = require("./errors.js");
var _formatsJs = require("./formats.js");
var _formatsJsDefault = parcelHelpers.interopDefault(_formatsJs);
const convertToZod = (schema)=>{
    if ((!(schema === null || schema === void 0 ? void 0 : schema.type) || (schema === null || schema === void 0 ? void 0 : schema.type) === "object") && (schema === null || schema === void 0 ? void 0 : schema.properties)) {
        const obj = {};
        for (const name of Object.keys(schema.properties)){
            const zItem = convertToZod(schema.properties[name]);
            if (zItem) obj[name] = zItem;
        }
        if (Array.isArray(schema.required)) return (0, _zod.z).object(obj).partial().required(schema.required.reduce((acc, v)=>Object.assign(Object.assign({}, acc), {
                [v]: true
            }), {}));
        return (0, _zod.z).object(obj).partial();
    }
    if ((schema === null || schema === void 0 ? void 0 : schema.type) === "array" && (schema === null || schema === void 0 ? void 0 : schema.items)) {
        if (Array.isArray(schema.items) && schema.items.length > 0) {
            const arr = [];
            for (const item of schema.items){
                const zItem = convertToZod(item);
                if (zItem) arr.push(zItem);
            }
            return (0, _zod.z).tuple(arr);
        }
        return (0, _zod.z).array(convertToZod(schema.items));
    }
    if (schema.oneOf && Array.isArray(schema.oneOf)) return (0, _zod.z).union(schema.oneOf.map((oneOfSchema)=>convertToZod(oneOfSchema)));
    if (schema === null || schema === void 0 ? void 0 : schema.format) {
        if (!(0, _formatsJsDefault.default)[schema.format]) throw new (0, _web3Errors.SchemaFormatError)(schema.format);
        return (0, _zod.z).any().refine((0, _formatsJsDefault.default)[schema.format], (value)=>({
                params: {
                    value,
                    format: schema.format
                }
            }));
    }
    if ((schema === null || schema === void 0 ? void 0 : schema.type) && (schema === null || schema === void 0 ? void 0 : schema.type) !== "object" && typeof (0, _zod.z)[String(schema.type)] === "function") return (0, _zod.z)[String(schema.type)]();
    return (0, _zod.z).object({
        data: (0, _zod.z).any()
    }).partial();
};
class Validator {
    // eslint-disable-next-line no-useless-constructor, @typescript-eslint/no-empty-function
    static factory() {
        if (!Validator.validatorInstance) Validator.validatorInstance = new Validator();
        return Validator.validatorInstance;
    }
    validate(schema, data, options) {
        var _a, _b;
        const zod = convertToZod(schema);
        const result = zod.safeParse(data);
        if (!result.success) {
            const errors = this.convertErrors((_b = (_a = result.error) === null || _a === void 0 ? void 0 : _a.issues) !== null && _b !== void 0 ? _b : []);
            if (errors) {
                if (options === null || options === void 0 ? void 0 : options.silent) return errors;
                throw new (0, _errorsJs.Web3ValidatorError)(errors);
            }
        }
        return undefined;
    }
    // eslint-disable-next-line class-methods-use-this
    convertErrors(errors) {
        if (errors && Array.isArray(errors) && errors.length > 0) return errors.map((error)=>{
            var _a;
            let message;
            let keyword;
            let params;
            let schemaPath;
            schemaPath = error.path.join("/");
            const field = String(error.path[error.path.length - 1]);
            const instancePath = error.path.join("/");
            if (error.code === (0, _zod.ZodIssueCode).too_big) {
                keyword = "maxItems";
                schemaPath = `${instancePath}/maxItems`;
                params = {
                    limit: error.maximum
                };
                message = `must NOT have more than ${error.maximum} items`;
            } else if (error.code === (0, _zod.ZodIssueCode).too_small) {
                keyword = "minItems";
                schemaPath = `${instancePath}/minItems`;
                params = {
                    limit: error.minimum
                };
                message = `must NOT have fewer than ${error.minimum} items`;
            } else if (error.code === (0, _zod.ZodIssueCode).custom) {
                const { value, format } = (_a = error.params) !== null && _a !== void 0 ? _a : {};
                if (typeof value === "undefined") message = `value at "/${schemaPath}" is required`;
                else message = `value "${// eslint-disable-next-line @typescript-eslint/restrict-template-expressions
                typeof value === "object" ? JSON.stringify(value) : value}" at "/${schemaPath}" must pass "${format}" validation`;
                params = {
                    value
                };
            }
            return {
                keyword: keyword !== null && keyword !== void 0 ? keyword : field,
                instancePath: instancePath ? `/${instancePath}` : "",
                schemaPath: schemaPath ? `#${schemaPath}` : "#",
                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
                params: params !== null && params !== void 0 ? params : {
                    value: error.message
                },
                message: message !== null && message !== void 0 ? message : error.message
            };
        });
        return undefined;
    }
}

},{"web3-errors":"jDvsn","zod":"aoXZ0","./errors.js":"2J9Jr","./formats.js":"XcvM7","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aoXZ0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "BRAND", ()=>BRAND);
parcelHelpers.export(exports, "DIRTY", ()=>DIRTY);
parcelHelpers.export(exports, "EMPTY_PATH", ()=>EMPTY_PATH);
parcelHelpers.export(exports, "INVALID", ()=>INVALID);
parcelHelpers.export(exports, "NEVER", ()=>NEVER);
parcelHelpers.export(exports, "OK", ()=>OK);
parcelHelpers.export(exports, "ParseStatus", ()=>ParseStatus);
parcelHelpers.export(exports, "Schema", ()=>ZodType);
parcelHelpers.export(exports, "ZodAny", ()=>ZodAny);
parcelHelpers.export(exports, "ZodArray", ()=>ZodArray);
parcelHelpers.export(exports, "ZodBigInt", ()=>ZodBigInt);
parcelHelpers.export(exports, "ZodBoolean", ()=>ZodBoolean);
parcelHelpers.export(exports, "ZodBranded", ()=>ZodBranded);
parcelHelpers.export(exports, "ZodCatch", ()=>ZodCatch);
parcelHelpers.export(exports, "ZodDate", ()=>ZodDate);
parcelHelpers.export(exports, "ZodDefault", ()=>ZodDefault);
parcelHelpers.export(exports, "ZodDiscriminatedUnion", ()=>ZodDiscriminatedUnion);
parcelHelpers.export(exports, "ZodEffects", ()=>ZodEffects);
parcelHelpers.export(exports, "ZodEnum", ()=>ZodEnum);
parcelHelpers.export(exports, "ZodError", ()=>ZodError);
parcelHelpers.export(exports, "ZodFirstPartyTypeKind", ()=>ZodFirstPartyTypeKind);
parcelHelpers.export(exports, "ZodFunction", ()=>ZodFunction);
parcelHelpers.export(exports, "ZodIntersection", ()=>ZodIntersection);
parcelHelpers.export(exports, "ZodIssueCode", ()=>ZodIssueCode);
parcelHelpers.export(exports, "ZodLazy", ()=>ZodLazy);
parcelHelpers.export(exports, "ZodLiteral", ()=>ZodLiteral);
parcelHelpers.export(exports, "ZodMap", ()=>ZodMap);
parcelHelpers.export(exports, "ZodNaN", ()=>ZodNaN);
parcelHelpers.export(exports, "ZodNativeEnum", ()=>ZodNativeEnum);
parcelHelpers.export(exports, "ZodNever", ()=>ZodNever);
parcelHelpers.export(exports, "ZodNull", ()=>ZodNull);
parcelHelpers.export(exports, "ZodNullable", ()=>ZodNullable);
parcelHelpers.export(exports, "ZodNumber", ()=>ZodNumber);
parcelHelpers.export(exports, "ZodObject", ()=>ZodObject);
parcelHelpers.export(exports, "ZodOptional", ()=>ZodOptional);
parcelHelpers.export(exports, "ZodParsedType", ()=>ZodParsedType);
parcelHelpers.export(exports, "ZodPipeline", ()=>ZodPipeline);
parcelHelpers.export(exports, "ZodPromise", ()=>ZodPromise);
parcelHelpers.export(exports, "ZodReadonly", ()=>ZodReadonly);
parcelHelpers.export(exports, "ZodRecord", ()=>ZodRecord);
parcelHelpers.export(exports, "ZodSchema", ()=>ZodType);
parcelHelpers.export(exports, "ZodSet", ()=>ZodSet);
parcelHelpers.export(exports, "ZodString", ()=>ZodString);
parcelHelpers.export(exports, "ZodSymbol", ()=>ZodSymbol);
parcelHelpers.export(exports, "ZodTransformer", ()=>ZodEffects);
parcelHelpers.export(exports, "ZodTuple", ()=>ZodTuple);
parcelHelpers.export(exports, "ZodType", ()=>ZodType);
parcelHelpers.export(exports, "ZodUndefined", ()=>ZodUndefined);
parcelHelpers.export(exports, "ZodUnion", ()=>ZodUnion);
parcelHelpers.export(exports, "ZodUnknown", ()=>ZodUnknown);
parcelHelpers.export(exports, "ZodVoid", ()=>ZodVoid);
parcelHelpers.export(exports, "addIssueToContext", ()=>addIssueToContext);
parcelHelpers.export(exports, "any", ()=>anyType);
parcelHelpers.export(exports, "array", ()=>arrayType);
parcelHelpers.export(exports, "bigint", ()=>bigIntType);
parcelHelpers.export(exports, "boolean", ()=>booleanType);
parcelHelpers.export(exports, "coerce", ()=>coerce);
parcelHelpers.export(exports, "custom", ()=>custom);
parcelHelpers.export(exports, "date", ()=>dateType);
parcelHelpers.export(exports, "default", ()=>z);
parcelHelpers.export(exports, "defaultErrorMap", ()=>errorMap);
parcelHelpers.export(exports, "discriminatedUnion", ()=>discriminatedUnionType);
parcelHelpers.export(exports, "effect", ()=>effectsType);
parcelHelpers.export(exports, "enum", ()=>enumType);
parcelHelpers.export(exports, "function", ()=>functionType);
parcelHelpers.export(exports, "getErrorMap", ()=>getErrorMap);
parcelHelpers.export(exports, "getParsedType", ()=>getParsedType);
parcelHelpers.export(exports, "instanceof", ()=>instanceOfType);
parcelHelpers.export(exports, "intersection", ()=>intersectionType);
parcelHelpers.export(exports, "isAborted", ()=>isAborted);
parcelHelpers.export(exports, "isAsync", ()=>isAsync);
parcelHelpers.export(exports, "isDirty", ()=>isDirty);
parcelHelpers.export(exports, "isValid", ()=>isValid);
parcelHelpers.export(exports, "late", ()=>late);
parcelHelpers.export(exports, "lazy", ()=>lazyType);
parcelHelpers.export(exports, "literal", ()=>literalType);
parcelHelpers.export(exports, "makeIssue", ()=>makeIssue);
parcelHelpers.export(exports, "map", ()=>mapType);
parcelHelpers.export(exports, "nan", ()=>nanType);
parcelHelpers.export(exports, "nativeEnum", ()=>nativeEnumType);
parcelHelpers.export(exports, "never", ()=>neverType);
parcelHelpers.export(exports, "null", ()=>nullType);
parcelHelpers.export(exports, "nullable", ()=>nullableType);
parcelHelpers.export(exports, "number", ()=>numberType);
parcelHelpers.export(exports, "object", ()=>objectType);
parcelHelpers.export(exports, "objectUtil", ()=>objectUtil);
parcelHelpers.export(exports, "oboolean", ()=>oboolean);
parcelHelpers.export(exports, "onumber", ()=>onumber);
parcelHelpers.export(exports, "optional", ()=>optionalType);
parcelHelpers.export(exports, "ostring", ()=>ostring);
parcelHelpers.export(exports, "pipeline", ()=>pipelineType);
parcelHelpers.export(exports, "preprocess", ()=>preprocessType);
parcelHelpers.export(exports, "promise", ()=>promiseType);
parcelHelpers.export(exports, "quotelessJson", ()=>quotelessJson);
parcelHelpers.export(exports, "record", ()=>recordType);
parcelHelpers.export(exports, "set", ()=>setType);
parcelHelpers.export(exports, "setErrorMap", ()=>setErrorMap);
parcelHelpers.export(exports, "strictObject", ()=>strictObjectType);
parcelHelpers.export(exports, "string", ()=>stringType);
parcelHelpers.export(exports, "symbol", ()=>symbolType);
parcelHelpers.export(exports, "transformer", ()=>effectsType);
parcelHelpers.export(exports, "tuple", ()=>tupleType);
parcelHelpers.export(exports, "undefined", ()=>undefinedType);
parcelHelpers.export(exports, "union", ()=>unionType);
parcelHelpers.export(exports, "unknown", ()=>unknownType);
parcelHelpers.export(exports, "util", ()=>util);
parcelHelpers.export(exports, "void", ()=>voidType);
parcelHelpers.export(exports, "z", ()=>z);
var util;
(function(util) {
    util.assertEqual = (val)=>val;
    function assertIs(_arg) {}
    util.assertIs = assertIs;
    function assertNever(_x) {
        throw new Error();
    }
    util.assertNever = assertNever;
    util.arrayToEnum = (items)=>{
        const obj = {};
        for (const item of items)obj[item] = item;
        return obj;
    };
    util.getValidEnumValues = (obj)=>{
        const validKeys = util.objectKeys(obj).filter((k)=>typeof obj[obj[k]] !== "number");
        const filtered = {};
        for (const k of validKeys)filtered[k] = obj[k];
        return util.objectValues(filtered);
    };
    util.objectValues = (obj)=>{
        return util.objectKeys(obj).map(function(e) {
            return obj[e];
        });
    };
    util.objectKeys = typeof Object.keys === "function" // eslint-disable-line ban/ban
     ? (obj)=>Object.keys(obj) // eslint-disable-line ban/ban
     : (object)=>{
        const keys = [];
        for(const key in object)if (Object.prototype.hasOwnProperty.call(object, key)) keys.push(key);
        return keys;
    };
    util.find = (arr, checker)=>{
        for (const item of arr){
            if (checker(item)) return item;
        }
        return undefined;
    };
    util.isInteger = typeof Number.isInteger === "function" ? (val)=>Number.isInteger(val) // eslint-disable-line ban/ban
     : (val)=>typeof val === "number" && isFinite(val) && Math.floor(val) === val;
    function joinValues(array, separator = " | ") {
        return array.map((val)=>typeof val === "string" ? `'${val}'` : val).join(separator);
    }
    util.joinValues = joinValues;
    util.jsonStringifyReplacer = (_, value)=>{
        if (typeof value === "bigint") return value.toString();
        return value;
    };
})(util || (util = {}));
var objectUtil;
(function(objectUtil) {
    objectUtil.mergeShapes = (first, second)=>{
        return {
            ...first,
            ...second
        };
    };
})(objectUtil || (objectUtil = {}));
const ZodParsedType = util.arrayToEnum([
    "string",
    "nan",
    "number",
    "integer",
    "float",
    "boolean",
    "date",
    "bigint",
    "symbol",
    "function",
    "undefined",
    "null",
    "array",
    "object",
    "unknown",
    "promise",
    "void",
    "never",
    "map",
    "set"
]);
const getParsedType = (data)=>{
    const t = typeof data;
    switch(t){
        case "undefined":
            return ZodParsedType.undefined;
        case "string":
            return ZodParsedType.string;
        case "number":
            return isNaN(data) ? ZodParsedType.nan : ZodParsedType.number;
        case "boolean":
            return ZodParsedType.boolean;
        case "function":
            return ZodParsedType.function;
        case "bigint":
            return ZodParsedType.bigint;
        case "symbol":
            return ZodParsedType.symbol;
        case "object":
            if (Array.isArray(data)) return ZodParsedType.array;
            if (data === null) return ZodParsedType.null;
            if (data.then && typeof data.then === "function" && data.catch && typeof data.catch === "function") return ZodParsedType.promise;
            if (typeof Map !== "undefined" && data instanceof Map) return ZodParsedType.map;
            if (typeof Set !== "undefined" && data instanceof Set) return ZodParsedType.set;
            if (typeof Date !== "undefined" && data instanceof Date) return ZodParsedType.date;
            return ZodParsedType.object;
        default:
            return ZodParsedType.unknown;
    }
};
const ZodIssueCode = util.arrayToEnum([
    "invalid_type",
    "invalid_literal",
    "custom",
    "invalid_union",
    "invalid_union_discriminator",
    "invalid_enum_value",
    "unrecognized_keys",
    "invalid_arguments",
    "invalid_return_type",
    "invalid_date",
    "invalid_string",
    "too_small",
    "too_big",
    "invalid_intersection_types",
    "not_multiple_of",
    "not_finite"
]);
const quotelessJson = (obj)=>{
    const json = JSON.stringify(obj, null, 2);
    return json.replace(/"([^"]+)":/g, "$1:");
};
class ZodError extends Error {
    constructor(issues){
        super();
        this.issues = [];
        this.addIssue = (sub)=>{
            this.issues = [
                ...this.issues,
                sub
            ];
        };
        this.addIssues = (subs = [])=>{
            this.issues = [
                ...this.issues,
                ...subs
            ];
        };
        const actualProto = new.target.prototype;
        if (Object.setPrototypeOf) // eslint-disable-next-line ban/ban
        Object.setPrototypeOf(this, actualProto);
        else this.__proto__ = actualProto;
        this.name = "ZodError";
        this.issues = issues;
    }
    get errors() {
        return this.issues;
    }
    format(_mapper) {
        const mapper = _mapper || function(issue) {
            return issue.message;
        };
        const fieldErrors = {
            _errors: []
        };
        const processError = (error)=>{
            for (const issue of error.issues){
                if (issue.code === "invalid_union") issue.unionErrors.map(processError);
                else if (issue.code === "invalid_return_type") processError(issue.returnTypeError);
                else if (issue.code === "invalid_arguments") processError(issue.argumentsError);
                else if (issue.path.length === 0) fieldErrors._errors.push(mapper(issue));
                else {
                    let curr = fieldErrors;
                    let i = 0;
                    while(i < issue.path.length){
                        const el = issue.path[i];
                        const terminal = i === issue.path.length - 1;
                        if (!terminal) curr[el] = curr[el] || {
                            _errors: []
                        };
                        else {
                            curr[el] = curr[el] || {
                                _errors: []
                            };
                            curr[el]._errors.push(mapper(issue));
                        }
                        curr = curr[el];
                        i++;
                    }
                }
            }
        };
        processError(this);
        return fieldErrors;
    }
    toString() {
        return this.message;
    }
    get message() {
        return JSON.stringify(this.issues, util.jsonStringifyReplacer, 2);
    }
    get isEmpty() {
        return this.issues.length === 0;
    }
    flatten(mapper = (issue)=>issue.message) {
        const fieldErrors = {};
        const formErrors = [];
        for (const sub of this.issues)if (sub.path.length > 0) {
            fieldErrors[sub.path[0]] = fieldErrors[sub.path[0]] || [];
            fieldErrors[sub.path[0]].push(mapper(sub));
        } else formErrors.push(mapper(sub));
        return {
            formErrors,
            fieldErrors
        };
    }
    get formErrors() {
        return this.flatten();
    }
}
ZodError.create = (issues)=>{
    const error = new ZodError(issues);
    return error;
};
const errorMap = (issue, _ctx)=>{
    let message;
    switch(issue.code){
        case ZodIssueCode.invalid_type:
            if (issue.received === ZodParsedType.undefined) message = "Required";
            else message = `Expected ${issue.expected}, received ${issue.received}`;
            break;
        case ZodIssueCode.invalid_literal:
            message = `Invalid literal value, expected ${JSON.stringify(issue.expected, util.jsonStringifyReplacer)}`;
            break;
        case ZodIssueCode.unrecognized_keys:
            message = `Unrecognized key(s) in object: ${util.joinValues(issue.keys, ", ")}`;
            break;
        case ZodIssueCode.invalid_union:
            message = `Invalid input`;
            break;
        case ZodIssueCode.invalid_union_discriminator:
            message = `Invalid discriminator value. Expected ${util.joinValues(issue.options)}`;
            break;
        case ZodIssueCode.invalid_enum_value:
            message = `Invalid enum value. Expected ${util.joinValues(issue.options)}, received '${issue.received}'`;
            break;
        case ZodIssueCode.invalid_arguments:
            message = `Invalid function arguments`;
            break;
        case ZodIssueCode.invalid_return_type:
            message = `Invalid function return type`;
            break;
        case ZodIssueCode.invalid_date:
            message = `Invalid date`;
            break;
        case ZodIssueCode.invalid_string:
            if (typeof issue.validation === "object") {
                if ("includes" in issue.validation) {
                    message = `Invalid input: must include "${issue.validation.includes}"`;
                    if (typeof issue.validation.position === "number") message = `${message} at one or more positions greater than or equal to ${issue.validation.position}`;
                } else if ("startsWith" in issue.validation) message = `Invalid input: must start with "${issue.validation.startsWith}"`;
                else if ("endsWith" in issue.validation) message = `Invalid input: must end with "${issue.validation.endsWith}"`;
                else util.assertNever(issue.validation);
            } else if (issue.validation !== "regex") message = `Invalid ${issue.validation}`;
            else message = "Invalid";
            break;
        case ZodIssueCode.too_small:
            if (issue.type === "array") message = `Array must contain ${issue.exact ? "exactly" : issue.inclusive ? `at least` : `more than`} ${issue.minimum} element(s)`;
            else if (issue.type === "string") message = `String must contain ${issue.exact ? "exactly" : issue.inclusive ? `at least` : `over`} ${issue.minimum} character(s)`;
            else if (issue.type === "number") message = `Number must be ${issue.exact ? `exactly equal to ` : issue.inclusive ? `greater than or equal to ` : `greater than `}${issue.minimum}`;
            else if (issue.type === "date") message = `Date must be ${issue.exact ? `exactly equal to ` : issue.inclusive ? `greater than or equal to ` : `greater than `}${new Date(Number(issue.minimum))}`;
            else message = "Invalid input";
            break;
        case ZodIssueCode.too_big:
            if (issue.type === "array") message = `Array must contain ${issue.exact ? `exactly` : issue.inclusive ? `at most` : `less than`} ${issue.maximum} element(s)`;
            else if (issue.type === "string") message = `String must contain ${issue.exact ? `exactly` : issue.inclusive ? `at most` : `under`} ${issue.maximum} character(s)`;
            else if (issue.type === "number") message = `Number must be ${issue.exact ? `exactly` : issue.inclusive ? `less than or equal to` : `less than`} ${issue.maximum}`;
            else if (issue.type === "bigint") message = `BigInt must be ${issue.exact ? `exactly` : issue.inclusive ? `less than or equal to` : `less than`} ${issue.maximum}`;
            else if (issue.type === "date") message = `Date must be ${issue.exact ? `exactly` : issue.inclusive ? `smaller than or equal to` : `smaller than`} ${new Date(Number(issue.maximum))}`;
            else message = "Invalid input";
            break;
        case ZodIssueCode.custom:
            message = `Invalid input`;
            break;
        case ZodIssueCode.invalid_intersection_types:
            message = `Intersection results could not be merged`;
            break;
        case ZodIssueCode.not_multiple_of:
            message = `Number must be a multiple of ${issue.multipleOf}`;
            break;
        case ZodIssueCode.not_finite:
            message = "Number must be finite";
            break;
        default:
            message = _ctx.defaultError;
            util.assertNever(issue);
    }
    return {
        message
    };
};
let overrideErrorMap = errorMap;
function setErrorMap(map) {
    overrideErrorMap = map;
}
function getErrorMap() {
    return overrideErrorMap;
}
const makeIssue = (params)=>{
    const { data, path, errorMaps, issueData } = params;
    const fullPath = [
        ...path,
        ...issueData.path || []
    ];
    const fullIssue = {
        ...issueData,
        path: fullPath
    };
    let errorMessage = "";
    const maps = errorMaps.filter((m)=>!!m).slice().reverse();
    for (const map of maps)errorMessage = map(fullIssue, {
        data,
        defaultError: errorMessage
    }).message;
    return {
        ...issueData,
        path: fullPath,
        message: issueData.message || errorMessage
    };
};
const EMPTY_PATH = [];
function addIssueToContext(ctx, issueData) {
    const issue = makeIssue({
        issueData: issueData,
        data: ctx.data,
        path: ctx.path,
        errorMaps: [
            ctx.common.contextualErrorMap,
            ctx.schemaErrorMap,
            getErrorMap(),
            errorMap
        ].filter((x)=>!!x)
    });
    ctx.common.issues.push(issue);
}
class ParseStatus {
    constructor(){
        this.value = "valid";
    }
    dirty() {
        if (this.value === "valid") this.value = "dirty";
    }
    abort() {
        if (this.value !== "aborted") this.value = "aborted";
    }
    static mergeArray(status, results) {
        const arrayValue = [];
        for (const s of results){
            if (s.status === "aborted") return INVALID;
            if (s.status === "dirty") status.dirty();
            arrayValue.push(s.value);
        }
        return {
            status: status.value,
            value: arrayValue
        };
    }
    static async mergeObjectAsync(status, pairs) {
        const syncPairs = [];
        for (const pair of pairs)syncPairs.push({
            key: await pair.key,
            value: await pair.value
        });
        return ParseStatus.mergeObjectSync(status, syncPairs);
    }
    static mergeObjectSync(status, pairs) {
        const finalObject = {};
        for (const pair of pairs){
            const { key, value } = pair;
            if (key.status === "aborted") return INVALID;
            if (value.status === "aborted") return INVALID;
            if (key.status === "dirty") status.dirty();
            if (value.status === "dirty") status.dirty();
            if (key.value !== "__proto__" && (typeof value.value !== "undefined" || pair.alwaysSet)) finalObject[key.value] = value.value;
        }
        return {
            status: status.value,
            value: finalObject
        };
    }
}
const INVALID = Object.freeze({
    status: "aborted"
});
const DIRTY = (value)=>({
        status: "dirty",
        value
    });
const OK = (value)=>({
        status: "valid",
        value
    });
const isAborted = (x)=>x.status === "aborted";
const isDirty = (x)=>x.status === "dirty";
const isValid = (x)=>x.status === "valid";
const isAsync = (x)=>typeof Promise !== "undefined" && x instanceof Promise;
var errorUtil;
(function(errorUtil) {
    errorUtil.errToObj = (message)=>typeof message === "string" ? {
            message
        } : message || {};
    errorUtil.toString = (message)=>typeof message === "string" ? message : message === null || message === void 0 ? void 0 : message.message;
})(errorUtil || (errorUtil = {}));
class ParseInputLazyPath {
    constructor(parent, value, path, key){
        this._cachedPath = [];
        this.parent = parent;
        this.data = value;
        this._path = path;
        this._key = key;
    }
    get path() {
        if (!this._cachedPath.length) {
            if (this._key instanceof Array) this._cachedPath.push(...this._path, ...this._key);
            else this._cachedPath.push(...this._path, this._key);
        }
        return this._cachedPath;
    }
}
const handleResult = (ctx, result)=>{
    if (isValid(result)) return {
        success: true,
        data: result.value
    };
    else {
        if (!ctx.common.issues.length) throw new Error("Validation failed but no issues detected.");
        return {
            success: false,
            get error () {
                if (this._error) return this._error;
                const error = new ZodError(ctx.common.issues);
                this._error = error;
                return this._error;
            }
        };
    }
};
function processCreateParams(params) {
    if (!params) return {};
    const { errorMap, invalid_type_error, required_error, description } = params;
    if (errorMap && (invalid_type_error || required_error)) throw new Error(`Can't use "invalid_type_error" or "required_error" in conjunction with custom error map.`);
    if (errorMap) return {
        errorMap: errorMap,
        description
    };
    const customMap = (iss, ctx)=>{
        if (iss.code !== "invalid_type") return {
            message: ctx.defaultError
        };
        if (typeof ctx.data === "undefined") return {
            message: required_error !== null && required_error !== void 0 ? required_error : ctx.defaultError
        };
        return {
            message: invalid_type_error !== null && invalid_type_error !== void 0 ? invalid_type_error : ctx.defaultError
        };
    };
    return {
        errorMap: customMap,
        description
    };
}
class ZodType {
    constructor(def){
        /** Alias of safeParseAsync */ this.spa = this.safeParseAsync;
        this._def = def;
        this.parse = this.parse.bind(this);
        this.safeParse = this.safeParse.bind(this);
        this.parseAsync = this.parseAsync.bind(this);
        this.safeParseAsync = this.safeParseAsync.bind(this);
        this.spa = this.spa.bind(this);
        this.refine = this.refine.bind(this);
        this.refinement = this.refinement.bind(this);
        this.superRefine = this.superRefine.bind(this);
        this.optional = this.optional.bind(this);
        this.nullable = this.nullable.bind(this);
        this.nullish = this.nullish.bind(this);
        this.array = this.array.bind(this);
        this.promise = this.promise.bind(this);
        this.or = this.or.bind(this);
        this.and = this.and.bind(this);
        this.transform = this.transform.bind(this);
        this.brand = this.brand.bind(this);
        this.default = this.default.bind(this);
        this.catch = this.catch.bind(this);
        this.describe = this.describe.bind(this);
        this.pipe = this.pipe.bind(this);
        this.readonly = this.readonly.bind(this);
        this.isNullable = this.isNullable.bind(this);
        this.isOptional = this.isOptional.bind(this);
    }
    get description() {
        return this._def.description;
    }
    _getType(input) {
        return getParsedType(input.data);
    }
    _getOrReturnCtx(input, ctx) {
        return ctx || {
            common: input.parent.common,
            data: input.data,
            parsedType: getParsedType(input.data),
            schemaErrorMap: this._def.errorMap,
            path: input.path,
            parent: input.parent
        };
    }
    _processInputParams(input) {
        return {
            status: new ParseStatus(),
            ctx: {
                common: input.parent.common,
                data: input.data,
                parsedType: getParsedType(input.data),
                schemaErrorMap: this._def.errorMap,
                path: input.path,
                parent: input.parent
            }
        };
    }
    _parseSync(input) {
        const result = this._parse(input);
        if (isAsync(result)) throw new Error("Synchronous parse encountered promise.");
        return result;
    }
    _parseAsync(input) {
        const result = this._parse(input);
        return Promise.resolve(result);
    }
    parse(data, params) {
        const result = this.safeParse(data, params);
        if (result.success) return result.data;
        throw result.error;
    }
    safeParse(data, params) {
        var _a;
        const ctx = {
            common: {
                issues: [],
                async: (_a = params === null || params === void 0 ? void 0 : params.async) !== null && _a !== void 0 ? _a : false,
                contextualErrorMap: params === null || params === void 0 ? void 0 : params.errorMap
            },
            path: (params === null || params === void 0 ? void 0 : params.path) || [],
            schemaErrorMap: this._def.errorMap,
            parent: null,
            data,
            parsedType: getParsedType(data)
        };
        const result = this._parseSync({
            data,
            path: ctx.path,
            parent: ctx
        });
        return handleResult(ctx, result);
    }
    async parseAsync(data, params) {
        const result = await this.safeParseAsync(data, params);
        if (result.success) return result.data;
        throw result.error;
    }
    async safeParseAsync(data, params) {
        const ctx = {
            common: {
                issues: [],
                contextualErrorMap: params === null || params === void 0 ? void 0 : params.errorMap,
                async: true
            },
            path: (params === null || params === void 0 ? void 0 : params.path) || [],
            schemaErrorMap: this._def.errorMap,
            parent: null,
            data,
            parsedType: getParsedType(data)
        };
        const maybeAsyncResult = this._parse({
            data,
            path: ctx.path,
            parent: ctx
        });
        const result = await (isAsync(maybeAsyncResult) ? maybeAsyncResult : Promise.resolve(maybeAsyncResult));
        return handleResult(ctx, result);
    }
    refine(check, message) {
        const getIssueProperties = (val)=>{
            if (typeof message === "string" || typeof message === "undefined") return {
                message
            };
            else if (typeof message === "function") return message(val);
            else return message;
        };
        return this._refinement((val, ctx)=>{
            const result = check(val);
            const setError = ()=>ctx.addIssue({
                    code: ZodIssueCode.custom,
                    ...getIssueProperties(val)
                });
            if (typeof Promise !== "undefined" && result instanceof Promise) return result.then((data)=>{
                if (!data) {
                    setError();
                    return false;
                } else return true;
            });
            if (!result) {
                setError();
                return false;
            } else return true;
        });
    }
    refinement(check, refinementData) {
        return this._refinement((val, ctx)=>{
            if (!check(val)) {
                ctx.addIssue(typeof refinementData === "function" ? refinementData(val, ctx) : refinementData);
                return false;
            } else return true;
        });
    }
    _refinement(refinement) {
        return new ZodEffects({
            schema: this,
            typeName: ZodFirstPartyTypeKind.ZodEffects,
            effect: {
                type: "refinement",
                refinement
            }
        });
    }
    superRefine(refinement) {
        return this._refinement(refinement);
    }
    optional() {
        return ZodOptional.create(this, this._def);
    }
    nullable() {
        return ZodNullable.create(this, this._def);
    }
    nullish() {
        return this.nullable().optional();
    }
    array() {
        return ZodArray.create(this, this._def);
    }
    promise() {
        return ZodPromise.create(this, this._def);
    }
    or(option) {
        return ZodUnion.create([
            this,
            option
        ], this._def);
    }
    and(incoming) {
        return ZodIntersection.create(this, incoming, this._def);
    }
    transform(transform) {
        return new ZodEffects({
            ...processCreateParams(this._def),
            schema: this,
            typeName: ZodFirstPartyTypeKind.ZodEffects,
            effect: {
                type: "transform",
                transform
            }
        });
    }
    default(def) {
        const defaultValueFunc = typeof def === "function" ? def : ()=>def;
        return new ZodDefault({
            ...processCreateParams(this._def),
            innerType: this,
            defaultValue: defaultValueFunc,
            typeName: ZodFirstPartyTypeKind.ZodDefault
        });
    }
    brand() {
        return new ZodBranded({
            typeName: ZodFirstPartyTypeKind.ZodBranded,
            type: this,
            ...processCreateParams(this._def)
        });
    }
    catch(def) {
        const catchValueFunc = typeof def === "function" ? def : ()=>def;
        return new ZodCatch({
            ...processCreateParams(this._def),
            innerType: this,
            catchValue: catchValueFunc,
            typeName: ZodFirstPartyTypeKind.ZodCatch
        });
    }
    describe(description) {
        const This = this.constructor;
        return new This({
            ...this._def,
            description
        });
    }
    pipe(target) {
        return ZodPipeline.create(this, target);
    }
    readonly() {
        return ZodReadonly.create(this);
    }
    isOptional() {
        return this.safeParse(undefined).success;
    }
    isNullable() {
        return this.safeParse(null).success;
    }
}
const cuidRegex = /^c[^\s-]{8,}$/i;
const cuid2Regex = /^[a-z][a-z0-9]*$/;
const ulidRegex = /^[0-9A-HJKMNP-TV-Z]{26}$/;
// const uuidRegex =
//   /^([a-f0-9]{8}-[a-f0-9]{4}-[1-5][a-f0-9]{3}-[a-f0-9]{4}-[a-f0-9]{12}|00000000-0000-0000-0000-000000000000)$/i;
const uuidRegex = /^[0-9a-fA-F]{8}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{12}$/i;
// from https://stackoverflow.com/a/46181/1550155
// old version: too slow, didn't support unicode
// const emailRegex = /^((([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+(\.([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+)*)|((\x22)((((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(([\x01-\x08\x0b\x0c\x0e-\x1f\x7f]|\x21|[\x23-\x5b]|[\x5d-\x7e]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(\\([\x01-\x09\x0b\x0c\x0d-\x7f]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]))))*(((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(\x22)))@((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))$/i;
//old email regex
// const emailRegex = /^(([^<>()[\].,;:\s@"]+(\.[^<>()[\].,;:\s@"]+)*)|(".+"))@((?!-)([^<>()[\].,;:\s@"]+\.)+[^<>()[\].,;:\s@"]{1,})[^-<>()[\].,;:\s@"]$/i;
// eslint-disable-next-line
// const emailRegex =
//   /^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\])|(\[IPv6:(([a-f0-9]{1,4}:){7}|::([a-f0-9]{1,4}:){0,6}|([a-f0-9]{1,4}:){1}:([a-f0-9]{1,4}:){0,5}|([a-f0-9]{1,4}:){2}:([a-f0-9]{1,4}:){0,4}|([a-f0-9]{1,4}:){3}:([a-f0-9]{1,4}:){0,3}|([a-f0-9]{1,4}:){4}:([a-f0-9]{1,4}:){0,2}|([a-f0-9]{1,4}:){5}:([a-f0-9]{1,4}:){0,1})([a-f0-9]{1,4}|(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2})))\])|([A-Za-z0-9]([A-Za-z0-9-]*[A-Za-z0-9])*(\.[A-Za-z]{2,})+))$/;
// const emailRegex =
//   /^[a-zA-Z0-9\.\!\#\$\%\&\'\*\+\/\=\?\^\_\`\{\|\}\~\-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/;
// const emailRegex =
//   /^(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|"(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21\x23-\x5b\x5d-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])*")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21-\x5a\x53-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])+)\])$/i;
const emailRegex = /^(?!\.)(?!.*\.\.)([A-Z0-9_+-\.]*)[A-Z0-9_+-]@([A-Z0-9][A-Z0-9\-]*\.)+[A-Z]{2,}$/i;
// const emailRegex =
//   /^[a-z0-9.!#$%&’*+/=?^_`{|}~-]+@[a-z0-9-]+(?:\.[a-z0-9\-]+)*$/i;
// from https://thekevinscott.com/emojis-in-javascript/#writing-a-regular-expression
const _emojiRegex = `^(\\p{Extended_Pictographic}|\\p{Emoji_Component})+$`;
let emojiRegex;
const ipv4Regex = /^(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))$/;
const ipv6Regex = /^(([a-f0-9]{1,4}:){7}|::([a-f0-9]{1,4}:){0,6}|([a-f0-9]{1,4}:){1}:([a-f0-9]{1,4}:){0,5}|([a-f0-9]{1,4}:){2}:([a-f0-9]{1,4}:){0,4}|([a-f0-9]{1,4}:){3}:([a-f0-9]{1,4}:){0,3}|([a-f0-9]{1,4}:){4}:([a-f0-9]{1,4}:){0,2}|([a-f0-9]{1,4}:){5}:([a-f0-9]{1,4}:){0,1})([a-f0-9]{1,4}|(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2})))$/;
// Adapted from https://stackoverflow.com/a/3143231
const datetimeRegex = (args)=>{
    if (args.precision) {
        if (args.offset) return new RegExp(`^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{${args.precision}}(([+-]\\d{2}(:?\\d{2})?)|Z)$`);
        else return new RegExp(`^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{${args.precision}}Z$`);
    } else if (args.precision === 0) {
        if (args.offset) return new RegExp(`^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(([+-]\\d{2}(:?\\d{2})?)|Z)$`);
        else return new RegExp(`^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}Z$`);
    } else {
        if (args.offset) return new RegExp(`^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(([+-]\\d{2}(:?\\d{2})?)|Z)$`);
        else return new RegExp(`^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?Z$`);
    }
};
function isValidIP(ip, version) {
    if ((version === "v4" || !version) && ipv4Regex.test(ip)) return true;
    if ((version === "v6" || !version) && ipv6Regex.test(ip)) return true;
    return false;
}
class ZodString extends ZodType {
    _parse(input) {
        if (this._def.coerce) input.data = String(input.data);
        const parsedType = this._getType(input);
        if (parsedType !== ZodParsedType.string) {
            const ctx = this._getOrReturnCtx(input);
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.string,
                received: ctx.parsedType
            });
            return INVALID;
        }
        const status = new ParseStatus();
        let ctx = undefined;
        for (const check of this._def.checks){
            if (check.kind === "min") {
                if (input.data.length < check.value) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        code: ZodIssueCode.too_small,
                        minimum: check.value,
                        type: "string",
                        inclusive: true,
                        exact: false,
                        message: check.message
                    });
                    status.dirty();
                }
            } else if (check.kind === "max") {
                if (input.data.length > check.value) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        code: ZodIssueCode.too_big,
                        maximum: check.value,
                        type: "string",
                        inclusive: true,
                        exact: false,
                        message: check.message
                    });
                    status.dirty();
                }
            } else if (check.kind === "length") {
                const tooBig = input.data.length > check.value;
                const tooSmall = input.data.length < check.value;
                if (tooBig || tooSmall) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    if (tooBig) addIssueToContext(ctx, {
                        code: ZodIssueCode.too_big,
                        maximum: check.value,
                        type: "string",
                        inclusive: true,
                        exact: true,
                        message: check.message
                    });
                    else if (tooSmall) addIssueToContext(ctx, {
                        code: ZodIssueCode.too_small,
                        minimum: check.value,
                        type: "string",
                        inclusive: true,
                        exact: true,
                        message: check.message
                    });
                    status.dirty();
                }
            } else if (check.kind === "email") {
                if (!emailRegex.test(input.data)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        validation: "email",
                        code: ZodIssueCode.invalid_string,
                        message: check.message
                    });
                    status.dirty();
                }
            } else if (check.kind === "emoji") {
                if (!emojiRegex) emojiRegex = new RegExp(_emojiRegex, "u");
                if (!emojiRegex.test(input.data)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        validation: "emoji",
                        code: ZodIssueCode.invalid_string,
                        message: check.message
                    });
                    status.dirty();
                }
            } else if (check.kind === "uuid") {
                if (!uuidRegex.test(input.data)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        validation: "uuid",
                        code: ZodIssueCode.invalid_string,
                        message: check.message
                    });
                    status.dirty();
                }
            } else if (check.kind === "cuid") {
                if (!cuidRegex.test(input.data)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        validation: "cuid",
                        code: ZodIssueCode.invalid_string,
                        message: check.message
                    });
                    status.dirty();
                }
            } else if (check.kind === "cuid2") {
                if (!cuid2Regex.test(input.data)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        validation: "cuid2",
                        code: ZodIssueCode.invalid_string,
                        message: check.message
                    });
                    status.dirty();
                }
            } else if (check.kind === "ulid") {
                if (!ulidRegex.test(input.data)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        validation: "ulid",
                        code: ZodIssueCode.invalid_string,
                        message: check.message
                    });
                    status.dirty();
                }
            } else if (check.kind === "url") try {
                new URL(input.data);
            } catch (_a) {
                ctx = this._getOrReturnCtx(input, ctx);
                addIssueToContext(ctx, {
                    validation: "url",
                    code: ZodIssueCode.invalid_string,
                    message: check.message
                });
                status.dirty();
            }
            else if (check.kind === "regex") {
                check.regex.lastIndex = 0;
                const testResult = check.regex.test(input.data);
                if (!testResult) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        validation: "regex",
                        code: ZodIssueCode.invalid_string,
                        message: check.message
                    });
                    status.dirty();
                }
            } else if (check.kind === "trim") input.data = input.data.trim();
            else if (check.kind === "includes") {
                if (!input.data.includes(check.value, check.position)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        code: ZodIssueCode.invalid_string,
                        validation: {
                            includes: check.value,
                            position: check.position
                        },
                        message: check.message
                    });
                    status.dirty();
                }
            } else if (check.kind === "toLowerCase") input.data = input.data.toLowerCase();
            else if (check.kind === "toUpperCase") input.data = input.data.toUpperCase();
            else if (check.kind === "startsWith") {
                if (!input.data.startsWith(check.value)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        code: ZodIssueCode.invalid_string,
                        validation: {
                            startsWith: check.value
                        },
                        message: check.message
                    });
                    status.dirty();
                }
            } else if (check.kind === "endsWith") {
                if (!input.data.endsWith(check.value)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        code: ZodIssueCode.invalid_string,
                        validation: {
                            endsWith: check.value
                        },
                        message: check.message
                    });
                    status.dirty();
                }
            } else if (check.kind === "datetime") {
                const regex = datetimeRegex(check);
                if (!regex.test(input.data)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        code: ZodIssueCode.invalid_string,
                        validation: "datetime",
                        message: check.message
                    });
                    status.dirty();
                }
            } else if (check.kind === "ip") {
                if (!isValidIP(input.data, check.version)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        validation: "ip",
                        code: ZodIssueCode.invalid_string,
                        message: check.message
                    });
                    status.dirty();
                }
            } else util.assertNever(check);
        }
        return {
            status: status.value,
            value: input.data
        };
    }
    _regex(regex, validation, message) {
        return this.refinement((data)=>regex.test(data), {
            validation,
            code: ZodIssueCode.invalid_string,
            ...errorUtil.errToObj(message)
        });
    }
    _addCheck(check) {
        return new ZodString({
            ...this._def,
            checks: [
                ...this._def.checks,
                check
            ]
        });
    }
    email(message) {
        return this._addCheck({
            kind: "email",
            ...errorUtil.errToObj(message)
        });
    }
    url(message) {
        return this._addCheck({
            kind: "url",
            ...errorUtil.errToObj(message)
        });
    }
    emoji(message) {
        return this._addCheck({
            kind: "emoji",
            ...errorUtil.errToObj(message)
        });
    }
    uuid(message) {
        return this._addCheck({
            kind: "uuid",
            ...errorUtil.errToObj(message)
        });
    }
    cuid(message) {
        return this._addCheck({
            kind: "cuid",
            ...errorUtil.errToObj(message)
        });
    }
    cuid2(message) {
        return this._addCheck({
            kind: "cuid2",
            ...errorUtil.errToObj(message)
        });
    }
    ulid(message) {
        return this._addCheck({
            kind: "ulid",
            ...errorUtil.errToObj(message)
        });
    }
    ip(options) {
        return this._addCheck({
            kind: "ip",
            ...errorUtil.errToObj(options)
        });
    }
    datetime(options) {
        var _a;
        if (typeof options === "string") return this._addCheck({
            kind: "datetime",
            precision: null,
            offset: false,
            message: options
        });
        return this._addCheck({
            kind: "datetime",
            precision: typeof (options === null || options === void 0 ? void 0 : options.precision) === "undefined" ? null : options === null || options === void 0 ? void 0 : options.precision,
            offset: (_a = options === null || options === void 0 ? void 0 : options.offset) !== null && _a !== void 0 ? _a : false,
            ...errorUtil.errToObj(options === null || options === void 0 ? void 0 : options.message)
        });
    }
    regex(regex, message) {
        return this._addCheck({
            kind: "regex",
            regex: regex,
            ...errorUtil.errToObj(message)
        });
    }
    includes(value, options) {
        return this._addCheck({
            kind: "includes",
            value: value,
            position: options === null || options === void 0 ? void 0 : options.position,
            ...errorUtil.errToObj(options === null || options === void 0 ? void 0 : options.message)
        });
    }
    startsWith(value, message) {
        return this._addCheck({
            kind: "startsWith",
            value: value,
            ...errorUtil.errToObj(message)
        });
    }
    endsWith(value, message) {
        return this._addCheck({
            kind: "endsWith",
            value: value,
            ...errorUtil.errToObj(message)
        });
    }
    min(minLength, message) {
        return this._addCheck({
            kind: "min",
            value: minLength,
            ...errorUtil.errToObj(message)
        });
    }
    max(maxLength, message) {
        return this._addCheck({
            kind: "max",
            value: maxLength,
            ...errorUtil.errToObj(message)
        });
    }
    length(len, message) {
        return this._addCheck({
            kind: "length",
            value: len,
            ...errorUtil.errToObj(message)
        });
    }
    /**
     * @deprecated Use z.string().min(1) instead.
     * @see {@link ZodString.min}
     */ nonempty(message) {
        return this.min(1, errorUtil.errToObj(message));
    }
    trim() {
        return new ZodString({
            ...this._def,
            checks: [
                ...this._def.checks,
                {
                    kind: "trim"
                }
            ]
        });
    }
    toLowerCase() {
        return new ZodString({
            ...this._def,
            checks: [
                ...this._def.checks,
                {
                    kind: "toLowerCase"
                }
            ]
        });
    }
    toUpperCase() {
        return new ZodString({
            ...this._def,
            checks: [
                ...this._def.checks,
                {
                    kind: "toUpperCase"
                }
            ]
        });
    }
    get isDatetime() {
        return !!this._def.checks.find((ch)=>ch.kind === "datetime");
    }
    get isEmail() {
        return !!this._def.checks.find((ch)=>ch.kind === "email");
    }
    get isURL() {
        return !!this._def.checks.find((ch)=>ch.kind === "url");
    }
    get isEmoji() {
        return !!this._def.checks.find((ch)=>ch.kind === "emoji");
    }
    get isUUID() {
        return !!this._def.checks.find((ch)=>ch.kind === "uuid");
    }
    get isCUID() {
        return !!this._def.checks.find((ch)=>ch.kind === "cuid");
    }
    get isCUID2() {
        return !!this._def.checks.find((ch)=>ch.kind === "cuid2");
    }
    get isULID() {
        return !!this._def.checks.find((ch)=>ch.kind === "ulid");
    }
    get isIP() {
        return !!this._def.checks.find((ch)=>ch.kind === "ip");
    }
    get minLength() {
        let min = null;
        for (const ch of this._def.checks){
            if (ch.kind === "min") {
                if (min === null || ch.value > min) min = ch.value;
            }
        }
        return min;
    }
    get maxLength() {
        let max = null;
        for (const ch of this._def.checks){
            if (ch.kind === "max") {
                if (max === null || ch.value < max) max = ch.value;
            }
        }
        return max;
    }
}
ZodString.create = (params)=>{
    var _a;
    return new ZodString({
        checks: [],
        typeName: ZodFirstPartyTypeKind.ZodString,
        coerce: (_a = params === null || params === void 0 ? void 0 : params.coerce) !== null && _a !== void 0 ? _a : false,
        ...processCreateParams(params)
    });
};
// https://stackoverflow.com/questions/3966484/why-does-modulus-operator-return-fractional-number-in-javascript/31711034#31711034
function floatSafeRemainder(val, step) {
    const valDecCount = (val.toString().split(".")[1] || "").length;
    const stepDecCount = (step.toString().split(".")[1] || "").length;
    const decCount = valDecCount > stepDecCount ? valDecCount : stepDecCount;
    const valInt = parseInt(val.toFixed(decCount).replace(".", ""));
    const stepInt = parseInt(step.toFixed(decCount).replace(".", ""));
    return valInt % stepInt / Math.pow(10, decCount);
}
class ZodNumber extends ZodType {
    constructor(){
        super(...arguments);
        this.min = this.gte;
        this.max = this.lte;
        this.step = this.multipleOf;
    }
    _parse(input) {
        if (this._def.coerce) input.data = Number(input.data);
        const parsedType = this._getType(input);
        if (parsedType !== ZodParsedType.number) {
            const ctx = this._getOrReturnCtx(input);
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.number,
                received: ctx.parsedType
            });
            return INVALID;
        }
        let ctx = undefined;
        const status = new ParseStatus();
        for (const check of this._def.checks){
            if (check.kind === "int") {
                if (!util.isInteger(input.data)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        code: ZodIssueCode.invalid_type,
                        expected: "integer",
                        received: "float",
                        message: check.message
                    });
                    status.dirty();
                }
            } else if (check.kind === "min") {
                const tooSmall = check.inclusive ? input.data < check.value : input.data <= check.value;
                if (tooSmall) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        code: ZodIssueCode.too_small,
                        minimum: check.value,
                        type: "number",
                        inclusive: check.inclusive,
                        exact: false,
                        message: check.message
                    });
                    status.dirty();
                }
            } else if (check.kind === "max") {
                const tooBig = check.inclusive ? input.data > check.value : input.data >= check.value;
                if (tooBig) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        code: ZodIssueCode.too_big,
                        maximum: check.value,
                        type: "number",
                        inclusive: check.inclusive,
                        exact: false,
                        message: check.message
                    });
                    status.dirty();
                }
            } else if (check.kind === "multipleOf") {
                if (floatSafeRemainder(input.data, check.value) !== 0) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        code: ZodIssueCode.not_multiple_of,
                        multipleOf: check.value,
                        message: check.message
                    });
                    status.dirty();
                }
            } else if (check.kind === "finite") {
                if (!Number.isFinite(input.data)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        code: ZodIssueCode.not_finite,
                        message: check.message
                    });
                    status.dirty();
                }
            } else util.assertNever(check);
        }
        return {
            status: status.value,
            value: input.data
        };
    }
    gte(value, message) {
        return this.setLimit("min", value, true, errorUtil.toString(message));
    }
    gt(value, message) {
        return this.setLimit("min", value, false, errorUtil.toString(message));
    }
    lte(value, message) {
        return this.setLimit("max", value, true, errorUtil.toString(message));
    }
    lt(value, message) {
        return this.setLimit("max", value, false, errorUtil.toString(message));
    }
    setLimit(kind, value, inclusive, message) {
        return new ZodNumber({
            ...this._def,
            checks: [
                ...this._def.checks,
                {
                    kind,
                    value,
                    inclusive,
                    message: errorUtil.toString(message)
                }
            ]
        });
    }
    _addCheck(check) {
        return new ZodNumber({
            ...this._def,
            checks: [
                ...this._def.checks,
                check
            ]
        });
    }
    int(message) {
        return this._addCheck({
            kind: "int",
            message: errorUtil.toString(message)
        });
    }
    positive(message) {
        return this._addCheck({
            kind: "min",
            value: 0,
            inclusive: false,
            message: errorUtil.toString(message)
        });
    }
    negative(message) {
        return this._addCheck({
            kind: "max",
            value: 0,
            inclusive: false,
            message: errorUtil.toString(message)
        });
    }
    nonpositive(message) {
        return this._addCheck({
            kind: "max",
            value: 0,
            inclusive: true,
            message: errorUtil.toString(message)
        });
    }
    nonnegative(message) {
        return this._addCheck({
            kind: "min",
            value: 0,
            inclusive: true,
            message: errorUtil.toString(message)
        });
    }
    multipleOf(value, message) {
        return this._addCheck({
            kind: "multipleOf",
            value: value,
            message: errorUtil.toString(message)
        });
    }
    finite(message) {
        return this._addCheck({
            kind: "finite",
            message: errorUtil.toString(message)
        });
    }
    safe(message) {
        return this._addCheck({
            kind: "min",
            inclusive: true,
            value: Number.MIN_SAFE_INTEGER,
            message: errorUtil.toString(message)
        })._addCheck({
            kind: "max",
            inclusive: true,
            value: Number.MAX_SAFE_INTEGER,
            message: errorUtil.toString(message)
        });
    }
    get minValue() {
        let min = null;
        for (const ch of this._def.checks){
            if (ch.kind === "min") {
                if (min === null || ch.value > min) min = ch.value;
            }
        }
        return min;
    }
    get maxValue() {
        let max = null;
        for (const ch of this._def.checks){
            if (ch.kind === "max") {
                if (max === null || ch.value < max) max = ch.value;
            }
        }
        return max;
    }
    get isInt() {
        return !!this._def.checks.find((ch)=>ch.kind === "int" || ch.kind === "multipleOf" && util.isInteger(ch.value));
    }
    get isFinite() {
        let max = null, min = null;
        for (const ch of this._def.checks){
            if (ch.kind === "finite" || ch.kind === "int" || ch.kind === "multipleOf") return true;
            else if (ch.kind === "min") {
                if (min === null || ch.value > min) min = ch.value;
            } else if (ch.kind === "max") {
                if (max === null || ch.value < max) max = ch.value;
            }
        }
        return Number.isFinite(min) && Number.isFinite(max);
    }
}
ZodNumber.create = (params)=>{
    return new ZodNumber({
        checks: [],
        typeName: ZodFirstPartyTypeKind.ZodNumber,
        coerce: (params === null || params === void 0 ? void 0 : params.coerce) || false,
        ...processCreateParams(params)
    });
};
class ZodBigInt extends ZodType {
    constructor(){
        super(...arguments);
        this.min = this.gte;
        this.max = this.lte;
    }
    _parse(input) {
        if (this._def.coerce) input.data = BigInt(input.data);
        const parsedType = this._getType(input);
        if (parsedType !== ZodParsedType.bigint) {
            const ctx = this._getOrReturnCtx(input);
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.bigint,
                received: ctx.parsedType
            });
            return INVALID;
        }
        let ctx = undefined;
        const status = new ParseStatus();
        for (const check of this._def.checks){
            if (check.kind === "min") {
                const tooSmall = check.inclusive ? input.data < check.value : input.data <= check.value;
                if (tooSmall) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        code: ZodIssueCode.too_small,
                        type: "bigint",
                        minimum: check.value,
                        inclusive: check.inclusive,
                        message: check.message
                    });
                    status.dirty();
                }
            } else if (check.kind === "max") {
                const tooBig = check.inclusive ? input.data > check.value : input.data >= check.value;
                if (tooBig) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        code: ZodIssueCode.too_big,
                        type: "bigint",
                        maximum: check.value,
                        inclusive: check.inclusive,
                        message: check.message
                    });
                    status.dirty();
                }
            } else if (check.kind === "multipleOf") {
                if (input.data % check.value !== BigInt(0)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        code: ZodIssueCode.not_multiple_of,
                        multipleOf: check.value,
                        message: check.message
                    });
                    status.dirty();
                }
            } else util.assertNever(check);
        }
        return {
            status: status.value,
            value: input.data
        };
    }
    gte(value, message) {
        return this.setLimit("min", value, true, errorUtil.toString(message));
    }
    gt(value, message) {
        return this.setLimit("min", value, false, errorUtil.toString(message));
    }
    lte(value, message) {
        return this.setLimit("max", value, true, errorUtil.toString(message));
    }
    lt(value, message) {
        return this.setLimit("max", value, false, errorUtil.toString(message));
    }
    setLimit(kind, value, inclusive, message) {
        return new ZodBigInt({
            ...this._def,
            checks: [
                ...this._def.checks,
                {
                    kind,
                    value,
                    inclusive,
                    message: errorUtil.toString(message)
                }
            ]
        });
    }
    _addCheck(check) {
        return new ZodBigInt({
            ...this._def,
            checks: [
                ...this._def.checks,
                check
            ]
        });
    }
    positive(message) {
        return this._addCheck({
            kind: "min",
            value: BigInt(0),
            inclusive: false,
            message: errorUtil.toString(message)
        });
    }
    negative(message) {
        return this._addCheck({
            kind: "max",
            value: BigInt(0),
            inclusive: false,
            message: errorUtil.toString(message)
        });
    }
    nonpositive(message) {
        return this._addCheck({
            kind: "max",
            value: BigInt(0),
            inclusive: true,
            message: errorUtil.toString(message)
        });
    }
    nonnegative(message) {
        return this._addCheck({
            kind: "min",
            value: BigInt(0),
            inclusive: true,
            message: errorUtil.toString(message)
        });
    }
    multipleOf(value, message) {
        return this._addCheck({
            kind: "multipleOf",
            value,
            message: errorUtil.toString(message)
        });
    }
    get minValue() {
        let min = null;
        for (const ch of this._def.checks){
            if (ch.kind === "min") {
                if (min === null || ch.value > min) min = ch.value;
            }
        }
        return min;
    }
    get maxValue() {
        let max = null;
        for (const ch of this._def.checks){
            if (ch.kind === "max") {
                if (max === null || ch.value < max) max = ch.value;
            }
        }
        return max;
    }
}
ZodBigInt.create = (params)=>{
    var _a;
    return new ZodBigInt({
        checks: [],
        typeName: ZodFirstPartyTypeKind.ZodBigInt,
        coerce: (_a = params === null || params === void 0 ? void 0 : params.coerce) !== null && _a !== void 0 ? _a : false,
        ...processCreateParams(params)
    });
};
class ZodBoolean extends ZodType {
    _parse(input) {
        if (this._def.coerce) input.data = Boolean(input.data);
        const parsedType = this._getType(input);
        if (parsedType !== ZodParsedType.boolean) {
            const ctx = this._getOrReturnCtx(input);
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.boolean,
                received: ctx.parsedType
            });
            return INVALID;
        }
        return OK(input.data);
    }
}
ZodBoolean.create = (params)=>{
    return new ZodBoolean({
        typeName: ZodFirstPartyTypeKind.ZodBoolean,
        coerce: (params === null || params === void 0 ? void 0 : params.coerce) || false,
        ...processCreateParams(params)
    });
};
class ZodDate extends ZodType {
    _parse(input) {
        if (this._def.coerce) input.data = new Date(input.data);
        const parsedType = this._getType(input);
        if (parsedType !== ZodParsedType.date) {
            const ctx = this._getOrReturnCtx(input);
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.date,
                received: ctx.parsedType
            });
            return INVALID;
        }
        if (isNaN(input.data.getTime())) {
            const ctx = this._getOrReturnCtx(input);
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_date
            });
            return INVALID;
        }
        const status = new ParseStatus();
        let ctx = undefined;
        for (const check of this._def.checks){
            if (check.kind === "min") {
                if (input.data.getTime() < check.value) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        code: ZodIssueCode.too_small,
                        message: check.message,
                        inclusive: true,
                        exact: false,
                        minimum: check.value,
                        type: "date"
                    });
                    status.dirty();
                }
            } else if (check.kind === "max") {
                if (input.data.getTime() > check.value) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        code: ZodIssueCode.too_big,
                        message: check.message,
                        inclusive: true,
                        exact: false,
                        maximum: check.value,
                        type: "date"
                    });
                    status.dirty();
                }
            } else util.assertNever(check);
        }
        return {
            status: status.value,
            value: new Date(input.data.getTime())
        };
    }
    _addCheck(check) {
        return new ZodDate({
            ...this._def,
            checks: [
                ...this._def.checks,
                check
            ]
        });
    }
    min(minDate, message) {
        return this._addCheck({
            kind: "min",
            value: minDate.getTime(),
            message: errorUtil.toString(message)
        });
    }
    max(maxDate, message) {
        return this._addCheck({
            kind: "max",
            value: maxDate.getTime(),
            message: errorUtil.toString(message)
        });
    }
    get minDate() {
        let min = null;
        for (const ch of this._def.checks){
            if (ch.kind === "min") {
                if (min === null || ch.value > min) min = ch.value;
            }
        }
        return min != null ? new Date(min) : null;
    }
    get maxDate() {
        let max = null;
        for (const ch of this._def.checks){
            if (ch.kind === "max") {
                if (max === null || ch.value < max) max = ch.value;
            }
        }
        return max != null ? new Date(max) : null;
    }
}
ZodDate.create = (params)=>{
    return new ZodDate({
        checks: [],
        coerce: (params === null || params === void 0 ? void 0 : params.coerce) || false,
        typeName: ZodFirstPartyTypeKind.ZodDate,
        ...processCreateParams(params)
    });
};
class ZodSymbol extends ZodType {
    _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType !== ZodParsedType.symbol) {
            const ctx = this._getOrReturnCtx(input);
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.symbol,
                received: ctx.parsedType
            });
            return INVALID;
        }
        return OK(input.data);
    }
}
ZodSymbol.create = (params)=>{
    return new ZodSymbol({
        typeName: ZodFirstPartyTypeKind.ZodSymbol,
        ...processCreateParams(params)
    });
};
class ZodUndefined extends ZodType {
    _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType !== ZodParsedType.undefined) {
            const ctx = this._getOrReturnCtx(input);
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.undefined,
                received: ctx.parsedType
            });
            return INVALID;
        }
        return OK(input.data);
    }
}
ZodUndefined.create = (params)=>{
    return new ZodUndefined({
        typeName: ZodFirstPartyTypeKind.ZodUndefined,
        ...processCreateParams(params)
    });
};
class ZodNull extends ZodType {
    _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType !== ZodParsedType.null) {
            const ctx = this._getOrReturnCtx(input);
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.null,
                received: ctx.parsedType
            });
            return INVALID;
        }
        return OK(input.data);
    }
}
ZodNull.create = (params)=>{
    return new ZodNull({
        typeName: ZodFirstPartyTypeKind.ZodNull,
        ...processCreateParams(params)
    });
};
class ZodAny extends ZodType {
    constructor(){
        super(...arguments);
        // to prevent instances of other classes from extending ZodAny. this causes issues with catchall in ZodObject.
        this._any = true;
    }
    _parse(input) {
        return OK(input.data);
    }
}
ZodAny.create = (params)=>{
    return new ZodAny({
        typeName: ZodFirstPartyTypeKind.ZodAny,
        ...processCreateParams(params)
    });
};
class ZodUnknown extends ZodType {
    constructor(){
        super(...arguments);
        // required
        this._unknown = true;
    }
    _parse(input) {
        return OK(input.data);
    }
}
ZodUnknown.create = (params)=>{
    return new ZodUnknown({
        typeName: ZodFirstPartyTypeKind.ZodUnknown,
        ...processCreateParams(params)
    });
};
class ZodNever extends ZodType {
    _parse(input) {
        const ctx = this._getOrReturnCtx(input);
        addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_type,
            expected: ZodParsedType.never,
            received: ctx.parsedType
        });
        return INVALID;
    }
}
ZodNever.create = (params)=>{
    return new ZodNever({
        typeName: ZodFirstPartyTypeKind.ZodNever,
        ...processCreateParams(params)
    });
};
class ZodVoid extends ZodType {
    _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType !== ZodParsedType.undefined) {
            const ctx = this._getOrReturnCtx(input);
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.void,
                received: ctx.parsedType
            });
            return INVALID;
        }
        return OK(input.data);
    }
}
ZodVoid.create = (params)=>{
    return new ZodVoid({
        typeName: ZodFirstPartyTypeKind.ZodVoid,
        ...processCreateParams(params)
    });
};
class ZodArray extends ZodType {
    _parse(input) {
        const { ctx, status } = this._processInputParams(input);
        const def = this._def;
        if (ctx.parsedType !== ZodParsedType.array) {
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.array,
                received: ctx.parsedType
            });
            return INVALID;
        }
        if (def.exactLength !== null) {
            const tooBig = ctx.data.length > def.exactLength.value;
            const tooSmall = ctx.data.length < def.exactLength.value;
            if (tooBig || tooSmall) {
                addIssueToContext(ctx, {
                    code: tooBig ? ZodIssueCode.too_big : ZodIssueCode.too_small,
                    minimum: tooSmall ? def.exactLength.value : undefined,
                    maximum: tooBig ? def.exactLength.value : undefined,
                    type: "array",
                    inclusive: true,
                    exact: true,
                    message: def.exactLength.message
                });
                status.dirty();
            }
        }
        if (def.minLength !== null) {
            if (ctx.data.length < def.minLength.value) {
                addIssueToContext(ctx, {
                    code: ZodIssueCode.too_small,
                    minimum: def.minLength.value,
                    type: "array",
                    inclusive: true,
                    exact: false,
                    message: def.minLength.message
                });
                status.dirty();
            }
        }
        if (def.maxLength !== null) {
            if (ctx.data.length > def.maxLength.value) {
                addIssueToContext(ctx, {
                    code: ZodIssueCode.too_big,
                    maximum: def.maxLength.value,
                    type: "array",
                    inclusive: true,
                    exact: false,
                    message: def.maxLength.message
                });
                status.dirty();
            }
        }
        if (ctx.common.async) return Promise.all([
            ...ctx.data
        ].map((item, i)=>{
            return def.type._parseAsync(new ParseInputLazyPath(ctx, item, ctx.path, i));
        })).then((result)=>{
            return ParseStatus.mergeArray(status, result);
        });
        const result = [
            ...ctx.data
        ].map((item, i)=>{
            return def.type._parseSync(new ParseInputLazyPath(ctx, item, ctx.path, i));
        });
        return ParseStatus.mergeArray(status, result);
    }
    get element() {
        return this._def.type;
    }
    min(minLength, message) {
        return new ZodArray({
            ...this._def,
            minLength: {
                value: minLength,
                message: errorUtil.toString(message)
            }
        });
    }
    max(maxLength, message) {
        return new ZodArray({
            ...this._def,
            maxLength: {
                value: maxLength,
                message: errorUtil.toString(message)
            }
        });
    }
    length(len, message) {
        return new ZodArray({
            ...this._def,
            exactLength: {
                value: len,
                message: errorUtil.toString(message)
            }
        });
    }
    nonempty(message) {
        return this.min(1, message);
    }
}
ZodArray.create = (schema, params)=>{
    return new ZodArray({
        type: schema,
        minLength: null,
        maxLength: null,
        exactLength: null,
        typeName: ZodFirstPartyTypeKind.ZodArray,
        ...processCreateParams(params)
    });
};
function deepPartialify(schema) {
    if (schema instanceof ZodObject) {
        const newShape = {};
        for(const key in schema.shape){
            const fieldSchema = schema.shape[key];
            newShape[key] = ZodOptional.create(deepPartialify(fieldSchema));
        }
        return new ZodObject({
            ...schema._def,
            shape: ()=>newShape
        });
    } else if (schema instanceof ZodArray) return new ZodArray({
        ...schema._def,
        type: deepPartialify(schema.element)
    });
    else if (schema instanceof ZodOptional) return ZodOptional.create(deepPartialify(schema.unwrap()));
    else if (schema instanceof ZodNullable) return ZodNullable.create(deepPartialify(schema.unwrap()));
    else if (schema instanceof ZodTuple) return ZodTuple.create(schema.items.map((item)=>deepPartialify(item)));
    else return schema;
}
class ZodObject extends ZodType {
    constructor(){
        super(...arguments);
        this._cached = null;
        /**
         * @deprecated In most cases, this is no longer needed - unknown properties are now silently stripped.
         * If you want to pass through unknown properties, use `.passthrough()` instead.
         */ this.nonstrict = this.passthrough;
        // extend<
        //   Augmentation extends ZodRawShape,
        //   NewOutput extends util.flatten<{
        //     [k in keyof Augmentation | keyof Output]: k extends keyof Augmentation
        //       ? Augmentation[k]["_output"]
        //       : k extends keyof Output
        //       ? Output[k]
        //       : never;
        //   }>,
        //   NewInput extends util.flatten<{
        //     [k in keyof Augmentation | keyof Input]: k extends keyof Augmentation
        //       ? Augmentation[k]["_input"]
        //       : k extends keyof Input
        //       ? Input[k]
        //       : never;
        //   }>
        // >(
        //   augmentation: Augmentation
        // ): ZodObject<
        //   extendShape<T, Augmentation>,
        //   UnknownKeys,
        //   Catchall,
        //   NewOutput,
        //   NewInput
        // > {
        //   return new ZodObject({
        //     ...this._def,
        //     shape: () => ({
        //       ...this._def.shape(),
        //       ...augmentation,
        //     }),
        //   }) as any;
        // }
        /**
         * @deprecated Use `.extend` instead
         *  */ this.augment = this.extend;
    }
    _getCached() {
        if (this._cached !== null) return this._cached;
        const shape = this._def.shape();
        const keys = util.objectKeys(shape);
        return this._cached = {
            shape,
            keys
        };
    }
    _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType !== ZodParsedType.object) {
            const ctx = this._getOrReturnCtx(input);
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.object,
                received: ctx.parsedType
            });
            return INVALID;
        }
        const { status, ctx } = this._processInputParams(input);
        const { shape, keys: shapeKeys } = this._getCached();
        const extraKeys = [];
        if (!(this._def.catchall instanceof ZodNever && this._def.unknownKeys === "strip")) {
            for(const key in ctx.data)if (!shapeKeys.includes(key)) extraKeys.push(key);
        }
        const pairs = [];
        for (const key of shapeKeys){
            const keyValidator = shape[key];
            const value = ctx.data[key];
            pairs.push({
                key: {
                    status: "valid",
                    value: key
                },
                value: keyValidator._parse(new ParseInputLazyPath(ctx, value, ctx.path, key)),
                alwaysSet: key in ctx.data
            });
        }
        if (this._def.catchall instanceof ZodNever) {
            const unknownKeys = this._def.unknownKeys;
            if (unknownKeys === "passthrough") for (const key of extraKeys)pairs.push({
                key: {
                    status: "valid",
                    value: key
                },
                value: {
                    status: "valid",
                    value: ctx.data[key]
                }
            });
            else if (unknownKeys === "strict") {
                if (extraKeys.length > 0) {
                    addIssueToContext(ctx, {
                        code: ZodIssueCode.unrecognized_keys,
                        keys: extraKeys
                    });
                    status.dirty();
                }
            } else if (unknownKeys === "strip") ;
            else throw new Error(`Internal ZodObject error: invalid unknownKeys value.`);
        } else {
            // run catchall validation
            const catchall = this._def.catchall;
            for (const key of extraKeys){
                const value = ctx.data[key];
                pairs.push({
                    key: {
                        status: "valid",
                        value: key
                    },
                    value: catchall._parse(new ParseInputLazyPath(ctx, value, ctx.path, key) //, ctx.child(key), value, getParsedType(value)
                    ),
                    alwaysSet: key in ctx.data
                });
            }
        }
        if (ctx.common.async) return Promise.resolve().then(async ()=>{
            const syncPairs = [];
            for (const pair of pairs){
                const key = await pair.key;
                syncPairs.push({
                    key,
                    value: await pair.value,
                    alwaysSet: pair.alwaysSet
                });
            }
            return syncPairs;
        }).then((syncPairs)=>{
            return ParseStatus.mergeObjectSync(status, syncPairs);
        });
        else return ParseStatus.mergeObjectSync(status, pairs);
    }
    get shape() {
        return this._def.shape();
    }
    strict(message) {
        errorUtil.errToObj;
        return new ZodObject({
            ...this._def,
            unknownKeys: "strict",
            ...message !== undefined ? {
                errorMap: (issue, ctx)=>{
                    var _a, _b, _c, _d;
                    const defaultError = (_c = (_b = (_a = this._def).errorMap) === null || _b === void 0 ? void 0 : _b.call(_a, issue, ctx).message) !== null && _c !== void 0 ? _c : ctx.defaultError;
                    if (issue.code === "unrecognized_keys") return {
                        message: (_d = errorUtil.errToObj(message).message) !== null && _d !== void 0 ? _d : defaultError
                    };
                    return {
                        message: defaultError
                    };
                }
            } : {}
        });
    }
    strip() {
        return new ZodObject({
            ...this._def,
            unknownKeys: "strip"
        });
    }
    passthrough() {
        return new ZodObject({
            ...this._def,
            unknownKeys: "passthrough"
        });
    }
    // const AugmentFactory =
    //   <Def extends ZodObjectDef>(def: Def) =>
    //   <Augmentation extends ZodRawShape>(
    //     augmentation: Augmentation
    //   ): ZodObject<
    //     extendShape<ReturnType<Def["shape"]>, Augmentation>,
    //     Def["unknownKeys"],
    //     Def["catchall"]
    //   > => {
    //     return new ZodObject({
    //       ...def,
    //       shape: () => ({
    //         ...def.shape(),
    //         ...augmentation,
    //       }),
    //     }) as any;
    //   };
    extend(augmentation) {
        return new ZodObject({
            ...this._def,
            shape: ()=>({
                    ...this._def.shape(),
                    ...augmentation
                })
        });
    }
    /**
     * Prior to zod@1.0.12 there was a bug in the
     * inferred type of merged objects. Please
     * upgrade if you are experiencing issues.
     */ merge(merging) {
        const merged = new ZodObject({
            unknownKeys: merging._def.unknownKeys,
            catchall: merging._def.catchall,
            shape: ()=>({
                    ...this._def.shape(),
                    ...merging._def.shape()
                }),
            typeName: ZodFirstPartyTypeKind.ZodObject
        });
        return merged;
    }
    // merge<
    //   Incoming extends AnyZodObject,
    //   Augmentation extends Incoming["shape"],
    //   NewOutput extends {
    //     [k in keyof Augmentation | keyof Output]: k extends keyof Augmentation
    //       ? Augmentation[k]["_output"]
    //       : k extends keyof Output
    //       ? Output[k]
    //       : never;
    //   },
    //   NewInput extends {
    //     [k in keyof Augmentation | keyof Input]: k extends keyof Augmentation
    //       ? Augmentation[k]["_input"]
    //       : k extends keyof Input
    //       ? Input[k]
    //       : never;
    //   }
    // >(
    //   merging: Incoming
    // ): ZodObject<
    //   extendShape<T, ReturnType<Incoming["_def"]["shape"]>>,
    //   Incoming["_def"]["unknownKeys"],
    //   Incoming["_def"]["catchall"],
    //   NewOutput,
    //   NewInput
    // > {
    //   const merged: any = new ZodObject({
    //     unknownKeys: merging._def.unknownKeys,
    //     catchall: merging._def.catchall,
    //     shape: () =>
    //       objectUtil.mergeShapes(this._def.shape(), merging._def.shape()),
    //     typeName: ZodFirstPartyTypeKind.ZodObject,
    //   }) as any;
    //   return merged;
    // }
    setKey(key, schema) {
        return this.augment({
            [key]: schema
        });
    }
    // merge<Incoming extends AnyZodObject>(
    //   merging: Incoming
    // ): //ZodObject<T & Incoming["_shape"], UnknownKeys, Catchall> = (merging) => {
    // ZodObject<
    //   extendShape<T, ReturnType<Incoming["_def"]["shape"]>>,
    //   Incoming["_def"]["unknownKeys"],
    //   Incoming["_def"]["catchall"]
    // > {
    //   // const mergedShape = objectUtil.mergeShapes(
    //   //   this._def.shape(),
    //   //   merging._def.shape()
    //   // );
    //   const merged: any = new ZodObject({
    //     unknownKeys: merging._def.unknownKeys,
    //     catchall: merging._def.catchall,
    //     shape: () =>
    //       objectUtil.mergeShapes(this._def.shape(), merging._def.shape()),
    //     typeName: ZodFirstPartyTypeKind.ZodObject,
    //   }) as any;
    //   return merged;
    // }
    catchall(index) {
        return new ZodObject({
            ...this._def,
            catchall: index
        });
    }
    pick(mask) {
        const shape = {};
        util.objectKeys(mask).forEach((key)=>{
            if (mask[key] && this.shape[key]) shape[key] = this.shape[key];
        });
        return new ZodObject({
            ...this._def,
            shape: ()=>shape
        });
    }
    omit(mask) {
        const shape = {};
        util.objectKeys(this.shape).forEach((key)=>{
            if (!mask[key]) shape[key] = this.shape[key];
        });
        return new ZodObject({
            ...this._def,
            shape: ()=>shape
        });
    }
    /**
     * @deprecated
     */ deepPartial() {
        return deepPartialify(this);
    }
    partial(mask) {
        const newShape = {};
        util.objectKeys(this.shape).forEach((key)=>{
            const fieldSchema = this.shape[key];
            if (mask && !mask[key]) newShape[key] = fieldSchema;
            else newShape[key] = fieldSchema.optional();
        });
        return new ZodObject({
            ...this._def,
            shape: ()=>newShape
        });
    }
    required(mask) {
        const newShape = {};
        util.objectKeys(this.shape).forEach((key)=>{
            if (mask && !mask[key]) newShape[key] = this.shape[key];
            else {
                const fieldSchema = this.shape[key];
                let newField = fieldSchema;
                while(newField instanceof ZodOptional)newField = newField._def.innerType;
                newShape[key] = newField;
            }
        });
        return new ZodObject({
            ...this._def,
            shape: ()=>newShape
        });
    }
    keyof() {
        return createZodEnum(util.objectKeys(this.shape));
    }
}
ZodObject.create = (shape, params)=>{
    return new ZodObject({
        shape: ()=>shape,
        unknownKeys: "strip",
        catchall: ZodNever.create(),
        typeName: ZodFirstPartyTypeKind.ZodObject,
        ...processCreateParams(params)
    });
};
ZodObject.strictCreate = (shape, params)=>{
    return new ZodObject({
        shape: ()=>shape,
        unknownKeys: "strict",
        catchall: ZodNever.create(),
        typeName: ZodFirstPartyTypeKind.ZodObject,
        ...processCreateParams(params)
    });
};
ZodObject.lazycreate = (shape, params)=>{
    return new ZodObject({
        shape,
        unknownKeys: "strip",
        catchall: ZodNever.create(),
        typeName: ZodFirstPartyTypeKind.ZodObject,
        ...processCreateParams(params)
    });
};
class ZodUnion extends ZodType {
    _parse(input) {
        const { ctx } = this._processInputParams(input);
        const options = this._def.options;
        function handleResults(results) {
            // return first issue-free validation if it exists
            for (const result of results){
                if (result.result.status === "valid") return result.result;
            }
            for (const result of results)if (result.result.status === "dirty") {
                // add issues from dirty option
                ctx.common.issues.push(...result.ctx.common.issues);
                return result.result;
            }
            // return invalid
            const unionErrors = results.map((result)=>new ZodError(result.ctx.common.issues));
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_union,
                unionErrors
            });
            return INVALID;
        }
        if (ctx.common.async) return Promise.all(options.map(async (option)=>{
            const childCtx = {
                ...ctx,
                common: {
                    ...ctx.common,
                    issues: []
                },
                parent: null
            };
            return {
                result: await option._parseAsync({
                    data: ctx.data,
                    path: ctx.path,
                    parent: childCtx
                }),
                ctx: childCtx
            };
        })).then(handleResults);
        else {
            let dirty = undefined;
            const issues = [];
            for (const option of options){
                const childCtx = {
                    ...ctx,
                    common: {
                        ...ctx.common,
                        issues: []
                    },
                    parent: null
                };
                const result = option._parseSync({
                    data: ctx.data,
                    path: ctx.path,
                    parent: childCtx
                });
                if (result.status === "valid") return result;
                else if (result.status === "dirty" && !dirty) dirty = {
                    result,
                    ctx: childCtx
                };
                if (childCtx.common.issues.length) issues.push(childCtx.common.issues);
            }
            if (dirty) {
                ctx.common.issues.push(...dirty.ctx.common.issues);
                return dirty.result;
            }
            const unionErrors = issues.map((issues)=>new ZodError(issues));
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_union,
                unionErrors
            });
            return INVALID;
        }
    }
    get options() {
        return this._def.options;
    }
}
ZodUnion.create = (types, params)=>{
    return new ZodUnion({
        options: types,
        typeName: ZodFirstPartyTypeKind.ZodUnion,
        ...processCreateParams(params)
    });
};
/////////////////////////////////////////////////////
/////////////////////////////////////////////////////
//////////                                 //////////
//////////      ZodDiscriminatedUnion      //////////
//////////                                 //////////
/////////////////////////////////////////////////////
/////////////////////////////////////////////////////
const getDiscriminator = (type)=>{
    if (type instanceof ZodLazy) return getDiscriminator(type.schema);
    else if (type instanceof ZodEffects) return getDiscriminator(type.innerType());
    else if (type instanceof ZodLiteral) return [
        type.value
    ];
    else if (type instanceof ZodEnum) return type.options;
    else if (type instanceof ZodNativeEnum) // eslint-disable-next-line ban/ban
    return Object.keys(type.enum);
    else if (type instanceof ZodDefault) return getDiscriminator(type._def.innerType);
    else if (type instanceof ZodUndefined) return [
        undefined
    ];
    else if (type instanceof ZodNull) return [
        null
    ];
    else return null;
};
class ZodDiscriminatedUnion extends ZodType {
    _parse(input) {
        const { ctx } = this._processInputParams(input);
        if (ctx.parsedType !== ZodParsedType.object) {
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.object,
                received: ctx.parsedType
            });
            return INVALID;
        }
        const discriminator = this.discriminator;
        const discriminatorValue = ctx.data[discriminator];
        const option = this.optionsMap.get(discriminatorValue);
        if (!option) {
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_union_discriminator,
                options: Array.from(this.optionsMap.keys()),
                path: [
                    discriminator
                ]
            });
            return INVALID;
        }
        if (ctx.common.async) return option._parseAsync({
            data: ctx.data,
            path: ctx.path,
            parent: ctx
        });
        else return option._parseSync({
            data: ctx.data,
            path: ctx.path,
            parent: ctx
        });
    }
    get discriminator() {
        return this._def.discriminator;
    }
    get options() {
        return this._def.options;
    }
    get optionsMap() {
        return this._def.optionsMap;
    }
    /**
     * The constructor of the discriminated union schema. Its behaviour is very similar to that of the normal z.union() constructor.
     * However, it only allows a union of objects, all of which need to share a discriminator property. This property must
     * have a different value for each object in the union.
     * @param discriminator the name of the discriminator property
     * @param types an array of object schemas
     * @param params
     */ static create(discriminator, options, params) {
        // Get all the valid discriminator values
        const optionsMap = new Map();
        // try {
        for (const type of options){
            const discriminatorValues = getDiscriminator(type.shape[discriminator]);
            if (!discriminatorValues) throw new Error(`A discriminator value for key \`${discriminator}\` could not be extracted from all schema options`);
            for (const value of discriminatorValues){
                if (optionsMap.has(value)) throw new Error(`Discriminator property ${String(discriminator)} has duplicate value ${String(value)}`);
                optionsMap.set(value, type);
            }
        }
        return new ZodDiscriminatedUnion({
            typeName: ZodFirstPartyTypeKind.ZodDiscriminatedUnion,
            discriminator,
            options,
            optionsMap,
            ...processCreateParams(params)
        });
    }
}
function mergeValues(a, b) {
    const aType = getParsedType(a);
    const bType = getParsedType(b);
    if (a === b) return {
        valid: true,
        data: a
    };
    else if (aType === ZodParsedType.object && bType === ZodParsedType.object) {
        const bKeys = util.objectKeys(b);
        const sharedKeys = util.objectKeys(a).filter((key)=>bKeys.indexOf(key) !== -1);
        const newObj = {
            ...a,
            ...b
        };
        for (const key of sharedKeys){
            const sharedValue = mergeValues(a[key], b[key]);
            if (!sharedValue.valid) return {
                valid: false
            };
            newObj[key] = sharedValue.data;
        }
        return {
            valid: true,
            data: newObj
        };
    } else if (aType === ZodParsedType.array && bType === ZodParsedType.array) {
        if (a.length !== b.length) return {
            valid: false
        };
        const newArray = [];
        for(let index = 0; index < a.length; index++){
            const itemA = a[index];
            const itemB = b[index];
            const sharedValue = mergeValues(itemA, itemB);
            if (!sharedValue.valid) return {
                valid: false
            };
            newArray.push(sharedValue.data);
        }
        return {
            valid: true,
            data: newArray
        };
    } else if (aType === ZodParsedType.date && bType === ZodParsedType.date && +a === +b) return {
        valid: true,
        data: a
    };
    else return {
        valid: false
    };
}
class ZodIntersection extends ZodType {
    _parse(input) {
        const { status, ctx } = this._processInputParams(input);
        const handleParsed = (parsedLeft, parsedRight)=>{
            if (isAborted(parsedLeft) || isAborted(parsedRight)) return INVALID;
            const merged = mergeValues(parsedLeft.value, parsedRight.value);
            if (!merged.valid) {
                addIssueToContext(ctx, {
                    code: ZodIssueCode.invalid_intersection_types
                });
                return INVALID;
            }
            if (isDirty(parsedLeft) || isDirty(parsedRight)) status.dirty();
            return {
                status: status.value,
                value: merged.data
            };
        };
        if (ctx.common.async) return Promise.all([
            this._def.left._parseAsync({
                data: ctx.data,
                path: ctx.path,
                parent: ctx
            }),
            this._def.right._parseAsync({
                data: ctx.data,
                path: ctx.path,
                parent: ctx
            })
        ]).then(([left, right])=>handleParsed(left, right));
        else return handleParsed(this._def.left._parseSync({
            data: ctx.data,
            path: ctx.path,
            parent: ctx
        }), this._def.right._parseSync({
            data: ctx.data,
            path: ctx.path,
            parent: ctx
        }));
    }
}
ZodIntersection.create = (left, right, params)=>{
    return new ZodIntersection({
        left: left,
        right: right,
        typeName: ZodFirstPartyTypeKind.ZodIntersection,
        ...processCreateParams(params)
    });
};
class ZodTuple extends ZodType {
    _parse(input) {
        const { status, ctx } = this._processInputParams(input);
        if (ctx.parsedType !== ZodParsedType.array) {
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.array,
                received: ctx.parsedType
            });
            return INVALID;
        }
        if (ctx.data.length < this._def.items.length) {
            addIssueToContext(ctx, {
                code: ZodIssueCode.too_small,
                minimum: this._def.items.length,
                inclusive: true,
                exact: false,
                type: "array"
            });
            return INVALID;
        }
        const rest = this._def.rest;
        if (!rest && ctx.data.length > this._def.items.length) {
            addIssueToContext(ctx, {
                code: ZodIssueCode.too_big,
                maximum: this._def.items.length,
                inclusive: true,
                exact: false,
                type: "array"
            });
            status.dirty();
        }
        const items = [
            ...ctx.data
        ].map((item, itemIndex)=>{
            const schema = this._def.items[itemIndex] || this._def.rest;
            if (!schema) return null;
            return schema._parse(new ParseInputLazyPath(ctx, item, ctx.path, itemIndex));
        }).filter((x)=>!!x); // filter nulls
        if (ctx.common.async) return Promise.all(items).then((results)=>{
            return ParseStatus.mergeArray(status, results);
        });
        else return ParseStatus.mergeArray(status, items);
    }
    get items() {
        return this._def.items;
    }
    rest(rest) {
        return new ZodTuple({
            ...this._def,
            rest
        });
    }
}
ZodTuple.create = (schemas, params)=>{
    if (!Array.isArray(schemas)) throw new Error("You must pass an array of schemas to z.tuple([ ... ])");
    return new ZodTuple({
        items: schemas,
        typeName: ZodFirstPartyTypeKind.ZodTuple,
        rest: null,
        ...processCreateParams(params)
    });
};
class ZodRecord extends ZodType {
    get keySchema() {
        return this._def.keyType;
    }
    get valueSchema() {
        return this._def.valueType;
    }
    _parse(input) {
        const { status, ctx } = this._processInputParams(input);
        if (ctx.parsedType !== ZodParsedType.object) {
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.object,
                received: ctx.parsedType
            });
            return INVALID;
        }
        const pairs = [];
        const keyType = this._def.keyType;
        const valueType = this._def.valueType;
        for(const key in ctx.data)pairs.push({
            key: keyType._parse(new ParseInputLazyPath(ctx, key, ctx.path, key)),
            value: valueType._parse(new ParseInputLazyPath(ctx, ctx.data[key], ctx.path, key))
        });
        if (ctx.common.async) return ParseStatus.mergeObjectAsync(status, pairs);
        else return ParseStatus.mergeObjectSync(status, pairs);
    }
    get element() {
        return this._def.valueType;
    }
    static create(first, second, third) {
        if (second instanceof ZodType) return new ZodRecord({
            keyType: first,
            valueType: second,
            typeName: ZodFirstPartyTypeKind.ZodRecord,
            ...processCreateParams(third)
        });
        return new ZodRecord({
            keyType: ZodString.create(),
            valueType: first,
            typeName: ZodFirstPartyTypeKind.ZodRecord,
            ...processCreateParams(second)
        });
    }
}
class ZodMap extends ZodType {
    get keySchema() {
        return this._def.keyType;
    }
    get valueSchema() {
        return this._def.valueType;
    }
    _parse(input) {
        const { status, ctx } = this._processInputParams(input);
        if (ctx.parsedType !== ZodParsedType.map) {
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.map,
                received: ctx.parsedType
            });
            return INVALID;
        }
        const keyType = this._def.keyType;
        const valueType = this._def.valueType;
        const pairs = [
            ...ctx.data.entries()
        ].map(([key, value], index)=>{
            return {
                key: keyType._parse(new ParseInputLazyPath(ctx, key, ctx.path, [
                    index,
                    "key"
                ])),
                value: valueType._parse(new ParseInputLazyPath(ctx, value, ctx.path, [
                    index,
                    "value"
                ]))
            };
        });
        if (ctx.common.async) {
            const finalMap = new Map();
            return Promise.resolve().then(async ()=>{
                for (const pair of pairs){
                    const key = await pair.key;
                    const value = await pair.value;
                    if (key.status === "aborted" || value.status === "aborted") return INVALID;
                    if (key.status === "dirty" || value.status === "dirty") status.dirty();
                    finalMap.set(key.value, value.value);
                }
                return {
                    status: status.value,
                    value: finalMap
                };
            });
        } else {
            const finalMap = new Map();
            for (const pair of pairs){
                const key = pair.key;
                const value = pair.value;
                if (key.status === "aborted" || value.status === "aborted") return INVALID;
                if (key.status === "dirty" || value.status === "dirty") status.dirty();
                finalMap.set(key.value, value.value);
            }
            return {
                status: status.value,
                value: finalMap
            };
        }
    }
}
ZodMap.create = (keyType, valueType, params)=>{
    return new ZodMap({
        valueType,
        keyType,
        typeName: ZodFirstPartyTypeKind.ZodMap,
        ...processCreateParams(params)
    });
};
class ZodSet extends ZodType {
    _parse(input) {
        const { status, ctx } = this._processInputParams(input);
        if (ctx.parsedType !== ZodParsedType.set) {
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.set,
                received: ctx.parsedType
            });
            return INVALID;
        }
        const def = this._def;
        if (def.minSize !== null) {
            if (ctx.data.size < def.minSize.value) {
                addIssueToContext(ctx, {
                    code: ZodIssueCode.too_small,
                    minimum: def.minSize.value,
                    type: "set",
                    inclusive: true,
                    exact: false,
                    message: def.minSize.message
                });
                status.dirty();
            }
        }
        if (def.maxSize !== null) {
            if (ctx.data.size > def.maxSize.value) {
                addIssueToContext(ctx, {
                    code: ZodIssueCode.too_big,
                    maximum: def.maxSize.value,
                    type: "set",
                    inclusive: true,
                    exact: false,
                    message: def.maxSize.message
                });
                status.dirty();
            }
        }
        const valueType = this._def.valueType;
        function finalizeSet(elements) {
            const parsedSet = new Set();
            for (const element of elements){
                if (element.status === "aborted") return INVALID;
                if (element.status === "dirty") status.dirty();
                parsedSet.add(element.value);
            }
            return {
                status: status.value,
                value: parsedSet
            };
        }
        const elements = [
            ...ctx.data.values()
        ].map((item, i)=>valueType._parse(new ParseInputLazyPath(ctx, item, ctx.path, i)));
        if (ctx.common.async) return Promise.all(elements).then((elements)=>finalizeSet(elements));
        else return finalizeSet(elements);
    }
    min(minSize, message) {
        return new ZodSet({
            ...this._def,
            minSize: {
                value: minSize,
                message: errorUtil.toString(message)
            }
        });
    }
    max(maxSize, message) {
        return new ZodSet({
            ...this._def,
            maxSize: {
                value: maxSize,
                message: errorUtil.toString(message)
            }
        });
    }
    size(size, message) {
        return this.min(size, message).max(size, message);
    }
    nonempty(message) {
        return this.min(1, message);
    }
}
ZodSet.create = (valueType, params)=>{
    return new ZodSet({
        valueType,
        minSize: null,
        maxSize: null,
        typeName: ZodFirstPartyTypeKind.ZodSet,
        ...processCreateParams(params)
    });
};
class ZodFunction extends ZodType {
    constructor(){
        super(...arguments);
        this.validate = this.implement;
    }
    _parse(input) {
        const { ctx } = this._processInputParams(input);
        if (ctx.parsedType !== ZodParsedType.function) {
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.function,
                received: ctx.parsedType
            });
            return INVALID;
        }
        function makeArgsIssue(args, error) {
            return makeIssue({
                data: args,
                path: ctx.path,
                errorMaps: [
                    ctx.common.contextualErrorMap,
                    ctx.schemaErrorMap,
                    getErrorMap(),
                    errorMap
                ].filter((x)=>!!x),
                issueData: {
                    code: ZodIssueCode.invalid_arguments,
                    argumentsError: error
                }
            });
        }
        function makeReturnsIssue(returns, error) {
            return makeIssue({
                data: returns,
                path: ctx.path,
                errorMaps: [
                    ctx.common.contextualErrorMap,
                    ctx.schemaErrorMap,
                    getErrorMap(),
                    errorMap
                ].filter((x)=>!!x),
                issueData: {
                    code: ZodIssueCode.invalid_return_type,
                    returnTypeError: error
                }
            });
        }
        const params = {
            errorMap: ctx.common.contextualErrorMap
        };
        const fn = ctx.data;
        if (this._def.returns instanceof ZodPromise) {
            // Would love a way to avoid disabling this rule, but we need
            // an alias (using an arrow function was what caused 2651).
            // eslint-disable-next-line @typescript-eslint/no-this-alias
            const me = this;
            return OK(async function(...args) {
                const error = new ZodError([]);
                const parsedArgs = await me._def.args.parseAsync(args, params).catch((e)=>{
                    error.addIssue(makeArgsIssue(args, e));
                    throw error;
                });
                const result = await Reflect.apply(fn, this, parsedArgs);
                const parsedReturns = await me._def.returns._def.type.parseAsync(result, params).catch((e)=>{
                    error.addIssue(makeReturnsIssue(result, e));
                    throw error;
                });
                return parsedReturns;
            });
        } else {
            // Would love a way to avoid disabling this rule, but we need
            // an alias (using an arrow function was what caused 2651).
            // eslint-disable-next-line @typescript-eslint/no-this-alias
            const me = this;
            return OK(function(...args) {
                const parsedArgs = me._def.args.safeParse(args, params);
                if (!parsedArgs.success) throw new ZodError([
                    makeArgsIssue(args, parsedArgs.error)
                ]);
                const result = Reflect.apply(fn, this, parsedArgs.data);
                const parsedReturns = me._def.returns.safeParse(result, params);
                if (!parsedReturns.success) throw new ZodError([
                    makeReturnsIssue(result, parsedReturns.error)
                ]);
                return parsedReturns.data;
            });
        }
    }
    parameters() {
        return this._def.args;
    }
    returnType() {
        return this._def.returns;
    }
    args(...items) {
        return new ZodFunction({
            ...this._def,
            args: ZodTuple.create(items).rest(ZodUnknown.create())
        });
    }
    returns(returnType) {
        return new ZodFunction({
            ...this._def,
            returns: returnType
        });
    }
    implement(func) {
        const validatedFunc = this.parse(func);
        return validatedFunc;
    }
    strictImplement(func) {
        const validatedFunc = this.parse(func);
        return validatedFunc;
    }
    static create(args, returns, params) {
        return new ZodFunction({
            args: args ? args : ZodTuple.create([]).rest(ZodUnknown.create()),
            returns: returns || ZodUnknown.create(),
            typeName: ZodFirstPartyTypeKind.ZodFunction,
            ...processCreateParams(params)
        });
    }
}
class ZodLazy extends ZodType {
    get schema() {
        return this._def.getter();
    }
    _parse(input) {
        const { ctx } = this._processInputParams(input);
        const lazySchema = this._def.getter();
        return lazySchema._parse({
            data: ctx.data,
            path: ctx.path,
            parent: ctx
        });
    }
}
ZodLazy.create = (getter, params)=>{
    return new ZodLazy({
        getter: getter,
        typeName: ZodFirstPartyTypeKind.ZodLazy,
        ...processCreateParams(params)
    });
};
class ZodLiteral extends ZodType {
    _parse(input) {
        if (input.data !== this._def.value) {
            const ctx = this._getOrReturnCtx(input);
            addIssueToContext(ctx, {
                received: ctx.data,
                code: ZodIssueCode.invalid_literal,
                expected: this._def.value
            });
            return INVALID;
        }
        return {
            status: "valid",
            value: input.data
        };
    }
    get value() {
        return this._def.value;
    }
}
ZodLiteral.create = (value, params)=>{
    return new ZodLiteral({
        value: value,
        typeName: ZodFirstPartyTypeKind.ZodLiteral,
        ...processCreateParams(params)
    });
};
function createZodEnum(values, params) {
    return new ZodEnum({
        values,
        typeName: ZodFirstPartyTypeKind.ZodEnum,
        ...processCreateParams(params)
    });
}
class ZodEnum extends ZodType {
    _parse(input) {
        if (typeof input.data !== "string") {
            const ctx = this._getOrReturnCtx(input);
            const expectedValues = this._def.values;
            addIssueToContext(ctx, {
                expected: util.joinValues(expectedValues),
                received: ctx.parsedType,
                code: ZodIssueCode.invalid_type
            });
            return INVALID;
        }
        if (this._def.values.indexOf(input.data) === -1) {
            const ctx = this._getOrReturnCtx(input);
            const expectedValues = this._def.values;
            addIssueToContext(ctx, {
                received: ctx.data,
                code: ZodIssueCode.invalid_enum_value,
                options: expectedValues
            });
            return INVALID;
        }
        return OK(input.data);
    }
    get options() {
        return this._def.values;
    }
    get enum() {
        const enumValues = {};
        for (const val of this._def.values)enumValues[val] = val;
        return enumValues;
    }
    get Values() {
        const enumValues = {};
        for (const val of this._def.values)enumValues[val] = val;
        return enumValues;
    }
    get Enum() {
        const enumValues = {};
        for (const val of this._def.values)enumValues[val] = val;
        return enumValues;
    }
    extract(values) {
        return ZodEnum.create(values);
    }
    exclude(values) {
        return ZodEnum.create(this.options.filter((opt)=>!values.includes(opt)));
    }
}
ZodEnum.create = createZodEnum;
class ZodNativeEnum extends ZodType {
    _parse(input) {
        const nativeEnumValues = util.getValidEnumValues(this._def.values);
        const ctx = this._getOrReturnCtx(input);
        if (ctx.parsedType !== ZodParsedType.string && ctx.parsedType !== ZodParsedType.number) {
            const expectedValues = util.objectValues(nativeEnumValues);
            addIssueToContext(ctx, {
                expected: util.joinValues(expectedValues),
                received: ctx.parsedType,
                code: ZodIssueCode.invalid_type
            });
            return INVALID;
        }
        if (nativeEnumValues.indexOf(input.data) === -1) {
            const expectedValues = util.objectValues(nativeEnumValues);
            addIssueToContext(ctx, {
                received: ctx.data,
                code: ZodIssueCode.invalid_enum_value,
                options: expectedValues
            });
            return INVALID;
        }
        return OK(input.data);
    }
    get enum() {
        return this._def.values;
    }
}
ZodNativeEnum.create = (values, params)=>{
    return new ZodNativeEnum({
        values: values,
        typeName: ZodFirstPartyTypeKind.ZodNativeEnum,
        ...processCreateParams(params)
    });
};
class ZodPromise extends ZodType {
    unwrap() {
        return this._def.type;
    }
    _parse(input) {
        const { ctx } = this._processInputParams(input);
        if (ctx.parsedType !== ZodParsedType.promise && ctx.common.async === false) {
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.promise,
                received: ctx.parsedType
            });
            return INVALID;
        }
        const promisified = ctx.parsedType === ZodParsedType.promise ? ctx.data : Promise.resolve(ctx.data);
        return OK(promisified.then((data)=>{
            return this._def.type.parseAsync(data, {
                path: ctx.path,
                errorMap: ctx.common.contextualErrorMap
            });
        }));
    }
}
ZodPromise.create = (schema, params)=>{
    return new ZodPromise({
        type: schema,
        typeName: ZodFirstPartyTypeKind.ZodPromise,
        ...processCreateParams(params)
    });
};
class ZodEffects extends ZodType {
    innerType() {
        return this._def.schema;
    }
    sourceType() {
        return this._def.schema._def.typeName === ZodFirstPartyTypeKind.ZodEffects ? this._def.schema.sourceType() : this._def.schema;
    }
    _parse(input) {
        const { status, ctx } = this._processInputParams(input);
        const effect = this._def.effect || null;
        const checkCtx = {
            addIssue: (arg)=>{
                addIssueToContext(ctx, arg);
                if (arg.fatal) status.abort();
                else status.dirty();
            },
            get path () {
                return ctx.path;
            }
        };
        checkCtx.addIssue = checkCtx.addIssue.bind(checkCtx);
        if (effect.type === "preprocess") {
            const processed = effect.transform(ctx.data, checkCtx);
            if (ctx.common.issues.length) return {
                status: "dirty",
                value: ctx.data
            };
            if (ctx.common.async) return Promise.resolve(processed).then((processed)=>{
                return this._def.schema._parseAsync({
                    data: processed,
                    path: ctx.path,
                    parent: ctx
                });
            });
            else return this._def.schema._parseSync({
                data: processed,
                path: ctx.path,
                parent: ctx
            });
        }
        if (effect.type === "refinement") {
            const executeRefinement = (acc)=>{
                const result = effect.refinement(acc, checkCtx);
                if (ctx.common.async) return Promise.resolve(result);
                if (result instanceof Promise) throw new Error("Async refinement encountered during synchronous parse operation. Use .parseAsync instead.");
                return acc;
            };
            if (ctx.common.async === false) {
                const inner = this._def.schema._parseSync({
                    data: ctx.data,
                    path: ctx.path,
                    parent: ctx
                });
                if (inner.status === "aborted") return INVALID;
                if (inner.status === "dirty") status.dirty();
                // return value is ignored
                executeRefinement(inner.value);
                return {
                    status: status.value,
                    value: inner.value
                };
            } else return this._def.schema._parseAsync({
                data: ctx.data,
                path: ctx.path,
                parent: ctx
            }).then((inner)=>{
                if (inner.status === "aborted") return INVALID;
                if (inner.status === "dirty") status.dirty();
                return executeRefinement(inner.value).then(()=>{
                    return {
                        status: status.value,
                        value: inner.value
                    };
                });
            });
        }
        if (effect.type === "transform") {
            if (ctx.common.async === false) {
                const base = this._def.schema._parseSync({
                    data: ctx.data,
                    path: ctx.path,
                    parent: ctx
                });
                if (!isValid(base)) return base;
                const result = effect.transform(base.value, checkCtx);
                if (result instanceof Promise) throw new Error(`Asynchronous transform encountered during synchronous parse operation. Use .parseAsync instead.`);
                return {
                    status: status.value,
                    value: result
                };
            } else return this._def.schema._parseAsync({
                data: ctx.data,
                path: ctx.path,
                parent: ctx
            }).then((base)=>{
                if (!isValid(base)) return base;
                return Promise.resolve(effect.transform(base.value, checkCtx)).then((result)=>({
                        status: status.value,
                        value: result
                    }));
            });
        }
        util.assertNever(effect);
    }
}
ZodEffects.create = (schema, effect, params)=>{
    return new ZodEffects({
        schema,
        typeName: ZodFirstPartyTypeKind.ZodEffects,
        effect,
        ...processCreateParams(params)
    });
};
ZodEffects.createWithPreprocess = (preprocess, schema, params)=>{
    return new ZodEffects({
        schema,
        effect: {
            type: "preprocess",
            transform: preprocess
        },
        typeName: ZodFirstPartyTypeKind.ZodEffects,
        ...processCreateParams(params)
    });
};
class ZodOptional extends ZodType {
    _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType === ZodParsedType.undefined) return OK(undefined);
        return this._def.innerType._parse(input);
    }
    unwrap() {
        return this._def.innerType;
    }
}
ZodOptional.create = (type, params)=>{
    return new ZodOptional({
        innerType: type,
        typeName: ZodFirstPartyTypeKind.ZodOptional,
        ...processCreateParams(params)
    });
};
class ZodNullable extends ZodType {
    _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType === ZodParsedType.null) return OK(null);
        return this._def.innerType._parse(input);
    }
    unwrap() {
        return this._def.innerType;
    }
}
ZodNullable.create = (type, params)=>{
    return new ZodNullable({
        innerType: type,
        typeName: ZodFirstPartyTypeKind.ZodNullable,
        ...processCreateParams(params)
    });
};
class ZodDefault extends ZodType {
    _parse(input) {
        const { ctx } = this._processInputParams(input);
        let data = ctx.data;
        if (ctx.parsedType === ZodParsedType.undefined) data = this._def.defaultValue();
        return this._def.innerType._parse({
            data,
            path: ctx.path,
            parent: ctx
        });
    }
    removeDefault() {
        return this._def.innerType;
    }
}
ZodDefault.create = (type, params)=>{
    return new ZodDefault({
        innerType: type,
        typeName: ZodFirstPartyTypeKind.ZodDefault,
        defaultValue: typeof params.default === "function" ? params.default : ()=>params.default,
        ...processCreateParams(params)
    });
};
class ZodCatch extends ZodType {
    _parse(input) {
        const { ctx } = this._processInputParams(input);
        // newCtx is used to not collect issues from inner types in ctx
        const newCtx = {
            ...ctx,
            common: {
                ...ctx.common,
                issues: []
            }
        };
        const result = this._def.innerType._parse({
            data: newCtx.data,
            path: newCtx.path,
            parent: {
                ...newCtx
            }
        });
        if (isAsync(result)) return result.then((result)=>{
            return {
                status: "valid",
                value: result.status === "valid" ? result.value : this._def.catchValue({
                    get error () {
                        return new ZodError(newCtx.common.issues);
                    },
                    input: newCtx.data
                })
            };
        });
        else return {
            status: "valid",
            value: result.status === "valid" ? result.value : this._def.catchValue({
                get error () {
                    return new ZodError(newCtx.common.issues);
                },
                input: newCtx.data
            })
        };
    }
    removeCatch() {
        return this._def.innerType;
    }
}
ZodCatch.create = (type, params)=>{
    return new ZodCatch({
        innerType: type,
        typeName: ZodFirstPartyTypeKind.ZodCatch,
        catchValue: typeof params.catch === "function" ? params.catch : ()=>params.catch,
        ...processCreateParams(params)
    });
};
class ZodNaN extends ZodType {
    _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType !== ZodParsedType.nan) {
            const ctx = this._getOrReturnCtx(input);
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.nan,
                received: ctx.parsedType
            });
            return INVALID;
        }
        return {
            status: "valid",
            value: input.data
        };
    }
}
ZodNaN.create = (params)=>{
    return new ZodNaN({
        typeName: ZodFirstPartyTypeKind.ZodNaN,
        ...processCreateParams(params)
    });
};
const BRAND = Symbol("zod_brand");
class ZodBranded extends ZodType {
    _parse(input) {
        const { ctx } = this._processInputParams(input);
        const data = ctx.data;
        return this._def.type._parse({
            data,
            path: ctx.path,
            parent: ctx
        });
    }
    unwrap() {
        return this._def.type;
    }
}
class ZodPipeline extends ZodType {
    _parse(input) {
        const { status, ctx } = this._processInputParams(input);
        if (ctx.common.async) {
            const handleAsync = async ()=>{
                const inResult = await this._def.in._parseAsync({
                    data: ctx.data,
                    path: ctx.path,
                    parent: ctx
                });
                if (inResult.status === "aborted") return INVALID;
                if (inResult.status === "dirty") {
                    status.dirty();
                    return DIRTY(inResult.value);
                } else return this._def.out._parseAsync({
                    data: inResult.value,
                    path: ctx.path,
                    parent: ctx
                });
            };
            return handleAsync();
        } else {
            const inResult = this._def.in._parseSync({
                data: ctx.data,
                path: ctx.path,
                parent: ctx
            });
            if (inResult.status === "aborted") return INVALID;
            if (inResult.status === "dirty") {
                status.dirty();
                return {
                    status: "dirty",
                    value: inResult.value
                };
            } else return this._def.out._parseSync({
                data: inResult.value,
                path: ctx.path,
                parent: ctx
            });
        }
    }
    static create(a, b) {
        return new ZodPipeline({
            in: a,
            out: b,
            typeName: ZodFirstPartyTypeKind.ZodPipeline
        });
    }
}
class ZodReadonly extends ZodType {
    _parse(input) {
        const result = this._def.innerType._parse(input);
        if (isValid(result)) result.value = Object.freeze(result.value);
        return result;
    }
}
ZodReadonly.create = (type, params)=>{
    return new ZodReadonly({
        innerType: type,
        typeName: ZodFirstPartyTypeKind.ZodReadonly,
        ...processCreateParams(params)
    });
};
const custom = (check, params = {}, /**
 * @deprecated
 *
 * Pass `fatal` into the params object instead:
 *
 * ```ts
 * z.string().custom((val) => val.length > 5, { fatal: false })
 * ```
 *
 */ fatal)=>{
    if (check) return ZodAny.create().superRefine((data, ctx)=>{
        var _a, _b;
        if (!check(data)) {
            const p = typeof params === "function" ? params(data) : typeof params === "string" ? {
                message: params
            } : params;
            const _fatal = (_b = (_a = p.fatal) !== null && _a !== void 0 ? _a : fatal) !== null && _b !== void 0 ? _b : true;
            const p2 = typeof p === "string" ? {
                message: p
            } : p;
            ctx.addIssue({
                code: "custom",
                ...p2,
                fatal: _fatal
            });
        }
    });
    return ZodAny.create();
};
const late = {
    object: ZodObject.lazycreate
};
var ZodFirstPartyTypeKind;
(function(ZodFirstPartyTypeKind) {
    ZodFirstPartyTypeKind["ZodString"] = "ZodString";
    ZodFirstPartyTypeKind["ZodNumber"] = "ZodNumber";
    ZodFirstPartyTypeKind["ZodNaN"] = "ZodNaN";
    ZodFirstPartyTypeKind["ZodBigInt"] = "ZodBigInt";
    ZodFirstPartyTypeKind["ZodBoolean"] = "ZodBoolean";
    ZodFirstPartyTypeKind["ZodDate"] = "ZodDate";
    ZodFirstPartyTypeKind["ZodSymbol"] = "ZodSymbol";
    ZodFirstPartyTypeKind["ZodUndefined"] = "ZodUndefined";
    ZodFirstPartyTypeKind["ZodNull"] = "ZodNull";
    ZodFirstPartyTypeKind["ZodAny"] = "ZodAny";
    ZodFirstPartyTypeKind["ZodUnknown"] = "ZodUnknown";
    ZodFirstPartyTypeKind["ZodNever"] = "ZodNever";
    ZodFirstPartyTypeKind["ZodVoid"] = "ZodVoid";
    ZodFirstPartyTypeKind["ZodArray"] = "ZodArray";
    ZodFirstPartyTypeKind["ZodObject"] = "ZodObject";
    ZodFirstPartyTypeKind["ZodUnion"] = "ZodUnion";
    ZodFirstPartyTypeKind["ZodDiscriminatedUnion"] = "ZodDiscriminatedUnion";
    ZodFirstPartyTypeKind["ZodIntersection"] = "ZodIntersection";
    ZodFirstPartyTypeKind["ZodTuple"] = "ZodTuple";
    ZodFirstPartyTypeKind["ZodRecord"] = "ZodRecord";
    ZodFirstPartyTypeKind["ZodMap"] = "ZodMap";
    ZodFirstPartyTypeKind["ZodSet"] = "ZodSet";
    ZodFirstPartyTypeKind["ZodFunction"] = "ZodFunction";
    ZodFirstPartyTypeKind["ZodLazy"] = "ZodLazy";
    ZodFirstPartyTypeKind["ZodLiteral"] = "ZodLiteral";
    ZodFirstPartyTypeKind["ZodEnum"] = "ZodEnum";
    ZodFirstPartyTypeKind["ZodEffects"] = "ZodEffects";
    ZodFirstPartyTypeKind["ZodNativeEnum"] = "ZodNativeEnum";
    ZodFirstPartyTypeKind["ZodOptional"] = "ZodOptional";
    ZodFirstPartyTypeKind["ZodNullable"] = "ZodNullable";
    ZodFirstPartyTypeKind["ZodDefault"] = "ZodDefault";
    ZodFirstPartyTypeKind["ZodCatch"] = "ZodCatch";
    ZodFirstPartyTypeKind["ZodPromise"] = "ZodPromise";
    ZodFirstPartyTypeKind["ZodBranded"] = "ZodBranded";
    ZodFirstPartyTypeKind["ZodPipeline"] = "ZodPipeline";
    ZodFirstPartyTypeKind["ZodReadonly"] = "ZodReadonly";
})(ZodFirstPartyTypeKind || (ZodFirstPartyTypeKind = {}));
const instanceOfType = (// const instanceOfType = <T extends new (...args: any[]) => any>(
cls, params = {
    message: `Input not instance of ${cls.name}`
})=>custom((data)=>data instanceof cls, params);
const stringType = ZodString.create;
const numberType = ZodNumber.create;
const nanType = ZodNaN.create;
const bigIntType = ZodBigInt.create;
const booleanType = ZodBoolean.create;
const dateType = ZodDate.create;
const symbolType = ZodSymbol.create;
const undefinedType = ZodUndefined.create;
const nullType = ZodNull.create;
const anyType = ZodAny.create;
const unknownType = ZodUnknown.create;
const neverType = ZodNever.create;
const voidType = ZodVoid.create;
const arrayType = ZodArray.create;
const objectType = ZodObject.create;
const strictObjectType = ZodObject.strictCreate;
const unionType = ZodUnion.create;
const discriminatedUnionType = ZodDiscriminatedUnion.create;
const intersectionType = ZodIntersection.create;
const tupleType = ZodTuple.create;
const recordType = ZodRecord.create;
const mapType = ZodMap.create;
const setType = ZodSet.create;
const functionType = ZodFunction.create;
const lazyType = ZodLazy.create;
const literalType = ZodLiteral.create;
const enumType = ZodEnum.create;
const nativeEnumType = ZodNativeEnum.create;
const promiseType = ZodPromise.create;
const effectsType = ZodEffects.create;
const optionalType = ZodOptional.create;
const nullableType = ZodNullable.create;
const preprocessType = ZodEffects.createWithPreprocess;
const pipelineType = ZodPipeline.create;
const ostring = ()=>stringType().optional();
const onumber = ()=>numberType().optional();
const oboolean = ()=>booleanType().optional();
const coerce = {
    string: (arg)=>ZodString.create({
            ...arg,
            coerce: true
        }),
    number: (arg)=>ZodNumber.create({
            ...arg,
            coerce: true
        }),
    boolean: (arg)=>ZodBoolean.create({
            ...arg,
            coerce: true
        }),
    bigint: (arg)=>ZodBigInt.create({
            ...arg,
            coerce: true
        }),
    date: (arg)=>ZodDate.create({
            ...arg,
            coerce: true
        })
};
const NEVER = INVALID;
var z = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    defaultErrorMap: errorMap,
    setErrorMap: setErrorMap,
    getErrorMap: getErrorMap,
    makeIssue: makeIssue,
    EMPTY_PATH: EMPTY_PATH,
    addIssueToContext: addIssueToContext,
    ParseStatus: ParseStatus,
    INVALID: INVALID,
    DIRTY: DIRTY,
    OK: OK,
    isAborted: isAborted,
    isDirty: isDirty,
    isValid: isValid,
    isAsync: isAsync,
    get util () {
        return util;
    },
    get objectUtil () {
        return objectUtil;
    },
    ZodParsedType: ZodParsedType,
    getParsedType: getParsedType,
    ZodType: ZodType,
    ZodString: ZodString,
    ZodNumber: ZodNumber,
    ZodBigInt: ZodBigInt,
    ZodBoolean: ZodBoolean,
    ZodDate: ZodDate,
    ZodSymbol: ZodSymbol,
    ZodUndefined: ZodUndefined,
    ZodNull: ZodNull,
    ZodAny: ZodAny,
    ZodUnknown: ZodUnknown,
    ZodNever: ZodNever,
    ZodVoid: ZodVoid,
    ZodArray: ZodArray,
    ZodObject: ZodObject,
    ZodUnion: ZodUnion,
    ZodDiscriminatedUnion: ZodDiscriminatedUnion,
    ZodIntersection: ZodIntersection,
    ZodTuple: ZodTuple,
    ZodRecord: ZodRecord,
    ZodMap: ZodMap,
    ZodSet: ZodSet,
    ZodFunction: ZodFunction,
    ZodLazy: ZodLazy,
    ZodLiteral: ZodLiteral,
    ZodEnum: ZodEnum,
    ZodNativeEnum: ZodNativeEnum,
    ZodPromise: ZodPromise,
    ZodEffects: ZodEffects,
    ZodTransformer: ZodEffects,
    ZodOptional: ZodOptional,
    ZodNullable: ZodNullable,
    ZodDefault: ZodDefault,
    ZodCatch: ZodCatch,
    ZodNaN: ZodNaN,
    BRAND: BRAND,
    ZodBranded: ZodBranded,
    ZodPipeline: ZodPipeline,
    ZodReadonly: ZodReadonly,
    custom: custom,
    Schema: ZodType,
    ZodSchema: ZodType,
    late: late,
    get ZodFirstPartyTypeKind () {
        return ZodFirstPartyTypeKind;
    },
    coerce: coerce,
    any: anyType,
    array: arrayType,
    bigint: bigIntType,
    boolean: booleanType,
    date: dateType,
    discriminatedUnion: discriminatedUnionType,
    effect: effectsType,
    "enum": enumType,
    "function": functionType,
    "instanceof": instanceOfType,
    intersection: intersectionType,
    lazy: lazyType,
    literal: literalType,
    map: mapType,
    nan: nanType,
    nativeEnum: nativeEnumType,
    never: neverType,
    "null": nullType,
    nullable: nullableType,
    number: numberType,
    object: objectType,
    oboolean: oboolean,
    onumber: onumber,
    optional: optionalType,
    ostring: ostring,
    pipeline: pipelineType,
    preprocess: preprocessType,
    promise: promiseType,
    record: recordType,
    set: setType,
    strictObject: strictObjectType,
    string: stringType,
    symbol: symbolType,
    transformer: effectsType,
    tuple: tupleType,
    "undefined": undefinedType,
    union: unionType,
    unknown: unknownType,
    "void": voidType,
    NEVER: NEVER,
    ZodIssueCode: ZodIssueCode,
    quotelessJson: quotelessJson,
    ZodError: ZodError
});

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2J9Jr":[function(require,module,exports) {
/*
This file is part of web3.js.

web3.js is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

web3.js is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Web3ValidatorError", ()=>Web3ValidatorError);
var _web3Errors = require("web3-errors");
const errorFormatter = (error)=>{
    if (error.message) return error.message;
    return "unspecified error";
};
class Web3ValidatorError extends (0, _web3Errors.BaseWeb3Error) {
    constructor(errors){
        super();
        this.code = (0, _web3Errors.ERR_VALIDATION);
        this.errors = errors;
        super.message = `Web3 validator found ${errors.length} error[s]:\n${this._compileErrors().join("\n")}`;
    }
    _compileErrors() {
        return this.errors.map(errorFormatter);
    }
}

},{"web3-errors":"jDvsn","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"XcvM7":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _addressJs = require("./validation/address.js");
var _blockJs = require("./validation/block.js");
var _bloomJs = require("./validation/bloom.js");
var _booleanJs = require("./validation/boolean.js");
var _bytesJs = require("./validation/bytes.js");
var _filterJs = require("./validation/filter.js");
var _stringJs = require("./validation/string.js");
var _numbersJs = require("./validation/numbers.js");
const formats = {
    address: (data)=>(0, _addressJs.isAddress)(data),
    bloom: (data)=>(0, _bloomJs.isBloom)(data),
    blockNumber: (data)=>(0, _blockJs.isBlockNumber)(data),
    blockTag: (data)=>(0, _blockJs.isBlockTag)(data),
    blockNumberOrTag: (data)=>(0, _blockJs.isBlockNumberOrTag)(data),
    bool: (data)=>(0, _booleanJs.isBoolean)(data),
    bytes: (data)=>(0, _bytesJs.isBytes)(data),
    filter: (data)=>(0, _filterJs.isFilterObject)(data),
    hex: (data)=>(0, _stringJs.isHexStrict)(data),
    uint: (data)=>(0, _numbersJs.isUInt)(data),
    int: (data)=>(0, _numbersJs.isInt)(data),
    number: (data)=>(0, _numbersJs.isNumber)(data),
    string: (data)=>(0, _stringJs.isString)(data)
};
// generate formats for all numbers types
for(let bitSize = 8; bitSize <= 256; bitSize += 8){
    formats[`int${bitSize}`] = (data)=>(0, _numbersJs.isInt)(data, {
            bitSize
        });
    formats[`uint${bitSize}`] = (data)=>(0, _numbersJs.isUInt)(data, {
            bitSize
        });
}
// generate bytes
for(let size = 1; size <= 32; size += 1)formats[`bytes${size}`] = (data)=>(0, _bytesJs.isBytes)(data, {
        size
    });
formats.bytes256 = formats.bytes;
exports.default = formats;

},{"./validation/address.js":"dmKaL","./validation/block.js":"2UPsE","./validation/bloom.js":"cqsss","./validation/boolean.js":"3RgOW","./validation/bytes.js":"gT88C","./validation/filter.js":"66a5T","./validation/string.js":"hsFAS","./validation/numbers.js":"eKX3t","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dmKaL":[function(require,module,exports) {
/*
This file is part of web3.js.

web3.js is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

web3.js is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "checkAddressCheckSum", ()=>checkAddressCheckSum);
parcelHelpers.export(exports, "isAddress", ()=>isAddress);
var _keccakJs = require("ethereum-cryptography/keccak.js");
var _utilsJs = require("ethereum-cryptography/utils.js");
var _utilsJs1 = require("../utils.js");
var _stringJs = require("./string.js");
const checkAddressCheckSum = (data)=>{
    if (!/^(0x)?[0-9a-f]{40}$/i.test(data)) return false;
    const address = data.slice(2);
    const updatedData = (0, _utilsJs.utf8ToBytes)(address.toLowerCase());
    const addressHash = (0, _utilsJs1.uint8ArrayToHexString)((0, _keccakJs.keccak256)(updatedData)).slice(2);
    for(let i = 0; i < 40; i += 1){
        // the nth letter should be uppercase if the nth digit of casemap is 1
        if (parseInt(addressHash[i], 16) > 7 && address[i].toUpperCase() !== address[i] || parseInt(addressHash[i], 16) <= 7 && address[i].toLowerCase() !== address[i]) return false;
    }
    return true;
};
const isAddress = (value, checkChecksum = true)=>{
    if (typeof value !== "string" && !(value instanceof Uint8Array)) return false;
    let valueToCheck;
    if (value instanceof Uint8Array) valueToCheck = (0, _utilsJs1.uint8ArrayToHexString)(value);
    else if (typeof value === "string" && !(0, _stringJs.isHexStrict)(value)) valueToCheck = value.toLowerCase().startsWith("0x") ? value : `0x${value}`;
    else valueToCheck = value;
    // check if it has the basic requirements of an address
    if (!/^(0x)?[0-9a-f]{40}$/i.test(valueToCheck)) return false;
    // If it's ALL lowercase or ALL upppercase
    if (/^(0x|0X)?[0-9a-f]{40}$/.test(valueToCheck) || /^(0x|0X)?[0-9A-F]{40}$/.test(valueToCheck)) return true;
    return checkChecksum ? checkAddressCheckSum(valueToCheck) : true;
};

},{"ethereum-cryptography/keccak.js":"5j5ih","ethereum-cryptography/utils.js":"l6KG0","../utils.js":"l63qP","./string.js":"hsFAS","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"l63qP":[function(require,module,exports) {
/*
This file is part of web3.js.

web3.js is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

web3.js is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "parseBaseType", ()=>parseBaseType);
parcelHelpers.export(exports, "abiSchemaToJsonSchema", ()=>abiSchemaToJsonSchema);
parcelHelpers.export(exports, "ethAbiToJsonSchema", ()=>ethAbiToJsonSchema);
parcelHelpers.export(exports, "fetchArrayElement", ()=>fetchArrayElement);
parcelHelpers.export(exports, "transformJsonDataToAbiFormat", ()=>transformJsonDataToAbiFormat);
parcelHelpers.export(exports, "codePointToInt", ()=>codePointToInt);
parcelHelpers.export(exports, "hexToNumber", ()=>hexToNumber);
parcelHelpers.export(exports, "numberToHex", ()=>numberToHex);
parcelHelpers.export(exports, "padLeft", ()=>padLeft);
parcelHelpers.export(exports, "uint8ArrayToHexString", ()=>uint8ArrayToHexString);
parcelHelpers.export(exports, "hexToUint8Array", ()=>hexToUint8Array);
var _web3Errors = require("web3-errors");
var _constantsJs = require("./constants.js");
var _abiJs = require("./validation/abi.js");
var _stringJs = require("./validation/string.js");
var _errorsJs = require("./errors.js");
const extraTypes = [
    "hex",
    "number",
    "blockNumber",
    "blockNumberOrTag",
    "filter",
    "bloom"
];
const parseBaseType = (type)=>{
    // Remove all empty spaces to avoid any parsing issue.
    let strippedType = type.replace(/ /, "");
    let baseTypeSize;
    let isArray = false;
    let arraySizes = [];
    if (type.includes("[")) {
        // Extract the array type
        strippedType = strippedType.slice(0, strippedType.indexOf("["));
        // Extract array indexes
        arraySizes = [
            ...type.matchAll(/(?:\[(\d*)\])/g)
        ].map((match)=>parseInt(match[1], 10)).map((size)=>Number.isNaN(size) ? -1 : size);
        isArray = arraySizes.length > 0;
    }
    if ((0, _constantsJs.VALID_ETH_BASE_TYPES).includes(strippedType)) return {
        baseType: strippedType,
        isArray,
        baseTypeSize,
        arraySizes
    };
    if (strippedType.startsWith("int")) {
        baseTypeSize = parseInt(strippedType.substring(3), 10);
        strippedType = "int";
    } else if (strippedType.startsWith("uint")) {
        baseTypeSize = parseInt(type.substring(4), 10);
        strippedType = "uint";
    } else if (strippedType.startsWith("bytes")) {
        baseTypeSize = parseInt(strippedType.substring(5), 10);
        strippedType = "bytes";
    } else return {
        baseType: undefined,
        isArray: false,
        baseTypeSize: undefined,
        arraySizes
    };
    return {
        baseType: strippedType,
        isArray,
        baseTypeSize,
        arraySizes
    };
};
const convertEthType = (type, parentSchema = {})=>{
    const typePropertyPresent = Object.keys(parentSchema).includes("type");
    if (typePropertyPresent) throw new (0, _errorsJs.Web3ValidatorError)([
        {
            keyword: "eth",
            message: 'Either "eth" or "type" can be presented in schema',
            params: {
                eth: type
            },
            instancePath: "",
            schemaPath: ""
        }
    ]);
    const { baseType, baseTypeSize } = parseBaseType(type);
    if (!baseType && !extraTypes.includes(type)) throw new (0, _errorsJs.Web3ValidatorError)([
        {
            keyword: "eth",
            message: `Eth data type "${type}" is not valid`,
            params: {
                eth: type
            },
            instancePath: "",
            schemaPath: ""
        }
    ]);
    if (baseType) {
        if (baseType === "tuple") throw new Error('"tuple" type is not implemented directly.');
        return {
            format: `${baseType}${baseTypeSize !== null && baseTypeSize !== void 0 ? baseTypeSize : ""}`,
            required: true
        };
    }
    if (type) return {
        format: type,
        required: true
    };
    return {};
};
const abiSchemaToJsonSchema = (abis, level = "/0")=>{
    const schema = {
        type: "array",
        items: [],
        maxItems: abis.length,
        minItems: abis.length
    };
    for (const [index, abi] of abis.entries()){
        // eslint-disable-next-line no-nested-ternary
        let abiType;
        let abiName;
        let abiComponents = [];
        // If it's a complete Abi Parameter
        // e.g. {name: 'a', type: 'uint'}
        if ((0, _abiJs.isAbiParameterSchema)(abi)) {
            abiType = abi.type;
            abiName = abi.name;
            abiComponents = abi.components;
        // If its short form string value e.g. ['uint']
        } else if (typeof abi === "string") {
            abiType = abi;
            abiName = `${level}/${index}`;
        // If it's provided in short form of tuple e.g. [['uint', 'string']]
        } else if (Array.isArray(abi)) {
            // If its custom tuple e.g. ['tuple[2]', ['uint', 'string']]
            if (abi[0] && typeof abi[0] === "string" && abi[0].startsWith("tuple") && !Array.isArray(abi[0]) && abi[1] && Array.isArray(abi[1])) {
                // eslint-disable-next-line prefer-destructuring
                abiType = abi[0];
                abiName = `${level}/${index}`;
                abiComponents = abi[1];
            } else {
                abiType = "tuple";
                abiName = `${level}/${index}`;
                abiComponents = abi;
            }
        }
        const { baseType, isArray, arraySizes } = parseBaseType(abiType);
        let childSchema;
        let lastSchema = schema;
        for(let i = arraySizes.length - 1; i > 0; i -= 1){
            childSchema = {
                type: "array",
                items: [],
                maxItems: arraySizes[i],
                minItems: arraySizes[i]
            };
            if (arraySizes[i] < 0) {
                delete childSchema.maxItems;
                delete childSchema.minItems;
            }
            // lastSchema.items is a Schema, concat with 'childSchema'
            if (!Array.isArray(lastSchema.items)) lastSchema.items = [
                lastSchema.items,
                childSchema
            ];
            else if (lastSchema.items.length === 0) lastSchema.items = childSchema;
            else lastSchema.items.push(childSchema);
            lastSchema = childSchema;
        }
        if (baseType === "tuple" && !isArray) {
            const nestedTuple = abiSchemaToJsonSchema(abiComponents, abiName);
            nestedTuple.$id = abiName;
            lastSchema.items.push(nestedTuple);
        } else if (baseType === "tuple" && isArray) {
            const arraySize = arraySizes[0];
            const item = {
                $id: abiName,
                type: "array",
                items: abiSchemaToJsonSchema(abiComponents, abiName),
                maxItems: arraySize,
                minItems: arraySize
            };
            if (arraySize < 0) {
                delete item.maxItems;
                delete item.minItems;
            }
            lastSchema.items.push(item);
        } else if (isArray) {
            const arraySize = arraySizes[0];
            const item = {
                type: "array",
                $id: abiName,
                items: convertEthType(String(baseType)),
                minItems: arraySize,
                maxItems: arraySize
            };
            if (arraySize < 0) {
                delete item.maxItems;
                delete item.minItems;
            }
            lastSchema.items.push(item);
        } else if (Array.isArray(lastSchema.items)) // Array of non-tuple items
        lastSchema.items.push(Object.assign({
            $id: abiName
        }, convertEthType(abiType)));
        else // Nested object
        lastSchema.items.items.push(Object.assign({
            $id: abiName
        }, convertEthType(abiType)));
        lastSchema = schema;
    }
    return schema;
};
const ethAbiToJsonSchema = (abis)=>abiSchemaToJsonSchema(abis);
const fetchArrayElement = (data, level)=>{
    if (level === 1) return data;
    return fetchArrayElement(data[0], level - 1);
};
const transformJsonDataToAbiFormat = (abis, data, transformedData)=>{
    const newData = [];
    for (const [index, abi] of abis.entries()){
        // eslint-disable-next-line no-nested-ternary
        let abiType;
        let abiName;
        let abiComponents = [];
        // If it's a complete Abi Parameter
        // e.g. {name: 'a', type: 'uint'}
        if ((0, _abiJs.isAbiParameterSchema)(abi)) {
            abiType = abi.type;
            abiName = abi.name;
            abiComponents = abi.components;
        // If its short form string value e.g. ['uint']
        } else if (typeof abi === "string") abiType = abi;
        else if (Array.isArray(abi)) {
            // If its custom tuple e.g. ['tuple[2]', ['uint', 'string']]
            if (abi[1] && Array.isArray(abi[1])) {
                abiType = abi[0];
                abiComponents = abi[1];
            } else {
                abiType = "tuple";
                abiComponents = abi;
            }
        }
        const { baseType, isArray, arraySizes } = parseBaseType(abiType);
        const dataItem = Array.isArray(data) ? data[index] : data[abiName];
        if (baseType === "tuple" && !isArray) newData.push(transformJsonDataToAbiFormat(abiComponents, dataItem, transformedData));
        else if (baseType === "tuple" && isArray) {
            const tupleData = [];
            for (const tupleItem of dataItem)// Nested array
            if (arraySizes.length > 1) {
                const nestedItems = fetchArrayElement(tupleItem, arraySizes.length - 1);
                const nestedData = [];
                for (const nestedItem of nestedItems)nestedData.push(transformJsonDataToAbiFormat(abiComponents, nestedItem, transformedData));
                tupleData.push(nestedData);
            } else tupleData.push(transformJsonDataToAbiFormat(abiComponents, tupleItem, transformedData));
            newData.push(tupleData);
        } else newData.push(dataItem);
    }
    // Have to reassign before pushing to transformedData
    // eslint-disable-next-line no-param-reassign
    transformedData = transformedData !== null && transformedData !== void 0 ? transformedData : [];
    transformedData.push(...newData);
    return transformedData;
};
const codePointToInt = (codePoint)=>{
    if (codePoint >= 48 && codePoint <= 57) /* ['0'..'9'] -> [0..9] */ return codePoint - 48;
    if (codePoint >= 65 && codePoint <= 70) /* ['A'..'F'] -> [10..15] */ return codePoint - 55;
    if (codePoint >= 97 && codePoint <= 102) /* ['a'..'f'] -> [10..15] */ return codePoint - 87;
    throw new Error(`Invalid code point: ${codePoint}`);
};
const hexToNumber = (value)=>{
    if (!(0, _stringJs.isHexStrict)(value)) throw new Error("Invalid hex string");
    const [negative, hexValue] = value.startsWith("-") ? [
        true,
        value.slice(1)
    ] : [
        false,
        value
    ];
    const num = BigInt(hexValue);
    if (num > Number.MAX_SAFE_INTEGER) return negative ? -num : num;
    if (num < Number.MIN_SAFE_INTEGER) return num;
    return negative ? -1 * Number(num) : Number(num);
};
const numberToHex = (value)=>{
    if ((typeof value === "number" || typeof value === "bigint") && value < 0) return `-0x${value.toString(16).slice(1)}`;
    if ((typeof value === "number" || typeof value === "bigint") && value >= 0) return `0x${value.toString(16)}`;
    if (typeof value === "string" && (0, _stringJs.isHexStrict)(value)) {
        const [negative, hex] = value.startsWith("-") ? [
            true,
            value.slice(1)
        ] : [
            false,
            value
        ];
        const hexValue = hex.split(/^(-)?0(x|X)/).slice(-1)[0];
        return `${negative ? "-" : ""}0x${hexValue.replace(/^0+/, "").toLowerCase()}`;
    }
    if (typeof value === "string" && !(0, _stringJs.isHexStrict)(value)) return numberToHex(BigInt(value));
    throw new (0, _web3Errors.InvalidNumberError)(value);
};
const padLeft = (value, characterAmount, sign = "0")=>{
    if (typeof value === "string" && !(0, _stringJs.isHexStrict)(value)) return value.padStart(characterAmount, sign);
    const hex = typeof value === "string" && (0, _stringJs.isHexStrict)(value) ? value : numberToHex(value);
    const [prefix, hexValue] = hex.startsWith("-") ? [
        "-0x",
        hex.slice(3)
    ] : [
        "0x",
        hex.slice(2)
    ];
    return `${prefix}${hexValue.padStart(characterAmount, sign)}`;
};
function uint8ArrayToHexString(uint8Array) {
    let hexString = "0x";
    for (const e of uint8Array){
        const hex = e.toString(16);
        hexString += hex.length === 1 ? `0${hex}` : hex;
    }
    return hexString;
}
function hexToUint8Array(hex) {
    let value;
    if (hex.toLowerCase().startsWith("0x")) value = hex.slice(2);
    else value = hex;
    if (value.length % 2 !== 0) throw new (0, _web3Errors.InvalidBytesError)(`hex string has odd length: ${hex}`);
    const bytes = new Uint8Array(Math.ceil(value.length / 2));
    for(let i = 0; i < bytes.length; i += 1){
        const byte = parseInt(value.substring(i * 2, i * 2 + 2), 16);
        bytes[i] = byte;
    }
    return bytes;
}

},{"web3-errors":"jDvsn","./constants.js":"b0W4y","./validation/abi.js":"evu64","./validation/string.js":"hsFAS","./errors.js":"2J9Jr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"b0W4y":[function(require,module,exports) {
/*
This file is part of web3.js.

web3.js is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

web3.js is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "VALID_ETH_BASE_TYPES", ()=>VALID_ETH_BASE_TYPES);
const VALID_ETH_BASE_TYPES = [
    "bool",
    "int",
    "uint",
    "bytes",
    "string",
    "address",
    "tuple"
];

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"evu64":[function(require,module,exports) {
/*
This file is part of web3.js.

web3.js is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

web3.js is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isAbiParameterSchema", ()=>isAbiParameterSchema);
const isAbiParameterSchema = (schema)=>typeof schema === "object" && "type" in schema && "name" in schema;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hsFAS":[function(require,module,exports) {
/*
This file is part of web3.js.

web3.js is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

web3.js is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/ /**
 * checks input if typeof data is valid string input
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isString", ()=>isString);
parcelHelpers.export(exports, "isHexStrict", ()=>isHexStrict);
/**
 * Is the string a hex string.
 *
 * @param  value
 * @param  length
 * @returns  output the string is a hex string
 */ parcelHelpers.export(exports, "isHexString", ()=>isHexString);
parcelHelpers.export(exports, "isHex", ()=>isHex);
parcelHelpers.export(exports, "isHexString8Bytes", ()=>isHexString8Bytes);
parcelHelpers.export(exports, "isHexString32Bytes", ()=>isHexString32Bytes);
/**
 * Returns a `Boolean` on whether or not the a `String` starts with '0x'
 * @param str the string input value
 * @return a boolean if it is or is not hex prefixed
 * @throws if the str input is not a string
 */ parcelHelpers.export(exports, "isHexPrefixed", ()=>isHexPrefixed);
parcelHelpers.export(exports, "validateNoLeadingZeroes", ()=>validateNoLeadingZeroes);
const isString = (value)=>typeof value === "string";
const isHexStrict = (hex)=>typeof hex === "string" && /^((-)?0x[0-9a-f]+|(0x))$/i.test(hex);
function isHexString(value, length) {
    if (typeof value !== "string" || !value.match(/^0x[0-9A-Fa-f]*$/)) return false;
    if (typeof length !== "undefined" && length > 0 && value.length !== 2 + 2 * length) return false;
    return true;
}
const isHex = (hex)=>typeof hex === "number" || typeof hex === "bigint" || typeof hex === "string" && /^((-0x|0x|-)?[0-9a-f]+|(0x))$/i.test(hex);
const isHexString8Bytes = (value, prefixed = true)=>prefixed ? isHexStrict(value) && value.length === 18 : isHex(value) && value.length === 16;
const isHexString32Bytes = (value, prefixed = true)=>prefixed ? isHexStrict(value) && value.length === 66 : isHex(value) && value.length === 64;
function isHexPrefixed(str) {
    if (typeof str !== "string") throw new Error(`[isHexPrefixed] input must be type 'string', received type ${typeof str}`);
    return str.startsWith("0x");
}
const validateNoLeadingZeroes = function(values) {
    for (const [k, v] of Object.entries(values)){
        if (v !== undefined && v.length > 0 && v[0] === 0) throw new Error(`${k} cannot have leading zeroes, received: ${v.toString()}`);
    }
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2UPsE":[function(require,module,exports) {
/*
This file is part of web3.js.

web3.js is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

web3.js is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isBlockNumber", ()=>isBlockNumber);
parcelHelpers.export(exports, "isBlockTag", ()=>isBlockTag);
parcelHelpers.export(exports, "isBlockNumberOrTag", ()=>isBlockNumberOrTag);
var _web3Types = require("web3-types");
var _numbersJs = require("./numbers.js");
const isBlockNumber = (value)=>(0, _numbersJs.isUInt)(value);
const isBlockTag = (value)=>Object.values((0, _web3Types.BlockTags)).includes(value);
const isBlockNumberOrTag = (value)=>isBlockTag(value) || isBlockNumber(value);

},{"web3-types":"g7Ztk","./numbers.js":"eKX3t","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"g7Ztk":[function(require,module,exports) {
/*
This file is part of web3.js.

web3.js is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

web3.js is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _errorTypesJs = require("./error_types.js");
parcelHelpers.exportAll(_errorTypesJs, exports);
var _ethExecutionApiJs = require("./apis/eth_execution_api.js");
parcelHelpers.exportAll(_ethExecutionApiJs, exports);
var _web3EthExecutionApiJs = require("./apis/web3_eth_execution_api.js");
parcelHelpers.exportAll(_web3EthExecutionApiJs, exports);
var _web3NetApiJs = require("./apis/web3_net_api.js");
parcelHelpers.exportAll(_web3NetApiJs, exports);
var _ethPersonalApiJs = require("./apis/eth_personal_api.js");
parcelHelpers.exportAll(_ethPersonalApiJs, exports);
var _dataFormatTypesJs = require("./data_format_types.js");
parcelHelpers.exportAll(_dataFormatTypesJs, exports);
var _ethTypesJs = require("./eth_types.js");
parcelHelpers.exportAll(_ethTypesJs, exports);
var _ethAbiTypesJs = require("./eth_abi_types.js");
parcelHelpers.exportAll(_ethAbiTypesJs, exports);
var _ethContractTypesJs = require("./eth_contract_types.js");
parcelHelpers.exportAll(_ethContractTypesJs, exports);
var _jsonRpcTypesJs = require("./json_rpc_types.js");
parcelHelpers.exportAll(_jsonRpcTypesJs, exports);
var _primitivesTypesJs = require("./primitives_types.js");
parcelHelpers.exportAll(_primitivesTypesJs, exports);
var _utilityTypesJs = require("./utility_types.js");
parcelHelpers.exportAll(_utilityTypesJs, exports);
var _web3ApiTypesJs = require("./web3_api_types.js");
parcelHelpers.exportAll(_web3ApiTypesJs, exports);
var _web3BaseProviderJs = require("./web3_base_provider.js");
parcelHelpers.exportAll(_web3BaseProviderJs, exports);
var _web3BaseWalletJs = require("./web3_base_wallet.js");
parcelHelpers.exportAll(_web3BaseWalletJs, exports);
var _web3DeferredPromiseTypeJs = require("./web3_deferred_promise_type.js");
parcelHelpers.exportAll(_web3DeferredPromiseTypeJs, exports);

},{"./error_types.js":"k4sRG","./apis/eth_execution_api.js":"2hlVO","./apis/web3_eth_execution_api.js":"dtTwf","./apis/web3_net_api.js":"lcyOj","./apis/eth_personal_api.js":"diwN5","./data_format_types.js":"chmtH","./eth_types.js":"6y4wX","./eth_abi_types.js":"2SYvi","./eth_contract_types.js":"isH5n","./json_rpc_types.js":"dViVC","./primitives_types.js":"98PKz","./utility_types.js":"eoZAC","./web3_api_types.js":"4PQVy","./web3_base_provider.js":"75Oip","./web3_base_wallet.js":"adqgK","./web3_deferred_promise_type.js":"8bLPY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"k4sRG":[function(require,module,exports) {
/*
This file is part of web3.js.

web3.js is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

web3.js is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2hlVO":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dtTwf":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lcyOj":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"diwN5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"chmtH":[function(require,module,exports) {
/*
This file is part of web3.js.

web3.js is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

web3.js is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "FMT_NUMBER", ()=>FMT_NUMBER);
parcelHelpers.export(exports, "FMT_BYTES", ()=>FMT_BYTES);
parcelHelpers.export(exports, "DEFAULT_RETURN_FORMAT", ()=>DEFAULT_RETURN_FORMAT);
parcelHelpers.export(exports, "ETH_DATA_FORMAT", ()=>ETH_DATA_FORMAT);
var FMT_NUMBER;
(function(FMT_NUMBER) {
    FMT_NUMBER["NUMBER"] = "NUMBER_NUMBER";
    FMT_NUMBER["HEX"] = "NUMBER_HEX";
    FMT_NUMBER["STR"] = "NUMBER_STR";
    FMT_NUMBER["BIGINT"] = "NUMBER_BIGINT";
})(FMT_NUMBER || (FMT_NUMBER = {}));
var FMT_BYTES;
(function(FMT_BYTES) {
    FMT_BYTES["HEX"] = "BYTES_HEX";
    FMT_BYTES["UINT8ARRAY"] = "BYTES_UINT8ARRAY";
})(FMT_BYTES || (FMT_BYTES = {}));
const DEFAULT_RETURN_FORMAT = {
    number: FMT_NUMBER.BIGINT,
    bytes: FMT_BYTES.HEX
};
const ETH_DATA_FORMAT = {
    number: FMT_NUMBER.HEX,
    bytes: FMT_BYTES.HEX
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6y4wX":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "BlockTags", ()=>BlockTags);
parcelHelpers.export(exports, "HardforksOrdered", ()=>HardforksOrdered);
var BlockTags;
(function(BlockTags) {
    BlockTags["EARLIEST"] = "earliest";
    BlockTags["LATEST"] = "latest";
    BlockTags["PENDING"] = "pending";
    BlockTags["SAFE"] = "safe";
    BlockTags["FINALIZED"] = "finalized";
})(BlockTags || (BlockTags = {}));
var HardforksOrdered;
(function(HardforksOrdered) {
    HardforksOrdered["chainstart"] = "chainstart";
    HardforksOrdered["frontier"] = "frontier";
    HardforksOrdered["homestead"] = "homestead";
    HardforksOrdered["dao"] = "dao";
    HardforksOrdered["tangerineWhistle"] = "tangerineWhistle";
    HardforksOrdered["spuriousDragon"] = "spuriousDragon";
    HardforksOrdered["byzantium"] = "byzantium";
    HardforksOrdered["constantinople"] = "constantinople";
    HardforksOrdered["petersburg"] = "petersburg";
    HardforksOrdered["istanbul"] = "istanbul";
    HardforksOrdered["muirGlacier"] = "muirGlacier";
    HardforksOrdered["berlin"] = "berlin";
    HardforksOrdered["london"] = "london";
    HardforksOrdered["altair"] = "altair";
    HardforksOrdered["arrowGlacier"] = "arrowGlacier";
    HardforksOrdered["grayGlacier"] = "grayGlacier";
    HardforksOrdered["bellatrix"] = "bellatrix";
    HardforksOrdered["merge"] = "merge";
    HardforksOrdered["capella"] = "capella";
    HardforksOrdered["shanghai"] = "shanghai";
})(HardforksOrdered || (HardforksOrdered = {}));

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2SYvi":[function(require,module,exports) {
/*
This file is part of web3.js.

web3.js is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

web3.js is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"isH5n":[function(require,module,exports) {
/*
This file is part of web3.js.

web3.js is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

web3.js is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dViVC":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"98PKz":[function(require,module,exports) {
/*
This file is part of web3.js.

web3.js is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

web3.js is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/ // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "TypedArray", ()=>TypedArray);
const TypedArray = Object.getPrototypeOf(Uint8Array);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eoZAC":[function(require,module,exports) {
/*
This file is part of web3.js.

web3.js is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

web3.js is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4PQVy":[function(require,module,exports) {
/*
This file is part of web3.js.

web3.js is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

web3.js is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"75Oip":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
// Provider interface compatible with EIP-1193
// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-1193.md
parcelHelpers.export(exports, "Web3BaseProvider", ()=>Web3BaseProvider);
var __awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
const symbol = Symbol.for("web3/base-provider");
class Web3BaseProvider {
    static isWeb3Provider(provider) {
        return provider instanceof Web3BaseProvider || Boolean(provider && provider[symbol]);
    }
    // To match an object "instanceof" does not work if
    // matcher class and object is using different package versions
    // to overcome this bottleneck used this approach.
    // The symbol value for one string will always remain same regardless of package versions
    // eslint-disable-next-line class-methods-use-this
    get [symbol]() {
        return true;
    }
    /**
     * @deprecated Please use `.request` instead.
     * @param payload - Request Payload
     * @param callback - Callback
     */ send(payload, // eslint-disable-next-line @typescript-eslint/ban-types
    callback) {
        this.request(payload).then((response)=>{
            // eslint-disable-next-line no-null/no-null
            callback(null, response);
        }).catch((err)=>{
            callback(err);
        });
    }
    /**
     * @deprecated Please use `.request` instead.
     * @param payload - Request Payload
     */ sendAsync(payload) {
        return __awaiter(this, void 0, void 0, function*() {
            return this.request(payload);
        });
    }
    /**
     * Modify the return type of the request method to be fully compatible with EIP-1193
     *
     * [deprecated] In the future major releases (\>= v5) all providers are supposed to be fully compatible with EIP-1193.
     * So this method will not be needed and would not be available in the future.
     *
     * @returns A new instance of the provider with the request method fully compatible with EIP-1193
     *
     * @example
     * ```ts
     * const provider = new Web3HttpProvider('http://localhost:8545');
     * const fullyCompatibleProvider = provider.asEIP1193Provider();
     * const result = await fullyCompatibleProvider.request({ method: 'eth_getBalance' });
     * console.log(result); // '0x0234c8a3397aab58' or something like that
     * ```
     */ asEIP1193Provider() {
        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
        const newObj = Object.create(this);
        // eslint-disable-next-line @typescript-eslint/unbound-method
        const originalRequest = newObj.request;
        newObj.request = function request(args) {
            return __awaiter(this, void 0, void 0, function*() {
                // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion
                const response = yield originalRequest(args);
                return response.result;
            });
        };
        // @ts-expect-error the property should not be available in the new object because of using Object.create(this).
        //	But it is available if we do not delete it.
        newObj.asEIP1193Provider = undefined; // to prevent the user for calling this method again
        return newObj;
    }
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"adqgK":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Web3BaseWallet", ()=>Web3BaseWallet);
class Web3BaseWallet extends Array {
    constructor(accountProvider){
        super();
        this._accountProvider = accountProvider;
    }
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8bLPY":[function(require,module,exports) {
/*
This file is part of web3.js.

web3.js is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

web3.js is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eKX3t":[function(require,module,exports) {
/*
This file is part of web3.js.

web3.js is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

web3.js is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isBigInt", ()=>isBigInt);
parcelHelpers.export(exports, "bigintPower", ()=>bigintPower);
parcelHelpers.export(exports, "isUInt", ()=>isUInt);
parcelHelpers.export(exports, "isInt", ()=>isInt);
parcelHelpers.export(exports, "isNumber", ()=>isNumber);
var _utilsJs = require("../utils.js");
var _stringJs = require("./string.js");
const isBigInt = (value)=>typeof value === "bigint";
const bigintPower = (base, expo)=>{
    let res = base;
    for(let index = 1; index < expo; index += 1)res *= base;
    return res;
};
const isUInt = (value, options = {
    abiType: "uint"
})=>{
    if (![
        "number",
        "string",
        "bigint"
    ].includes(typeof value) || typeof value === "string" && value.length === 0) return false;
    let size;
    if (options === null || options === void 0 ? void 0 : options.abiType) {
        const { baseTypeSize } = (0, _utilsJs.parseBaseType)(options.abiType);
        if (baseTypeSize) size = baseTypeSize;
    } else if (options.bitSize) size = options.bitSize;
    const maxSize = bigintPower(BigInt(2), BigInt(size !== null && size !== void 0 ? size : 256)) - BigInt(1);
    try {
        const valueToCheck = typeof value === "string" && (0, _stringJs.isHexStrict)(value) ? BigInt((0, _utilsJs.hexToNumber)(value)) : BigInt(value);
        return valueToCheck >= 0 && valueToCheck <= maxSize;
    } catch (error) {
        // Some invalid number value given which can not be converted via BigInt
        return false;
    }
};
const isInt = (value, options = {
    abiType: "int"
})=>{
    if (![
        "number",
        "string",
        "bigint"
    ].includes(typeof value)) return false;
    if (typeof value === "number" && value > Number.MAX_SAFE_INTEGER) return false;
    let size;
    if (options === null || options === void 0 ? void 0 : options.abiType) {
        const { baseTypeSize, baseType } = (0, _utilsJs.parseBaseType)(options.abiType);
        if (baseType !== "int") return false;
        if (baseTypeSize) size = baseTypeSize;
    } else if (options.bitSize) size = options.bitSize;
    const maxSize = bigintPower(BigInt(2), BigInt((size !== null && size !== void 0 ? size : 256) - 1));
    const minSize = BigInt(-1) * bigintPower(BigInt(2), BigInt((size !== null && size !== void 0 ? size : 256) - 1));
    try {
        const valueToCheck = typeof value === "string" && (0, _stringJs.isHexStrict)(value) ? BigInt((0, _utilsJs.hexToNumber)(value)) : BigInt(value);
        return valueToCheck >= minSize && valueToCheck <= maxSize;
    } catch (error) {
        // Some invalid number value given which can not be converted via BigInt
        return false;
    }
};
const isNumber = (value)=>{
    if (isInt(value)) return true;
    // It would be a decimal number
    if (typeof value === "string" && /[0-9.]/.test(value) && value.indexOf(".") === value.lastIndexOf(".")) return true;
    if (typeof value === "number") return true;
    return false;
};

},{"../utils.js":"l63qP","./string.js":"hsFAS","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cqsss":[function(require,module,exports) {
/*
This file is part of web3.js.

web3.js is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

web3.js is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isBloom", ()=>isBloom);
parcelHelpers.export(exports, "isInBloom", ()=>isInBloom);
parcelHelpers.export(exports, "isUserEthereumAddressInBloom", ()=>isUserEthereumAddressInBloom);
parcelHelpers.export(exports, "isContractAddressInBloom", ()=>isContractAddressInBloom);
var _keccakJs = require("ethereum-cryptography/keccak.js");
var _utilsJs = require("../utils.js");
var _addressJs = require("./address.js");
var _stringJs = require("./string.js");
const isBloom = (bloom)=>{
    if (typeof bloom !== "string") return false;
    if (!/^(0x)?[0-9a-f]{512}$/i.test(bloom)) return false;
    if (/^(0x)?[0-9a-f]{512}$/.test(bloom) || /^(0x)?[0-9A-F]{512}$/.test(bloom)) return true;
    return false;
};
const isInBloom = (bloom, value)=>{
    if (typeof value === "string" && !(0, _stringJs.isHexStrict)(value)) return false;
    if (!isBloom(bloom)) return false;
    const uint8Array = typeof value === "string" ? (0, _utilsJs.hexToUint8Array)(value) : value;
    const hash = (0, _utilsJs.uint8ArrayToHexString)((0, _keccakJs.keccak256)(uint8Array)).slice(2);
    for(let i = 0; i < 12; i += 4){
        // calculate bit position in bloom filter that must be active
        const bitpos = (parseInt(hash.slice(i, i + 2), 16) << 8) + parseInt(hash.slice(i + 2, i + 4), 16) & 2047;
        // test if bitpos in bloom is active
        const code = (0, _utilsJs.codePointToInt)(bloom.charCodeAt(bloom.length - 1 - Math.floor(bitpos / 4)));
        // eslint-disable-next-line no-bitwise
        const offset = 1 << bitpos % 4;
        // eslint-disable-next-line no-bitwise
        if ((code & offset) !== offset) return false;
    }
    return true;
};
const isUserEthereumAddressInBloom = (bloom, ethereumAddress)=>{
    if (!isBloom(bloom)) return false;
    if (!(0, _addressJs.isAddress)(ethereumAddress)) return false;
    // you have to pad the ethereum address to 32 bytes
    // else the bloom filter does not work
    // this is only if your matching the USERS
    // ethereum address. Contract address do not need this
    // hence why we have 2 methods
    // (0x is not in the 2nd parameter of padleft so 64 chars is fine)
    const address = (0, _utilsJs.padLeft)(ethereumAddress, 64);
    return isInBloom(bloom, address);
};
const isContractAddressInBloom = (bloom, contractAddress)=>{
    if (!isBloom(bloom)) return false;
    if (!(0, _addressJs.isAddress)(contractAddress)) return false;
    return isInBloom(bloom, contractAddress);
};

},{"ethereum-cryptography/keccak.js":"5j5ih","../utils.js":"l63qP","./address.js":"dmKaL","./string.js":"hsFAS","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3RgOW":[function(require,module,exports) {
/*
This file is part of web3.js.

web3.js is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

web3.js is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isBoolean", ()=>isBoolean);
var _stringJs = require("./string.js");
const isBoolean = (value)=>{
    if (![
        "number",
        "string",
        "boolean"
    ].includes(typeof value)) return false;
    if (typeof value === "boolean") return true;
    if (typeof value === "string" && !(0, _stringJs.isHexStrict)(value)) return value === "1" || value === "0";
    if (typeof value === "string" && (0, _stringJs.isHexStrict)(value)) return value === "0x1" || value === "0x0";
    // type === number
    return value === 1 || value === 0;
};

},{"./string.js":"hsFAS","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gT88C":[function(require,module,exports) {
/*
This file is part of web3.js.

web3.js is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

web3.js is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isUint8Array", ()=>isUint8Array);
parcelHelpers.export(exports, "isBytes", ()=>isBytes);
var _utilsJs = require("../utils.js");
var _stringJs = require("./string.js");
const isUint8Array = (data)=>data instanceof Uint8Array;
const isBytes = (value, options = {
    abiType: "bytes"
})=>{
    if (typeof value !== "string" && !Array.isArray(value) && !(value instanceof Uint8Array)) return false;
    // isHexStrict also accepts - prefix which can not exists in bytes
    if (typeof value === "string" && (0, _stringJs.isHexStrict)(value) && value.startsWith("-")) return false;
    if (typeof value === "string" && !(0, _stringJs.isHexStrict)(value)) return false;
    let valueToCheck;
    if (typeof value === "string") {
        if (value.length % 2 !== 0) // odd length hex
        return false;
        valueToCheck = (0, _utilsJs.hexToUint8Array)(value);
    } else if (Array.isArray(value)) {
        if (value.some((d)=>d < 0 || d > 255 || !Number.isInteger(d))) return false;
        valueToCheck = new Uint8Array(value);
    } else valueToCheck = value;
    if (options === null || options === void 0 ? void 0 : options.abiType) {
        const { baseTypeSize } = (0, _utilsJs.parseBaseType)(options.abiType);
        return baseTypeSize ? valueToCheck.length === baseTypeSize : true;
    }
    if (options === null || options === void 0 ? void 0 : options.size) return valueToCheck.length === (options === null || options === void 0 ? void 0 : options.size);
    return true;
};

},{"../utils.js":"l63qP","./string.js":"hsFAS","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"66a5T":[function(require,module,exports) {
/*
This file is part of web3.js.

web3.js is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

web3.js is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isFilterObject", ()=>isFilterObject);
var _addressJs = require("./address.js");
var _blockJs = require("./block.js");
var _objectJs = require("./object.js");
var _topicJs = require("./topic.js");
const isFilterObject = (value)=>{
    const expectedFilterProperties = [
        "fromBlock",
        "toBlock",
        "address",
        "topics",
        "blockHash"
    ];
    if ((0, _objectJs.isNullish)(value) || typeof value !== "object") return false;
    if (!Object.keys(value).every((property)=>expectedFilterProperties.includes(property))) return false;
    if (!(0, _objectJs.isNullish)(value.fromBlock) && !(0, _blockJs.isBlockNumberOrTag)(value.fromBlock) || !(0, _objectJs.isNullish)(value.toBlock) && !(0, _blockJs.isBlockNumberOrTag)(value.toBlock)) return false;
    if (!(0, _objectJs.isNullish)(value.address)) {
        if (Array.isArray(value.address)) {
            if (!value.address.every((address)=>(0, _addressJs.isAddress)(address))) return false;
        } else if (!(0, _addressJs.isAddress)(value.address)) return false;
    }
    if (!(0, _objectJs.isNullish)(value.topics)) {
        if (!value.topics.every((topic)=>{
            if ((0, _objectJs.isNullish)(topic)) return true;
            if (Array.isArray(topic)) return topic.every((nestedTopic)=>(0, _topicJs.isTopic)(nestedTopic));
            if ((0, _topicJs.isTopic)(topic)) return true;
            return false;
        })) return false;
    }
    return true;
};

},{"./address.js":"dmKaL","./block.js":"2UPsE","./object.js":"et9f9","./topic.js":"feDql","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"et9f9":[function(require,module,exports) {
/*
This file is part of web3.js.

web3.js is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

web3.js is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isNullish", ()=>isNullish);
parcelHelpers.export(exports, "isObject", ()=>isObject);
var _web3Types = require("web3-types");
const isNullish = (item)=>// Using "null" value intentionally for validation
    // eslint-disable-next-line no-null/no-null
    item === undefined || item === null;
const isObject = (item)=>typeof item === "object" && !isNullish(item) && !Array.isArray(item) && !(item instanceof (0, _web3Types.TypedArray));

},{"web3-types":"g7Ztk","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"feDql":[function(require,module,exports) {
/*
This file is part of web3.js.

web3.js is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

web3.js is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isTopic", ()=>isTopic);
parcelHelpers.export(exports, "isTopicInBloom", ()=>isTopicInBloom);
var _bloomJs = require("./bloom.js");
const isTopic = (topic)=>{
    if (typeof topic !== "string") return false;
    if (!/^(0x)?[0-9a-f]{64}$/i.test(topic)) return false;
    if (/^(0x)?[0-9a-f]{64}$/.test(topic) || /^(0x)?[0-9A-F]{64}$/.test(topic)) return true;
    return false;
};
const isTopicInBloom = (bloom, topic)=>{
    if (!(0, _bloomJs.isBloom)(bloom)) return false;
    if (!isTopic(topic)) return false;
    return (0, _bloomJs.isInBloom)(bloom, topic);
};

},{"./bloom.js":"cqsss","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gHFsJ":[function(require,module,exports) {
/*
This file is part of web3.js.

web3.js is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

web3.js is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "validator", ()=>validator);
var _web3ValidatorJs = require("./web3_validator.js");
const validator = new (0, _web3ValidatorJs.Web3Validator)();

},{"./web3_validator.js":"4QNMT","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3cGLN":[function(require,module,exports) {
/*
This file is part of web3.js.

web3.js is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

web3.js is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6tCxo":[function(require,module,exports) {
/*
This file is part of web3.js.

web3.js is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

web3.js is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _addressJs = require("./address.js");
parcelHelpers.exportAll(_addressJs, exports);
var _blockJs = require("./block.js");
parcelHelpers.exportAll(_blockJs, exports);
var _bloomJs = require("./bloom.js");
parcelHelpers.exportAll(_bloomJs, exports);
var _booleanJs = require("./boolean.js");
parcelHelpers.exportAll(_booleanJs, exports);
var _bytesJs = require("./bytes.js");
parcelHelpers.exportAll(_bytesJs, exports);
var _ethJs = require("./eth.js");
parcelHelpers.exportAll(_ethJs, exports);
var _filterJs = require("./filter.js");
parcelHelpers.exportAll(_filterJs, exports);
var _numbersJs = require("./numbers.js");
parcelHelpers.exportAll(_numbersJs, exports);
var _stringJs = require("./string.js");
parcelHelpers.exportAll(_stringJs, exports);
var _topicJs = require("./topic.js");
parcelHelpers.exportAll(_topicJs, exports);
var _objectJs = require("./object.js");
parcelHelpers.exportAll(_objectJs, exports);

},{"./address.js":"dmKaL","./block.js":"2UPsE","./bloom.js":"cqsss","./boolean.js":"3RgOW","./bytes.js":"gT88C","./eth.js":"g89KW","./filter.js":"66a5T","./numbers.js":"eKX3t","./string.js":"hsFAS","./topic.js":"feDql","./object.js":"et9f9","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"g89KW":[function(require,module,exports) {
/*
This file is part of web3.js.

web3.js is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

web3.js is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isValidEthBaseType", ()=>isValidEthBaseType);
var _utilsJs = require("../utils.js");
const isValidEthBaseType = (type)=>{
    const { baseType, baseTypeSize } = (0, _utilsJs.parseBaseType)(type);
    if (!baseType) return false;
    if (baseType === type) return true;
    if ((baseType === "int" || baseType === "uint") && baseTypeSize) {
        if (!(baseTypeSize <= 256 && baseTypeSize % 8 === 0)) return false;
    }
    if (baseType === "bytes" && baseTypeSize) {
        if (!(baseTypeSize >= 1 && baseTypeSize <= 32)) return false;
    }
    return true;
};

},{"../utils.js":"l63qP","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"erJkq":[function(require,module,exports) {
/*
This file is part of web3.js.

web3.js is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

web3.js is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/ /* eslint-disable max-classes-per-file */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "EventEmitter", ()=>EventEmitter);
var _events = require("events");
var __awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
const wrapFunction = (fn)=>(params)=>fn(params.detail);
/**
 * This class copy the behavior of Node.js EventEmitter class.
 * It is used to provide the same interface for the browser environment.
 */ class EventEmitterAtBrowser extends EventTarget {
    constructor(){
        super(...arguments);
        this._listeners = {};
        this.maxListeners = Number.MAX_SAFE_INTEGER;
    }
    on(eventName, fn) {
        this.addEventListener(eventName, fn);
        return this;
    }
    once(eventName, fn) {
        const onceCallback = (params)=>__awaiter(this, void 0, void 0, function*() {
                this.off(eventName, onceCallback);
                yield fn(params);
            });
        return this.on(eventName, onceCallback);
    }
    off(eventName, fn) {
        this.removeEventListener(eventName, fn);
        return this;
    }
    emit(eventName, params) {
        const event = new CustomEvent(eventName, {
            detail: params
        });
        return super.dispatchEvent(event);
    }
    listenerCount(eventName) {
        const eventListeners = this._listeners[eventName];
        return eventListeners ? eventListeners.length : 0;
    }
    listeners(eventName) {
        return this._listeners[eventName].map((value)=>value[0]) || [];
    }
    eventNames() {
        return Object.keys(this._listeners);
    }
    removeAllListeners() {
        Object.keys(this._listeners).forEach((event)=>{
            this._listeners[event].forEach((listener)=>{
                super.removeEventListener(event, listener[1]);
            });
        });
        this._listeners = {};
        return this;
    }
    setMaxListeners(maxListeners) {
        this.maxListeners = maxListeners;
        return this;
    }
    getMaxListeners() {
        return this.maxListeners;
    }
    addEventListener(eventName, fn) {
        const wrappedFn = wrapFunction(fn);
        super.addEventListener(eventName, wrappedFn);
        if (!this._listeners[eventName]) this._listeners[eventName] = [];
        this._listeners[eventName].push([
            fn,
            wrappedFn
        ]);
    }
    removeEventListener(eventName, fn) {
        const eventListeners = this._listeners[eventName];
        if (eventListeners) {
            const index = eventListeners.findIndex((item)=>item[0] === fn);
            if (index !== -1) {
                super.removeEventListener(eventName, eventListeners[index][1]);
                eventListeners.splice(index, 1);
            }
        }
    }
}
// eslint-disable-next-line import/no-mutable-exports
let EventEmitterType;
// Check if the code is running in a Node.js environment
if (typeof window === "undefined") EventEmitterType = (0, _events.EventEmitter);
else // Fallback for the browser environment
EventEmitterType = EventEmitterAtBrowser;
class EventEmitter extends EventEmitterType {
}

},{"events":"1VQLm","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1VQLm":[function(require,module,exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
"use strict";
var R = typeof Reflect === "object" ? Reflect : null;
var ReflectApply = R && typeof R.apply === "function" ? R.apply : function ReflectApply(target, receiver, args) {
    return Function.prototype.apply.call(target, receiver, args);
};
var ReflectOwnKeys;
if (R && typeof R.ownKeys === "function") ReflectOwnKeys = R.ownKeys;
else if (Object.getOwnPropertySymbols) ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target).concat(Object.getOwnPropertySymbols(target));
};
else ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target);
};
function ProcessEmitWarning(warning) {
    if (console && console.warn) console.warn(warning);
}
var NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {
    return value !== value;
};
function EventEmitter() {
    EventEmitter.init.call(this);
}
module.exports = EventEmitter;
module.exports.once = once;
// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;
EventEmitter.prototype._events = undefined;
EventEmitter.prototype._eventsCount = 0;
EventEmitter.prototype._maxListeners = undefined;
// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
var defaultMaxListeners = 10;
function checkListener(listener) {
    if (typeof listener !== "function") throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
}
Object.defineProperty(EventEmitter, "defaultMaxListeners", {
    enumerable: true,
    get: function() {
        return defaultMaxListeners;
    },
    set: function(arg) {
        if (typeof arg !== "number" || arg < 0 || NumberIsNaN(arg)) throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + arg + ".");
        defaultMaxListeners = arg;
    }
});
EventEmitter.init = function() {
    if (this._events === undefined || this._events === Object.getPrototypeOf(this)._events) {
        this._events = Object.create(null);
        this._eventsCount = 0;
    }
    this._maxListeners = this._maxListeners || undefined;
};
// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
    if (typeof n !== "number" || n < 0 || NumberIsNaN(n)) throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n + ".");
    this._maxListeners = n;
    return this;
};
function _getMaxListeners(that) {
    if (that._maxListeners === undefined) return EventEmitter.defaultMaxListeners;
    return that._maxListeners;
}
EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
    return _getMaxListeners(this);
};
EventEmitter.prototype.emit = function emit(type) {
    var args = [];
    for(var i = 1; i < arguments.length; i++)args.push(arguments[i]);
    var doError = type === "error";
    var events = this._events;
    if (events !== undefined) doError = doError && events.error === undefined;
    else if (!doError) return false;
    // If there is no 'error' event listener then throw.
    if (doError) {
        var er;
        if (args.length > 0) er = args[0];
        if (er instanceof Error) // Note: The comments on the `throw` lines are intentional, they show
        // up in Node's output if this results in an unhandled exception.
        throw er; // Unhandled 'error' event
        // At least give some kind of context to the user
        var err = new Error("Unhandled error." + (er ? " (" + er.message + ")" : ""));
        err.context = er;
        throw err; // Unhandled 'error' event
    }
    var handler = events[type];
    if (handler === undefined) return false;
    if (typeof handler === "function") ReflectApply(handler, this, args);
    else {
        var len = handler.length;
        var listeners = arrayClone(handler, len);
        for(var i = 0; i < len; ++i)ReflectApply(listeners[i], this, args);
    }
    return true;
};
function _addListener(target, type, listener, prepend) {
    var m;
    var events;
    var existing;
    checkListener(listener);
    events = target._events;
    if (events === undefined) {
        events = target._events = Object.create(null);
        target._eventsCount = 0;
    } else {
        // To avoid recursion in the case that type === "newListener"! Before
        // adding it to the listeners, first emit "newListener".
        if (events.newListener !== undefined) {
            target.emit("newListener", type, listener.listener ? listener.listener : listener);
            // Re-assign `events` because a newListener handler could have caused the
            // this._events to be assigned to a new object
            events = target._events;
        }
        existing = events[type];
    }
    if (existing === undefined) {
        // Optimize the case of one listener. Don't need the extra array object.
        existing = events[type] = listener;
        ++target._eventsCount;
    } else {
        if (typeof existing === "function") // Adding the second element, need to change to array.
        existing = events[type] = prepend ? [
            listener,
            existing
        ] : [
            existing,
            listener
        ];
        else if (prepend) existing.unshift(listener);
        else existing.push(listener);
        // Check for listener leak
        m = _getMaxListeners(target);
        if (m > 0 && existing.length > m && !existing.warned) {
            existing.warned = true;
            // No error code for this since it is a Warning
            // eslint-disable-next-line no-restricted-syntax
            var w = new Error("Possible EventEmitter memory leak detected. " + existing.length + " " + String(type) + " listeners " + "added. Use emitter.setMaxListeners() to " + "increase limit");
            w.name = "MaxListenersExceededWarning";
            w.emitter = target;
            w.type = type;
            w.count = existing.length;
            ProcessEmitWarning(w);
        }
    }
    return target;
}
EventEmitter.prototype.addListener = function addListener(type, listener) {
    return _addListener(this, type, listener, false);
};
EventEmitter.prototype.on = EventEmitter.prototype.addListener;
EventEmitter.prototype.prependListener = function prependListener(type, listener) {
    return _addListener(this, type, listener, true);
};
function onceWrapper() {
    if (!this.fired) {
        this.target.removeListener(this.type, this.wrapFn);
        this.fired = true;
        if (arguments.length === 0) return this.listener.call(this.target);
        return this.listener.apply(this.target, arguments);
    }
}
function _onceWrap(target, type, listener) {
    var state = {
        fired: false,
        wrapFn: undefined,
        target: target,
        type: type,
        listener: listener
    };
    var wrapped = onceWrapper.bind(state);
    wrapped.listener = listener;
    state.wrapFn = wrapped;
    return wrapped;
}
EventEmitter.prototype.once = function once(type, listener) {
    checkListener(listener);
    this.on(type, _onceWrap(this, type, listener));
    return this;
};
EventEmitter.prototype.prependOnceListener = function prependOnceListener(type, listener) {
    checkListener(listener);
    this.prependListener(type, _onceWrap(this, type, listener));
    return this;
};
// Emits a 'removeListener' event if and only if the listener was removed.
EventEmitter.prototype.removeListener = function removeListener(type, listener) {
    var list, events, position, i, originalListener;
    checkListener(listener);
    events = this._events;
    if (events === undefined) return this;
    list = events[type];
    if (list === undefined) return this;
    if (list === listener || list.listener === listener) {
        if (--this._eventsCount === 0) this._events = Object.create(null);
        else {
            delete events[type];
            if (events.removeListener) this.emit("removeListener", type, list.listener || listener);
        }
    } else if (typeof list !== "function") {
        position = -1;
        for(i = list.length - 1; i >= 0; i--)if (list[i] === listener || list[i].listener === listener) {
            originalListener = list[i].listener;
            position = i;
            break;
        }
        if (position < 0) return this;
        if (position === 0) list.shift();
        else spliceOne(list, position);
        if (list.length === 1) events[type] = list[0];
        if (events.removeListener !== undefined) this.emit("removeListener", type, originalListener || listener);
    }
    return this;
};
EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
EventEmitter.prototype.removeAllListeners = function removeAllListeners(type) {
    var listeners, events, i;
    events = this._events;
    if (events === undefined) return this;
    // not listening for removeListener, no need to emit
    if (events.removeListener === undefined) {
        if (arguments.length === 0) {
            this._events = Object.create(null);
            this._eventsCount = 0;
        } else if (events[type] !== undefined) {
            if (--this._eventsCount === 0) this._events = Object.create(null);
            else delete events[type];
        }
        return this;
    }
    // emit removeListener for all listeners on all events
    if (arguments.length === 0) {
        var keys = Object.keys(events);
        var key;
        for(i = 0; i < keys.length; ++i){
            key = keys[i];
            if (key === "removeListener") continue;
            this.removeAllListeners(key);
        }
        this.removeAllListeners("removeListener");
        this._events = Object.create(null);
        this._eventsCount = 0;
        return this;
    }
    listeners = events[type];
    if (typeof listeners === "function") this.removeListener(type, listeners);
    else if (listeners !== undefined) // LIFO order
    for(i = listeners.length - 1; i >= 0; i--)this.removeListener(type, listeners[i]);
    return this;
};
function _listeners(target, type, unwrap) {
    var events = target._events;
    if (events === undefined) return [];
    var evlistener = events[type];
    if (evlistener === undefined) return [];
    if (typeof evlistener === "function") return unwrap ? [
        evlistener.listener || evlistener
    ] : [
        evlistener
    ];
    return unwrap ? unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
}
EventEmitter.prototype.listeners = function listeners(type) {
    return _listeners(this, type, true);
};
EventEmitter.prototype.rawListeners = function rawListeners(type) {
    return _listeners(this, type, false);
};
EventEmitter.listenerCount = function(emitter, type) {
    if (typeof emitter.listenerCount === "function") return emitter.listenerCount(type);
    else return listenerCount.call(emitter, type);
};
EventEmitter.prototype.listenerCount = listenerCount;
function listenerCount(type) {
    var events = this._events;
    if (events !== undefined) {
        var evlistener = events[type];
        if (typeof evlistener === "function") return 1;
        else if (evlistener !== undefined) return evlistener.length;
    }
    return 0;
}
EventEmitter.prototype.eventNames = function eventNames() {
    return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];
};
function arrayClone(arr, n) {
    var copy = new Array(n);
    for(var i = 0; i < n; ++i)copy[i] = arr[i];
    return copy;
}
function spliceOne(list, index) {
    for(; index + 1 < list.length; index++)list[index] = list[index + 1];
    list.pop();
}
function unwrapListeners(arr) {
    var ret = new Array(arr.length);
    for(var i = 0; i < ret.length; ++i)ret[i] = arr[i].listener || arr[i];
    return ret;
}
function once(emitter, name) {
    return new Promise(function(resolve, reject) {
        function errorListener(err) {
            emitter.removeListener(name, resolver);
            reject(err);
        }
        function resolver() {
            if (typeof emitter.removeListener === "function") emitter.removeListener("error", errorListener);
            resolve([].slice.call(arguments));
        }
        eventTargetAgnosticAddListener(emitter, name, resolver, {
            once: true
        });
        if (name !== "error") addErrorHandlerIfEventEmitter(emitter, errorListener, {
            once: true
        });
    });
}
function addErrorHandlerIfEventEmitter(emitter, handler, flags) {
    if (typeof emitter.on === "function") eventTargetAgnosticAddListener(emitter, "error", handler, flags);
}
function eventTargetAgnosticAddListener(emitter, name, listener, flags) {
    if (typeof emitter.on === "function") {
        if (flags.once) emitter.once(name, listener);
        else emitter.on(name, listener);
    } else if (typeof emitter.addEventListener === "function") // EventTarget does not have `error` event semantics like Node
    // EventEmitters, we do not listen for `error` events here.
    emitter.addEventListener(name, function wrapListener(arg) {
        // IE does not have builtin `{ once: true }` support so we
        // have to do it manually.
        if (flags.once) emitter.removeEventListener(name, wrapListener);
        listener(arg);
    });
    else throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type ' + typeof emitter);
}

},{}],"fIuWC":[function(require,module,exports) {
/*
This file is part of web3.js.

web3.js is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

web3.js is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isHexStrict", ()=>isHexStrict);
parcelHelpers.export(exports, "isHex", ()=>isHex);
parcelHelpers.export(exports, "checkAddressCheckSum", ()=>checkAddressCheckSum);
parcelHelpers.export(exports, "isAddress", ()=>isAddress);
parcelHelpers.export(exports, "isBloom", ()=>isBloom);
parcelHelpers.export(exports, "isInBloom", ()=>isInBloom);
parcelHelpers.export(exports, "isUserEthereumAddressInBloom", ()=>isUserEthereumAddressInBloom);
parcelHelpers.export(exports, "isContractAddressInBloom", ()=>isContractAddressInBloom);
parcelHelpers.export(exports, "isTopic", ()=>isTopic);
parcelHelpers.export(exports, "isTopicInBloom", ()=>isTopicInBloom);
parcelHelpers.export(exports, "compareBlockNumbers", ()=>compareBlockNumbers);
parcelHelpers.export(exports, "isContractInitOptions", ()=>isContractInitOptions);
parcelHelpers.export(exports, "isNullish", ()=>isNullish);
var _web3Errors = require("web3-errors");
var _web3Validator = require("web3-validator");
var _web3Types = require("web3-types");
const isHexStrict = (0, _web3Validator.isHexStrict);
const isHex = (0, _web3Validator.isHex);
const checkAddressCheckSum = (0, _web3Validator.checkAddressCheckSum);
const isAddress = (0, _web3Validator.isAddress);
const isBloom = (0, _web3Validator.isBloom);
const isInBloom = (0, _web3Validator.isInBloom);
const isUserEthereumAddressInBloom = (0, _web3Validator.isUserEthereumAddressInBloom);
const isContractAddressInBloom = (0, _web3Validator.isContractAddressInBloom);
const isTopic = (0, _web3Validator.isTopic);
const isTopicInBloom = (0, _web3Validator.isTopicInBloom);
const compareBlockNumbers = (blockA, blockB)=>{
    const isABlockTag = typeof blockA === "string" && (0, _web3Validator.isBlockTag)(blockA);
    const isBBlockTag = typeof blockB === "string" && (0, _web3Validator.isBlockTag)(blockB);
    if (blockA === blockB || (blockA === "earliest" || blockA === 0) && (blockB === "earliest" || blockB === 0) // only exception compare blocktag with number
    ) return 0;
    if (blockA === "earliest" && blockB > 0) return -1;
    if (blockB === "earliest" && blockA > 0) return 1;
    if (isABlockTag && isBBlockTag) {
        // Increasing order:  earliest, finalized , safe, latest, pending
        const tagsOrder = {
            [(0, _web3Types.BlockTags).EARLIEST]: 1,
            [(0, _web3Types.BlockTags).FINALIZED]: 2,
            [(0, _web3Types.BlockTags).SAFE]: 3,
            [(0, _web3Types.BlockTags).LATEST]: 4,
            [(0, _web3Types.BlockTags).PENDING]: 5
        };
        if (tagsOrder[blockA] < tagsOrder[blockB]) return -1;
        return 1;
    }
    if (isABlockTag && !isBBlockTag || !isABlockTag && isBBlockTag) throw new (0, _web3Errors.InvalidBlockError)("Cannot compare blocktag with provided non-blocktag input.");
    const bigIntA = BigInt(blockA);
    const bigIntB = BigInt(blockB);
    if (bigIntA < bigIntB) return -1;
    if (bigIntA === bigIntB) return 0;
    return 1;
};
const isContractInitOptions = (options)=>typeof options === "object" && !(0, _web3Validator.isNullish)(options) && Object.keys(options).length !== 0 && [
        "input",
        "data",
        "from",
        "gas",
        "gasPrice",
        "gasLimit",
        "address",
        "jsonInterface",
        "syncWithContext",
        "dataInputFill"
    ].some((key)=>key in options);
const isNullish = (0, _web3Validator.isNullish);

},{"web3-errors":"jDvsn","web3-validator":"6HK71","web3-types":"g7Ztk","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"c7J3D":[function(require,module,exports) {
/*
This file is part of web3.js.

web3.js is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

web3.js is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isDataFormat", ()=>isDataFormat);
parcelHelpers.export(exports, "convertScalarValue", ()=>convertScalarValue);
parcelHelpers.export(exports, "convert", ()=>convert);
parcelHelpers.export(exports, "format", ()=>format);
var _web3Errors = require("web3-errors");
var _web3Types = require("web3-types");
var _web3Validator = require("web3-validator");
var _convertersJs = require("./converters.js");
var _objectsJs = require("./objects.js");
var _stringManipulationJs = require("./string_manipulation.js");
var _uint8ArrayJs = require("./uint8array.js");
const { parseBaseType } = (0, _web3Validator.utils);
const isDataFormat = (dataFormat)=>typeof dataFormat === "object" && !(0, _web3Validator.isNullish)(dataFormat) && "number" in dataFormat && "bytes" in dataFormat;
/**
 * Finds the schema that corresponds to a specific data path within a larger JSON schema.
 * It works by iterating over the dataPath array and traversing the JSON schema one step at a time until it reaches the end of the path.
 *
 * @param schema - represents a JSON schema, which is an object that describes the structure of JSON data
 * @param dataPath - represents an array of strings that specifies the path to the data within the JSON schema
 * @param oneOfPath - represents an optional array of two-element tuples that specifies the "oneOf" option to choose, if the schema has oneOf and the data path can match multiple subschemas
 * @returns the JSON schema that matches the data path
 *
 */ const findSchemaByDataPath = (schema, dataPath, oneOfPath = [])=>{
    let result = Object.assign({}, schema);
    let previousDataPath;
    for (const dataPart of dataPath){
        if (result.oneOf && previousDataPath) {
            const path = oneOfPath.find(function(element) {
                return this === element[0];
            }, previousDataPath !== null && previousDataPath !== void 0 ? previousDataPath : "");
            if (path && path[0] === previousDataPath) // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unsafe-member-access
            result = result.oneOf[path[1]];
        }
        if (!result.properties && !result.items) return undefined;
        if (result.properties) result = result.properties[dataPart];
        else if (result.items && result.items.properties) {
            const node = result.items.properties;
            if (!node) return undefined;
            result = node[dataPart];
        } else if (result.items && (0, _web3Validator.isObject)(result.items)) result = result.items;
        else if (result.items && Array.isArray(result.items)) result = result.items[parseInt(dataPart, 10)];
        if (result && dataPart) previousDataPath = dataPart;
    }
    return result;
};
const convertScalarValue = (value, ethType, format)=>{
    try {
        const { baseType, baseTypeSize } = parseBaseType(ethType);
        if (baseType === "int" || baseType === "uint") switch(format.number){
            case (0, _web3Types.FMT_NUMBER).NUMBER:
                return Number((0, _convertersJs.toBigInt)(value));
            case (0, _web3Types.FMT_NUMBER).HEX:
                return (0, _convertersJs.numberToHex)((0, _convertersJs.toBigInt)(value));
            case (0, _web3Types.FMT_NUMBER).STR:
                return (0, _convertersJs.toBigInt)(value).toString();
            case (0, _web3Types.FMT_NUMBER).BIGINT:
                return (0, _convertersJs.toBigInt)(value);
            default:
                throw new (0, _web3Errors.FormatterError)(`Invalid format: ${String(format.number)}`);
        }
        if (baseType === "bytes") {
            let paddedValue;
            if (baseTypeSize) {
                if (typeof value === "string") paddedValue = (0, _stringManipulationJs.padLeft)(value, baseTypeSize * 2);
                else if (value instanceof Uint8Array) paddedValue = (0, _uint8ArrayJs.uint8ArrayConcat)(new Uint8Array(baseTypeSize - value.length), value);
            } else paddedValue = value;
            switch(format.bytes){
                case (0, _web3Types.FMT_BYTES).HEX:
                    return (0, _convertersJs.bytesToHex)((0, _convertersJs.bytesToUint8Array)(paddedValue));
                case (0, _web3Types.FMT_BYTES).UINT8ARRAY:
                    return (0, _convertersJs.bytesToUint8Array)(paddedValue);
                default:
                    throw new (0, _web3Errors.FormatterError)(`Invalid format: ${String(format.bytes)}`);
            }
        }
    } catch (error) {
        // If someone didn't use `eth` keyword we can return original value
        // as the scope of this code is formatting not validation
        return value;
    }
    return value;
};
const convert = (data, schema, dataPath, format, oneOfPath = [])=>{
    var _a, _b;
    // If it's a scalar value
    if (!(0, _web3Validator.isObject)(data) && !Array.isArray(data)) return convertScalarValue(data, schema === null || schema === void 0 ? void 0 : schema.format, format);
    const object = data;
    for (const [key, value] of Object.entries(object)){
        dataPath.push(key);
        const schemaProp = findSchemaByDataPath(schema, dataPath, oneOfPath);
        // If value is a scaler value
        if ((0, _web3Validator.isNullish)(schemaProp)) {
            delete object[key];
            dataPath.pop();
            continue;
        }
        // If value is an object, recurse into it
        if ((0, _web3Validator.isObject)(value)) {
            convert(value, schema, dataPath, format);
            dataPath.pop();
            continue;
        }
        // If value is an array
        if (Array.isArray(value)) {
            let _schemaProp = schemaProp;
            // TODO This is a naive approach to solving the issue of
            // a schema using oneOf. This chunk of code was intended to handle
            // BlockSchema.transactions
            // TODO BlockSchema.transactions are not being formatted
            if ((schemaProp === null || schemaProp === void 0 ? void 0 : schemaProp.oneOf) !== undefined) // The following code is basically saying:
            // if the schema specifies oneOf, then we are to loop
            // over each possible schema and check if they type of the schema
            // matches the type of value[0], and if so we use the oneOfSchemaProp
            // as the schema for formatting
            // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-call
            schemaProp.oneOf.forEach((oneOfSchemaProp, index)=>{
                var _a, _b;
                if (!Array.isArray(schemaProp === null || schemaProp === void 0 ? void 0 : schemaProp.items) && (typeof value[0] === "object" && ((_a = oneOfSchemaProp === null || oneOfSchemaProp === void 0 ? void 0 : oneOfSchemaProp.items) === null || _a === void 0 ? void 0 : _a.type) === "object" || typeof value[0] === "string" && ((_b = oneOfSchemaProp === null || oneOfSchemaProp === void 0 ? void 0 : oneOfSchemaProp.items) === null || _b === void 0 ? void 0 : _b.type) !== "object")) {
                    _schemaProp = oneOfSchemaProp;
                    oneOfPath.push([
                        key,
                        index
                    ]);
                }
            });
            if ((0, _web3Validator.isNullish)(_schemaProp === null || _schemaProp === void 0 ? void 0 : _schemaProp.items)) {
                // Can not find schema for array item, delete that item
                delete object[key];
                dataPath.pop();
                continue;
            }
            // If schema for array items is a single type
            if ((0, _web3Validator.isObject)(_schemaProp.items) && !(0, _web3Validator.isNullish)(_schemaProp.items.format)) {
                for(let i = 0; i < value.length; i += 1)object[key][i] = convertScalarValue(value[i], // eslint-disable-next-line @typescript-eslint/no-unsafe-argument
                (_a = _schemaProp === null || _schemaProp === void 0 ? void 0 : _schemaProp.items) === null || _a === void 0 ? void 0 : _a.format, format);
                dataPath.pop();
                continue;
            }
            // If schema for array items is an object
            if (!Array.isArray(_schemaProp === null || _schemaProp === void 0 ? void 0 : _schemaProp.items) && ((_b = _schemaProp === null || _schemaProp === void 0 ? void 0 : _schemaProp.items) === null || _b === void 0 ? void 0 : _b.type) === "object") {
                for (const arrObject of value)convert(arrObject, schema, dataPath, format, oneOfPath);
                dataPath.pop();
                continue;
            }
            // If schema for array is a tuple
            if (Array.isArray(_schemaProp === null || _schemaProp === void 0 ? void 0 : _schemaProp.items)) {
                for(let i = 0; i < value.length; i += 1)object[key][i] = convertScalarValue(value[i], _schemaProp.items[i].format, format);
                dataPath.pop();
                continue;
            }
        }
        object[key] = convertScalarValue(value, schemaProp.format, format);
        dataPath.pop();
    }
    return object;
};
const format = (schema, data, returnFormat)=>{
    let dataToParse;
    if ((0, _web3Validator.isObject)(data)) dataToParse = (0, _objectsJs.mergeDeep)({}, data);
    else if (Array.isArray(data)) dataToParse = [
        ...data
    ];
    else dataToParse = data;
    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
    const jsonSchema = (0, _web3Validator.isObject)(schema) ? schema : (0, _web3Validator.utils).ethAbiToJsonSchema(schema);
    if (!jsonSchema.properties && !jsonSchema.items && !jsonSchema.format) throw new (0, _web3Errors.FormatterError)("Invalid json schema for formatting");
    return convert(dataToParse, jsonSchema, [], returnFormat);
};

},{"web3-errors":"jDvsn","web3-types":"g7Ztk","web3-validator":"6HK71","./converters.js":"cAcnb","./objects.js":"2BdUa","./string_manipulation.js":"bbM94","./uint8array.js":"kTJXO","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2BdUa":[function(require,module,exports) {
/*
This file is part of web3.js.

web3.js is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

web3.js is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "mergeDeep", ()=>mergeDeep);
var _web3Types = require("web3-types");
var _web3Validator = require("web3-validator");
const isIterable = (item)=>typeof item === "object" && !(0, _web3Validator.isNullish)(item) && !Array.isArray(item) && !(item instanceof (0, _web3Types.TypedArray));
const mergeDeep = (destination, ...sources)=>{
    const result = destination; // clone deep here
    if (!isIterable(result)) return result;
    for (const src of sources)// eslint-disable-next-line no-restricted-syntax
    for(const key in src){
        if (isIterable(src[key])) {
            if (!result[key]) result[key] = {};
            mergeDeep(result[key], src[key]);
        } else if (!(0, _web3Validator.isNullish)(src[key]) && Object.hasOwnProperty.call(src, key)) {
            if (Array.isArray(src[key]) || src[key] instanceof (0, _web3Types.TypedArray)) result[key] = src[key].slice(0);
            else result[key] = src[key];
        }
    }
    return result;
};

},{"web3-types":"g7Ztk","web3-validator":"6HK71","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bbM94":[function(require,module,exports) {
/*
This file is part of web3.js.

web3.js is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

web3.js is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "padLeft", ()=>padLeft);
parcelHelpers.export(exports, "padRight", ()=>padRight);
parcelHelpers.export(exports, "rightPad", ()=>rightPad);
parcelHelpers.export(exports, "leftPad", ()=>leftPad);
parcelHelpers.export(exports, "toTwosComplement", ()=>toTwosComplement);
parcelHelpers.export(exports, "fromTwosComplement", ()=>fromTwosComplement);
var _web3Errors = require("web3-errors");
var _web3Validator = require("web3-validator");
var _convertersJs = require("./converters.js");
const padLeft = (value, characterAmount, sign = "0")=>{
    // To avoid duplicate code and circular dependency we will
    // use `padLeft` implementation from `web3-validator`
    if (typeof value === "string") {
        if (!(0, _web3Validator.isHexStrict)(value)) return value.padStart(characterAmount, sign);
        return (0, _web3Validator.utils).padLeft(value, characterAmount, sign);
    }
    (0, _web3Validator.validator).validate([
        "int"
    ], [
        value
    ]);
    return (0, _web3Validator.utils).padLeft(value, characterAmount, sign);
};
const padRight = (value, characterAmount, sign = "0")=>{
    if (typeof value === "string" && !(0, _web3Validator.isHexStrict)(value)) return value.padEnd(characterAmount, sign);
    (0, _web3Validator.validator).validate([
        "int"
    ], [
        value
    ]);
    const hexString = typeof value === "string" && (0, _web3Validator.isHexStrict)(value) ? value : (0, _convertersJs.numberToHex)(value);
    const prefixLength = hexString.startsWith("-") ? 3 : 2;
    return hexString.padEnd(characterAmount + prefixLength, sign);
};
const rightPad = padRight;
const leftPad = padLeft;
const toTwosComplement = (value, nibbleWidth = 64)=>{
    (0, _web3Validator.validator).validate([
        "int"
    ], [
        value
    ]);
    const val = (0, _convertersJs.toNumber)(value);
    if (val >= 0) return padLeft((0, _convertersJs.toHex)(val), nibbleWidth);
    const largestBit = (0, _web3Validator.bigintPower)(BigInt(2), BigInt(nibbleWidth * 4));
    if (-val >= largestBit) throw new (0, _web3Errors.NibbleWidthError)(`value: ${value}, nibbleWidth: ${nibbleWidth}`);
    const updatedVal = BigInt(val);
    const complement = updatedVal + largestBit;
    return padLeft((0, _convertersJs.numberToHex)(complement), nibbleWidth);
};
const fromTwosComplement = (value, nibbleWidth = 64)=>{
    (0, _web3Validator.validator).validate([
        "int"
    ], [
        value
    ]);
    const val = (0, _convertersJs.toNumber)(value);
    if (val < 0) return val;
    const largestBit = Math.ceil(Math.log(Number(val)) / Math.log(2));
    if (largestBit > nibbleWidth * 4) throw new (0, _web3Errors.NibbleWidthError)(`value: "${value}", nibbleWidth: "${nibbleWidth}"`);
    // check the largest bit to see if negative
    if (nibbleWidth * 4 !== largestBit) return val;
    const complement = (0, _web3Validator.bigintPower)(BigInt(2), BigInt(nibbleWidth) * BigInt(4));
    return (0, _convertersJs.toNumber)(BigInt(val) - complement);
};

},{"web3-errors":"jDvsn","web3-validator":"6HK71","./converters.js":"cAcnb","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kTJXO":[function(require,module,exports) {
/*
This file is part of web3.js.

web3.js is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

web3.js is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "uint8ArrayConcat", ()=>uint8ArrayConcat);
/**
 * Returns true if the two passed Uint8Arrays have the same content
 */ parcelHelpers.export(exports, "uint8ArrayEquals", ()=>uint8ArrayEquals);
function uint8ArrayConcat(...parts) {
    const length = parts.reduce((prev, part)=>{
        const agg = prev + part.length;
        return agg;
    }, 0);
    const result = new Uint8Array(length);
    let offset = 0;
    for (const part of parts){
        result.set(part, offset);
        offset += part.length;
    }
    return result;
}
function uint8ArrayEquals(a, b) {
    if (a === b) return true;
    if (a.byteLength !== b.byteLength) return false;
    for(let i = 0; i < a.byteLength; i += 1){
        if (a[i] !== b[i]) return false;
    }
    return true;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jzvcl":[function(require,module,exports) {
/*
This file is part of web3.js.

web3.js is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

web3.js is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/ /**
 * @module Utils
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "sha3", ()=>sha3);
parcelHelpers.export(exports, "sha3Raw", ()=>sha3Raw);
parcelHelpers.export(exports, "keccak256Wrapper", ()=>keccak256Wrapper);
parcelHelpers.export(exports, "keccak256", ()=>keccak256Wrapper);
parcelHelpers.export(exports, "processSolidityEncodePackedArgs", ()=>processSolidityEncodePackedArgs);
parcelHelpers.export(exports, "encodePacked", ()=>encodePacked);
parcelHelpers.export(exports, "soliditySha3", ()=>soliditySha3);
parcelHelpers.export(exports, "soliditySha3Raw", ()=>soliditySha3Raw);
parcelHelpers.export(exports, "getStorageSlotNumForLongString", ()=>getStorageSlotNumForLongString);
var _keccakJs = require("ethereum-cryptography/keccak.js");
var _utilsJs = require("ethereum-cryptography/utils.js");
var _web3Errors = require("web3-errors");
var _web3Validator = require("web3-validator");
var _convertersJs = require("./converters.js");
var _stringManipulationJs = require("./string_manipulation.js");
const SHA3_EMPTY_BYTES = "0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470";
const sha3 = (data)=>{
    let updatedData;
    if (typeof data === "string") {
        if (data.startsWith("0x") && (0, _web3Validator.isHexStrict)(data)) updatedData = (0, _convertersJs.hexToBytes)(data);
        else updatedData = (0, _utilsJs.utf8ToBytes)(data);
    } else updatedData = data;
    const hash = (0, _convertersJs.bytesToHex)((0, _keccakJs.keccak256)(updatedData));
    // EIP-1052 if hash is equal to c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470, keccak was given empty data
    return hash === SHA3_EMPTY_BYTES ? undefined : hash;
};
const sha3Raw = (data)=>{
    const hash = sha3(data);
    if ((0, _web3Validator.isNullish)(hash)) return SHA3_EMPTY_BYTES;
    return hash;
};
const keccak256Wrapper = (data)=>{
    let processedData;
    if (typeof data === "bigint" || typeof data === "number") processedData = (0, _utilsJs.utf8ToBytes)(data.toString());
    else if (Array.isArray(data)) processedData = new Uint8Array(data);
    else if (typeof data === "string" && !(0, _web3Validator.isHexStrict)(data)) processedData = (0, _utilsJs.utf8ToBytes)(data);
    else processedData = (0, _convertersJs.bytesToUint8Array)(data);
    return (0, _convertersJs.bytesToHex)((0, _keccakJs.keccak256)(processedData));
};
/**
 * returns type and value
 * @param arg - the input to return the type and value
 * @returns - the type and value of the input
 */ const getType = (arg)=>{
    if (Array.isArray(arg)) throw new Error("Autodetection of array types is not supported.");
    let type;
    let value;
    // if type is given
    if (typeof arg === "object" && ("t" in arg || "type" in arg) && ("v" in arg || "value" in arg)) {
        type = "t" in arg ? arg.t : arg.type;
        value = "v" in arg ? arg.v : arg.value;
        type = type.toLowerCase() === "bigint" ? "int" : type;
    } else if (typeof arg === "bigint") return [
        "int",
        arg
    ];
    else {
        type = (0, _convertersJs.toHex)(arg, true);
        value = (0, _convertersJs.toHex)(arg);
        if (!type.startsWith("int") && !type.startsWith("uint")) type = "bytes";
    }
    if ((type.startsWith("int") || type.startsWith("uint")) && typeof value === "string" && !/^(-)?0x/i.test(value)) value = (0, _convertersJs.toBigInt)(value);
    return [
        type,
        value
    ];
};
/**
 * returns the type with size if uint or int
 * @param name - the input to return the type with size
 * @returns - the type with size of the input
 */ const elementaryName = (name)=>{
    if (name.startsWith("int[")) return `int256${name.slice(3)}`;
    if (name === "int") return "int256";
    if (name.startsWith("uint[")) return `uint256'${name.slice(4)}`;
    if (name === "uint") return "uint256";
    return name;
};
/**
 * returns the size of the value of type 'byte'
 */ const parseTypeN = (value, typeLength)=>{
    const typesize = /^(\d+).*$/.exec(value.slice(typeLength));
    return typesize ? parseInt(typesize[1], 10) : 0;
};
/**
 * returns the bit length of the value
 * @param value - the input to return the bit length
 * @returns - the bit length of the input
 */ const bitLength = (value)=>{
    const updatedVal = value.toString(2);
    return updatedVal.length;
};
/**
 * Pads the value based on size and type
 * returns a string of the padded value
 * @param type - the input to pad
 * @returns = the padded value
 */ const solidityPack = (type, val)=>{
    const value = val.toString();
    if (type === "string") {
        if (typeof val === "string") return (0, _convertersJs.utf8ToHex)(val);
        throw new (0, _web3Errors.InvalidStringError)(val);
    }
    if (type === "bool" || type === "boolean") {
        if (typeof val === "boolean") return val ? "01" : "00";
        throw new (0, _web3Errors.InvalidBooleanError)(val);
    }
    if (type === "address") {
        if (!(0, _web3Validator.isAddress)(value)) throw new (0, _web3Errors.InvalidAddressError)(value);
        return value;
    }
    const name = elementaryName(type);
    if (type.startsWith("uint")) {
        const size = parseTypeN(name, 4);
        if (size % 8 || size < 8 || size > 256) throw new (0, _web3Errors.InvalidSizeError)(value);
        const num = (0, _convertersJs.toNumber)(value);
        if (bitLength(num) > size) throw new (0, _web3Errors.InvalidLargeValueError)(value);
        if (num < BigInt(0)) throw new (0, _web3Errors.InvalidUnsignedIntegerError)(value);
        return size ? (0, _stringManipulationJs.leftPad)(num.toString(16), size / 8 * 2) : num.toString(16);
    }
    if (type.startsWith("int")) {
        const size = parseTypeN(name, 3);
        if (size % 8 || size < 8 || size > 256) throw new (0, _web3Errors.InvalidSizeError)(type);
        const num = (0, _convertersJs.toNumber)(value);
        if (bitLength(num) > size) throw new (0, _web3Errors.InvalidLargeValueError)(value);
        if (num < BigInt(0)) return (0, _stringManipulationJs.toTwosComplement)(num.toString(), size / 8 * 2);
        return size ? (0, _stringManipulationJs.leftPad)(num.toString(16), size / 4) : num.toString(16);
    }
    if (name === "bytes") {
        if (value.replace(/^0x/i, "").length % 2 !== 0) throw new (0, _web3Errors.InvalidBytesError)(value);
        return value;
    }
    if (type.startsWith("bytes")) {
        if (value.replace(/^0x/i, "").length % 2 !== 0) throw new (0, _web3Errors.InvalidBytesError)(value);
        const size = parseTypeN(type, 5);
        if (!size || size < 1 || size > 64 || size < value.replace(/^0x/i, "").length / 2) throw new (0, _web3Errors.InvalidBytesError)(value);
        return (0, _stringManipulationJs.rightPad)(value, size * 2);
    }
    return "";
};
const processSolidityEncodePackedArgs = (arg)=>{
    const [type, val] = getType(arg);
    // array case
    if (Array.isArray(val)) {
        // go through each element of the array and use map function to create new hexarg list
        const hexArg = val.map((v)=>solidityPack(type, v).replace("0x", ""));
        return hexArg.join("");
    }
    const hexArg = solidityPack(type, val);
    return hexArg.replace("0x", "");
};
const encodePacked = (...values)=>{
    const hexArgs = values.map(processSolidityEncodePackedArgs);
    return `0x${hexArgs.join("").toLowerCase()}`;
};
const soliditySha3 = (...values)=>sha3(encodePacked(...values));
const soliditySha3Raw = (...values)=>sha3Raw(encodePacked(...values));
const getStorageSlotNumForLongString = (mainSlotNumber)=>sha3(`0x${(typeof mainSlotNumber === "number" ? mainSlotNumber.toString() : mainSlotNumber).padStart(64, "0")}`);

},{"ethereum-cryptography/keccak.js":"5j5ih","ethereum-cryptography/utils.js":"l6KG0","web3-errors":"jDvsn","web3-validator":"6HK71","./converters.js":"cAcnb","./string_manipulation.js":"bbM94","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hHFaB":[function(require,module,exports) {
/*
This file is part of web3.js.

web3.js is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

web3.js is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "randomBytes", ()=>randomBytes);
parcelHelpers.export(exports, "randomHex", ()=>randomHex);
var _randomJs = require("ethereum-cryptography/random.js");
var _convertersJs = require("./converters.js");
const randomBytes = (size)=>(0, _randomJs.getRandomBytesSync)(size);
const randomHex = (byteSize)=>(0, _convertersJs.bytesToHex)(randomBytes(byteSize));

},{"ethereum-cryptography/random.js":"ilfvf","./converters.js":"cAcnb","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ilfvf":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getRandomBytesSync", ()=>getRandomBytesSync);
parcelHelpers.export(exports, "getRandomBytes", ()=>getRandomBytes);
var _utils = require("@noble/hashes/utils");
function getRandomBytesSync(bytes) {
    return (0, _utils.randomBytes)(bytes);
}
async function getRandomBytes(bytes) {
    return (0, _utils.randomBytes)(bytes);
}

},{"@noble/hashes/utils":"eYkBB","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kP4Ha":[function(require,module,exports) {
/*
This file is part of web3.js.

web3.js is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

web3.js is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * An alternative to the node function `isPromise` that exists in `util/types` because it is not available on the browser.
 * @param object - to check if it is a `Promise`
 * @returns `true` if it is an `object` or a `function` that has a `then` function. And returns `false` otherwise.
 */ parcelHelpers.export(exports, "isPromise", ()=>isPromise);
/**
 * Wait for a promise but interrupt it if it did not resolve within a given timeout.
 * If the timeout reached, before the promise code resolve, either throw an error if an error object was provided, or return `undefined`.
 * @param awaitable - The promise or function to wait for.
 * @param timeout - The timeout in milliseconds.
 * @param error - (Optional) The error to throw if the timeout reached.
 */ parcelHelpers.export(exports, "waitWithTimeout", ()=>waitWithTimeout);
/**
 * Repeatedly calls an async function with a given interval until the result of the function is defined (not undefined or null),
 * or until a timeout is reached. It returns promise and intervalId.
 * @param func - The function to call.
 * @param interval - The interval in milliseconds.
 */ parcelHelpers.export(exports, "pollTillDefinedAndReturnIntervalId", ()=>pollTillDefinedAndReturnIntervalId);
/**
 * Repeatedly calls an async function with a given interval until the result of the function is defined (not undefined or null),
 * or until a timeout is reached.
 * pollTillDefinedAndReturnIntervalId() function should be used instead of pollTillDefined if you need IntervalId in result.
 * This function will be deprecated in next major release so use pollTillDefinedAndReturnIntervalId().
 * @param func - The function to call.
 * @param interval - The interval in milliseconds.
 */ parcelHelpers.export(exports, "pollTillDefined", ()=>pollTillDefined);
/**
 * Enforce a timeout on a promise, so that it can be rejected if it takes too long to complete
 * @param timeout - The timeout to enforced in milliseconds.
 * @param error - The error to throw if the timeout is reached.
 * @returns A tuple of the timeout id and the promise that will be rejected if the timeout is reached.
 *
 * @example
 * ```ts
 * const [timerId, promise] = web3.utils.rejectIfTimeout(100, new Error('time out'));
 * ```
 */ parcelHelpers.export(exports, "rejectIfTimeout", ()=>rejectIfTimeout);
/**
 * Sets an interval that repeatedly executes the given cond function with the specified interval between each call.
 * If the condition is met, the interval is cleared and a Promise that rejects with the returned value is returned.
 * @param cond - The function/confition to call.
 * @param interval - The interval in milliseconds.
 * @returns - an array with the interval ID and the Promise.
 */ parcelHelpers.export(exports, "rejectIfConditionAtInterval", ()=>rejectIfConditionAtInterval);
var _web3Validator = require("web3-validator");
var __awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
function isPromise(object) {
    return (typeof object === "object" || typeof object === "function") && // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
    typeof object.then === "function";
}
function waitWithTimeout(awaitable, timeout, error) {
    return __awaiter(this, void 0, void 0, function*() {
        let timeoutId;
        const result = yield Promise.race([
            awaitable instanceof Promise ? awaitable : awaitable(),
            new Promise((resolve, reject)=>{
                timeoutId = setTimeout(()=>error ? reject(error) : resolve(undefined), timeout);
            })
        ]);
        if (timeoutId) clearTimeout(timeoutId);
        if (result instanceof Error) throw result;
        return result;
    });
}
function pollTillDefinedAndReturnIntervalId(func, interval) {
    let intervalId;
    const polledRes = new Promise((resolve, reject)=>{
        intervalId = setInterval(function intervalCallbackFunc() {
            (()=>__awaiter(this, void 0, void 0, function*() {
                    try {
                        const res = yield waitWithTimeout(func, interval);
                        if (!(0, _web3Validator.isNullish)(res)) {
                            clearInterval(intervalId);
                            resolve(res);
                        }
                    } catch (error) {
                        clearInterval(intervalId);
                        reject(error);
                    }
                }))();
            return intervalCallbackFunc;
        }() // this will immediate invoke first call
        , interval);
    });
    return [
        polledRes,
        intervalId
    ];
}
function pollTillDefined(func, interval) {
    return __awaiter(this, void 0, void 0, function*() {
        return pollTillDefinedAndReturnIntervalId(func, interval)[0];
    });
}
function rejectIfTimeout(timeout, error) {
    let timeoutId;
    const rejectOnTimeout = new Promise((_, reject)=>{
        timeoutId = setTimeout(()=>{
            reject(error);
        }, timeout);
    });
    return [
        timeoutId,
        rejectOnTimeout
    ];
}
function rejectIfConditionAtInterval(cond, interval) {
    let intervalId;
    const rejectIfCondition = new Promise((_, reject)=>{
        intervalId = setInterval(()=>{
            (()=>__awaiter(this, void 0, void 0, function*() {
                    const error = yield cond();
                    if (error) {
                        clearInterval(intervalId);
                        reject(error);
                    }
                }))();
        }, interval);
    });
    return [
        intervalId,
        rejectIfCondition
    ];
}

},{"web3-validator":"6HK71","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3FJjW":[function(require,module,exports) {
/*
This file is part of web3.js.

web3.js is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

web3.js is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isResponseRpcError", ()=>isResponseRpcError);
parcelHelpers.export(exports, "isResponseWithResult", ()=>isResponseWithResult);
parcelHelpers.export(exports, "isResponseWithError", ()=>isResponseWithError);
parcelHelpers.export(exports, "isResponseWithNotification", ()=>isResponseWithNotification);
parcelHelpers.export(exports, "isSubscriptionResult", ()=>isSubscriptionResult);
parcelHelpers.export(exports, "validateResponse", ()=>validateResponse);
parcelHelpers.export(exports, "isValidResponse", ()=>isValidResponse);
parcelHelpers.export(exports, "isBatchResponse", ()=>isBatchResponse);
parcelHelpers.export(exports, "setRequestIdStart", ()=>setRequestIdStart);
parcelHelpers.export(exports, "toPayload", ()=>toPayload);
parcelHelpers.export(exports, "toBatchPayload", ()=>toBatchPayload);
parcelHelpers.export(exports, "isBatchRequest", ()=>isBatchRequest);
var _web3Validator = require("web3-validator");
var _web3Errors = require("web3-errors");
var _uuidJs = require("./uuid.js");
const isResponseRpcError = (rpcError)=>{
    const errorCode = rpcError.error.code;
    return (0, _web3Errors.rpcErrorsMap).has(errorCode) || errorCode >= -32099 && errorCode <= -32000;
};
const isResponseWithResult = (response)=>!Array.isArray(response) && !!response && response.jsonrpc === "2.0" && // JSON RPC consider "null" as valid response
    "result" in response && (0, _web3Validator.isNullish)(response.error) && (typeof response.id === "number" || typeof response.id === "string");
const isResponseWithError = (response)=>!Array.isArray(response) && response.jsonrpc === "2.0" && !!response && (0, _web3Validator.isNullish)(response.result) && // JSON RPC consider "null" as valid response
    "error" in response && (typeof response.id === "number" || typeof response.id === "string");
const isResponseWithNotification = (response)=>!Array.isArray(response) && !!response && response.jsonrpc === "2.0" && !(0, _web3Validator.isNullish)(response.params) && !(0, _web3Validator.isNullish)(response.method);
const isSubscriptionResult = (response)=>!Array.isArray(response) && !!response && response.jsonrpc === "2.0" && "id" in response && // JSON RPC consider "null" as valid response
    "result" in response;
const validateResponse = (response)=>isResponseWithResult(response) || isResponseWithError(response);
const isValidResponse = (response)=>Array.isArray(response) ? response.every(validateResponse) : validateResponse(response);
const isBatchResponse = (response)=>Array.isArray(response) && response.length > 0 && isValidResponse(response);
// internal optional variable to increment and use for the jsonrpc `id`
let requestIdSeed;
const setRequestIdStart = (start)=>{
    requestIdSeed = start;
};
const toPayload = (request)=>{
    var _a, _b, _c, _d;
    if (typeof requestIdSeed !== "undefined") requestIdSeed += 1;
    return {
        jsonrpc: (_a = request.jsonrpc) !== null && _a !== void 0 ? _a : "2.0",
        id: (_c = (_b = request.id) !== null && _b !== void 0 ? _b : requestIdSeed) !== null && _c !== void 0 ? _c : (0, _uuidJs.uuidV4)(),
        method: request.method,
        params: (_d = request.params) !== null && _d !== void 0 ? _d : undefined
    };
};
const toBatchPayload = (requests)=>requests.map((request)=>toPayload(request));
const isBatchRequest = (request)=>Array.isArray(request) && request.length > 0;

},{"web3-validator":"6HK71","web3-errors":"jDvsn","./uuid.js":"6YJu7","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6YJu7":[function(require,module,exports) {
/*
This file is part of web3.js.

web3.js is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

web3.js is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "uuidV4", ()=>uuidV4);
var _convertersJs = require("./converters.js");
var _randomJs = require("./random.js");
const uuidV4 = ()=>{
    const bytes = (0, _randomJs.randomBytes)(16);
    // https://github.com/ethers-io/ethers.js/blob/ce8f1e4015c0f27bf178238770b1325136e3351a/packages/json-wallets/src.ts/utils.ts#L54
    // Section: 4.1.3:
    // - time_hi_and_version[12:16] = 0b0100
    /* eslint-disable-next-line */ bytes[6] = bytes[6] & 0x0f | 0x40;
    // Section 4.4
    // - clock_seq_hi_and_reserved[6] = 0b0
    // - clock_seq_hi_and_reserved[7] = 0b1
    /* eslint-disable-next-line */ bytes[8] = bytes[8] & 0x3f | 0x80;
    const hexString = (0, _convertersJs.bytesToHex)(bytes);
    return [
        hexString.substring(2, 10),
        hexString.substring(10, 14),
        hexString.substring(14, 18),
        hexString.substring(18, 22),
        hexString.substring(22, 34)
    ].join("-");
};

},{"./converters.js":"cAcnb","./random.js":"hHFaB","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6iZz7":[function(require,module,exports) {
/*
This file is part of web3.js.

web3.js is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

web3.js is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * The class is a simple implementation of a deferred promise with optional timeout functionality,
 * which can be useful when dealing with asynchronous tasks.
 *
 */ parcelHelpers.export(exports, "Web3DeferredPromise", ()=>Web3DeferredPromise);
var _web3Errors = require("web3-errors");
var __awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var _a;
class Web3DeferredPromise {
    /**
     *
     * @param timeout - (optional) The timeout in milliseconds.
     * @param eagerStart - (optional) If true, the timer starts as soon as the promise is created.
     * @param timeoutMessage - (optional) The message to include in the timeout erro that is thrown when the promise times out.
     */ constructor({ timeout, eagerStart, timeoutMessage } = {
        timeout: 0,
        eagerStart: false,
        timeoutMessage: "DeferredPromise timed out"
    }){
        // public tag to treat object as promise by different libs
        // eslint-disable-next-line @typescript-eslint/prefer-as-const
        this[_a] = "Promise";
        this._state = "pending";
        this._promise = new Promise((resolve, reject)=>{
            this._resolve = resolve;
            this._reject = reject;
        });
        this._timeoutMessage = timeoutMessage;
        this._timeoutInterval = timeout;
        if (eagerStart) this.startTimer();
    }
    /**
     * Returns the current state of the promise.
     * @returns 'pending' | 'fulfilled' | 'rejected'
     */ get state() {
        return this._state;
    }
    /**
     *
     * @param onfulfilled - (optional) The callback to execute when the promise is fulfilled.
     * @param onrejected  - (optional) The callback to execute when the promise is rejected.
     * @returns
     */ then(onfulfilled, onrejected) {
        return __awaiter(this, void 0, void 0, function*() {
            return this._promise.then(onfulfilled, onrejected);
        });
    }
    /**
     *
     * @param onrejected - (optional) The callback to execute when the promise is rejected.
     * @returns
     */ catch(// eslint-disable-next-line @typescript-eslint/no-explicit-any
    onrejected) {
        return __awaiter(this, void 0, void 0, function*() {
            return this._promise.catch(onrejected);
        });
    }
    /**
     *
     * @param onfinally - (optional) The callback to execute when the promise is settled (fulfilled or rejected).
     * @returns
     */ finally(onfinally) {
        return __awaiter(this, void 0, void 0, function*() {
            return this._promise.finally(onfinally);
        });
    }
    /**
     * Resolves the current promise.
     * @param value - The value to resolve the promise with.
     */ resolve(value) {
        this._resolve(value);
        this._state = "fulfilled";
        this._clearTimeout();
    }
    /**
     * Rejects the current promise.
     * @param reason - The reason to reject the promise with.
     */ reject(reason) {
        this._reject(reason);
        this._state = "rejected";
        this._clearTimeout();
    }
    /**
     * Starts the timeout timer for the promise.
     */ startTimer() {
        if (this._timeoutInterval && this._timeoutInterval > 0) this._timeoutId = setTimeout(this._checkTimeout.bind(this), this._timeoutInterval);
    }
    _checkTimeout() {
        if (this._state === "pending" && this._timeoutId) this.reject(new (0, _web3Errors.OperationTimeoutError)(this._timeoutMessage));
    }
    _clearTimeout() {
        if (this._timeoutId) clearTimeout(this._timeoutId);
    }
}
_a = Symbol.toStringTag;

},{"web3-errors":"jDvsn","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lvzz5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ChunkResponseParser", ()=>ChunkResponseParser);
var _web3Errors = require("web3-errors");
class ChunkResponseParser {
    constructor(eventEmitter, autoReconnect){
        this.eventEmitter = eventEmitter;
        this.autoReconnect = autoReconnect;
    }
    clearQueues() {
        if (typeof this._clearQueues === "function") this._clearQueues();
    }
    onError(clearQueues) {
        this._clearQueues = clearQueues;
    }
    parseResponse(data) {
        const returnValues = [];
        // DE-CHUNKER
        const dechunkedData = data.replace(/\}[\n\r]?\{/g, "}|--|{") // }{
        .replace(/\}\][\n\r]?\[\{/g, "}]|--|[{") // }][{
        .replace(/\}[\n\r]?\[\{/g, "}|--|[{") // }[{
        .replace(/\}\][\n\r]?\{/g, "}]|--|{") // }]{
        .split("|--|");
        dechunkedData.forEach((_chunkData)=>{
            // prepend the last chunk
            let chunkData = _chunkData;
            if (this.lastChunk) chunkData = this.lastChunk + chunkData;
            let result;
            try {
                result = JSON.parse(chunkData);
            } catch (e) {
                this.lastChunk = chunkData;
                // start timeout to cancel all requests
                if (this.lastChunkTimeout) clearTimeout(this.lastChunkTimeout);
                this.lastChunkTimeout = setTimeout(()=>{
                    if (this.autoReconnect) return;
                    this.clearQueues();
                    this.eventEmitter.emit("error", new (0, _web3Errors.InvalidResponseError)({
                        id: 1,
                        jsonrpc: "2.0",
                        error: {
                            code: 2,
                            message: "Chunk timeout"
                        }
                    }));
                }, 15000);
                return;
            }
            // cancel timeout and set chunk to null
            clearTimeout(this.lastChunkTimeout);
            this.lastChunk = undefined;
            if (result) returnValues.push(result);
        });
        return returnValues;
    }
}

},{"web3-errors":"jDvsn","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dMHzk":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * This is an abstract class, which extends {@link Web3BaseProvider} class. This class is used to implement a provider that adheres to the EIP-1193 standard for Ethereum providers.
 */ parcelHelpers.export(exports, "Eip1193Provider", ()=>Eip1193Provider);
/*
This file is part of web3.js.

web3.js is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

web3.js is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/ var _web3Types = require("web3-types");
var _events = require("events");
var _web3Errors = require("web3-errors");
var _jsonRpcJs = require("./json_rpc.js");
var __awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
class Eip1193Provider extends (0, _web3Types.Web3BaseProvider) {
    constructor(){
        super(...arguments);
        this._eventEmitter = new (0, _events.EventEmitter)();
        this._chainId = "";
        this._accounts = [];
    }
    _getChainId() {
        var _a;
        return __awaiter(this, void 0, void 0, function*() {
            const data = yield this.request((0, _jsonRpcJs.toPayload)({
                method: "eth_chainId",
                params: []
            }));
            return (_a = data === null || data === void 0 ? void 0 : data.result) !== null && _a !== void 0 ? _a : "";
        });
    }
    _getAccounts() {
        var _a;
        return __awaiter(this, void 0, void 0, function*() {
            const data = yield this.request((0, _jsonRpcJs.toPayload)({
                method: "eth_accounts",
                params: []
            }));
            return (_a = data === null || data === void 0 ? void 0 : data.result) !== null && _a !== void 0 ? _a : [];
        });
    }
    _onConnect() {
        Promise.all([
            this._getChainId().then((chainId)=>{
                if (chainId !== this._chainId) {
                    this._chainId = chainId;
                    this._eventEmitter.emit("chainChanged", this._chainId);
                }
            }).catch((err)=>{
                // todo: add error handler
                console.error(err);
            }),
            this._getAccounts().then((accounts)=>{
                if (!(this._accounts.length === accounts.length && accounts.every((v)=>accounts.includes(v)))) {
                    this._accounts = accounts;
                    this._onAccountsChanged();
                }
            }).catch((err)=>{
                // todo: add error handler
                // eslint-disable-next-line no-console
                console.error(err);
            })
        ]).then(()=>this._eventEmitter.emit("connect", {
                chainId: this._chainId
            })).catch((err)=>{
            // todo: add error handler
            // eslint-disable-next-line no-console
            console.error(err);
        });
    }
    // todo this must be ProvideRpcError with a message too
    _onDisconnect(code, data) {
        this._eventEmitter.emit("disconnect", new (0, _web3Errors.EIP1193ProviderRpcError)(code, data));
    }
    _onAccountsChanged() {
        // get chainId and safe to local
        this._eventEmitter.emit("accountsChanged", this._accounts);
    }
}

},{"web3-types":"g7Ztk","events":"1VQLm","web3-errors":"jDvsn","./json_rpc.js":"3FJjW","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8C0xR":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "SocketProvider", ()=>SocketProvider);
var _web3Errors = require("web3-errors");
var _web3Eip1193ProviderJs = require("./web3_eip1193_provider.js");
var _chunkResponseParserJs = require("./chunk_response_parser.js");
var _validationJs = require("./validation.js");
var _web3DeferredPromiseJs = require("./web3_deferred_promise.js");
var _jsonRpcJs = require("./json_rpc.js");
var __awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
const DEFAULT_RECONNECTION_OPTIONS = {
    autoReconnect: true,
    delay: 5000,
    maxAttempts: 5
};
const NORMAL_CLOSE_CODE = 1000; // https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/close
class SocketProvider extends (0, _web3Eip1193ProviderJs.Eip1193Provider) {
    /**
     * This is an abstract class for implementing a socket provider (e.g. WebSocket, IPC). It extends the EIP-1193 provider {@link EIP1193Provider}.
     * @param socketPath - The path to the socket (e.g. /ipc/path or ws://localhost:8546)
     * @param socketOptions - The options for the socket connection. Its type is supposed to be specified in the inherited classes.
     * @param reconnectOptions - The options for the socket reconnection {@link ReconnectOptions}
     */ constructor(socketPath, socketOptions, reconnectOptions){
        super();
        this._connectionStatus = "connecting";
        // Message handlers. Due to bounding of `this` and removing the listeners we have to keep it's reference.
        this._onMessageHandler = this._onMessage.bind(this);
        this._onOpenHandler = this._onConnect.bind(this);
        this._onCloseHandler = this._onCloseEvent.bind(this);
        this._onErrorHandler = this._onError.bind(this);
        if (!this._validateProviderPath(socketPath)) throw new (0, _web3Errors.InvalidClientError)(socketPath);
        this._socketPath = socketPath;
        this._socketOptions = socketOptions;
        this._reconnectOptions = Object.assign(Object.assign({}, DEFAULT_RECONNECTION_OPTIONS), reconnectOptions !== null && reconnectOptions !== void 0 ? reconnectOptions : {});
        this._pendingRequestsQueue = new Map();
        this._sentRequestsQueue = new Map();
        this._init();
        this.connect();
        this.chunkResponseParser = new (0, _chunkResponseParserJs.ChunkResponseParser)(this._eventEmitter, this._reconnectOptions.autoReconnect);
        this.chunkResponseParser.onError(()=>{
            this._clearQueues();
        });
        this.isReconnecting = false;
    }
    get SocketConnection() {
        return this._socketConnection;
    }
    _init() {
        this._reconnectAttempts = 0;
    }
    /**
     * Try to establish a connection to the socket
     */ connect() {
        try {
            this._openSocketConnection();
            this._connectionStatus = "connecting";
            this._addSocketListeners();
        } catch (e) {
            if (!this.isReconnecting) {
                this._connectionStatus = "disconnected";
                if (e && e.message) throw new (0, _web3Errors.ConnectionError)(`Error while connecting to ${this._socketPath}. Reason: ${e.message}`);
                else throw new (0, _web3Errors.InvalidClientError)(this._socketPath);
            } else setImmediate(()=>{
                this._reconnect();
            });
        }
    }
    // eslint-disable-next-line class-methods-use-this
    _validateProviderPath(path) {
        return !!path;
    }
    /**
     *
     * @returns the pendingRequestQueue size
     */ // eslint-disable-next-line class-methods-use-this
    getPendingRequestQueueSize() {
        return this._pendingRequestsQueue.size;
    }
    /**
     *
     * @returns the sendPendingRequests size
     */ // eslint-disable-next-line class-methods-use-this
    getSentRequestsQueueSize() {
        return this._sentRequestsQueue.size;
    }
    /**
     *
     * @returns `true` if the socket supports subscriptions
     */ // eslint-disable-next-line class-methods-use-this
    supportsSubscriptions() {
        return true;
    }
    on(type, listener) {
        this._eventEmitter.on(type, listener);
    }
    once(type, listener) {
        this._eventEmitter.once(type, listener);
    }
    removeListener(type, listener) {
        this._eventEmitter.removeListener(type, listener);
    }
    _onDisconnect(code, data) {
        this._connectionStatus = "disconnected";
        super._onDisconnect(code, data);
    }
    /**
     * Disconnects the socket
     * @param code - The code to be sent to the server
     * @param data - The data to be sent to the server
     */ disconnect(code, data) {
        const disconnectCode = code !== null && code !== void 0 ? code : NORMAL_CLOSE_CODE;
        this._removeSocketListeners();
        if (this.getStatus() !== "disconnected") this._closeSocketConnection(disconnectCode, data);
        this._onDisconnect(disconnectCode, data);
    }
    /**
     * Safely disconnects the socket, async and waits for request size to be 0 before disconnecting
     * @param forceDisconnect - If true, will clear queue after 5 attempts of waiting for both pending and sent queue to be 0
     * @param ms - Determines the ms of setInterval
     * @param code - The code to be sent to the server
     * @param data - The data to be sent to the server
     */ safeDisconnect(code, data, forceDisconnect = false, ms = 1000) {
        return __awaiter(this, void 0, void 0, function*() {
            let retryAttempt = 0;
            const checkQueue = ()=>__awaiter(this, void 0, void 0, function*() {
                    return new Promise((resolve)=>{
                        const interval = setInterval(()=>{
                            if (forceDisconnect && retryAttempt === 5) this.clearQueues();
                            if (this.getPendingRequestQueueSize() === 0 && this.getSentRequestsQueueSize() === 0) {
                                clearInterval(interval);
                                resolve(true);
                            }
                            retryAttempt += 1;
                        }, ms);
                    });
                });
            yield checkQueue();
            this.disconnect(code, data);
        });
    }
    /**
     * Removes all listeners for the specified event type.
     * @param type - The event type to remove the listeners for
     */ removeAllListeners(type) {
        this._eventEmitter.removeAllListeners(type);
    }
    _onError(event) {
        // do not emit error while trying to reconnect
        if (this.isReconnecting) this._reconnect();
        else this._eventEmitter.emit("error", event);
    }
    /**
     * Resets the socket, removing all listeners and pending requests
     */ reset() {
        this._sentRequestsQueue.clear();
        this._pendingRequestsQueue.clear();
        this._init();
        this._removeSocketListeners();
        this._addSocketListeners();
    }
    _reconnect() {
        if (this.isReconnecting) return;
        this.isReconnecting = true;
        if (this._sentRequestsQueue.size > 0) this._sentRequestsQueue.forEach((request, key)=>{
            request.deferredPromise.reject(new (0, _web3Errors.PendingRequestsOnReconnectingError)());
            this._sentRequestsQueue.delete(key);
        });
        if (this._reconnectAttempts < this._reconnectOptions.maxAttempts) {
            this._reconnectAttempts += 1;
            setTimeout(()=>{
                this._removeSocketListeners();
                this.connect();
                this.isReconnecting = false;
            }, this._reconnectOptions.delay);
        } else {
            this.isReconnecting = false;
            this._clearQueues();
            this._removeSocketListeners();
            this._eventEmitter.emit("error", new (0, _web3Errors.MaxAttemptsReachedOnReconnectingError)(this._reconnectOptions.maxAttempts));
        }
    }
    /**
     *  Creates a request object to be sent to the server
     */ request(request) {
        return __awaiter(this, void 0, void 0, function*() {
            if ((0, _validationJs.isNullish)(this._socketConnection)) throw new Error("Connection is undefined");
            // if socket disconnected - open connection
            if (this.getStatus() === "disconnected") this.connect();
            const requestId = _jsonRpcJs.isBatchRequest(request) ? request[0].id : request.id;
            if (!requestId) throw new (0, _web3Errors.Web3WSProviderError)("Request Id not defined");
            if (this._sentRequestsQueue.has(requestId)) throw new (0, _web3Errors.RequestAlreadySentError)(requestId);
            const deferredPromise = new (0, _web3DeferredPromiseJs.Web3DeferredPromise)();
            deferredPromise.catch((error)=>{
                this._eventEmitter.emit("error", error);
            });
            const reqItem = {
                payload: request,
                deferredPromise
            };
            if (this.getStatus() === "connecting") {
                this._pendingRequestsQueue.set(requestId, reqItem);
                return reqItem.deferredPromise;
            }
            this._sentRequestsQueue.set(requestId, reqItem);
            try {
                this._sendToSocket(reqItem.payload);
            } catch (error) {
                this._sentRequestsQueue.delete(requestId);
                this._eventEmitter.emit("error", error);
            }
            return deferredPromise;
        });
    }
    _onConnect() {
        this._connectionStatus = "connected";
        this._reconnectAttempts = 0;
        super._onConnect();
        this._sendPendingRequests();
    }
    _sendPendingRequests() {
        for (const [id, value] of this._pendingRequestsQueue.entries()){
            this._sendToSocket(value.payload);
            this._pendingRequestsQueue.delete(id);
            this._sentRequestsQueue.set(id, value);
        }
    }
    _onMessage(event) {
        const responses = this._parseResponses(event);
        if ((0, _validationJs.isNullish)(responses) || responses.length === 0) return;
        for (const response of responses){
            if (_jsonRpcJs.isResponseWithNotification(response) && response.method.endsWith("_subscription")) {
                this._eventEmitter.emit("message", response);
                return;
            }
            const requestId = _jsonRpcJs.isBatchResponse(response) ? response[0].id : response.id;
            const requestItem = this._sentRequestsQueue.get(requestId);
            if (!requestItem) return;
            if (_jsonRpcJs.isBatchResponse(response) || _jsonRpcJs.isResponseWithResult(response) || _jsonRpcJs.isResponseWithError(response)) {
                this._eventEmitter.emit("message", response);
                requestItem.deferredPromise.resolve(response);
            }
            this._sentRequestsQueue.delete(requestId);
        }
    }
    clearQueues(event) {
        this._clearQueues(event);
    }
    _clearQueues(event) {
        if (this._pendingRequestsQueue.size > 0) this._pendingRequestsQueue.forEach((request, key)=>{
            request.deferredPromise.reject(new (0, _web3Errors.ConnectionNotOpenError)(event));
            this._pendingRequestsQueue.delete(key);
        });
        if (this._sentRequestsQueue.size > 0) this._sentRequestsQueue.forEach((request, key)=>{
            request.deferredPromise.reject(new (0, _web3Errors.ConnectionNotOpenError)(event));
            this._sentRequestsQueue.delete(key);
        });
        this._removeSocketListeners();
    }
}

},{"web3-errors":"jDvsn","./web3_eip1193_provider.js":"dMHzk","./chunk_response_parser.js":"lvzz5","./validation.js":"fIuWC","./web3_deferred_promise.js":"6iZz7","./json_rpc.js":"3FJjW","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4LX4F":[function(require,module,exports) {
/*
This file is part of web3.js.

web3.js is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

web3.js is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Web3EventEmitter", ()=>Web3EventEmitter);
var _web3Utils = require("web3-utils");
class Web3EventEmitter {
    constructor(){
        this._emitter = new (0, _web3Utils.EventEmitter)();
    }
    on(eventName, fn) {
        // eslint-disable-next-line @typescript-eslint/no-misused-promises
        this._emitter.on(eventName, fn);
    }
    once(eventName, fn) {
        // eslint-disable-next-line @typescript-eslint/no-misused-promises
        this._emitter.once(eventName, fn);
    }
    off(eventName, fn) {
        // eslint-disable-next-line @typescript-eslint/no-misused-promises
        this._emitter.off(eventName, fn);
    }
    emit(eventName, params) {
        this._emitter.emit(eventName, params);
    }
    listenerCount(eventName) {
        return this._emitter.listenerCount(eventName);
    }
    listeners(eventName) {
        return this._emitter.listeners(eventName);
    }
    eventNames() {
        return this._emitter.eventNames();
    }
    removeAllListeners() {
        return this._emitter.removeAllListeners();
    }
    setMaxListenerWarningThreshold(maxListenersWarningThreshold) {
        this._emitter.setMaxListeners(maxListenersWarningThreshold);
    }
    getMaxListeners() {
        return this._emitter.getMaxListeners();
    }
}

},{"web3-utils":"8WsWI","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"85GmO":[function(require,module,exports) {
/*
This file is part of web3.js.

web3.js is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

web3.js is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Web3RequestManagerEvent", ()=>Web3RequestManagerEvent);
parcelHelpers.export(exports, "Web3RequestManager", ()=>Web3RequestManager);
var _web3Errors = require("web3-errors");
var _web3ProvidersHttp = require("web3-providers-http");
var _web3ProvidersHttpDefault = parcelHelpers.interopDefault(_web3ProvidersHttp);
var _web3ProvidersWs = require("web3-providers-ws");
var _web3ProvidersWsDefault = parcelHelpers.interopDefault(_web3ProvidersWs);
var _web3Utils = require("web3-utils");
var _utilsJs = require("./utils.js");
var _web3EventEmitterJs = require("./web3_event_emitter.js");
var __awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var Web3RequestManagerEvent;
(function(Web3RequestManagerEvent) {
    Web3RequestManagerEvent["PROVIDER_CHANGED"] = "PROVIDER_CHANGED";
    Web3RequestManagerEvent["BEFORE_PROVIDER_CHANGE"] = "BEFORE_PROVIDER_CHANGE";
})(Web3RequestManagerEvent || (Web3RequestManagerEvent = {}));
const availableProviders = {
    HttpProvider: (0, _web3ProvidersHttpDefault.default),
    WebsocketProvider: (0, _web3ProvidersWsDefault.default)
};
class Web3RequestManager extends (0, _web3EventEmitterJs.Web3EventEmitter) {
    constructor(provider, useRpcCallSpecification){
        super();
        if (!(0, _web3Utils.isNullish)(provider)) this.setProvider(provider);
        this.useRpcCallSpecification = useRpcCallSpecification;
    }
    /**
     * Will return all available providers
     */ static get providers() {
        return availableProviders;
    }
    /**
     * Will return the current provider.
     *
     * @returns Returns the current provider
     */ get provider() {
        return this._provider;
    }
    /**
     * Will return all available providers
     */ // eslint-disable-next-line class-methods-use-this
    get providers() {
        return availableProviders;
    }
    /**
     * Use to set provider. Provider can be a provider instance or a string.
     *
     * @param provider - The provider to set
     */ setProvider(provider) {
        let newProvider;
        // autodetect provider
        if (provider && typeof provider === "string" && this.providers) {
            // HTTP
            if (/^http(s)?:\/\//i.test(provider)) newProvider = new this.providers.HttpProvider(provider);
            else if (/^ws(s)?:\/\//i.test(provider)) newProvider = new this.providers.WebsocketProvider(provider);
            else throw new (0, _web3Errors.ProviderError)(`Can't autodetect provider for "${provider}"`);
        } else if ((0, _web3Utils.isNullish)(provider)) // In case want to unset the provider
        newProvider = undefined;
        else newProvider = provider;
        this.emit(Web3RequestManagerEvent.BEFORE_PROVIDER_CHANGE, this._provider);
        this._provider = newProvider;
        this.emit(Web3RequestManagerEvent.PROVIDER_CHANGED, this._provider);
        return true;
    }
    /**
     *
     * Will execute a request
     *
     * @param request - {@link Web3APIRequest} The request to send
     *
     * @returns The response of the request {@link ResponseType}. If there is error
     * in the response, will throw an error
     */ send(request) {
        return __awaiter(this, void 0, void 0, function*() {
            const response = yield this._sendRequest(request);
            if ((0, _web3Utils.jsonRpc).isResponseWithResult(response)) return response.result;
            throw new (0, _web3Errors.ResponseError)(response);
        });
    }
    /**
     * Same as send, but, will execute a batch of requests
     *
     * @param request {@link JsonRpcBatchRequest} The batch request to send
     */ sendBatch(request) {
        return __awaiter(this, void 0, void 0, function*() {
            const response = yield this._sendRequest(request);
            return response;
        });
    }
    _sendRequest(request) {
        return __awaiter(this, void 0, void 0, function*() {
            const { provider } = this;
            if ((0, _web3Utils.isNullish)(provider)) throw new (0, _web3Errors.ProviderError)("Provider not available. Use `.setProvider` or `.provider=` to initialize the provider.");
            const payload = (0, _web3Utils.jsonRpc).isBatchRequest(request) ? (0, _web3Utils.jsonRpc).toBatchPayload(request) : (0, _web3Utils.jsonRpc).toPayload(request);
            if ((0, _utilsJs.isWeb3Provider)(provider)) {
                let response;
                try {
                    response = yield provider.request(payload);
                } catch (error) {
                    // Check if the provider throw an error instead of reject with error
                    response = error;
                }
                return this._processJsonRpcResponse(payload, response, {
                    legacy: false,
                    error: false
                });
            }
            if ((0, _utilsJs.isEIP1193Provider)(provider)) return provider.request(payload).then((res)=>this._processJsonRpcResponse(payload, res, {
                    legacy: true,
                    error: false
                })).catch((error)=>this._processJsonRpcResponse(payload, error, {
                    legacy: true,
                    error: true
                }));
            // TODO: This could be deprecated and removed.
            if ((0, _utilsJs.isLegacyRequestProvider)(provider)) return new Promise((resolve, reject)=>{
                const rejectWithError = (err)=>reject(this._processJsonRpcResponse(payload, err, {
                        legacy: true,
                        error: true
                    }));
                const resolveWithResponse = (response)=>resolve(this._processJsonRpcResponse(payload, response, {
                        legacy: true,
                        error: false
                    }));
                const result = provider.request(payload, // a callback that is expected to be called after getting the response:
                (err, response)=>{
                    if (err) return rejectWithError(err);
                    return resolveWithResponse(response);
                });
                // Some providers, that follow a previous drafted version of EIP1193, has a `request` function
                //	that is not defined as `async`, but it returns a promise.
                // Such providers would not be picked with if(isEIP1193Provider(provider)) above
                //	because the `request` function was not defined with `async` and so the function definition is not `AsyncFunction`.
                // Like this provider: https://github.dev/NomicFoundation/hardhat/blob/62bea2600785595ba36f2105564076cf5cdf0fd8/packages/hardhat-core/src/internal/core/providers/backwards-compatibility.ts#L19
                // So check if the returned result is a Promise, and resolve with it accordingly.
                // Note: in this case we expect the callback provided above to never be called.
                if ((0, _web3Utils.isPromise)(result)) {
                    const responsePromise = result;
                    responsePromise.then(resolveWithResponse).catch(rejectWithError);
                }
            });
            // TODO: This could be deprecated and removed.
            if ((0, _utilsJs.isLegacySendProvider)(provider)) return new Promise((resolve, reject)=>{
                provider.send(payload, (err, response)=>{
                    if (err) return reject(this._processJsonRpcResponse(payload, err, {
                        legacy: true,
                        error: true
                    }));
                    if ((0, _web3Utils.isNullish)(response)) throw new (0, _web3Errors.ResponseError)("", 'Got a "nullish" response from provider.');
                    return resolve(this._processJsonRpcResponse(payload, response, {
                        legacy: true,
                        error: false
                    }));
                });
            });
            // TODO: This could be deprecated and removed.
            if ((0, _utilsJs.isLegacySendAsyncProvider)(provider)) return provider.sendAsync(payload).then((response)=>this._processJsonRpcResponse(payload, response, {
                    legacy: true,
                    error: false
                })).catch((error)=>this._processJsonRpcResponse(payload, error, {
                    legacy: true,
                    error: true
                }));
            throw new (0, _web3Errors.ProviderError)("Provider does not have a request or send method to use.");
        });
    }
    // eslint-disable-next-line class-methods-use-this
    _processJsonRpcResponse(payload, response, { legacy, error }) {
        if ((0, _web3Utils.isNullish)(response)) return this._buildResponse(payload, // Some providers uses "null" as valid empty response
        // eslint-disable-next-line no-null/no-null
        null, error);
        // This is the majority of the cases so check these first
        // A valid JSON-RPC response with error object
        if ((0, _web3Utils.jsonRpc).isResponseWithError(response)) {
            // check if its an rpc error
            if (this.useRpcCallSpecification && (0, _web3Utils.isResponseRpcError)(response)) {
                const rpcErrorResponse = response;
                // check if rpc error flag is on and response error code match an EIP-1474 or a standard rpc error code
                if ((0, _web3Errors.rpcErrorsMap).get(rpcErrorResponse.error.code)) {
                    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                    const Err = (0, _web3Errors.rpcErrorsMap).get(rpcErrorResponse.error.code).error;
                    throw new Err(rpcErrorResponse);
                } else throw new (0, _web3Errors.RpcError)(rpcErrorResponse);
            } else if (!Web3RequestManager._isReverted(response)) throw new (0, _web3Errors.InvalidResponseError)(response, payload);
        }
        // This is the majority of the cases so check these first
        // A valid JSON-RPC response with result object
        if ((0, _web3Utils.jsonRpc).isResponseWithResult(response)) return response;
        if (response instanceof Error) {
            Web3RequestManager._isReverted(response);
            throw response;
        }
        if (!legacy && (0, _web3Utils.jsonRpc).isBatchRequest(payload) && (0, _web3Utils.jsonRpc).isBatchResponse(response)) return response;
        if (legacy && !error && (0, _web3Utils.jsonRpc).isBatchRequest(payload)) return response;
        if (legacy && error && (0, _web3Utils.jsonRpc).isBatchRequest(payload)) // In case of error batch response we don't want to throw Invalid response
        throw response;
        if (legacy && !(0, _web3Utils.jsonRpc).isResponseWithError(response) && !(0, _web3Utils.jsonRpc).isResponseWithResult(response)) return this._buildResponse(payload, response, error);
        if ((0, _web3Utils.jsonRpc).isBatchRequest(payload) && !Array.isArray(response)) throw new (0, _web3Errors.ResponseError)(response, "Got normal response for a batch request.");
        if (!(0, _web3Utils.jsonRpc).isBatchRequest(payload) && Array.isArray(response)) throw new (0, _web3Errors.ResponseError)(response, "Got batch response for a normal request.");
        if (((0, _web3Utils.jsonRpc).isResponseWithError(response) || (0, _web3Utils.jsonRpc).isResponseWithResult(response)) && !(0, _web3Utils.jsonRpc).isBatchRequest(payload)) {
            if (response.id && payload.id !== response.id) throw new (0, _web3Errors.InvalidResponseError)(response);
        }
        throw new (0, _web3Errors.ResponseError)(response, "Invalid response");
    }
    static _isReverted(response) {
        let error;
        if ((0, _web3Utils.jsonRpc).isResponseWithError(response)) error = response.error;
        else if (response instanceof Error) error = response;
        // This message means that there was an error while executing the code of the smart contract
        // However, more processing will happen at a higher level to decode the error data,
        //	according to the Error ABI, if it was available as of EIP-838.
        if (error === null || error === void 0 ? void 0 : error.message.includes("revert")) throw new (0, _web3Errors.ContractExecutionError)(error);
        return false;
    }
    // Need to use same types as _processJsonRpcResponse so have to declare as instance method
    // eslint-disable-next-line class-methods-use-this
    _buildResponse(payload, response, error) {
        const res = {
            jsonrpc: "2.0",
            // eslint-disable-next-line no-nested-ternary
            id: (0, _web3Utils.jsonRpc).isBatchRequest(payload) ? payload[0].id : "id" in payload ? payload.id : // eslint-disable-next-line no-null/no-null
            null
        };
        if (error) return Object.assign(Object.assign({}, res), {
            error: response
        });
        return Object.assign(Object.assign({}, res), {
            result: response
        });
    }
}

},{"web3-errors":"jDvsn","web3-providers-http":"a3cbP","web3-providers-ws":"8zbJW","web3-utils":"8WsWI","./utils.js":"2DPv6","./web3_event_emitter.js":"4LX4F","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"a3cbP":[function(require,module,exports) {
/*
This file is part of web3.js.

web3.js is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

web3.js is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "HttpProvider", ()=>HttpProvider);
var _crossFetch = require("cross-fetch");
var _crossFetchDefault = parcelHelpers.interopDefault(_crossFetch);
var _web3Types = require("web3-types");
var _web3Errors = require("web3-errors");
var __awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
class HttpProvider extends (0, _web3Types.Web3BaseProvider) {
    constructor(clientUrl, httpProviderOptions){
        super();
        if (!HttpProvider.validateClientUrl(clientUrl)) throw new (0, _web3Errors.InvalidClientError)(clientUrl);
        this.clientUrl = clientUrl;
        this.httpProviderOptions = httpProviderOptions;
    }
    static validateClientUrl(clientUrl) {
        return typeof clientUrl === "string" ? /^http(s)?:\/\//i.test(clientUrl) : false;
    }
    /* eslint-disable class-methods-use-this */ getStatus() {
        throw new (0, _web3Errors.MethodNotImplementedError)();
    }
    /* eslint-disable class-methods-use-this */ supportsSubscriptions() {
        return false;
    }
    request(payload, requestOptions) {
        var _a;
        return __awaiter(this, void 0, void 0, function*() {
            const providerOptionsCombined = Object.assign(Object.assign({}, (_a = this.httpProviderOptions) === null || _a === void 0 ? void 0 : _a.providerOptions), requestOptions);
            const response = yield (0, _crossFetchDefault.default)(this.clientUrl, Object.assign(Object.assign({}, providerOptionsCombined), {
                method: "POST",
                headers: Object.assign(Object.assign({}, providerOptionsCombined.headers), {
                    "Content-Type": "application/json"
                }),
                body: JSON.stringify(payload)
            }));
            // eslint-disable-next-line @typescript-eslint/no-unsafe-argument
            if (!response.ok) throw new (0, _web3Errors.ResponseError)((yield response.json()));
            return yield response.json();
        });
    }
    /* eslint-disable class-methods-use-this */ on() {
        throw new (0, _web3Errors.MethodNotImplementedError)();
    }
    /* eslint-disable class-methods-use-this */ removeListener() {
        throw new (0, _web3Errors.MethodNotImplementedError)();
    }
    /* eslint-disable class-methods-use-this */ once() {
        throw new (0, _web3Errors.MethodNotImplementedError)();
    }
    /* eslint-disable class-methods-use-this */ removeAllListeners() {
        throw new (0, _web3Errors.MethodNotImplementedError)();
    }
    /* eslint-disable class-methods-use-this */ connect() {
        throw new (0, _web3Errors.MethodNotImplementedError)();
    }
    /* eslint-disable class-methods-use-this */ disconnect() {
        throw new (0, _web3Errors.MethodNotImplementedError)();
    }
    /* eslint-disable class-methods-use-this */ reset() {
        throw new (0, _web3Errors.MethodNotImplementedError)();
    }
    /* eslint-disable class-methods-use-this */ reconnect() {
        throw new (0, _web3Errors.MethodNotImplementedError)();
    }
}
exports.default = HttpProvider;

},{"cross-fetch":"j4ah4","web3-types":"g7Ztk","web3-errors":"jDvsn","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"j4ah4":[function(require,module,exports) {
// Save global object in a variable
var global = arguments[3];
var __global__ = typeof globalThis !== "undefined" && globalThis || typeof self !== "undefined" && self || typeof global !== "undefined" && global;
// Create an object that extends from __global__ without the fetch function
var __globalThis__ = function() {
    function F() {
        this.fetch = false;
        this.DOMException = __global__.DOMException;
    }
    F.prototype = __global__; // Needed for feature detection on whatwg-fetch's code
    return new F();
}();
// Wraps whatwg-fetch with a function scope to hijack the global object
// "globalThis" that's going to be patched
(function(globalThis1) {
    var irrelevant = function(exports1) {
        var global = typeof globalThis1 !== "undefined" && globalThis1 || typeof self !== "undefined" && self || typeof global !== "undefined" && global;
        var support = {
            searchParams: "URLSearchParams" in global,
            iterable: "Symbol" in global && "iterator" in Symbol,
            blob: "FileReader" in global && "Blob" in global && function() {
                try {
                    new Blob();
                    return true;
                } catch (e) {
                    return false;
                }
            }(),
            formData: "FormData" in global,
            arrayBuffer: "ArrayBuffer" in global
        };
        function isDataView(obj) {
            return obj && DataView.prototype.isPrototypeOf(obj);
        }
        if (support.arrayBuffer) {
            var viewClasses = [
                "[object Int8Array]",
                "[object Uint8Array]",
                "[object Uint8ClampedArray]",
                "[object Int16Array]",
                "[object Uint16Array]",
                "[object Int32Array]",
                "[object Uint32Array]",
                "[object Float32Array]",
                "[object Float64Array]"
            ];
            var isArrayBufferView = ArrayBuffer.isView || function(obj) {
                return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1;
            };
        }
        function normalizeName(name) {
            if (typeof name !== "string") name = String(name);
            if (/[^a-z0-9\-#$%&'*+.^_`|~!]/i.test(name) || name === "") throw new TypeError('Invalid character in header field name: "' + name + '"');
            return name.toLowerCase();
        }
        function normalizeValue(value) {
            if (typeof value !== "string") value = String(value);
            return value;
        }
        // Build a destructive iterator for the value list
        function iteratorFor(items) {
            var iterator = {
                next: function() {
                    var value = items.shift();
                    return {
                        done: value === undefined,
                        value: value
                    };
                }
            };
            if (support.iterable) iterator[Symbol.iterator] = function() {
                return iterator;
            };
            return iterator;
        }
        function Headers(headers) {
            this.map = {};
            if (headers instanceof Headers) headers.forEach(function(value, name) {
                this.append(name, value);
            }, this);
            else if (Array.isArray(headers)) headers.forEach(function(header) {
                this.append(header[0], header[1]);
            }, this);
            else if (headers) Object.getOwnPropertyNames(headers).forEach(function(name) {
                this.append(name, headers[name]);
            }, this);
        }
        Headers.prototype.append = function(name, value) {
            name = normalizeName(name);
            value = normalizeValue(value);
            var oldValue = this.map[name];
            this.map[name] = oldValue ? oldValue + ", " + value : value;
        };
        Headers.prototype["delete"] = function(name) {
            delete this.map[normalizeName(name)];
        };
        Headers.prototype.get = function(name) {
            name = normalizeName(name);
            return this.has(name) ? this.map[name] : null;
        };
        Headers.prototype.has = function(name) {
            return this.map.hasOwnProperty(normalizeName(name));
        };
        Headers.prototype.set = function(name, value) {
            this.map[normalizeName(name)] = normalizeValue(value);
        };
        Headers.prototype.forEach = function(callback, thisArg) {
            for(var name in this.map)if (this.map.hasOwnProperty(name)) callback.call(thisArg, this.map[name], name, this);
        };
        Headers.prototype.keys = function() {
            var items = [];
            this.forEach(function(value, name) {
                items.push(name);
            });
            return iteratorFor(items);
        };
        Headers.prototype.values = function() {
            var items = [];
            this.forEach(function(value) {
                items.push(value);
            });
            return iteratorFor(items);
        };
        Headers.prototype.entries = function() {
            var items = [];
            this.forEach(function(value, name) {
                items.push([
                    name,
                    value
                ]);
            });
            return iteratorFor(items);
        };
        if (support.iterable) Headers.prototype[Symbol.iterator] = Headers.prototype.entries;
        function consumed(body) {
            if (body.bodyUsed) return Promise.reject(new TypeError("Already read"));
            body.bodyUsed = true;
        }
        function fileReaderReady(reader) {
            return new Promise(function(resolve, reject) {
                reader.onload = function() {
                    resolve(reader.result);
                };
                reader.onerror = function() {
                    reject(reader.error);
                };
            });
        }
        function readBlobAsArrayBuffer(blob) {
            var reader = new FileReader();
            var promise = fileReaderReady(reader);
            reader.readAsArrayBuffer(blob);
            return promise;
        }
        function readBlobAsText(blob) {
            var reader = new FileReader();
            var promise = fileReaderReady(reader);
            reader.readAsText(blob);
            return promise;
        }
        function readArrayBufferAsText(buf) {
            var view = new Uint8Array(buf);
            var chars = new Array(view.length);
            for(var i = 0; i < view.length; i++)chars[i] = String.fromCharCode(view[i]);
            return chars.join("");
        }
        function bufferClone(buf) {
            if (buf.slice) return buf.slice(0);
            else {
                var view = new Uint8Array(buf.byteLength);
                view.set(new Uint8Array(buf));
                return view.buffer;
            }
        }
        function Body() {
            this.bodyUsed = false;
            this._initBody = function(body) {
                /*
        fetch-mock wraps the Response object in an ES6 Proxy to
        provide useful test harness features such as flush. However, on
        ES5 browsers without fetch or Proxy support pollyfills must be used;
        the proxy-pollyfill is unable to proxy an attribute unless it exists
        on the object before the Proxy is created. This change ensures
        Response.bodyUsed exists on the instance, while maintaining the
        semantic of setting Request.bodyUsed in the constructor before
        _initBody is called.
      */ this.bodyUsed = this.bodyUsed;
                this._bodyInit = body;
                if (!body) this._bodyText = "";
                else if (typeof body === "string") this._bodyText = body;
                else if (support.blob && Blob.prototype.isPrototypeOf(body)) this._bodyBlob = body;
                else if (support.formData && FormData.prototype.isPrototypeOf(body)) this._bodyFormData = body;
                else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) this._bodyText = body.toString();
                else if (support.arrayBuffer && support.blob && isDataView(body)) {
                    this._bodyArrayBuffer = bufferClone(body.buffer);
                    // IE 10-11 can't handle a DataView body.
                    this._bodyInit = new Blob([
                        this._bodyArrayBuffer
                    ]);
                } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) this._bodyArrayBuffer = bufferClone(body);
                else this._bodyText = body = Object.prototype.toString.call(body);
                if (!this.headers.get("content-type")) {
                    if (typeof body === "string") this.headers.set("content-type", "text/plain;charset=UTF-8");
                    else if (this._bodyBlob && this._bodyBlob.type) this.headers.set("content-type", this._bodyBlob.type);
                    else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) this.headers.set("content-type", "application/x-www-form-urlencoded;charset=UTF-8");
                }
            };
            if (support.blob) {
                this.blob = function() {
                    var rejected = consumed(this);
                    if (rejected) return rejected;
                    if (this._bodyBlob) return Promise.resolve(this._bodyBlob);
                    else if (this._bodyArrayBuffer) return Promise.resolve(new Blob([
                        this._bodyArrayBuffer
                    ]));
                    else if (this._bodyFormData) throw new Error("could not read FormData body as blob");
                    else return Promise.resolve(new Blob([
                        this._bodyText
                    ]));
                };
                this.arrayBuffer = function() {
                    if (this._bodyArrayBuffer) {
                        var isConsumed = consumed(this);
                        if (isConsumed) return isConsumed;
                        if (ArrayBuffer.isView(this._bodyArrayBuffer)) return Promise.resolve(this._bodyArrayBuffer.buffer.slice(this._bodyArrayBuffer.byteOffset, this._bodyArrayBuffer.byteOffset + this._bodyArrayBuffer.byteLength));
                        else return Promise.resolve(this._bodyArrayBuffer);
                    } else return this.blob().then(readBlobAsArrayBuffer);
                };
            }
            this.text = function() {
                var rejected = consumed(this);
                if (rejected) return rejected;
                if (this._bodyBlob) return readBlobAsText(this._bodyBlob);
                else if (this._bodyArrayBuffer) return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer));
                else if (this._bodyFormData) throw new Error("could not read FormData body as text");
                else return Promise.resolve(this._bodyText);
            };
            if (support.formData) this.formData = function() {
                return this.text().then(decode);
            };
            this.json = function() {
                return this.text().then(JSON.parse);
            };
            return this;
        }
        // HTTP methods whose capitalization should be normalized
        var methods = [
            "DELETE",
            "GET",
            "HEAD",
            "OPTIONS",
            "POST",
            "PUT"
        ];
        function normalizeMethod(method) {
            var upcased = method.toUpperCase();
            return methods.indexOf(upcased) > -1 ? upcased : method;
        }
        function Request(input, options) {
            if (!(this instanceof Request)) throw new TypeError('Please use the "new" operator, this DOM object constructor cannot be called as a function.');
            options = options || {};
            var body = options.body;
            if (input instanceof Request) {
                if (input.bodyUsed) throw new TypeError("Already read");
                this.url = input.url;
                this.credentials = input.credentials;
                if (!options.headers) this.headers = new Headers(input.headers);
                this.method = input.method;
                this.mode = input.mode;
                this.signal = input.signal;
                if (!body && input._bodyInit != null) {
                    body = input._bodyInit;
                    input.bodyUsed = true;
                }
            } else this.url = String(input);
            this.credentials = options.credentials || this.credentials || "same-origin";
            if (options.headers || !this.headers) this.headers = new Headers(options.headers);
            this.method = normalizeMethod(options.method || this.method || "GET");
            this.mode = options.mode || this.mode || null;
            this.signal = options.signal || this.signal;
            this.referrer = null;
            if ((this.method === "GET" || this.method === "HEAD") && body) throw new TypeError("Body not allowed for GET or HEAD requests");
            this._initBody(body);
            if (this.method === "GET" || this.method === "HEAD") {
                if (options.cache === "no-store" || options.cache === "no-cache") {
                    // Search for a '_' parameter in the query string
                    var reParamSearch = /([?&])_=[^&]*/;
                    if (reParamSearch.test(this.url)) // If it already exists then set the value with the current time
                    this.url = this.url.replace(reParamSearch, "$1_=" + new Date().getTime());
                    else {
                        // Otherwise add a new '_' parameter to the end with the current time
                        var reQueryString = /\?/;
                        this.url += (reQueryString.test(this.url) ? "&" : "?") + "_=" + new Date().getTime();
                    }
                }
            }
        }
        Request.prototype.clone = function() {
            return new Request(this, {
                body: this._bodyInit
            });
        };
        function decode(body) {
            var form = new FormData();
            body.trim().split("&").forEach(function(bytes) {
                if (bytes) {
                    var split = bytes.split("=");
                    var name = split.shift().replace(/\+/g, " ");
                    var value = split.join("=").replace(/\+/g, " ");
                    form.append(decodeURIComponent(name), decodeURIComponent(value));
                }
            });
            return form;
        }
        function parseHeaders(rawHeaders) {
            var headers = new Headers();
            // Replace instances of \r\n and \n followed by at least one space or horizontal tab with a space
            // https://tools.ietf.org/html/rfc7230#section-3.2
            var preProcessedHeaders = rawHeaders.replace(/\r?\n[\t ]+/g, " ");
            // Avoiding split via regex to work around a common IE11 bug with the core-js 3.6.0 regex polyfill
            // https://github.com/github/fetch/issues/748
            // https://github.com/zloirock/core-js/issues/751
            preProcessedHeaders.split("\r").map(function(header) {
                return header.indexOf("\n") === 0 ? header.substr(1, header.length) : header;
            }).forEach(function(line) {
                var parts = line.split(":");
                var key = parts.shift().trim();
                if (key) {
                    var value = parts.join(":").trim();
                    headers.append(key, value);
                }
            });
            return headers;
        }
        Body.call(Request.prototype);
        function Response(bodyInit, options) {
            if (!(this instanceof Response)) throw new TypeError('Please use the "new" operator, this DOM object constructor cannot be called as a function.');
            if (!options) options = {};
            this.type = "default";
            this.status = options.status === undefined ? 200 : options.status;
            this.ok = this.status >= 200 && this.status < 300;
            this.statusText = options.statusText === undefined ? "" : "" + options.statusText;
            this.headers = new Headers(options.headers);
            this.url = options.url || "";
            this._initBody(bodyInit);
        }
        Body.call(Response.prototype);
        Response.prototype.clone = function() {
            return new Response(this._bodyInit, {
                status: this.status,
                statusText: this.statusText,
                headers: new Headers(this.headers),
                url: this.url
            });
        };
        Response.error = function() {
            var response = new Response(null, {
                status: 0,
                statusText: ""
            });
            response.type = "error";
            return response;
        };
        var redirectStatuses = [
            301,
            302,
            303,
            307,
            308
        ];
        Response.redirect = function(url, status) {
            if (redirectStatuses.indexOf(status) === -1) throw new RangeError("Invalid status code");
            return new Response(null, {
                status: status,
                headers: {
                    location: url
                }
            });
        };
        exports1.DOMException = global.DOMException;
        try {
            new exports1.DOMException();
        } catch (err) {
            exports1.DOMException = function(message, name) {
                this.message = message;
                this.name = name;
                var error = Error(message);
                this.stack = error.stack;
            };
            exports1.DOMException.prototype = Object.create(Error.prototype);
            exports1.DOMException.prototype.constructor = exports1.DOMException;
        }
        function fetch(input, init) {
            return new Promise(function(resolve, reject) {
                var request = new Request(input, init);
                if (request.signal && request.signal.aborted) return reject(new exports1.DOMException("Aborted", "AbortError"));
                var xhr = new XMLHttpRequest();
                function abortXhr() {
                    xhr.abort();
                }
                xhr.onload = function() {
                    var options = {
                        status: xhr.status,
                        statusText: xhr.statusText,
                        headers: parseHeaders(xhr.getAllResponseHeaders() || "")
                    };
                    options.url = "responseURL" in xhr ? xhr.responseURL : options.headers.get("X-Request-URL");
                    var body = "response" in xhr ? xhr.response : xhr.responseText;
                    setTimeout(function() {
                        resolve(new Response(body, options));
                    }, 0);
                };
                xhr.onerror = function() {
                    setTimeout(function() {
                        reject(new TypeError("Network request failed"));
                    }, 0);
                };
                xhr.ontimeout = function() {
                    setTimeout(function() {
                        reject(new TypeError("Network request failed"));
                    }, 0);
                };
                xhr.onabort = function() {
                    setTimeout(function() {
                        reject(new exports1.DOMException("Aborted", "AbortError"));
                    }, 0);
                };
                function fixUrl(url) {
                    try {
                        return url === "" && global.location.href ? global.location.href : url;
                    } catch (e) {
                        return url;
                    }
                }
                xhr.open(request.method, fixUrl(request.url), true);
                if (request.credentials === "include") xhr.withCredentials = true;
                else if (request.credentials === "omit") xhr.withCredentials = false;
                if ("responseType" in xhr) {
                    if (support.blob) xhr.responseType = "blob";
                    else if (support.arrayBuffer && request.headers.get("Content-Type") && request.headers.get("Content-Type").indexOf("application/octet-stream") !== -1) xhr.responseType = "arraybuffer";
                }
                if (init && typeof init.headers === "object" && !(init.headers instanceof Headers)) Object.getOwnPropertyNames(init.headers).forEach(function(name) {
                    xhr.setRequestHeader(name, normalizeValue(init.headers[name]));
                });
                else request.headers.forEach(function(value, name) {
                    xhr.setRequestHeader(name, value);
                });
                if (request.signal) {
                    request.signal.addEventListener("abort", abortXhr);
                    xhr.onreadystatechange = function() {
                        // DONE (success or failure)
                        if (xhr.readyState === 4) request.signal.removeEventListener("abort", abortXhr);
                    };
                }
                xhr.send(typeof request._bodyInit === "undefined" ? null : request._bodyInit);
            });
        }
        fetch.polyfill = true;
        if (!global.fetch) {
            global.fetch = fetch;
            global.Headers = Headers;
            global.Request = Request;
            global.Response = Response;
        }
        exports1.Headers = Headers;
        exports1.Request = Request;
        exports1.Response = Response;
        exports1.fetch = fetch;
        return exports1;
    }({});
})(__globalThis__);
// This is a ponyfill, so...
__globalThis__.fetch.ponyfill = true;
delete __globalThis__.fetch.polyfill;
// Choose between native implementation (__global__) or custom implementation (__globalThis__)
var ctx = __global__.fetch ? __global__ : __globalThis__;
exports = ctx.fetch // To enable: import fetch from 'cross-fetch'
;
exports.default = ctx.fetch // For TypeScript consumers without esModuleInterop.
;
exports.fetch = ctx.fetch // To enable: import {fetch} from 'cross-fetch'
;
exports.Headers = ctx.Headers;
exports.Request = ctx.Request;
exports.Response = ctx.Response;
module.exports = exports;

},{}],"8zbJW":[function(require,module,exports) {
/*
This file is part of web3.js.

web3.js is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

web3.js is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "WebSocketProvider", ()=>WebSocketProvider);
var _isomorphicWs = require("isomorphic-ws");
var _isomorphicWsDefault = parcelHelpers.interopDefault(_isomorphicWs);
var _web3Utils = require("web3-utils");
var _web3Errors = require("web3-errors");
class WebSocketProvider extends (0, _web3Utils.SocketProvider) {
    /**
     * This is a class used for Web Socket connections. It extends the abstract class SocketProvider {@link SocketProvider} that extends the EIP-1193 provider {@link EIP1193Provider}.
     * @param socketPath - The path to the Web Socket.
     * @param socketOptions - The options for the Web Socket client.
     * @param reconnectOptions - The options for the socket reconnection {@link ReconnectOptions}
     */ // this constructor is to specify the type for `socketOptions` for a better intellisense.
    // eslint-disable-next-line no-useless-constructor
    constructor(socketPath, socketOptions, reconnectOptions){
        super(socketPath, socketOptions, reconnectOptions);
    }
    // eslint-disable-next-line class-methods-use-this
    _validateProviderPath(providerUrl) {
        return typeof providerUrl === "string" ? /^ws(s)?:\/\//i.test(providerUrl) : false;
    }
    getStatus() {
        if (this._socketConnection && !(0, _web3Utils.isNullish)(this._socketConnection)) switch(this._socketConnection.readyState){
            case this._socketConnection.CONNECTING:
                return "connecting";
            case this._socketConnection.OPEN:
                return "connected";
            default:
                return "disconnected";
        }
        return "disconnected";
    }
    _openSocketConnection() {
        this._socketConnection = new (0, _isomorphicWsDefault.default)(this._socketPath, undefined, this._socketOptions && Object.keys(this._socketOptions).length === 0 ? undefined : this._socketOptions);
    }
    _closeSocketConnection(code, data) {
        var _a;
        (_a = this._socketConnection) === null || _a === void 0 || _a.close(code, data);
    }
    _sendToSocket(payload) {
        var _a;
        if (this.getStatus() === "disconnected") throw new (0, _web3Errors.ConnectionNotOpenError)();
        (_a = this._socketConnection) === null || _a === void 0 || _a.send(JSON.stringify(payload));
    }
    _parseResponses(event) {
        return this.chunkResponseParser.parseResponse(event.data);
    }
    _addSocketListeners() {
        var _a, _b, _c, _d;
        (_a = this._socketConnection) === null || _a === void 0 || _a.addEventListener("open", this._onOpenHandler);
        (_b = this._socketConnection) === null || _b === void 0 || _b.addEventListener("message", this._onMessageHandler);
        (_c = this._socketConnection) === null || _c === void 0 || _c.addEventListener("close", (e)=>this._onCloseHandler(e));
        (_d = this._socketConnection) === null || _d === void 0 || _d.addEventListener("error", this._onErrorHandler);
    }
    _removeSocketListeners() {
        var _a, _b, _c;
        (_a = this._socketConnection) === null || _a === void 0 || _a.removeEventListener("message", this._onMessageHandler);
        (_b = this._socketConnection) === null || _b === void 0 || _b.removeEventListener("open", this._onOpenHandler);
        (_c = this._socketConnection) === null || _c === void 0 || _c.removeEventListener("close", this._onCloseHandler);
    // note: we intentionally keep the error event listener to be able to emit it in case an error happens when closing the connection
    }
    _onCloseEvent(event) {
        var _a;
        if (this._reconnectOptions.autoReconnect && (![
            1000,
            1001
        ].includes(event.code) || !event.wasClean)) {
            this._reconnect();
            return;
        }
        this._clearQueues(event);
        this._removeSocketListeners();
        this._onDisconnect(event.code, event.reason);
        // disconnect was successful and can safely remove error listener
        (_a = this._socketConnection) === null || _a === void 0 || _a.removeEventListener("error", this._onErrorHandler);
    }
}
exports.default = WebSocketProvider;

},{"isomorphic-ws":"5nVUE","web3-utils":"8WsWI","web3-errors":"jDvsn","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5nVUE":[function(require,module,exports) {
// https://github.com/maxogden/websocket-stream/blob/48dc3ddf943e5ada668c31ccd94e9186f02fafbd/ws-fallback.js
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var global = arguments[3];
var ws = null;
if (typeof WebSocket !== "undefined") ws = WebSocket;
else if (typeof MozWebSocket !== "undefined") ws = MozWebSocket;
else if (typeof global !== "undefined") ws = global.WebSocket || global.MozWebSocket;
else if (typeof window !== "undefined") ws = window.WebSocket || window.MozWebSocket;
else if (typeof self !== "undefined") ws = self.WebSocket || self.MozWebSocket;
exports.default = ws;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2DPv6":[function(require,module,exports) {
/*
This file is part of web3.js.

web3.js is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

web3.js is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isWeb3Provider", ()=>isWeb3Provider);
parcelHelpers.export(exports, "isMetaMaskProvider", ()=>isMetaMaskProvider);
parcelHelpers.export(exports, "isLegacyRequestProvider", ()=>isLegacyRequestProvider);
parcelHelpers.export(exports, "isEIP1193Provider", ()=>isEIP1193Provider);
parcelHelpers.export(exports, "isLegacySendProvider", ()=>isLegacySendProvider);
parcelHelpers.export(exports, "isLegacySendAsyncProvider", ()=>isLegacySendAsyncProvider);
parcelHelpers.export(exports, "isSupportedProvider", ()=>isSupportedProvider);
parcelHelpers.export(exports, "isSupportSubscriptions", ()=>isSupportSubscriptions);
var _web3Types = require("web3-types");
const isWeb3Provider = (provider)=>(0, _web3Types.Web3BaseProvider).isWeb3Provider(provider);
const isMetaMaskProvider = (provider)=>typeof provider !== "string" && "request" in provider && provider.request.constructor.name === "AsyncFunction" && "isMetaMask" in provider && provider.isMetaMask;
const isLegacyRequestProvider = (provider)=>typeof provider !== "string" && "request" in provider && provider.request.constructor.name === "Function";
const isEIP1193Provider = (provider)=>typeof provider !== "string" && "request" in provider && provider.request.constructor.name === "AsyncFunction";
const isLegacySendProvider = (provider)=>typeof provider !== "string" && "send" in provider;
const isLegacySendAsyncProvider = (provider)=>typeof provider !== "string" && "sendAsync" in provider;
const isSupportedProvider = (provider)=>provider && (isWeb3Provider(provider) || isEIP1193Provider(provider) || isLegacyRequestProvider(provider) || isLegacySendAsyncProvider(provider) || isLegacySendProvider(provider));
const isSupportSubscriptions = (provider)=>{
    if (provider && "supportsSubscriptions" in provider) return provider.supportsSubscriptions();
    if (provider && typeof provider !== "string" && "on" in provider) return true;
    return false;
};

},{"web3-types":"g7Ztk","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kQHE5":[function(require,module,exports) {
/*
This file is part of web3.js.

web3.js is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

web3.js is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Web3SubscriptionManager", ()=>Web3SubscriptionManager);
var _web3Types = require("web3-types");
var _web3Errors = require("web3-errors");
var _web3Utils = require("web3-utils");
var _utilsJs = require("./utils.js");
var _web3RequestManagerJs = require("./web3_request_manager.js");
var __awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
class Web3SubscriptionManager {
    constructor(requestManager, registeredSubscriptions, tolerateUnlinkedSubscription = false){
        this.requestManager = requestManager;
        this.registeredSubscriptions = registeredSubscriptions;
        this.tolerateUnlinkedSubscription = tolerateUnlinkedSubscription;
        this._subscriptions = new Map();
        this.requestManager.on((0, _web3RequestManagerJs.Web3RequestManagerEvent).BEFORE_PROVIDER_CHANGE, ()=>__awaiter(this, void 0, void 0, function*() {
                yield this.unsubscribe();
            }));
        this.requestManager.on((0, _web3RequestManagerJs.Web3RequestManagerEvent).PROVIDER_CHANGED, ()=>{
            this.clear();
            this.listenToProviderEvents();
        });
        this.listenToProviderEvents();
    }
    listenToProviderEvents() {
        const providerAsWebProvider = this.requestManager.provider;
        if (!this.requestManager.provider || typeof (providerAsWebProvider === null || providerAsWebProvider === void 0 ? void 0 : providerAsWebProvider.supportsSubscriptions) === "function" && !(providerAsWebProvider === null || providerAsWebProvider === void 0 ? void 0 : providerAsWebProvider.supportsSubscriptions())) return;
        if (typeof this.requestManager.provider.on === "function") {
            if (typeof this.requestManager.provider.request === "function") // Listen to provider messages and data
            this.requestManager.provider.on("message", // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/no-unsafe-argument
            (message)=>this.messageListener(message));
            else // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/no-unsafe-argument
            providerAsWebProvider.on("data", (data)=>this.messageListener(data));
        }
    }
    messageListener(data) {
        var _a, _b, _c;
        if (!data) throw new (0, _web3Errors.SubscriptionError)("Should not call messageListener with no data. Type was");
        const subscriptionId = ((_a = data.params) === null || _a === void 0 ? void 0 : _a.subscription) || ((_b = data.data) === null || _b === void 0 ? void 0 : _b.subscription) || ((_c = data.id) === null || _c === void 0 ? void 0 : _c.toString(16));
        // Process if the received data is related to a subscription
        if (subscriptionId) {
            const sub = this._subscriptions.get(subscriptionId);
            sub === null || sub === void 0 || sub.processSubscriptionData(data);
        }
    }
    /**
     * Will create a new subscription
     *
     * @param name - The subscription you want to subscribe to
     * @param args - Optional additional parameters, depending on the subscription type
     * @param returnFormat- ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) - Specifies how the return data from the call should be formatted.
     *
     * Will subscribe to a specific topic (note: name)
     * @returns The subscription object
     */ subscribe(name, args, returnFormat = (0, _web3Types.DEFAULT_RETURN_FORMAT)) {
        return __awaiter(this, void 0, void 0, function*() {
            const Klass = this.registeredSubscriptions[name];
            if (!Klass) throw new (0, _web3Errors.SubscriptionError)("Invalid subscription type");
            // eslint-disable-next-line @typescript-eslint/no-unsafe-argument
            const subscription = new Klass(args !== null && args !== void 0 ? args : undefined, {
                subscriptionManager: this,
                returnFormat
            });
            yield this.addSubscription(subscription);
            return subscription;
        });
    }
    /**
     * Will returns all subscriptions.
     */ get subscriptions() {
        return this._subscriptions;
    }
    /**
     *
     * Adds an instance of {@link Web3Subscription} and subscribes to it
     *
     * @param sub - A {@link Web3Subscription} object
     */ addSubscription(sub) {
        return __awaiter(this, void 0, void 0, function*() {
            if (!this.requestManager.provider) throw new (0, _web3Errors.ProviderError)("Provider not available");
            if (!this.supportsSubscriptions()) throw new (0, _web3Errors.SubscriptionError)("The current provider does not support subscriptions");
            if (sub.id && this._subscriptions.has(sub.id)) throw new (0, _web3Errors.SubscriptionError)(`Subscription with id "${sub.id}" already exists`);
            yield sub.sendSubscriptionRequest();
            if ((0, _web3Utils.isNullish)(sub.id)) throw new (0, _web3Errors.SubscriptionError)("Subscription is not subscribed yet.");
            this._subscriptions.set(sub.id, sub);
            return sub.id;
        });
    }
    /**
     * Will clear a subscription
     *
     * @param id - The subscription of type {@link Web3Subscription}  to remove
     */ removeSubscription(sub) {
        return __awaiter(this, void 0, void 0, function*() {
            const { id } = sub;
            if ((0, _web3Utils.isNullish)(id)) throw new (0, _web3Errors.SubscriptionError)("Subscription is not subscribed yet. Or, had already been unsubscribed but not through the Subscription Manager.");
            if (!this._subscriptions.has(id) && !this.tolerateUnlinkedSubscription) throw new (0, _web3Errors.SubscriptionError)(`Subscription with id "${id.toString()}" does not exists`);
            yield sub.sendUnsubscribeRequest();
            this._subscriptions.delete(id);
            return id;
        });
    }
    /**
     * Will unsubscribe all subscriptions that fulfill the condition
     *
     * @param condition - A function that access and `id` and a `subscription` and return `true` or `false`
     * @returns An array of all the un-subscribed subscriptions
     */ unsubscribe(condition) {
        return __awaiter(this, void 0, void 0, function*() {
            const result = [];
            for (const [id, sub] of this.subscriptions.entries())if (!condition || typeof condition === "function" && condition({
                id,
                sub
            })) result.push(this.removeSubscription(sub));
            return Promise.all(result);
        });
    }
    /**
     * Clears all subscriptions
     */ clear() {
        this._subscriptions.clear();
    }
    /**
     * Check whether the current provider supports subscriptions.
     *
     * @returns `true` or `false` depending on if the current provider supports subscriptions
     */ supportsSubscriptions() {
        return (0, _web3Utils.isNullish)(this.requestManager.provider) ? false : (0, _utilsJs.isSupportSubscriptions)(this.requestManager.provider);
    }
}

},{"web3-types":"g7Ztk","web3-errors":"jDvsn","web3-utils":"8WsWI","./utils.js":"2DPv6","./web3_request_manager.js":"85GmO","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ilVf2":[function(require,module,exports) {
/*
This file is part of web3.js.

web3.js is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

web3.js is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Web3Subscription", ()=>Web3Subscription);
// eslint-disable-next-line max-classes-per-file
var _web3Types = require("web3-types");
var _web3Utils = require("web3-utils");
var _web3Errors = require("web3-errors");
// eslint-disable-next-line import/no-cycle
var _web3SubscriptionManagerJs = require("./web3_subscription_manager.js");
var _web3EventEmitterJs = require("./web3_event_emitter.js");
var __awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
class Web3Subscription extends (0, _web3EventEmitterJs.Web3EventEmitter) {
    constructor(args, options){
        var _a;
        super();
        this.args = args;
        const { requestManager } = options;
        const { subscriptionManager } = options;
        if (requestManager && subscriptionManager) throw new (0, _web3Errors.SubscriptionError)("Only requestManager or subscriptionManager should be provided at Subscription constructor");
        if (!requestManager && !subscriptionManager) throw new (0, _web3Errors.SubscriptionError)("Either requestManager or subscriptionManager should be provided at Subscription constructor");
        if (requestManager) // eslint-disable-next-line deprecation/deprecation
        this._subscriptionManager = new (0, _web3SubscriptionManagerJs.Web3SubscriptionManager)(requestManager, {}, true);
        else this._subscriptionManager = subscriptionManager;
        this._returnFormat = (_a = options === null || options === void 0 ? void 0 : options.returnFormat) !== null && _a !== void 0 ? _a : (0, _web3Types.DEFAULT_RETURN_FORMAT);
    }
    get id() {
        return this._id;
    }
    get lastBlock() {
        return this._lastBlock;
    }
    subscribe() {
        return __awaiter(this, void 0, void 0, function*() {
            return this._subscriptionManager.addSubscription(this);
        });
    }
    processSubscriptionData(data) {
        var _a, _b;
        if (data === null || data === void 0 ? void 0 : data.data) // for EIP-1193 provider
        this._processSubscriptionResult((_b = (_a = data === null || data === void 0 ? void 0 : data.data) === null || _a === void 0 ? void 0 : _a.result) !== null && _b !== void 0 ? _b : data === null || data === void 0 ? void 0 : data.data);
        else if (data && (0, _web3Utils.jsonRpc).isResponseWithNotification(data)) this._processSubscriptionResult(data === null || data === void 0 ? void 0 : data.params.result);
    }
    sendSubscriptionRequest() {
        return __awaiter(this, void 0, void 0, function*() {
            this._id = yield this._subscriptionManager.requestManager.send({
                method: "eth_subscribe",
                params: this._buildSubscriptionParams()
            });
            this.emit("connected", this._id);
            return this._id;
        });
    }
    get returnFormat() {
        return this._returnFormat;
    }
    get subscriptionManager() {
        return this._subscriptionManager;
    }
    resubscribe() {
        return __awaiter(this, void 0, void 0, function*() {
            yield this.unsubscribe();
            yield this.subscribe();
        });
    }
    unsubscribe() {
        return __awaiter(this, void 0, void 0, function*() {
            if (!this.id) return;
            yield this._subscriptionManager.removeSubscription(this);
        });
    }
    sendUnsubscribeRequest() {
        return __awaiter(this, void 0, void 0, function*() {
            yield this._subscriptionManager.requestManager.send({
                method: "eth_unsubscribe",
                params: [
                    this.id
                ]
            });
            this._id = undefined;
        });
    }
    // eslint-disable-next-line class-methods-use-this
    formatSubscriptionResult(data) {
        return data;
    }
    _processSubscriptionResult(data) {
        this.emit("data", this.formatSubscriptionResult(data));
    }
    _processSubscriptionError(error) {
        this.emit("error", error);
    }
    // eslint-disable-next-line class-methods-use-this
    _buildSubscriptionParams() {
        // This should be overridden in the subclass
        throw new Error("Implement in the child class");
    }
}

},{"web3-types":"g7Ztk","web3-utils":"8WsWI","web3-errors":"jDvsn","./web3_subscription_manager.js":"kQHE5","./web3_event_emitter.js":"4LX4F","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fF91X":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Web3Context", ()=>Web3Context);
/**
 * Extend this class when creating a plugin that either doesn't require {@link EthExecutionAPI},
 * or interacts with a RPC node that doesn't fully implement {@link EthExecutionAPI}.
 *
 * To add type support for RPC methods to the {@link Web3RequestManager},
 * define a {@link Web3APISpec} and pass it as a generic to Web3PluginBase like so:
 *
 * @example
 * ```ts
 * type CustomRpcApi = {
 *	custom_rpc_method: () => string;
 *	custom_rpc_method_with_parameters: (parameter1: string, parameter2: number) => string;
 * };
 *
 * class CustomPlugin extends Web3PluginBase<CustomRpcApi> {...}
 * ```
 */ parcelHelpers.export(exports, "Web3PluginBase", ()=>Web3PluginBase);
/**
* Extend this class when creating a plugin that makes use of {@link EthExecutionAPI},
* or depends on other Web3 packages (such as `web3-eth-contract`) that depend on {@link EthExecutionAPI}.
*
* To add type support for RPC methods to the {@link Web3RequestManager} (in addition to {@link EthExecutionAPI}),
* define a {@link Web3APISpec} and pass it as a generic to Web3PluginBase like so:
*
* @example
* ```ts
* type CustomRpcApi = {
*	custom_rpc_method: () => string;
*	custom_rpc_method_with_parameters: (parameter1: string, parameter2: number) => string;
* };
*
* class CustomPlugin extends Web3PluginBase<CustomRpcApi> {...}
* ```
*/ parcelHelpers.export(exports, "Web3EthPluginBase", ()=>Web3EthPluginBase);
/*
This file is part of web3.js.

web3.js is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

web3.js is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/ // eslint-disable-next-line max-classes-per-file
var _web3Errors = require("web3-errors");
var _web3Utils = require("web3-utils");
var _web3EthAccounts = require("web3-eth-accounts");
var _utilsJs = require("./utils.js");
var _web3BatchRequestJs = require("./web3_batch_request.js");
// eslint-disable-next-line import/no-cycle
var _web3ConfigJs = require("./web3_config.js");
var _web3RequestManagerJs = require("./web3_request_manager.js");
var _web3SubscriptionManagerJs = require("./web3_subscription_manager.js");
var __awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
class Web3Context extends (0, _web3ConfigJs.Web3Config) {
    constructor(providerOrContext){
        var _a;
        super();
        this.providers = (0, _web3RequestManagerJs.Web3RequestManager).providers;
        // If "providerOrContext" is provided as "string" or an objects matching "SupportedProviders" interface
        if ((0, _web3Utils.isNullish)(providerOrContext) || typeof providerOrContext === "string" && providerOrContext.trim() !== "" || (0, _utilsJs.isSupportedProvider)(providerOrContext)) {
            this._requestManager = new (0, _web3RequestManagerJs.Web3RequestManager)(providerOrContext);
            this._subscriptionManager = new (0, _web3SubscriptionManagerJs.Web3SubscriptionManager)(this._requestManager, {});
            return;
        }
        const { config, provider, requestManager, subscriptionManager, registeredSubscriptions, accountProvider, wallet } = providerOrContext;
        this.setConfig(config !== null && config !== void 0 ? config : {});
        this._requestManager = requestManager !== null && requestManager !== void 0 ? requestManager : new (0, _web3RequestManagerJs.Web3RequestManager)(provider, (_a = config === null || config === void 0 ? void 0 : config.enableExperimentalFeatures) === null || _a === void 0 ? void 0 : _a.useSubscriptionWhenCheckingBlockTimeout);
        if (subscriptionManager) this._subscriptionManager = subscriptionManager;
        else this._subscriptionManager = new (0, _web3SubscriptionManagerJs.Web3SubscriptionManager)(this.requestManager, registeredSubscriptions !== null && registeredSubscriptions !== void 0 ? registeredSubscriptions : {});
        if (accountProvider) this._accountProvider = accountProvider;
        if (wallet) this._wallet = wallet;
    }
    get requestManager() {
        return this._requestManager;
    }
    /**
     * Will return the current subscriptionManager ({@link Web3SubscriptionManager})
     */ get subscriptionManager() {
        return this._subscriptionManager;
    }
    get wallet() {
        return this._wallet;
    }
    get accountProvider() {
        return this._accountProvider;
    }
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    static fromContextObject(...args) {
        return new this(...args.reverse());
    }
    getContextObject() {
        var _a;
        return {
            config: this.config,
            provider: this.provider,
            requestManager: this.requestManager,
            subscriptionManager: this.subscriptionManager,
            registeredSubscriptions: (_a = this.subscriptionManager) === null || _a === void 0 ? void 0 : _a.registeredSubscriptions,
            providers: this.providers,
            wallet: this.wallet,
            accountProvider: this.accountProvider
        };
    }
    /**
     * Use to create new object of any type extended by `Web3Context`
     * and link it to current context. This can be used to initiate a global context object
     * and then use it to create new objects of any type extended by `Web3Context`.
     */ use(ContextRef, ...args) {
        const newContextChild = new ContextRef(...[
            ...args,
            this.getContextObject()
        ]);
        this.on((0, _web3ConfigJs.Web3ConfigEvent).CONFIG_CHANGE, (event)=>{
            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
            newContextChild.setConfig({
                [event.name]: event.newValue
            });
        });
        return newContextChild;
    }
    /**
     * Link current context to another context.
     */ link(parentContext) {
        this.setConfig(parentContext.config);
        this._requestManager = parentContext.requestManager;
        this.provider = parentContext.provider;
        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
        this._subscriptionManager = parentContext.subscriptionManager;
        this._wallet = parentContext.wallet;
        this._accountProvider = parentContext._accountProvider;
        parentContext.on((0, _web3ConfigJs.Web3ConfigEvent).CONFIG_CHANGE, (event)=>{
            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
            this.setConfig({
                [event.name]: event.newValue
            });
        });
    }
    // eslint-disable-next-line no-use-before-define
    registerPlugin(plugin) {
        // @ts-expect-error No index signature with a parameter of type 'string' was found on type 'Web3Context<API, RegisteredSubs>'
        if (this[plugin.pluginNamespace] !== undefined) throw new (0, _web3Errors.ExistingPluginNamespaceError)(plugin.pluginNamespace);
        const _pluginObject = {
            [plugin.pluginNamespace]: plugin
        };
        _pluginObject[plugin.pluginNamespace].link(this);
        Object.assign(this, _pluginObject);
    }
    /**
     * Will return the current provider.
     *
     * @returns Returns the current provider
     * @example
     * ```ts
     * const web3 = new Web3Context("http://localhost:8545");
     * console.log(web3.provider);
     * > HttpProvider {
     * 	clientUrl: 'http://localhost:8545',
     * 	httpProviderOptions: undefined
     *  }
     * ```
     */ get provider() {
        return this.currentProvider;
    }
    /**
     * Will set the current provider.
     *
     * @param provider - The provider to set
     *
     * Accepted providers are of type {@link SupportedProviders}
     * @example
     * ```ts
     *  const web3Context = new web3ContextContext("http://localhost:8545");
     * web3Context.provider = "ws://localhost:8545";
     * console.log(web3Context.provider);
     * > WebSocketProvider {
     * _eventEmitter: EventEmitter {
     * _events: [Object: null prototype] {},
     * _eventsCount: 0,
     * ...
     * }
     * ```
     */ set provider(provider) {
        this.requestManager.setProvider(provider);
    }
    /**
     * Will return the current provider. (The same as `provider`)
     *
     * @returns Returns the current provider
     * @example
     * ```ts
     * const web3Context = new Web3Context("http://localhost:8545");
     * console.log(web3Context.provider);
     * > HttpProvider {
     * 	clientUrl: 'http://localhost:8545',
     * 	httpProviderOptions: undefined
     *  }
     * ```
     */ get currentProvider() {
        return this.requestManager.provider;
    }
    /**
     * Will set the current provider. (The same as `provider`)
     *
     * @param provider - {@link SupportedProviders} The provider to set
     *
     * @example
     * ```ts
     *  const web3Context = new Web3Context("http://localhost:8545");
     * web3Context.currentProvider = "ws://localhost:8545";
     * console.log(web3Context.provider);
     * > WebSocketProvider {
     * _eventEmitter: EventEmitter {
     * _events: [Object: null prototype] {},
     * _eventsCount: 0,
     * ...
     * }
     * ```
     */ set currentProvider(provider) {
        this.requestManager.setProvider(provider);
    }
    /**
     * Will return the givenProvider if available.
     *
     * When using web3.js in an Ethereum compatible browser, it will set with the current native provider by that browser. Will return the given provider by the (browser) environment, otherwise `undefined`.
     */ // eslint-disable-next-line class-methods-use-this
    get givenProvider() {
        return Web3Context.givenProvider;
    }
    /**
     * Will set the provider.
     *
     * @param provider - {@link SupportedProviders} The provider to set
     * @returns Returns true if the provider was set
     */ setProvider(provider) {
        this.provider = provider;
        return true;
    }
    /**
     * Will return the {@link Web3BatchRequest} constructor.
     */ get BatchRequest() {
        return (0, _web3BatchRequestJs.Web3BatchRequest).bind(undefined, this._requestManager);
    }
    /**
     * This method allows extending the web3 modules.
     * Note: This method is only for backward compatibility, and It is recommended to use Web3 v4 Plugin feature for extending web3.js functionality if you are developing some thing new.
     */ extend(extendObj) {
        var _a;
        // @ts-expect-error No index signature with a parameter of type 'string' was found on type 'Web3Context<API, RegisteredSubs>'
        if (extendObj.property && !this[extendObj.property]) // @ts-expect-error No index signature with a parameter of type 'string' was found on type 'Web3Context<API, RegisteredSubs>'
        this[extendObj.property] = {};
        (_a = extendObj.methods) === null || _a === void 0 || _a.forEach((element)=>{
            const method = (...givenParams)=>__awaiter(this, void 0, void 0, function*() {
                    return this.requestManager.send({
                        method: element.call,
                        params: givenParams
                    });
                });
            if (extendObj.property) // @ts-expect-error No index signature with a parameter of type 'string' was found on type 'Web3Context<API, RegisteredSubs>'
            // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
            this[extendObj.property][element.name] = method;
            else this[element.name] = method;
        });
        return this;
    }
}
Web3Context.providers = (0, _web3RequestManagerJs.Web3RequestManager).providers;
class Web3PluginBase extends Web3Context {
    // eslint-disable-next-line class-methods-use-this
    registerNewTransactionType(type, txClass) {
        (0, _web3EthAccounts.TransactionFactory).registerTransactionType(type, txClass);
    }
}
class Web3EthPluginBase extends Web3PluginBase {
}

},{"web3-errors":"jDvsn","web3-utils":"8WsWI","web3-eth-accounts":"4gQAz","./utils.js":"2DPv6","./web3_batch_request.js":"iPEUh","./web3_config.js":"7786Q","./web3_request_manager.js":"85GmO","./web3_subscription_manager.js":"kQHE5","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4gQAz":[function(require,module,exports) {
/*
This file is part of web3.js.

web3.js is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

web3.js is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/ /**
 * The web3.eth.accounts contains functions to generate Ethereum accounts and sign transactions and data.
 *
 * **_NOTE:_** This package has NOT been audited and might potentially be unsafe. Take precautions to clear memory properly, store the private keys safely, and test transaction receiving and sending functionality properly before using in production!
 *
 *
 * To use this package standalone and use its methods use:
 * ```ts
 * import { create, decrypt } from 'web3-eth-accounts'; // ....
 * ```
 *
 * To use this package within the web3 object use:
 *
 * ```ts
 * import Web3 from 'web3';
 *
 * const web3 = new Web3(Web3.givenProvider || 'ws://some.local-or-remote.node:8546');
 * // now you have access to the accounts class
 * web3.eth.accounts.create();
 * ```
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _walletJs = require("./wallet.js");
parcelHelpers.exportAll(_walletJs, exports);
var _accountJs = require("./account.js");
parcelHelpers.exportAll(_accountJs, exports);
var _typesJs = require("./types.js");
parcelHelpers.exportAll(_typesJs, exports);
var _schemasJs = require("./schemas.js");
parcelHelpers.exportAll(_schemasJs, exports);
var _indexJs = require("./common/index.js");
parcelHelpers.exportAll(_indexJs, exports);
var _indexJs1 = require("./tx/index.js");
parcelHelpers.exportAll(_indexJs1, exports);

},{"./wallet.js":"cnNVt","./account.js":"p4kK9","./types.js":"lWVKr","./schemas.js":"4v3XI","./common/index.js":"5xZqL","./tx/index.js":"1wYUb","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cnNVt":[function(require,module,exports) {
/*
This file is part of web3.js.

web3.js is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

web3.js is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Wallet is an in memory `wallet` that can hold multiple accounts.
 * These accounts can be used when using web3.eth.sendTransaction().
 *
 * ### Parameters
 *  Web3AccountProvider - AccountProvider for the wallet
 *
 * ```ts
 * import Web3 from 'web3';
 * const web3 = new Web3("https://localhost:8454")
 * web3.eth.accounts.wallet
 * > Wallet(0) [
 *   _accountProvider: {
 *     create: [Function: create],
 *     privateKeyToAccount: [Function: privateKeyToAccount],
 *     decrypt: [Function: decrypt]
 *   },
 *   _addressMap: Map(0) {},
 *   _defaultKeyName: 'web3js_wallet'
 * ]
 * ```
 */ parcelHelpers.export(exports, "Wallet", ()=>Wallet);
var _web3Types = require("web3-types");
var _web3Validator = require("web3-validator");
var __awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
class Wallet extends (0, _web3Types.Web3BaseWallet) {
    constructor(){
        super(...arguments);
        this._addressMap = new Map();
        this._defaultKeyName = "web3js_wallet";
    }
    /**
     * Get the storage object of the browser
     *
     * @returns the storage
     */ static getStorage() {
        let storage;
        try {
            storage = window.localStorage;
            const x = "__storage_test__";
            storage.setItem(x, x);
            storage.removeItem(x);
            return storage;
        } catch (e) {
            return e && // everything except Firefox
            (e.code === 22 || // Firefox
            e.code === 1014 || // test name field too, because code might not be present
            // everything except Firefox
            e.name === "QuotaExceededError" || // Firefox
            e.name === "NS_ERROR_DOM_QUOTA_REACHED") && // acknowledge QuotaExceededError only if there's something already stored
            !(0, _web3Validator.isNullish)(storage) && storage.length !== 0 ? storage : undefined;
        }
    }
    /**
     * Generates one or more accounts in the wallet. If wallets already exist they will not be overridden.
     *
     * @param numberOfAccounts - Number of accounts to create. Leave empty to create an empty wallet.
     * @returns The wallet
     * ```ts
     * web3.eth.accounts.wallet.create(2)
     * > Wallet(2) [
     *   {
     *     address: '0xde38310a42B751AE57d30cFFF4a0A3c52A442fCE',
     *     privateKey: '0x6422c9d28efdcbee93c1d32a5fc6fd6fa081b985487885296cf8c9bbb5872600',
     *     signTransaction: [Function: signTransaction],
     *     sign: [Function: sign],
     *     encrypt: [Function: encrypt]
     *   },
     *   {
     *     address: '0x766BF755246d924B1d017Fdb5390f38a60166691',
     *     privateKey: '0x756530f13c0eb636ebdda655335f5dea9921e3362e2e588b0ad59e556f7751f0',
     *     signTransaction: [Function: signTransaction],
     *     sign: [Function: sign],
     *     encrypt: [Function: encrypt]
     *   },
     *   _accountProvider: {
     *     create: [Function: create],
     *     privateKeyToAccount: [Function: privateKeyToAccount],
     *     decrypt: [Function: decrypt]
     *   },
     *   _addressMap: Map(2) {
     *     '0xde38310a42b751ae57d30cfff4a0a3c52a442fce' => 0,
     *     '0x766bf755246d924b1d017fdb5390f38a60166691' => 1
     *   },
     *   _defaultKeyName: 'web3js_wallet'
     * ]
     *
     * ```
     */ create(numberOfAccounts) {
        for(let i = 0; i < numberOfAccounts; i += 1)this.add(this._accountProvider.create());
        return this;
    }
    /**
     * Adds an account using a private key or account object to the wallet.
     *
     * @param account - A private key or account object
     * @returns The wallet
     *
     * ```ts
     * web3.eth.accounts.wallet.add('0xbce9b59981303e76c4878b1a6d7b088ec6b9dd5c966b7d5f54d7a749ff683387');
     * > Wallet(1) [
     *   {
     *     address: '0x85D70633b90e03e0276B98880286D0D055685ed7',
     *     privateKey: '0xbce9b59981303e76c4878b1a6d7b088ec6b9dd5c966b7d5f54d7a749ff683387',
     *     signTransaction: [Function: signTransaction],
     *     sign: [Function: sign],
     *     encrypt: [Function: encrypt]
     *   },
     *   _accountProvider: {
     *     create: [Function: create],
     *     privateKeyToAccount: [Function: privateKeyToAccount],
     *     decrypt: [Function: decrypt]
     *   },
     *   _addressMap: Map(1) { '0x85d70633b90e03e0276b98880286d0d055685ed7' => 0 },
     *   _defaultKeyName: 'web3js_wallet'
     * ]
     * ```
     */ add(account) {
        var _a;
        if (typeof account === "string") return this.add(this._accountProvider.privateKeyToAccount(account));
        let index = this.length;
        const existAccount = this.get(account.address);
        if (existAccount) {
            console.warn(`Account ${account.address.toLowerCase()} already exists.`);
            index = (_a = this._addressMap.get(account.address.toLowerCase())) !== null && _a !== void 0 ? _a : index;
        }
        this._addressMap.set(account.address.toLowerCase(), index);
        this[index] = account;
        return this;
    }
    /**
     * Get the account of the wallet with either the index or public address.
     *
     * @param addressOrIndex - A string of the address or number index within the wallet.
     * @returns The account object or undefined if the account doesn't exist
     */ get(addressOrIndex) {
        if (typeof addressOrIndex === "string") {
            const index = this._addressMap.get(addressOrIndex.toLowerCase());
            if (!(0, _web3Validator.isNullish)(index)) return this[index];
            return undefined;
        }
        return this[addressOrIndex];
    }
    /**
     * Removes an account from the wallet.
     *
     * @param addressOrIndex - The account address, or index in the wallet.
     * @returns true if the wallet was removed. false if it couldn't be found.
     * ```ts
     * web3.eth.accounts.wallet.add('0xbce9b59981303e76c4878b1a6d7b088ec6b9dd5c966b7d5f54d7a749ff683387');
     *
     * web3.eth.accounts.wallet.remove('0x85D70633b90e03e0276B98880286D0D055685ed7');
     * > true
     * web3.eth.accounts.wallet
     * > Wallet(0) [
     * _accountProvider: {
     *   create: [Function: create],
     *   privateKeyToAccount: [Function: privateKeyToAccount],
     *   decrypt: [Function: decrypt]
     * },
     * _addressMap: Map(0) {},
     * _defaultKeyName: 'web3js_wallet'
     * ]
     * ```
     */ remove(addressOrIndex) {
        if (typeof addressOrIndex === "string") {
            const index = this._addressMap.get(addressOrIndex.toLowerCase());
            if ((0, _web3Validator.isNullish)(index)) return false;
            this._addressMap.delete(addressOrIndex.toLowerCase());
            this.splice(index, 1);
            return true;
        }
        if (this[addressOrIndex]) {
            this.splice(addressOrIndex, 1);
            return true;
        }
        return false;
    }
    /**
     * Securely empties the wallet and removes all its accounts.
     * Use this with *caution as it will remove all accounts stored in local wallet.
     *
     * @returns The wallet object
     * ```ts
     *
     * web3.eth.accounts.wallet.clear();
     * > Wallet(0) [
     * _accountProvider: {
     *   create: [Function: create],
     *   privateKeyToAccount: [Function: privateKeyToAccount],
     *   decrypt: [Function: decrypt]
     * },
     * _addressMap: Map(0) {},
     * _defaultKeyName: 'web3js_wallet'
     * ]
     * ```
     */ clear() {
        this._addressMap.clear();
        // Setting length clears the Array in JS.
        this.length = 0;
        return this;
    }
    /**
     * Encrypts all wallet accounts to an array of encrypted keystore v3 objects.
     *
     * @param password - The password which will be used for encryption
     * @param options - encryption options
     * @returns An array of the encrypted keystore v3.
     *
     * ```ts
     * web3.eth.accounts.wallet.create(1)
     * web3.eth.accounts.wallet.encrypt("abc").then(console.log);
     * > [
     * '{"version":3,"id":"fa46e213-a7c3-4844-b903-dd14d39cc7db",
     * "address":"fa3e41a401609103c241431cbdee8623ae2a321a","crypto":
     * {"ciphertext":"8d179a911d6146ad2924e86bf493ed89b8ff3596ffec0816e761c542016ab13c",
     * "cipherparams":{"iv":"acc888c6cf4a19b86846cef0185a7164"},"cipher":"aes-128-ctr",
     * "kdf":"scrypt","kdfparams":{"n":8192,"r":8,"p":1,"dklen":32,"salt":"6a743c9b367d15f4758e4f3f3378ff0fd443708d1c64854e07588ea5331823ae"},
     * "mac":"410544c8307e3691fda305eb3722d82c3431f212a87daa119a21587d96698b57"}}'
     * ]
     * ```
     */ encrypt(password, options) {
        return __awaiter(this, void 0, void 0, function*() {
            return Promise.all(this.map((account)=>__awaiter(this, void 0, void 0, function*() {
                    return account.encrypt(password, options);
                })));
        });
    }
    /**
     * Decrypts keystore v3 objects.
     *
     * @param encryptedWallets - An array of encrypted keystore v3 objects to decrypt
     * @param password - The password to encrypt with
     * @param options - decrypt options for the wallets
     * @returns The decrypted wallet object
     *
     * ```ts
     * web3.eth.accounts.wallet.decrypt([
     * { version: 3,
     * id: '83191a81-aaca-451f-b63d-0c5f3b849289',
     * address: '06f702337909c06c82b09b7a22f0a2f0855d1f68',
     * crypto:
     * { ciphertext: '7d34deae112841fba86e3e6cf08f5398dda323a8e4d29332621534e2c4069e8d',
     *   cipherparams: { iv: '497f4d26997a84d570778eae874b2333' },
     *   cipher: 'aes-128-ctr',
     *   kdf: 'scrypt',
     *   kdfparams:
     *    { dklen: 32,
     *      salt: '208dd732a27aa4803bb760228dff18515d5313fd085bbce60594a3919ae2d88d',
     *      n: 262144,
     *      r: 8,
     *      p: 1 },
     *   mac: '0062a853de302513c57bfe3108ab493733034bf3cb313326f42cf26ea2619cf9' } },
     * { version: 3,
     * id: '7d6b91fa-3611-407b-b16b-396efb28f97e',
     * address: 'b5d89661b59a9af0b34f58d19138baa2de48baaf',
     * crypto:
     * { ciphertext: 'cb9712d1982ff89f571fa5dbef447f14b7e5f142232bd2a913aac833730eeb43',
     *   cipherparams: { iv: '8cccb91cb84e435437f7282ec2ffd2db' },
     *   cipher: 'aes-128-ctr',
     *   kdf: 'scrypt',
     *   kdfparams:
     *    { dklen: 32,
     *      salt: '08ba6736363c5586434cd5b895e6fe41ea7db4785bd9b901dedce77a1514e8b8',
     *      n: 262144,
     *      r: 8,
     *      p: 1 },
     *   mac: 'd2eb068b37e2df55f56fa97a2bf4f55e072bef0dd703bfd917717d9dc54510f0' } }
     * ], 'test').then(console.log)
     * > Wallet {
     *   _accountProvider: {
     *     create: [Function: create],
     *     privateKeyToAccount: [Function: privateKeyToAccount],
     *     decrypt: [Function: decrypt]
     *   },
     *   _defaultKeyName: 'web3js_wallet',
     *   _accounts: {
     *     '0x85d70633b90e03e0276b98880286d0d055685ed7': {
     *       address: '0x85D70633b90e03e0276B98880286D0D055685ed7',
     *       privateKey: '0xbce9b59981303e76c4878b1a6d7b088ec6b9dd5c966b7d5f54d7a749ff683387',
     *       signTransaction: [Function: signTransaction],
     *       sign: [Function: sign],
     *       encrypt: [Function: encrypt]
     *     },
     *     '0x06f702337909c06c82b09b7a22f0a2f0855d1f68': {
     *       address: '0x06F702337909C06C82B09B7A22F0a2f0855d1F68',
     *       privateKey: '87a51da18900da7398b3bab03996833138f269f8f66dd1237b98df6b9ce14573',
     *       signTransaction: [Function: signTransaction],
     *       sign: [Function: sign],
     *       encrypt: [Function: encrypt]
     *     },
     *     '0xb5d89661b59a9af0b34f58d19138baa2de48baaf': {
     *       address: '0xB5d89661B59a9aF0b34f58D19138bAa2de48BAaf',
     *       privateKey: '7ee61c5282979aae9dd795bb6a54e8bdc2bfe009acb64eb9a67322eec3b3da6e',
     *       signTransaction: [Function: signTransaction],
     *       sign: [Function: sign],
     *       encrypt: [Function: encrypt]
     *     }
     *   }
     * }
     * ```
     */ decrypt(encryptedWallets, password, options) {
        return __awaiter(this, void 0, void 0, function*() {
            const results = yield Promise.all(encryptedWallets.map((wallet)=>__awaiter(this, void 0, void 0, function*() {
                    return this._accountProvider.decrypt(wallet, password, options);
                })));
            for (const res of results)this.add(res);
            return this;
        });
    }
    /**
     * Stores the wallet encrypted and as string in local storage.
     * **__NOTE:__** Browser only
     *
     * @param password - The password to encrypt the wallet
     * @param keyName - (optional) The key used for the local storage position, defaults to `"web3js_wallet"`.
     * @returns Will return boolean value true if saved properly
     * ```ts
     * web3.eth.accounts.wallet.save('test#!$');
     * >true
     * ```
     */ save(password, keyName) {
        return __awaiter(this, void 0, void 0, function*() {
            const storage = Wallet.getStorage();
            if (!storage) throw new Error("Local storage not available.");
            storage.setItem(keyName !== null && keyName !== void 0 ? keyName : this._defaultKeyName, JSON.stringify((yield this.encrypt(password))));
            return true;
        });
    }
    /**
     * Loads a wallet from local storage and decrypts it.
     * **__NOTE:__** Browser only
     *
     * @param password - The password to decrypt the wallet.
     * @param keyName - (optional)The key used for local storage position, defaults to `web3js_wallet"`
     * @returns Returns the wallet object
     *
     * ```ts
     * web3.eth.accounts.wallet.save('test#!$');
     * > true
     * web3.eth.accounts.wallet.load('test#!$');
     * { defaultKeyName: "web3js_wallet",
     *   length: 0,
     *   _accounts: Accounts {_requestManager: RequestManager, givenProvider: Proxy, providers: {…}, _provider: WebsocketProvider, …},
     *   [[Prototype]]: Object
     * }
     * ```
     */ load(password, keyName) {
        return __awaiter(this, void 0, void 0, function*() {
            const storage = Wallet.getStorage();
            if (!storage) throw new Error("Local storage not available.");
            const keystore = storage.getItem(keyName !== null && keyName !== void 0 ? keyName : this._defaultKeyName);
            if (keystore) yield this.decrypt(JSON.parse(keystore) || [], password);
            return this;
        });
    }
}

},{"web3-types":"g7Ztk","web3-validator":"6HK71","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"p4kK9":[function(require,module,exports) {
/*
This file is part of web3.js.

web3.js is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

web3.js is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "parseAndValidatePrivateKey", ()=>parseAndValidatePrivateKey);
parcelHelpers.export(exports, "hashMessage", ()=>hashMessage);
parcelHelpers.export(exports, "sign", ()=>sign);
parcelHelpers.export(exports, "signTransaction", ()=>signTransaction);
parcelHelpers.export(exports, "recoverTransaction", ()=>recoverTransaction);
parcelHelpers.export(exports, "recover", ()=>recover);
parcelHelpers.export(exports, "privateKeyToAddress", ()=>privateKeyToAddress);
parcelHelpers.export(exports, "privateKeyToPublicKey", ()=>privateKeyToPublicKey);
parcelHelpers.export(exports, "encrypt", ()=>encrypt);
parcelHelpers.export(exports, "privateKeyToAccount", ()=>privateKeyToAccount);
parcelHelpers.export(exports, "create", ()=>create);
parcelHelpers.export(exports, "decrypt", ()=>decrypt);
var _aesJs = require("ethereum-cryptography/aes.js");
var _pbkdf2Js = require("ethereum-cryptography/pbkdf2.js");
var _scryptJs = require("ethereum-cryptography/scrypt.js");
var _web3Errors = require("web3-errors");
var _web3Utils = require("web3-utils");
var _web3Validator = require("web3-validator");
var _constantsJs = require("./tx/constants.js");
var _schemasJs = require("./schemas.js");
var _transactionFactoryJs = require("./tx/transactionFactory.js");
var __awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
const parseAndValidatePrivateKey = (data, ignoreLength)=>{
    let privateKeyUint8Array;
    // To avoid the case of 1 character less in a hex string which is prefixed with '0' by using 'bytesToUint8Array'
    if (!ignoreLength && typeof data === "string" && (0, _web3Validator.isHexStrict)(data) && data.length !== 66) throw new (0, _web3Errors.PrivateKeyLengthError)();
    try {
        privateKeyUint8Array = data instanceof Uint8Array ? data : (0, _web3Utils.bytesToUint8Array)(data);
    } catch (_a) {
        throw new (0, _web3Errors.InvalidPrivateKeyError)();
    }
    if (!ignoreLength && privateKeyUint8Array.byteLength !== 32) throw new (0, _web3Errors.PrivateKeyLengthError)();
    return privateKeyUint8Array;
};
const hashMessage = (message)=>{
    const messageHex = (0, _web3Validator.isHexStrict)(message) ? message : (0, _web3Utils.utf8ToHex)(message);
    const messageBytes = (0, _web3Utils.hexToBytes)(messageHex);
    const preamble = (0, _web3Utils.hexToBytes)((0, _web3Utils.fromUtf8)(`\x19Ethereum Signed Message:\n${messageBytes.byteLength}`));
    const ethMessage = (0, _web3Utils.uint8ArrayConcat)(preamble, messageBytes);
    return (0, _web3Utils.sha3Raw)(ethMessage); // using keccak in web3-utils.sha3Raw instead of SHA3 (NIST Standard) as both are different
};
const sign = (data, privateKey)=>{
    const privateKeyUint8Array = parseAndValidatePrivateKey(privateKey);
    const hash = hashMessage(data);
    const signature = (0, _constantsJs.secp256k1).sign(hash.substring(2), privateKeyUint8Array);
    const signatureBytes = signature.toCompactRawBytes();
    const r = signature.r.toString(16).padStart(64, "0");
    const s = signature.s.toString(16).padStart(64, "0");
    const v = signature.recovery + 27;
    return {
        message: data,
        messageHash: hash,
        v: (0, _web3Utils.numberToHex)(v),
        r: `0x${r}`,
        s: `0x${s}`,
        signature: `${(0, _web3Utils.bytesToHex)(signatureBytes)}${v.toString(16)}`
    };
};
const signTransaction = (transaction, privateKey)=>__awaiter(void 0, void 0, void 0, function*() {
        const signedTx = transaction.sign((0, _web3Utils.hexToBytes)(privateKey));
        if ((0, _web3Validator.isNullish)(signedTx.v) || (0, _web3Validator.isNullish)(signedTx.r) || (0, _web3Validator.isNullish)(signedTx.s)) throw new (0, _web3Errors.TransactionSigningError)("Signer Error");
        const validationErrors = signedTx.validate(true);
        if (validationErrors.length > 0) {
            let errorString = "Signer Error ";
            for (const validationError of validationErrors)errorString += `${errorString} ${validationError}.`;
            throw new (0, _web3Errors.TransactionSigningError)(errorString);
        }
        const rawTx = (0, _web3Utils.bytesToHex)(signedTx.serialize());
        const txHash = (0, _web3Utils.sha3Raw)(rawTx); // using keccak in web3-utils.sha3Raw instead of SHA3 (NIST Standard) as both are different
        return {
            messageHash: (0, _web3Utils.bytesToHex)(signedTx.getMessageToSign(true)),
            v: `0x${signedTx.v.toString(16)}`,
            r: `0x${signedTx.r.toString(16).padStart(64, "0")}`,
            s: `0x${signedTx.s.toString(16).padStart(64, "0")}`,
            rawTransaction: rawTx,
            transactionHash: (0, _web3Utils.bytesToHex)(txHash)
        };
    });
const recoverTransaction = (rawTransaction)=>{
    if ((0, _web3Validator.isNullish)(rawTransaction)) throw new (0, _web3Errors.UndefinedRawTransactionError)();
    const tx = (0, _transactionFactoryJs.TransactionFactory).fromSerializedData((0, _web3Utils.hexToBytes)(rawTransaction));
    return (0, _web3Utils.toChecksumAddress)(tx.getSenderAddress().toString());
};
const recover = (data, signatureOrV, prefixedOrR, s, prefixed)=>{
    if (typeof data === "object") {
        const signatureStr = `${data.r}${data.s.slice(2)}${data.v.slice(2)}`;
        return recover(data.messageHash, signatureStr, prefixedOrR);
    }
    if (typeof signatureOrV === "string" && typeof prefixedOrR === "string" && !(0, _web3Validator.isNullish)(s)) {
        const signatureStr = `${prefixedOrR}${s.slice(2)}${signatureOrV.slice(2)}`;
        return recover(data, signatureStr, prefixed);
    }
    if ((0, _web3Validator.isNullish)(signatureOrV)) throw new (0, _web3Errors.InvalidSignatureError)("signature string undefined");
    const V_INDEX = 130; // r = first 32 bytes, s = second 32 bytes, v = last byte of signature
    const hashedMessage = prefixedOrR ? data : hashMessage(data);
    let v = parseInt(signatureOrV.substring(V_INDEX), 16); // 0x + r + s + v
    if (v > 26) v -= 27;
    const ecPublicKey = (0, _constantsJs.secp256k1).Signature.fromCompact(signatureOrV.slice(2, V_INDEX)).addRecoveryBit(v).recoverPublicKey(hashedMessage.replace("0x", "")).toRawBytes(false);
    const publicHash = (0, _web3Utils.sha3Raw)(ecPublicKey.subarray(1));
    const address = (0, _web3Utils.toChecksumAddress)(`0x${publicHash.slice(-40)}`);
    return address;
};
const privateKeyToAddress = (privateKey)=>{
    const privateKeyUint8Array = parseAndValidatePrivateKey(privateKey);
    // Get public key from private key in compressed format
    const publicKey = (0, _constantsJs.secp256k1).getPublicKey(privateKeyUint8Array, false);
    // Uncompressed ECDSA public key contains the prefix `0x04` which is not used in the Ethereum public key
    const publicKeyHash = (0, _web3Utils.sha3Raw)(publicKey.slice(1));
    // The hash is returned as 256 bits (32 bytes) or 64 hex characters
    // To get the address, take the last 20 bytes of the public hash
    const address = publicKeyHash.slice(-40);
    return (0, _web3Utils.toChecksumAddress)(`0x${address}`);
};
const privateKeyToPublicKey = (privateKey, isCompressed)=>{
    const privateKeyUint8Array = parseAndValidatePrivateKey(privateKey);
    // Get public key from private key in compressed format
    return `0x${(0, _web3Utils.bytesToHex)((0, _constantsJs.secp256k1).getPublicKey(privateKeyUint8Array, isCompressed)).slice(4)}`; // 0x and removing compression byte
};
const encrypt = (privateKey, password, options)=>__awaiter(void 0, void 0, void 0, function*() {
        var _a, _b, _c, _d, _e, _f, _g;
        const privateKeyUint8Array = parseAndValidatePrivateKey(privateKey);
        // if given salt or iv is a string, convert it to a Uint8Array
        let salt;
        if (options === null || options === void 0 ? void 0 : options.salt) salt = typeof options.salt === "string" ? (0, _web3Utils.hexToBytes)(options.salt) : options.salt;
        else salt = (0, _web3Utils.randomBytes)(32);
        if (!((0, _web3Validator.isString)(password) || password instanceof Uint8Array)) throw new (0, _web3Errors.InvalidPasswordError)();
        const uint8ArrayPassword = typeof password === "string" ? (0, _web3Utils.hexToBytes)((0, _web3Utils.utf8ToHex)(password)) : password;
        let initializationVector;
        if (options === null || options === void 0 ? void 0 : options.iv) {
            initializationVector = typeof options.iv === "string" ? (0, _web3Utils.hexToBytes)(options.iv) : options.iv;
            if (initializationVector.length !== 16) throw new (0, _web3Errors.IVLengthError)();
        } else initializationVector = (0, _web3Utils.randomBytes)(16);
        const kdf = (_a = options === null || options === void 0 ? void 0 : options.kdf) !== null && _a !== void 0 ? _a : "scrypt";
        let derivedKey;
        let kdfparams;
        // derive key from key derivation function
        if (kdf === "pbkdf2") {
            kdfparams = {
                dklen: (_b = options === null || options === void 0 ? void 0 : options.dklen) !== null && _b !== void 0 ? _b : 32,
                salt: (0, _web3Utils.bytesToHex)(salt).replace("0x", ""),
                c: (_c = options === null || options === void 0 ? void 0 : options.c) !== null && _c !== void 0 ? _c : 262144,
                prf: "hmac-sha256"
            };
            if (kdfparams.c < 1000) // error when c < 1000, pbkdf2 is less secure with less iterations
            throw new (0, _web3Errors.PBKDF2IterationsError)();
            derivedKey = (0, _pbkdf2Js.pbkdf2Sync)(uint8ArrayPassword, salt, kdfparams.c, kdfparams.dklen, "sha256");
        } else if (kdf === "scrypt") {
            kdfparams = {
                n: (_d = options === null || options === void 0 ? void 0 : options.n) !== null && _d !== void 0 ? _d : 8192,
                r: (_e = options === null || options === void 0 ? void 0 : options.r) !== null && _e !== void 0 ? _e : 8,
                p: (_f = options === null || options === void 0 ? void 0 : options.p) !== null && _f !== void 0 ? _f : 1,
                dklen: (_g = options === null || options === void 0 ? void 0 : options.dklen) !== null && _g !== void 0 ? _g : 32,
                salt: (0, _web3Utils.bytesToHex)(salt).replace("0x", "")
            };
            derivedKey = (0, _scryptJs.scryptSync)(uint8ArrayPassword, salt, kdfparams.n, kdfparams.p, kdfparams.r, kdfparams.dklen);
        } else throw new (0, _web3Errors.InvalidKdfError)();
        const cipher = yield (0, _aesJs.encrypt)(privateKeyUint8Array, derivedKey.slice(0, 16), initializationVector, "aes-128-ctr");
        const ciphertext = (0, _web3Utils.bytesToHex)(cipher).slice(2);
        const mac = (0, _web3Utils.sha3Raw)((0, _web3Utils.uint8ArrayConcat)(derivedKey.slice(16, 32), cipher)).replace("0x", "");
        return {
            version: 3,
            id: (0, _web3Utils.uuidV4)(),
            address: privateKeyToAddress(privateKeyUint8Array).toLowerCase().replace("0x", ""),
            crypto: {
                ciphertext,
                cipherparams: {
                    iv: (0, _web3Utils.bytesToHex)(initializationVector).replace("0x", "")
                },
                cipher: "aes-128-ctr",
                kdf,
                kdfparams,
                mac
            }
        };
    });
const privateKeyToAccount = (privateKey, ignoreLength)=>{
    const privateKeyUint8Array = parseAndValidatePrivateKey(privateKey, ignoreLength);
    return {
        address: privateKeyToAddress(privateKeyUint8Array),
        privateKey: (0, _web3Utils.bytesToHex)(privateKeyUint8Array),
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        signTransaction: (_tx)=>{
            throw new (0, _web3Errors.TransactionSigningError)("Do not have network access to sign the transaction");
        },
        sign: (data)=>sign(typeof data === "string" ? data : JSON.stringify(data), privateKeyUint8Array),
        encrypt: (password, options)=>__awaiter(void 0, void 0, void 0, function*() {
                return encrypt(privateKeyUint8Array, password, options);
            })
    };
};
const create = ()=>{
    const privateKey = (0, _constantsJs.secp256k1).utils.randomPrivateKey();
    return privateKeyToAccount(`${(0, _web3Utils.bytesToHex)(privateKey)}`);
};
const decrypt = (keystore, password, nonStrict)=>__awaiter(void 0, void 0, void 0, function*() {
        const json = typeof keystore === "object" ? keystore : JSON.parse(nonStrict ? keystore.toLowerCase() : keystore);
        (0, _web3Validator.validator).validateJSONSchema((0, _schemasJs.keyStoreSchema), json);
        if (json.version !== 3) throw new (0, _web3Errors.KeyStoreVersionError)();
        const uint8ArrayPassword = typeof password === "string" ? (0, _web3Utils.hexToBytes)((0, _web3Utils.utf8ToHex)(password)) : password;
        (0, _web3Validator.validator).validate([
            "bytes"
        ], [
            uint8ArrayPassword
        ]);
        let derivedKey;
        if (json.crypto.kdf === "scrypt") {
            const kdfparams = json.crypto.kdfparams;
            const uint8ArraySalt = typeof kdfparams.salt === "string" ? (0, _web3Utils.hexToBytes)(kdfparams.salt) : kdfparams.salt;
            derivedKey = (0, _scryptJs.scryptSync)(uint8ArrayPassword, uint8ArraySalt, kdfparams.n, kdfparams.p, kdfparams.r, kdfparams.dklen);
        } else if (json.crypto.kdf === "pbkdf2") {
            const kdfparams = json.crypto.kdfparams;
            const uint8ArraySalt = typeof kdfparams.salt === "string" ? (0, _web3Utils.hexToBytes)(kdfparams.salt) : kdfparams.salt;
            derivedKey = (0, _pbkdf2Js.pbkdf2Sync)(uint8ArrayPassword, uint8ArraySalt, kdfparams.c, kdfparams.dklen, "sha256");
        } else throw new (0, _web3Errors.InvalidKdfError)();
        const ciphertext = (0, _web3Utils.hexToBytes)(json.crypto.ciphertext);
        const mac = (0, _web3Utils.sha3Raw)((0, _web3Utils.uint8ArrayConcat)(derivedKey.slice(16, 32), ciphertext)).replace("0x", "");
        if (mac !== json.crypto.mac) throw new (0, _web3Errors.KeyDerivationError)();
        const seed = yield (0, _aesJs.decrypt)((0, _web3Utils.hexToBytes)(json.crypto.ciphertext), derivedKey.slice(0, 16), (0, _web3Utils.hexToBytes)(json.crypto.cipherparams.iv));
        return privateKeyToAccount(seed);
    });

},{"ethereum-cryptography/aes.js":"a3mb3","ethereum-cryptography/pbkdf2.js":"4GJeJ","ethereum-cryptography/scrypt.js":"9a3XF","web3-errors":"jDvsn","web3-utils":"8WsWI","web3-validator":"6HK71","./tx/constants.js":"3b6oT","./schemas.js":"4v3XI","./tx/transactionFactory.js":"25DH0","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"a3mb3":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "encrypt", ()=>encrypt);
parcelHelpers.export(exports, "decrypt", ()=>decrypt);
var _crypto = require("@noble/hashes/crypto");
var _utilsJs = require("./utils.js");
const crypto = {
    web: (0, _crypto.crypto)
};
function validateOpt(key, iv, mode) {
    if (!mode.startsWith("aes-")) throw new Error(`AES submodule doesn't support mode ${mode}`);
    if (iv.length !== 16) throw new Error("AES: wrong IV length");
    if (mode.startsWith("aes-128") && key.length !== 16 || mode.startsWith("aes-256") && key.length !== 32) throw new Error("AES: wrong key length");
}
async function getBrowserKey(mode, key, iv) {
    if (!crypto.web) throw new Error("Browser crypto not available.");
    let keyMode;
    if ([
        "aes-128-cbc",
        "aes-256-cbc"
    ].includes(mode)) keyMode = "cbc";
    if ([
        "aes-128-ctr",
        "aes-256-ctr"
    ].includes(mode)) keyMode = "ctr";
    if (!keyMode) throw new Error("AES: unsupported mode");
    const wKey = await crypto.web.subtle.importKey("raw", key, {
        name: `AES-${keyMode.toUpperCase()}`,
        length: key.length * 8
    }, true, [
        "encrypt",
        "decrypt"
    ]);
    // node.js uses whole 128 bit as a counter, without nonce, instead of 64 bit
    // recommended by NIST SP800-38A
    return [
        wKey,
        {
            name: `aes-${keyMode}`,
            iv,
            counter: iv,
            length: 128
        }
    ];
}
async function encrypt(msg, key, iv, mode = "aes-128-ctr", pkcs7PaddingEnabled = true) {
    validateOpt(key, iv, mode);
    if (crypto.web) {
        const [wKey, wOpt] = await getBrowserKey(mode, key, iv);
        const cipher = await crypto.web.subtle.encrypt(wOpt, wKey, msg);
        // Remove PKCS7 padding on cbc mode by stripping end of message
        let res = new Uint8Array(cipher);
        if (!pkcs7PaddingEnabled && wOpt.name === "aes-cbc" && !(msg.length % 16)) res = res.slice(0, -16);
        return res;
    } else if (crypto.node) {
        const cipher = crypto.node.createCipheriv(mode, key, iv);
        cipher.setAutoPadding(pkcs7PaddingEnabled);
        return (0, _utilsJs.concatBytes)(cipher.update(msg), cipher.final());
    } else throw new Error("The environment doesn't have AES module");
}
async function getPadding(cypherText, key, iv, mode) {
    const lastBlock = cypherText.slice(-16);
    for(let i = 0; i < 16; i++)// Undo xor of iv and fill with lastBlock ^ padding (16)
    lastBlock[i] ^= iv[i] ^ 16;
    const res = await encrypt(lastBlock, key, iv, mode);
    return res.slice(0, 16);
}
async function decrypt(cypherText, key, iv, mode = "aes-128-ctr", pkcs7PaddingEnabled = true) {
    validateOpt(key, iv, mode);
    if (crypto.web) {
        const [wKey, wOpt] = await getBrowserKey(mode, key, iv);
        // Add empty padding so Chrome will correctly decrypt message
        if (!pkcs7PaddingEnabled && wOpt.name === "aes-cbc") {
            const padding = await getPadding(cypherText, key, iv, mode);
            cypherText = (0, _utilsJs.concatBytes)(cypherText, padding);
        }
        const msg = await crypto.web.subtle.decrypt(wOpt, wKey, cypherText);
        const msgBytes = new Uint8Array(msg);
        // Safari always ignores padding (if no padding -> broken message)
        if (wOpt.name === "aes-cbc") {
            const encrypted = await encrypt(msgBytes, key, iv, mode);
            if (!(0, _utilsJs.equalsBytes)(encrypted, cypherText)) throw new Error("AES: wrong padding");
        }
        return msgBytes;
    } else if (crypto.node) {
        const decipher = crypto.node.createDecipheriv(mode, key, iv);
        decipher.setAutoPadding(pkcs7PaddingEnabled);
        return (0, _utilsJs.concatBytes)(decipher.update(cypherText), decipher.final());
    } else throw new Error("The environment doesn't have AES module");
}

},{"@noble/hashes/crypto":"1zMk1","./utils.js":"l6KG0","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4GJeJ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "pbkdf2", ()=>pbkdf2);
parcelHelpers.export(exports, "pbkdf2Sync", ()=>pbkdf2Sync);
var _pbkdf2 = require("@noble/hashes/pbkdf2");
var _sha256 = require("@noble/hashes/sha256");
var _sha512 = require("@noble/hashes/sha512");
var _utilsJs = require("./utils.js");
async function pbkdf2(password, salt, iterations, keylen, digest) {
    if (![
        "sha256",
        "sha512"
    ].includes(digest)) throw new Error("Only sha256 and sha512 are supported");
    (0, _utilsJs.assertBytes)(password);
    (0, _utilsJs.assertBytes)(salt);
    return (0, _pbkdf2.pbkdf2Async)(digest === "sha256" ? (0, _sha256.sha256) : (0, _sha512.sha512), password, salt, {
        c: iterations,
        dkLen: keylen
    });
}
function pbkdf2Sync(password, salt, iterations, keylen, digest) {
    if (![
        "sha256",
        "sha512"
    ].includes(digest)) throw new Error("Only sha256 and sha512 are supported");
    (0, _utilsJs.assertBytes)(password);
    (0, _utilsJs.assertBytes)(salt);
    return (0, _pbkdf2.pbkdf2)(digest === "sha256" ? (0, _sha256.sha256) : (0, _sha512.sha512), password, salt, {
        c: iterations,
        dkLen: keylen
    });
}

},{"@noble/hashes/pbkdf2":"8xpcg","@noble/hashes/sha256":"hPfLW","@noble/hashes/sha512":"V7q1R","./utils.js":"l6KG0","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8xpcg":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * PBKDF2-HMAC: RFC 2898 key derivation function
 * @param hash - hash function that would be used e.g. sha256
 * @param password - password from which a derived key is generated
 * @param salt - cryptographic salt
 * @param opts - {c, dkLen} where c is work factor and dkLen is output message size
 */ parcelHelpers.export(exports, "pbkdf2", ()=>pbkdf2);
parcelHelpers.export(exports, "pbkdf2Async", ()=>pbkdf2Async);
var _assertJs = require("./_assert.js");
var _assertJsDefault = parcelHelpers.interopDefault(_assertJs);
var _hmacJs = require("./hmac.js");
var _utilsJs = require("./utils.js");
// Common prologue and epilogue for sync/async functions
function pbkdf2Init(hash, _password, _salt, _opts) {
    (0, _assertJsDefault.default).hash(hash);
    const opts = (0, _utilsJs.checkOpts)({
        dkLen: 32,
        asyncTick: 10
    }, _opts);
    const { c, dkLen, asyncTick } = opts;
    (0, _assertJsDefault.default).number(c);
    (0, _assertJsDefault.default).number(dkLen);
    (0, _assertJsDefault.default).number(asyncTick);
    if (c < 1) throw new Error("PBKDF2: iterations (c) should be >= 1");
    const password = (0, _utilsJs.toBytes)(_password);
    const salt = (0, _utilsJs.toBytes)(_salt);
    // DK = PBKDF2(PRF, Password, Salt, c, dkLen);
    const DK = new Uint8Array(dkLen);
    // U1 = PRF(Password, Salt + INT_32_BE(i))
    const PRF = (0, _hmacJs.hmac).create(hash, password);
    const PRFSalt = PRF._cloneInto().update(salt);
    return {
        c,
        dkLen,
        asyncTick,
        DK,
        PRF,
        PRFSalt
    };
}
function pbkdf2Output(PRF, PRFSalt, DK, prfW, u) {
    PRF.destroy();
    PRFSalt.destroy();
    if (prfW) prfW.destroy();
    u.fill(0);
    return DK;
}
function pbkdf2(hash, password, salt, opts) {
    const { c, dkLen, DK, PRF, PRFSalt } = pbkdf2Init(hash, password, salt, opts);
    let prfW; // Working copy
    const arr = new Uint8Array(4);
    const view = (0, _utilsJs.createView)(arr);
    const u = new Uint8Array(PRF.outputLen);
    // DK = T1 + T2 + ⋯ + Tdklen/hlen
    for(let ti = 1, pos = 0; pos < dkLen; ti++, pos += PRF.outputLen){
        // Ti = F(Password, Salt, c, i)
        const Ti = DK.subarray(pos, pos + PRF.outputLen);
        view.setInt32(0, ti, false);
        // F(Password, Salt, c, i) = U1 ^ U2 ^ ⋯ ^ Uc
        // U1 = PRF(Password, Salt + INT_32_BE(i))
        (prfW = PRFSalt._cloneInto(prfW)).update(arr).digestInto(u);
        Ti.set(u.subarray(0, Ti.length));
        for(let ui = 1; ui < c; ui++){
            // Uc = PRF(Password, Uc−1)
            PRF._cloneInto(prfW).update(u).digestInto(u);
            for(let i = 0; i < Ti.length; i++)Ti[i] ^= u[i];
        }
    }
    return pbkdf2Output(PRF, PRFSalt, DK, prfW, u);
}
async function pbkdf2Async(hash, password, salt, opts) {
    const { c, dkLen, asyncTick, DK, PRF, PRFSalt } = pbkdf2Init(hash, password, salt, opts);
    let prfW; // Working copy
    const arr = new Uint8Array(4);
    const view = (0, _utilsJs.createView)(arr);
    const u = new Uint8Array(PRF.outputLen);
    // DK = T1 + T2 + ⋯ + Tdklen/hlen
    for(let ti = 1, pos = 0; pos < dkLen; ti++, pos += PRF.outputLen){
        // Ti = F(Password, Salt, c, i)
        const Ti = DK.subarray(pos, pos + PRF.outputLen);
        view.setInt32(0, ti, false);
        // F(Password, Salt, c, i) = U1 ^ U2 ^ ⋯ ^ Uc
        // U1 = PRF(Password, Salt + INT_32_BE(i))
        (prfW = PRFSalt._cloneInto(prfW)).update(arr).digestInto(u);
        Ti.set(u.subarray(0, Ti.length));
        await (0, _utilsJs.asyncLoop)(c - 1, asyncTick, (i)=>{
            // Uc = PRF(Password, Uc−1)
            PRF._cloneInto(prfW).update(u).digestInto(u);
            for(let i = 0; i < Ti.length; i++)Ti[i] ^= u[i];
        });
    }
    return pbkdf2Output(PRF, PRFSalt, DK, prfW, u);
}

},{"./_assert.js":"5Bz9G","./hmac.js":"1S2SD","./utils.js":"eYkBB","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1S2SD":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
// HMAC (RFC 2104)
parcelHelpers.export(exports, "HMAC", ()=>HMAC);
parcelHelpers.export(exports, "hmac", ()=>hmac);
var _assertJs = require("./_assert.js");
var _assertJsDefault = parcelHelpers.interopDefault(_assertJs);
var _utilsJs = require("./utils.js");
class HMAC extends (0, _utilsJs.Hash) {
    constructor(hash, _key){
        super();
        this.finished = false;
        this.destroyed = false;
        (0, _assertJsDefault.default).hash(hash);
        const key = (0, _utilsJs.toBytes)(_key);
        this.iHash = hash.create();
        if (typeof this.iHash.update !== "function") throw new Error("Expected instance of class which extends utils.Hash");
        this.blockLen = this.iHash.blockLen;
        this.outputLen = this.iHash.outputLen;
        const blockLen = this.blockLen;
        const pad = new Uint8Array(blockLen);
        // blockLen can be bigger than outputLen
        pad.set(key.length > blockLen ? hash.create().update(key).digest() : key);
        for(let i = 0; i < pad.length; i++)pad[i] ^= 0x36;
        this.iHash.update(pad);
        // By doing update (processing of first block) of outer hash here we can re-use it between multiple calls via clone
        this.oHash = hash.create();
        // Undo internal XOR && apply outer XOR
        for(let i = 0; i < pad.length; i++)pad[i] ^= 106;
        this.oHash.update(pad);
        pad.fill(0);
    }
    update(buf) {
        (0, _assertJsDefault.default).exists(this);
        this.iHash.update(buf);
        return this;
    }
    digestInto(out) {
        (0, _assertJsDefault.default).exists(this);
        (0, _assertJsDefault.default).bytes(out, this.outputLen);
        this.finished = true;
        this.iHash.digestInto(out);
        this.oHash.update(out);
        this.oHash.digestInto(out);
        this.destroy();
    }
    digest() {
        const out = new Uint8Array(this.oHash.outputLen);
        this.digestInto(out);
        return out;
    }
    _cloneInto(to) {
        // Create new instance without calling constructor since key already in state and we don't know it.
        to || (to = Object.create(Object.getPrototypeOf(this), {}));
        const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;
        to;
        to.finished = finished;
        to.destroyed = destroyed;
        to.blockLen = blockLen;
        to.outputLen = outputLen;
        to.oHash = oHash._cloneInto(to.oHash);
        to.iHash = iHash._cloneInto(to.iHash);
        return to;
    }
    destroy() {
        this.destroyed = true;
        this.oHash.destroy();
        this.iHash.destroy();
    }
}
const hmac = (hash, key, message)=>new HMAC(hash, key).update(message).digest();
hmac.create = (hash, key)=>new HMAC(hash, key);

},{"./_assert.js":"5Bz9G","./utils.js":"eYkBB","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hPfLW":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "sha256", ()=>sha256);
parcelHelpers.export(exports, "sha224", ()=>sha224);
var _sha2Js = require("./_sha2.js");
var _utilsJs = require("./utils.js");
// Choice: a ? b : c
const Chi = (a, b, c)=>a & b ^ ~a & c;
// Majority function, true if any two inpust is true
const Maj = (a, b, c)=>a & b ^ a & c ^ b & c;
// Round constants:
// first 32 bits of the fractional parts of the cube roots of the first 64 primes 2..311)
// prettier-ignore
const SHA256_K = new Uint32Array([
    0x428a2f98,
    0x71374491,
    0xb5c0fbcf,
    0xe9b5dba5,
    0x3956c25b,
    0x59f111f1,
    0x923f82a4,
    0xab1c5ed5,
    0xd807aa98,
    0x12835b01,
    0x243185be,
    0x550c7dc3,
    0x72be5d74,
    0x80deb1fe,
    0x9bdc06a7,
    0xc19bf174,
    0xe49b69c1,
    0xefbe4786,
    0x0fc19dc6,
    0x240ca1cc,
    0x2de92c6f,
    0x4a7484aa,
    0x5cb0a9dc,
    0x76f988da,
    0x983e5152,
    0xa831c66d,
    0xb00327c8,
    0xbf597fc7,
    0xc6e00bf3,
    0xd5a79147,
    0x06ca6351,
    0x14292967,
    0x27b70a85,
    0x2e1b2138,
    0x4d2c6dfc,
    0x53380d13,
    0x650a7354,
    0x766a0abb,
    0x81c2c92e,
    0x92722c85,
    0xa2bfe8a1,
    0xa81a664b,
    0xc24b8b70,
    0xc76c51a3,
    0xd192e819,
    0xd6990624,
    0xf40e3585,
    0x106aa070,
    0x19a4c116,
    0x1e376c08,
    0x2748774c,
    0x34b0bcb5,
    0x391c0cb3,
    0x4ed8aa4a,
    0x5b9cca4f,
    0x682e6ff3,
    0x748f82ee,
    0x78a5636f,
    0x84c87814,
    0x8cc70208,
    0x90befffa,
    0xa4506ceb,
    0xbef9a3f7,
    0xc67178f2
]);
// Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):
// prettier-ignore
const IV = new Uint32Array([
    0x6a09e667,
    0xbb67ae85,
    0x3c6ef372,
    0xa54ff53a,
    0x510e527f,
    0x9b05688c,
    0x1f83d9ab,
    0x5be0cd19
]);
// Temporary buffer, not used to store anything between runs
// Named this way because it matches specification.
const SHA256_W = new Uint32Array(64);
class SHA256 extends (0, _sha2Js.SHA2) {
    constructor(){
        super(64, 32, 8, false);
        // We cannot use array here since array allows indexing by variable
        // which means optimizer/compiler cannot use registers.
        this.A = IV[0] | 0;
        this.B = IV[1] | 0;
        this.C = IV[2] | 0;
        this.D = IV[3] | 0;
        this.E = IV[4] | 0;
        this.F = IV[5] | 0;
        this.G = IV[6] | 0;
        this.H = IV[7] | 0;
    }
    get() {
        const { A, B, C, D, E, F, G, H } = this;
        return [
            A,
            B,
            C,
            D,
            E,
            F,
            G,
            H
        ];
    }
    // prettier-ignore
    set(A, B, C, D, E, F, G, H) {
        this.A = A | 0;
        this.B = B | 0;
        this.C = C | 0;
        this.D = D | 0;
        this.E = E | 0;
        this.F = F | 0;
        this.G = G | 0;
        this.H = H | 0;
    }
    process(view, offset) {
        // Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array
        for(let i = 0; i < 16; i++, offset += 4)SHA256_W[i] = view.getUint32(offset, false);
        for(let i = 16; i < 64; i++){
            const W15 = SHA256_W[i - 15];
            const W2 = SHA256_W[i - 2];
            const s0 = (0, _utilsJs.rotr)(W15, 7) ^ (0, _utilsJs.rotr)(W15, 18) ^ W15 >>> 3;
            const s1 = (0, _utilsJs.rotr)(W2, 17) ^ (0, _utilsJs.rotr)(W2, 19) ^ W2 >>> 10;
            SHA256_W[i] = s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16] | 0;
        }
        // Compression function main loop, 64 rounds
        let { A, B, C, D, E, F, G, H } = this;
        for(let i = 0; i < 64; i++){
            const sigma1 = (0, _utilsJs.rotr)(E, 6) ^ (0, _utilsJs.rotr)(E, 11) ^ (0, _utilsJs.rotr)(E, 25);
            const T1 = H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i] | 0;
            const sigma0 = (0, _utilsJs.rotr)(A, 2) ^ (0, _utilsJs.rotr)(A, 13) ^ (0, _utilsJs.rotr)(A, 22);
            const T2 = sigma0 + Maj(A, B, C) | 0;
            H = G;
            G = F;
            F = E;
            E = D + T1 | 0;
            D = C;
            C = B;
            B = A;
            A = T1 + T2 | 0;
        }
        // Add the compressed chunk to the current hash value
        A = A + this.A | 0;
        B = B + this.B | 0;
        C = C + this.C | 0;
        D = D + this.D | 0;
        E = E + this.E | 0;
        F = F + this.F | 0;
        G = G + this.G | 0;
        H = H + this.H | 0;
        this.set(A, B, C, D, E, F, G, H);
    }
    roundClean() {
        SHA256_W.fill(0);
    }
    destroy() {
        this.set(0, 0, 0, 0, 0, 0, 0, 0);
        this.buffer.fill(0);
    }
}
// Constants from https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf
class SHA224 extends SHA256 {
    constructor(){
        super();
        this.A = -1056596264;
        this.B = 914150663;
        this.C = 812702999;
        this.D = -150054599;
        this.E = -4191439;
        this.F = 1750603025;
        this.G = 1694076839;
        this.H = -1090891868;
        this.outputLen = 28;
    }
}
const sha256 = (0, _utilsJs.wrapConstructor)(()=>new SHA256());
const sha224 = (0, _utilsJs.wrapConstructor)(()=>new SHA224());

},{"./_sha2.js":"klWn8","./utils.js":"eYkBB","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"klWn8":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
// Base SHA2 class (RFC 6234)
parcelHelpers.export(exports, "SHA2", ()=>SHA2);
var _assertJs = require("./_assert.js");
var _assertJsDefault = parcelHelpers.interopDefault(_assertJs);
var _utilsJs = require("./utils.js");
// Polyfill for Safari 14
function setBigUint64(view, byteOffset, value, isLE) {
    if (typeof view.setBigUint64 === "function") return view.setBigUint64(byteOffset, value, isLE);
    const _32n = BigInt(32);
    const _u32_max = BigInt(0xffffffff);
    const wh = Number(value >> _32n & _u32_max);
    const wl = Number(value & _u32_max);
    const h = isLE ? 4 : 0;
    const l = isLE ? 0 : 4;
    view.setUint32(byteOffset + h, wh, isLE);
    view.setUint32(byteOffset + l, wl, isLE);
}
class SHA2 extends (0, _utilsJs.Hash) {
    constructor(blockLen, outputLen, padOffset, isLE){
        super();
        this.blockLen = blockLen;
        this.outputLen = outputLen;
        this.padOffset = padOffset;
        this.isLE = isLE;
        this.finished = false;
        this.length = 0;
        this.pos = 0;
        this.destroyed = false;
        this.buffer = new Uint8Array(blockLen);
        this.view = (0, _utilsJs.createView)(this.buffer);
    }
    update(data) {
        (0, _assertJsDefault.default).exists(this);
        const { view, buffer, blockLen } = this;
        data = (0, _utilsJs.toBytes)(data);
        const len = data.length;
        for(let pos = 0; pos < len;){
            const take = Math.min(blockLen - this.pos, len - pos);
            // Fast path: we have at least one block in input, cast it to view and process
            if (take === blockLen) {
                const dataView = (0, _utilsJs.createView)(data);
                for(; blockLen <= len - pos; pos += blockLen)this.process(dataView, pos);
                continue;
            }
            buffer.set(data.subarray(pos, pos + take), this.pos);
            this.pos += take;
            pos += take;
            if (this.pos === blockLen) {
                this.process(view, 0);
                this.pos = 0;
            }
        }
        this.length += data.length;
        this.roundClean();
        return this;
    }
    digestInto(out) {
        (0, _assertJsDefault.default).exists(this);
        (0, _assertJsDefault.default).output(out, this);
        this.finished = true;
        // Padding
        // We can avoid allocation of buffer for padding completely if it
        // was previously not allocated here. But it won't change performance.
        const { buffer, view, blockLen, isLE } = this;
        let { pos } = this;
        // append the bit '1' to the message
        buffer[pos++] = 128;
        this.buffer.subarray(pos).fill(0);
        // we have less than padOffset left in buffer, so we cannot put length in current block, need process it and pad again
        if (this.padOffset > blockLen - pos) {
            this.process(view, 0);
            pos = 0;
        }
        // Pad until full block byte with zeros
        for(let i = pos; i < blockLen; i++)buffer[i] = 0;
        // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that
        // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.
        // So we just write lowest 64 bits of that value.
        setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);
        this.process(view, 0);
        const oview = (0, _utilsJs.createView)(out);
        const len = this.outputLen;
        // NOTE: we do division by 4 later, which should be fused in single op with modulo by JIT
        if (len % 4) throw new Error("_sha2: outputLen should be aligned to 32bit");
        const outLen = len / 4;
        const state = this.get();
        if (outLen > state.length) throw new Error("_sha2: outputLen bigger than state");
        for(let i = 0; i < outLen; i++)oview.setUint32(4 * i, state[i], isLE);
    }
    digest() {
        const { buffer, outputLen } = this;
        this.digestInto(buffer);
        const res = buffer.slice(0, outputLen);
        this.destroy();
        return res;
    }
    _cloneInto(to) {
        to || (to = new this.constructor());
        to.set(...this.get());
        const { blockLen, buffer, length, finished, destroyed, pos } = this;
        to.length = length;
        to.pos = pos;
        to.finished = finished;
        to.destroyed = destroyed;
        if (length % blockLen) to.buffer.set(buffer);
        return to;
    }
}

},{"./_assert.js":"5Bz9G","./utils.js":"eYkBB","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"V7q1R":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "SHA512", ()=>SHA512);
parcelHelpers.export(exports, "sha512", ()=>sha512);
parcelHelpers.export(exports, "sha512_224", ()=>sha512_224);
parcelHelpers.export(exports, "sha512_256", ()=>sha512_256);
parcelHelpers.export(exports, "sha384", ()=>sha384);
var _sha2Js = require("./_sha2.js");
var _u64Js = require("./_u64.js");
var _u64JsDefault = parcelHelpers.interopDefault(_u64Js);
var _utilsJs = require("./utils.js");
// Round contants (first 32 bits of the fractional parts of the cube roots of the first 80 primes 2..409):
// prettier-ignore
const [SHA512_Kh, SHA512_Kl] = (0, _u64JsDefault.default).split([
    "0x428a2f98d728ae22",
    "0x7137449123ef65cd",
    "0xb5c0fbcfec4d3b2f",
    "0xe9b5dba58189dbbc",
    "0x3956c25bf348b538",
    "0x59f111f1b605d019",
    "0x923f82a4af194f9b",
    "0xab1c5ed5da6d8118",
    "0xd807aa98a3030242",
    "0x12835b0145706fbe",
    "0x243185be4ee4b28c",
    "0x550c7dc3d5ffb4e2",
    "0x72be5d74f27b896f",
    "0x80deb1fe3b1696b1",
    "0x9bdc06a725c71235",
    "0xc19bf174cf692694",
    "0xe49b69c19ef14ad2",
    "0xefbe4786384f25e3",
    "0x0fc19dc68b8cd5b5",
    "0x240ca1cc77ac9c65",
    "0x2de92c6f592b0275",
    "0x4a7484aa6ea6e483",
    "0x5cb0a9dcbd41fbd4",
    "0x76f988da831153b5",
    "0x983e5152ee66dfab",
    "0xa831c66d2db43210",
    "0xb00327c898fb213f",
    "0xbf597fc7beef0ee4",
    "0xc6e00bf33da88fc2",
    "0xd5a79147930aa725",
    "0x06ca6351e003826f",
    "0x142929670a0e6e70",
    "0x27b70a8546d22ffc",
    "0x2e1b21385c26c926",
    "0x4d2c6dfc5ac42aed",
    "0x53380d139d95b3df",
    "0x650a73548baf63de",
    "0x766a0abb3c77b2a8",
    "0x81c2c92e47edaee6",
    "0x92722c851482353b",
    "0xa2bfe8a14cf10364",
    "0xa81a664bbc423001",
    "0xc24b8b70d0f89791",
    "0xc76c51a30654be30",
    "0xd192e819d6ef5218",
    "0xd69906245565a910",
    "0xf40e35855771202a",
    "0x106aa07032bbd1b8",
    "0x19a4c116b8d2d0c8",
    "0x1e376c085141ab53",
    "0x2748774cdf8eeb99",
    "0x34b0bcb5e19b48a8",
    "0x391c0cb3c5c95a63",
    "0x4ed8aa4ae3418acb",
    "0x5b9cca4f7763e373",
    "0x682e6ff3d6b2b8a3",
    "0x748f82ee5defb2fc",
    "0x78a5636f43172f60",
    "0x84c87814a1f0ab72",
    "0x8cc702081a6439ec",
    "0x90befffa23631e28",
    "0xa4506cebde82bde9",
    "0xbef9a3f7b2c67915",
    "0xc67178f2e372532b",
    "0xca273eceea26619c",
    "0xd186b8c721c0c207",
    "0xeada7dd6cde0eb1e",
    "0xf57d4f7fee6ed178",
    "0x06f067aa72176fba",
    "0x0a637dc5a2c898a6",
    "0x113f9804bef90dae",
    "0x1b710b35131c471b",
    "0x28db77f523047d84",
    "0x32caab7b40c72493",
    "0x3c9ebe0a15c9bebc",
    "0x431d67c49c100d4c",
    "0x4cc5d4becb3e42b6",
    "0x597f299cfc657e2a",
    "0x5fcb6fab3ad6faec",
    "0x6c44198c4a475817"
].map((n)=>BigInt(n)));
// Temporary buffer, not used to store anything between runs
const SHA512_W_H = new Uint32Array(80);
const SHA512_W_L = new Uint32Array(80);
class SHA512 extends (0, _sha2Js.SHA2) {
    constructor(){
        super(128, 64, 16, false);
        // We cannot use array here since array allows indexing by variable which means optimizer/compiler cannot use registers.
        // Also looks cleaner and easier to verify with spec.
        // Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):
        // h -- high 32 bits, l -- low 32 bits
        this.Ah = 1779033703;
        this.Al = -205731576;
        this.Bh = -1150833019;
        this.Bl = -2067093701;
        this.Ch = 1013904242;
        this.Cl = -23791573;
        this.Dh = -1521486534;
        this.Dl = 1595750129;
        this.Eh = 1359893119;
        this.El = -1377402159;
        this.Fh = -1694144372;
        this.Fl = 725511199;
        this.Gh = 528734635;
        this.Gl = -79577749;
        this.Hh = 1541459225;
        this.Hl = 327033209;
    }
    // prettier-ignore
    get() {
        const { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;
        return [
            Ah,
            Al,
            Bh,
            Bl,
            Ch,
            Cl,
            Dh,
            Dl,
            Eh,
            El,
            Fh,
            Fl,
            Gh,
            Gl,
            Hh,
            Hl
        ];
    }
    // prettier-ignore
    set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl) {
        this.Ah = Ah | 0;
        this.Al = Al | 0;
        this.Bh = Bh | 0;
        this.Bl = Bl | 0;
        this.Ch = Ch | 0;
        this.Cl = Cl | 0;
        this.Dh = Dh | 0;
        this.Dl = Dl | 0;
        this.Eh = Eh | 0;
        this.El = El | 0;
        this.Fh = Fh | 0;
        this.Fl = Fl | 0;
        this.Gh = Gh | 0;
        this.Gl = Gl | 0;
        this.Hh = Hh | 0;
        this.Hl = Hl | 0;
    }
    process(view, offset) {
        // Extend the first 16 words into the remaining 64 words w[16..79] of the message schedule array
        for(let i = 0; i < 16; i++, offset += 4){
            SHA512_W_H[i] = view.getUint32(offset);
            SHA512_W_L[i] = view.getUint32(offset += 4);
        }
        for(let i = 16; i < 80; i++){
            // s0 := (w[i-15] rightrotate 1) xor (w[i-15] rightrotate 8) xor (w[i-15] rightshift 7)
            const W15h = SHA512_W_H[i - 15] | 0;
            const W15l = SHA512_W_L[i - 15] | 0;
            const s0h = (0, _u64JsDefault.default).rotrSH(W15h, W15l, 1) ^ (0, _u64JsDefault.default).rotrSH(W15h, W15l, 8) ^ (0, _u64JsDefault.default).shrSH(W15h, W15l, 7);
            const s0l = (0, _u64JsDefault.default).rotrSL(W15h, W15l, 1) ^ (0, _u64JsDefault.default).rotrSL(W15h, W15l, 8) ^ (0, _u64JsDefault.default).shrSL(W15h, W15l, 7);
            // s1 := (w[i-2] rightrotate 19) xor (w[i-2] rightrotate 61) xor (w[i-2] rightshift 6)
            const W2h = SHA512_W_H[i - 2] | 0;
            const W2l = SHA512_W_L[i - 2] | 0;
            const s1h = (0, _u64JsDefault.default).rotrSH(W2h, W2l, 19) ^ (0, _u64JsDefault.default).rotrBH(W2h, W2l, 61) ^ (0, _u64JsDefault.default).shrSH(W2h, W2l, 6);
            const s1l = (0, _u64JsDefault.default).rotrSL(W2h, W2l, 19) ^ (0, _u64JsDefault.default).rotrBL(W2h, W2l, 61) ^ (0, _u64JsDefault.default).shrSL(W2h, W2l, 6);
            // SHA256_W[i] = s0 + s1 + SHA256_W[i - 7] + SHA256_W[i - 16];
            const SUMl = (0, _u64JsDefault.default).add4L(s0l, s1l, SHA512_W_L[i - 7], SHA512_W_L[i - 16]);
            const SUMh = (0, _u64JsDefault.default).add4H(SUMl, s0h, s1h, SHA512_W_H[i - 7], SHA512_W_H[i - 16]);
            SHA512_W_H[i] = SUMh | 0;
            SHA512_W_L[i] = SUMl | 0;
        }
        let { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;
        // Compression function main loop, 80 rounds
        for(let i = 0; i < 80; i++){
            // S1 := (e rightrotate 14) xor (e rightrotate 18) xor (e rightrotate 41)
            const sigma1h = (0, _u64JsDefault.default).rotrSH(Eh, El, 14) ^ (0, _u64JsDefault.default).rotrSH(Eh, El, 18) ^ (0, _u64JsDefault.default).rotrBH(Eh, El, 41);
            const sigma1l = (0, _u64JsDefault.default).rotrSL(Eh, El, 14) ^ (0, _u64JsDefault.default).rotrSL(Eh, El, 18) ^ (0, _u64JsDefault.default).rotrBL(Eh, El, 41);
            //const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;
            const CHIh = Eh & Fh ^ ~Eh & Gh;
            const CHIl = El & Fl ^ ~El & Gl;
            // T1 = H + sigma1 + Chi(E, F, G) + SHA512_K[i] + SHA512_W[i]
            // prettier-ignore
            const T1ll = (0, _u64JsDefault.default).add5L(Hl, sigma1l, CHIl, SHA512_Kl[i], SHA512_W_L[i]);
            const T1h = (0, _u64JsDefault.default).add5H(T1ll, Hh, sigma1h, CHIh, SHA512_Kh[i], SHA512_W_H[i]);
            const T1l = T1ll | 0;
            // S0 := (a rightrotate 28) xor (a rightrotate 34) xor (a rightrotate 39)
            const sigma0h = (0, _u64JsDefault.default).rotrSH(Ah, Al, 28) ^ (0, _u64JsDefault.default).rotrBH(Ah, Al, 34) ^ (0, _u64JsDefault.default).rotrBH(Ah, Al, 39);
            const sigma0l = (0, _u64JsDefault.default).rotrSL(Ah, Al, 28) ^ (0, _u64JsDefault.default).rotrBL(Ah, Al, 34) ^ (0, _u64JsDefault.default).rotrBL(Ah, Al, 39);
            const MAJh = Ah & Bh ^ Ah & Ch ^ Bh & Ch;
            const MAJl = Al & Bl ^ Al & Cl ^ Bl & Cl;
            Hh = Gh | 0;
            Hl = Gl | 0;
            Gh = Fh | 0;
            Gl = Fl | 0;
            Fh = Eh | 0;
            Fl = El | 0;
            ({ h: Eh, l: El } = (0, _u64JsDefault.default).add(Dh | 0, Dl | 0, T1h | 0, T1l | 0));
            Dh = Ch | 0;
            Dl = Cl | 0;
            Ch = Bh | 0;
            Cl = Bl | 0;
            Bh = Ah | 0;
            Bl = Al | 0;
            const All = (0, _u64JsDefault.default).add3L(T1l, sigma0l, MAJl);
            Ah = (0, _u64JsDefault.default).add3H(All, T1h, sigma0h, MAJh);
            Al = All | 0;
        }
        // Add the compressed chunk to the current hash value
        ({ h: Ah, l: Al } = (0, _u64JsDefault.default).add(this.Ah | 0, this.Al | 0, Ah | 0, Al | 0));
        ({ h: Bh, l: Bl } = (0, _u64JsDefault.default).add(this.Bh | 0, this.Bl | 0, Bh | 0, Bl | 0));
        ({ h: Ch, l: Cl } = (0, _u64JsDefault.default).add(this.Ch | 0, this.Cl | 0, Ch | 0, Cl | 0));
        ({ h: Dh, l: Dl } = (0, _u64JsDefault.default).add(this.Dh | 0, this.Dl | 0, Dh | 0, Dl | 0));
        ({ h: Eh, l: El } = (0, _u64JsDefault.default).add(this.Eh | 0, this.El | 0, Eh | 0, El | 0));
        ({ h: Fh, l: Fl } = (0, _u64JsDefault.default).add(this.Fh | 0, this.Fl | 0, Fh | 0, Fl | 0));
        ({ h: Gh, l: Gl } = (0, _u64JsDefault.default).add(this.Gh | 0, this.Gl | 0, Gh | 0, Gl | 0));
        ({ h: Hh, l: Hl } = (0, _u64JsDefault.default).add(this.Hh | 0, this.Hl | 0, Hh | 0, Hl | 0));
        this.set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl);
    }
    roundClean() {
        SHA512_W_H.fill(0);
        SHA512_W_L.fill(0);
    }
    destroy() {
        this.buffer.fill(0);
        this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
    }
}
class SHA512_224 extends SHA512 {
    constructor(){
        super();
        // h -- high 32 bits, l -- low 32 bits
        this.Ah = -1942145080;
        this.Al = 424955298;
        this.Bh = 1944164710;
        this.Bl = -1982016298;
        this.Ch = 502970286;
        this.Cl = 855612546;
        this.Dh = 1738396948;
        this.Dl = 1479516111;
        this.Eh = 258812777;
        this.El = 2077511080;
        this.Fh = 2011393907;
        this.Fl = 79989058;
        this.Gh = 1067287976;
        this.Gl = 1780299464;
        this.Hh = 286451373;
        this.Hl = -1848208735;
        this.outputLen = 28;
    }
}
class SHA512_256 extends SHA512 {
    constructor(){
        super();
        // h -- high 32 bits, l -- low 32 bits
        this.Ah = 573645204;
        this.Al = -64227540;
        this.Bh = -1621794909;
        this.Bl = -934517566;
        this.Ch = 596883563;
        this.Cl = 1867755857;
        this.Dh = -1774684391;
        this.Dl = 1497426621;
        this.Eh = -1775747358;
        this.El = -1467023389;
        this.Fh = -1101128155;
        this.Fl = 1401305490;
        this.Gh = 721525244;
        this.Gl = 746961066;
        this.Hh = 246885852;
        this.Hl = -2117784414;
        this.outputLen = 32;
    }
}
class SHA384 extends SHA512 {
    constructor(){
        super();
        // h -- high 32 bits, l -- low 32 bits
        this.Ah = -876896931;
        this.Al = -1056596264;
        this.Bh = 1654270250;
        this.Bl = 914150663;
        this.Ch = -1856437926;
        this.Cl = 812702999;
        this.Dh = 355462360;
        this.Dl = -150054599;
        this.Eh = 1731405415;
        this.El = -4191439;
        this.Fh = -1900787065;
        this.Fl = 1750603025;
        this.Gh = -619958771;
        this.Gl = 1694076839;
        this.Hh = 1203062813;
        this.Hl = -1090891868;
        this.outputLen = 48;
    }
}
const sha512 = (0, _utilsJs.wrapConstructor)(()=>new SHA512());
const sha512_224 = (0, _utilsJs.wrapConstructor)(()=>new SHA512_224());
const sha512_256 = (0, _utilsJs.wrapConstructor)(()=>new SHA512_256());
const sha384 = (0, _utilsJs.wrapConstructor)(()=>new SHA384());

},{"./_sha2.js":"klWn8","./_u64.js":"23WBG","./utils.js":"eYkBB","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9a3XF":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "scrypt", ()=>scrypt);
parcelHelpers.export(exports, "scryptSync", ()=>scryptSync);
var _scrypt = require("@noble/hashes/scrypt");
var _utilsJs = require("./utils.js");
async function scrypt(password, salt, n, p, r, dkLen, onProgress) {
    (0, _utilsJs.assertBytes)(password);
    (0, _utilsJs.assertBytes)(salt);
    return (0, _scrypt.scryptAsync)(password, salt, {
        N: n,
        r,
        p,
        dkLen,
        onProgress
    });
}
function scryptSync(password, salt, n, p, r, dkLen, onProgress) {
    (0, _utilsJs.assertBytes)(password);
    (0, _utilsJs.assertBytes)(salt);
    return (0, _scrypt.scrypt)(password, salt, {
        N: n,
        r,
        p,
        dkLen,
        onProgress
    });
}

},{"@noble/hashes/scrypt":"cfI28","./utils.js":"l6KG0","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cfI28":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Scrypt KDF from RFC 7914.
 * @param password - pass
 * @param salt - salt
 * @param opts - parameters
 * - `N` is cpu/mem work factor (power of 2 e.g. 2**18)
 * - `r` is block size (8 is common), fine-tunes sequential memory read size and performance
 * - `p` is parallelization factor (1 is common)
 * - `dkLen` is output key length in bytes e.g. 32.
 * - `asyncTick` - (default: 10) max time in ms for which async function can block execution
 * - `maxmem` - (default: `1024 ** 3 + 1024` aka 1GB+1KB). A limit that the app could use for scrypt
 * - `onProgress` - callback function that would be executed for progress report
 * @returns Derived key
 */ parcelHelpers.export(exports, "scrypt", ()=>scrypt);
/**
 * Scrypt KDF from RFC 7914.
 */ parcelHelpers.export(exports, "scryptAsync", ()=>scryptAsync);
var _assertJs = require("./_assert.js");
var _assertJsDefault = parcelHelpers.interopDefault(_assertJs);
var _sha256Js = require("./sha256.js");
var _pbkdf2Js = require("./pbkdf2.js");
var _utilsJs = require("./utils.js");
// RFC 7914 Scrypt KDF
// Left rotate for uint32
const rotl = (a, b)=>a << b | a >>> 32 - b;
// The main Scrypt loop: uses Salsa extensively.
// Six versions of the function were tried, this is the fastest one.
// prettier-ignore
function XorAndSalsa(prev, pi, input, ii, out, oi) {
    // Based on https://cr.yp.to/salsa20.html
    // Xor blocks
    let y00 = prev[pi++] ^ input[ii++], y01 = prev[pi++] ^ input[ii++];
    let y02 = prev[pi++] ^ input[ii++], y03 = prev[pi++] ^ input[ii++];
    let y04 = prev[pi++] ^ input[ii++], y05 = prev[pi++] ^ input[ii++];
    let y06 = prev[pi++] ^ input[ii++], y07 = prev[pi++] ^ input[ii++];
    let y08 = prev[pi++] ^ input[ii++], y09 = prev[pi++] ^ input[ii++];
    let y10 = prev[pi++] ^ input[ii++], y11 = prev[pi++] ^ input[ii++];
    let y12 = prev[pi++] ^ input[ii++], y13 = prev[pi++] ^ input[ii++];
    let y14 = prev[pi++] ^ input[ii++], y15 = prev[pi++] ^ input[ii++];
    // Save state to temporary variables (salsa)
    let x00 = y00, x01 = y01, x02 = y02, x03 = y03, x04 = y04, x05 = y05, x06 = y06, x07 = y07, x08 = y08, x09 = y09, x10 = y10, x11 = y11, x12 = y12, x13 = y13, x14 = y14, x15 = y15;
    // Main loop (salsa)
    for(let i = 0; i < 8; i += 2){
        x04 ^= rotl(x00 + x12 | 0, 7);
        x08 ^= rotl(x04 + x00 | 0, 9);
        x12 ^= rotl(x08 + x04 | 0, 13);
        x00 ^= rotl(x12 + x08 | 0, 18);
        x09 ^= rotl(x05 + x01 | 0, 7);
        x13 ^= rotl(x09 + x05 | 0, 9);
        x01 ^= rotl(x13 + x09 | 0, 13);
        x05 ^= rotl(x01 + x13 | 0, 18);
        x14 ^= rotl(x10 + x06 | 0, 7);
        x02 ^= rotl(x14 + x10 | 0, 9);
        x06 ^= rotl(x02 + x14 | 0, 13);
        x10 ^= rotl(x06 + x02 | 0, 18);
        x03 ^= rotl(x15 + x11 | 0, 7);
        x07 ^= rotl(x03 + x15 | 0, 9);
        x11 ^= rotl(x07 + x03 | 0, 13);
        x15 ^= rotl(x11 + x07 | 0, 18);
        x01 ^= rotl(x00 + x03 | 0, 7);
        x02 ^= rotl(x01 + x00 | 0, 9);
        x03 ^= rotl(x02 + x01 | 0, 13);
        x00 ^= rotl(x03 + x02 | 0, 18);
        x06 ^= rotl(x05 + x04 | 0, 7);
        x07 ^= rotl(x06 + x05 | 0, 9);
        x04 ^= rotl(x07 + x06 | 0, 13);
        x05 ^= rotl(x04 + x07 | 0, 18);
        x11 ^= rotl(x10 + x09 | 0, 7);
        x08 ^= rotl(x11 + x10 | 0, 9);
        x09 ^= rotl(x08 + x11 | 0, 13);
        x10 ^= rotl(x09 + x08 | 0, 18);
        x12 ^= rotl(x15 + x14 | 0, 7);
        x13 ^= rotl(x12 + x15 | 0, 9);
        x14 ^= rotl(x13 + x12 | 0, 13);
        x15 ^= rotl(x14 + x13 | 0, 18);
    }
    // Write output (salsa)
    out[oi++] = y00 + x00 | 0;
    out[oi++] = y01 + x01 | 0;
    out[oi++] = y02 + x02 | 0;
    out[oi++] = y03 + x03 | 0;
    out[oi++] = y04 + x04 | 0;
    out[oi++] = y05 + x05 | 0;
    out[oi++] = y06 + x06 | 0;
    out[oi++] = y07 + x07 | 0;
    out[oi++] = y08 + x08 | 0;
    out[oi++] = y09 + x09 | 0;
    out[oi++] = y10 + x10 | 0;
    out[oi++] = y11 + x11 | 0;
    out[oi++] = y12 + x12 | 0;
    out[oi++] = y13 + x13 | 0;
    out[oi++] = y14 + x14 | 0;
    out[oi++] = y15 + x15 | 0;
}
function BlockMix(input, ii, out, oi, r) {
    // The block B is r 128-byte chunks (which is equivalent of 2r 64-byte chunks)
    let head = oi + 0;
    let tail = oi + 16 * r;
    for(let i = 0; i < 16; i++)out[tail + i] = input[ii + (2 * r - 1) * 16 + i]; // X ← B[2r−1]
    for(let i = 0; i < r; i++, head += 16, ii += 16){
        // We write odd & even Yi at same time. Even: 0bXXXXX0 Odd:  0bXXXXX1
        XorAndSalsa(out, tail, input, ii, out, head); // head[i] = Salsa(blockIn[2*i] ^ tail[i-1])
        if (i > 0) tail += 16; // First iteration overwrites tmp value in tail
        XorAndSalsa(out, head, input, ii += 16, out, tail); // tail[i] = Salsa(blockIn[2*i+1] ^ head[i])
    }
}
// Common prologue and epilogue for sync/async functions
function scryptInit(password, salt, _opts) {
    // Maxmem - 1GB+1KB by default
    const opts = (0, _utilsJs.checkOpts)({
        dkLen: 32,
        asyncTick: 10,
        maxmem: 1024 ** 3 + 1024
    }, _opts);
    const { N, r, p, dkLen, asyncTick, maxmem, onProgress } = opts;
    (0, _assertJsDefault.default).number(N);
    (0, _assertJsDefault.default).number(r);
    (0, _assertJsDefault.default).number(p);
    (0, _assertJsDefault.default).number(dkLen);
    (0, _assertJsDefault.default).number(asyncTick);
    (0, _assertJsDefault.default).number(maxmem);
    if (onProgress !== undefined && typeof onProgress !== "function") throw new Error("progressCb should be function");
    const blockSize = 128 * r;
    const blockSize32 = blockSize / 4;
    if (N <= 1 || (N & N - 1) !== 0 || N >= 2 ** (blockSize / 8) || N > 2 ** 32) // NOTE: we limit N to be less than 2**32 because of 32 bit variant of Integrify function
    // There is no JS engines that allows alocate more than 4GB per single Uint8Array for now, but can change in future.
    throw new Error("Scrypt: N must be larger than 1, a power of 2, less than 2^(128 * r / 8) and less than 2^32");
    if (p < 0 || p > (2 ** 32 - 1) * 32 / blockSize) throw new Error("Scrypt: p must be a positive integer less than or equal to ((2^32 - 1) * 32) / (128 * r)");
    if (dkLen < 0 || dkLen > (2 ** 32 - 1) * 32) throw new Error("Scrypt: dkLen should be positive integer less than or equal to (2^32 - 1) * 32");
    const memUsed = blockSize * (N + p);
    if (memUsed > maxmem) throw new Error(`Scrypt: parameters too large, ${memUsed} (128 * r * (N + p)) > ${maxmem} (maxmem)`);
    // [B0...Bp−1] ← PBKDF2HMAC-SHA256(Passphrase, Salt, 1, blockSize*ParallelizationFactor)
    // Since it has only one iteration there is no reason to use async variant
    const B = (0, _pbkdf2Js.pbkdf2)((0, _sha256Js.sha256), password, salt, {
        c: 1,
        dkLen: blockSize * p
    });
    const B32 = (0, _utilsJs.u32)(B);
    // Re-used between parallel iterations. Array(iterations) of B
    const V = (0, _utilsJs.u32)(new Uint8Array(blockSize * N));
    const tmp = (0, _utilsJs.u32)(new Uint8Array(blockSize));
    let blockMixCb = ()=>{};
    if (onProgress) {
        const totalBlockMix = 2 * N * p;
        // Invoke callback if progress changes from 10.01 to 10.02
        // Allows to draw smooth progress bar on up to 8K screen
        const callbackPer = Math.max(Math.floor(totalBlockMix / 10000), 1);
        let blockMixCnt = 0;
        blockMixCb = ()=>{
            blockMixCnt++;
            if (onProgress && (!(blockMixCnt % callbackPer) || blockMixCnt === totalBlockMix)) onProgress(blockMixCnt / totalBlockMix);
        };
    }
    return {
        N,
        r,
        p,
        dkLen,
        blockSize32,
        V,
        B32,
        B,
        tmp,
        blockMixCb,
        asyncTick
    };
}
function scryptOutput(password, dkLen, B, V, tmp) {
    const res = (0, _pbkdf2Js.pbkdf2)((0, _sha256Js.sha256), password, B, {
        c: 1,
        dkLen
    });
    B.fill(0);
    V.fill(0);
    tmp.fill(0);
    return res;
}
function scrypt(password, salt, opts) {
    const { N, r, p, dkLen, blockSize32, V, B32, B, tmp, blockMixCb } = scryptInit(password, salt, opts);
    for(let pi = 0; pi < p; pi++){
        const Pi = blockSize32 * pi;
        for(let i = 0; i < blockSize32; i++)V[i] = B32[Pi + i]; // V[0] = B[i]
        for(let i = 0, pos = 0; i < N - 1; i++){
            BlockMix(V, pos, V, pos += blockSize32, r); // V[i] = BlockMix(V[i-1]);
            blockMixCb();
        }
        BlockMix(V, (N - 1) * blockSize32, B32, Pi, r); // Process last element
        blockMixCb();
        for(let i = 0; i < N; i++){
            // First u32 of the last 64-byte block (u32 is LE)
            const j = B32[Pi + blockSize32 - 16] % N; // j = Integrify(X) % iterations
            for(let k = 0; k < blockSize32; k++)tmp[k] = B32[Pi + k] ^ V[j * blockSize32 + k]; // tmp = B ^ V[j]
            BlockMix(tmp, 0, B32, Pi, r); // B = BlockMix(B ^ V[j])
            blockMixCb();
        }
    }
    return scryptOutput(password, dkLen, B, V, tmp);
}
async function scryptAsync(password, salt, opts) {
    const { N, r, p, dkLen, blockSize32, V, B32, B, tmp, blockMixCb, asyncTick } = scryptInit(password, salt, opts);
    for(let pi = 0; pi < p; pi++){
        const Pi = blockSize32 * pi;
        for(let i = 0; i < blockSize32; i++)V[i] = B32[Pi + i]; // V[0] = B[i]
        let pos = 0;
        await (0, _utilsJs.asyncLoop)(N - 1, asyncTick, (i)=>{
            BlockMix(V, pos, V, pos += blockSize32, r); // V[i] = BlockMix(V[i-1]);
            blockMixCb();
        });
        BlockMix(V, (N - 1) * blockSize32, B32, Pi, r); // Process last element
        blockMixCb();
        await (0, _utilsJs.asyncLoop)(N, asyncTick, (i)=>{
            // First u32 of the last 64-byte block (u32 is LE)
            const j = B32[Pi + blockSize32 - 16] % N; // j = Integrify(X) % iterations
            for(let k = 0; k < blockSize32; k++)tmp[k] = B32[Pi + k] ^ V[j * blockSize32 + k]; // tmp = B ^ V[j]
            BlockMix(tmp, 0, B32, Pi, r); // B = BlockMix(B ^ V[j])
            blockMixCb();
        });
    }
    return scryptOutput(password, dkLen, B, V, tmp);
}

},{"./_assert.js":"5Bz9G","./sha256.js":"hPfLW","./pbkdf2.js":"8xpcg","./utils.js":"eYkBB","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3b6oT":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "secp256k1", ()=>secp256k1);
parcelHelpers.export(exports, "MAX_UINT64", ()=>MAX_UINT64);
parcelHelpers.export(exports, "MAX_INTEGER", ()=>MAX_INTEGER);
parcelHelpers.export(exports, "SECP256K1_ORDER", ()=>SECP256K1_ORDER);
parcelHelpers.export(exports, "SECP256K1_ORDER_DIV_2", ()=>SECP256K1_ORDER_DIV_2);
/*
This file is part of web3.js.

web3.js is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

web3.js is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/ // eslint-disable-next-line import/extensions
var _secp256K1Js = require("ethereum-cryptography/secp256k1.js");
var _a;
const secp256k1 = (_a = _secp256K1Js.secp256k1) !== null && _a !== void 0 ? _a : _secp256K1Js;
const MAX_UINT64 = BigInt("0xffffffffffffffff");
const MAX_INTEGER = BigInt("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");
const SECP256K1_ORDER = secp256k1.CURVE.n;
const SECP256K1_ORDER_DIV_2 = SECP256K1_ORDER / BigInt(2);

},{"ethereum-cryptography/secp256k1.js":"7OctR","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7OctR":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "secp256k1", ()=>(0, _secp256K1.secp256k1));
var _secp256K1 = require("@noble/curves/secp256k1");

},{"@noble/curves/secp256k1":"k8xYt","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"k8xYt":[function(require,module,exports) {
/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "secp256k1", ()=>secp256k1);
parcelHelpers.export(exports, "schnorr", ()=>schnorr);
parcelHelpers.export(exports, "hashToCurve", ()=>hashToCurve);
parcelHelpers.export(exports, "encodeToCurve", ()=>encodeToCurve);
var _sha256 = require("@noble/hashes/sha256");
var _utils = require("@noble/hashes/utils");
var _modularJs = require("./abstract/modular.js");
var _weierstrassJs = require("./abstract/weierstrass.js");
var _utilsJs = require("./abstract/utils.js");
var _hashToCurveJs = require("./abstract/hash-to-curve.js");
var _shortwUtilsJs = require("./_shortw_utils.js");
const secp256k1P = BigInt("0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f");
const secp256k1N = BigInt("0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141");
const _1n = BigInt(1);
const _2n = BigInt(2);
const divNearest = (a, b)=>(a + b / _2n) / b;
/**
 * √n = n^((p+1)/4) for fields p = 3 mod 4. We unwrap the loop and multiply bit-by-bit.
 * (P+1n/4n).toString(2) would produce bits [223x 1, 0, 22x 1, 4x 0, 11, 00]
 */ function sqrtMod(y) {
    const P = secp256k1P;
    // prettier-ignore
    const _3n = BigInt(3), _6n = BigInt(6), _11n = BigInt(11), _22n = BigInt(22);
    // prettier-ignore
    const _23n = BigInt(23), _44n = BigInt(44), _88n = BigInt(88);
    const b2 = y * y * y % P; // x^3, 11
    const b3 = b2 * b2 * y % P; // x^7
    const b6 = (0, _modularJs.pow2)(b3, _3n, P) * b3 % P;
    const b9 = (0, _modularJs.pow2)(b6, _3n, P) * b3 % P;
    const b11 = (0, _modularJs.pow2)(b9, _2n, P) * b2 % P;
    const b22 = (0, _modularJs.pow2)(b11, _11n, P) * b11 % P;
    const b44 = (0, _modularJs.pow2)(b22, _22n, P) * b22 % P;
    const b88 = (0, _modularJs.pow2)(b44, _44n, P) * b44 % P;
    const b176 = (0, _modularJs.pow2)(b88, _88n, P) * b88 % P;
    const b220 = (0, _modularJs.pow2)(b176, _44n, P) * b44 % P;
    const b223 = (0, _modularJs.pow2)(b220, _3n, P) * b3 % P;
    const t1 = (0, _modularJs.pow2)(b223, _23n, P) * b22 % P;
    const t2 = (0, _modularJs.pow2)(t1, _6n, P) * b2 % P;
    const root = (0, _modularJs.pow2)(t2, _2n, P);
    if (!Fp.eql(Fp.sqr(root), y)) throw new Error("Cannot find square root");
    return root;
}
const Fp = (0, _modularJs.Field)(secp256k1P, undefined, undefined, {
    sqrt: sqrtMod
});
const secp256k1 = (0, _shortwUtilsJs.createCurve)({
    a: BigInt(0),
    b: BigInt(7),
    Fp,
    n: secp256k1N,
    // Base point (x, y) aka generator point
    Gx: BigInt("55066263022277343669578718895168534326250603453777594175500187360389116729240"),
    Gy: BigInt("32670510020758816978083085130507043184471273380659243275938904335757337482424"),
    h: BigInt(1),
    lowS: true,
    /**
     * secp256k1 belongs to Koblitz curves: it has efficiently computable endomorphism.
     * Endomorphism uses 2x less RAM, speeds up precomputation by 2x and ECDH / key recovery by 20%.
     * For precomputed wNAF it trades off 1/2 init time & 1/3 ram for 20% perf hit.
     * Explanation: https://gist.github.com/paulmillr/eb670806793e84df628a7c434a873066
     */ endo: {
        beta: BigInt("0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee"),
        splitScalar: (k)=>{
            const n = secp256k1N;
            const a1 = BigInt("0x3086d221a7d46bcde86c90e49284eb15");
            const b1 = -_1n * BigInt("0xe4437ed6010e88286f547fa90abfe4c3");
            const a2 = BigInt("0x114ca50f7a8e2f3f657c1108d9d44cfd8");
            const b2 = a1;
            const POW_2_128 = BigInt("0x100000000000000000000000000000000"); // (2n**128n).toString(16)
            const c1 = divNearest(b2 * k, n);
            const c2 = divNearest(-b1 * k, n);
            let k1 = (0, _modularJs.mod)(k - c1 * a1 - c2 * a2, n);
            let k2 = (0, _modularJs.mod)(-c1 * b1 - c2 * b2, n);
            const k1neg = k1 > POW_2_128;
            const k2neg = k2 > POW_2_128;
            if (k1neg) k1 = n - k1;
            if (k2neg) k2 = n - k2;
            if (k1 > POW_2_128 || k2 > POW_2_128) throw new Error("splitScalar: Endomorphism failed, k=" + k);
            return {
                k1neg,
                k1,
                k2neg,
                k2
            };
        }
    }
}, (0, _sha256.sha256));
// Schnorr signatures are superior to ECDSA from above. Below is Schnorr-specific BIP0340 code.
// https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki
const _0n = BigInt(0);
const fe = (x)=>typeof x === "bigint" && _0n < x && x < secp256k1P;
const ge = (x)=>typeof x === "bigint" && _0n < x && x < secp256k1N;
/** An object mapping tags to their tagged hash prefix of [SHA256(tag) | SHA256(tag)] */ const TAGGED_HASH_PREFIXES = {};
function taggedHash(tag, ...messages) {
    let tagP = TAGGED_HASH_PREFIXES[tag];
    if (tagP === undefined) {
        const tagH = (0, _sha256.sha256)(Uint8Array.from(tag, (c)=>c.charCodeAt(0)));
        tagP = (0, _utilsJs.concatBytes)(tagH, tagH);
        TAGGED_HASH_PREFIXES[tag] = tagP;
    }
    return (0, _sha256.sha256)((0, _utilsJs.concatBytes)(tagP, ...messages));
}
// ECDSA compact points are 33-byte. Schnorr is 32: we strip first byte 0x02 or 0x03
const pointToBytes = (point)=>point.toRawBytes(true).slice(1);
const numTo32b = (n)=>(0, _utilsJs.numberToBytesBE)(n, 32);
const modP = (x)=>(0, _modularJs.mod)(x, secp256k1P);
const modN = (x)=>(0, _modularJs.mod)(x, secp256k1N);
const Point = secp256k1.ProjectivePoint;
const GmulAdd = (Q, a, b)=>Point.BASE.multiplyAndAddUnsafe(Q, a, b);
// Calculate point, scalar and bytes
function schnorrGetExtPubKey(priv) {
    let d_ = secp256k1.utils.normPrivateKeyToScalar(priv); // same method executed in fromPrivateKey
    let p = Point.fromPrivateKey(d_); // P = d'⋅G; 0 < d' < n check is done inside
    const scalar = p.hasEvenY() ? d_ : modN(-d_);
    return {
        scalar: scalar,
        bytes: pointToBytes(p)
    };
}
/**
 * lift_x from BIP340. Convert 32-byte x coordinate to elliptic curve point.
 * @returns valid point checked for being on-curve
 */ function lift_x(x) {
    if (!fe(x)) throw new Error("bad x: need 0 < x < p"); // Fail if x ≥ p.
    const xx = modP(x * x);
    const c = modP(xx * x + BigInt(7)); // Let c = x³ + 7 mod p.
    let y = sqrtMod(c); // Let y = c^(p+1)/4 mod p.
    if (y % _2n !== _0n) y = modP(-y); // Return the unique point P such that x(P) = x and
    const p = new Point(x, y, _1n); // y(P) = y if y mod 2 = 0 or y(P) = p-y otherwise.
    p.assertValidity();
    return p;
}
/**
 * Create tagged hash, convert it to bigint, reduce modulo-n.
 */ function challenge(...args) {
    return modN((0, _utilsJs.bytesToNumberBE)(taggedHash("BIP0340/challenge", ...args)));
}
/**
 * Schnorr public key is just `x` coordinate of Point as per BIP340.
 */ function schnorrGetPublicKey(privateKey) {
    return schnorrGetExtPubKey(privateKey).bytes; // d'=int(sk). Fail if d'=0 or d'≥n. Ret bytes(d'⋅G)
}
/**
 * Creates Schnorr signature as per BIP340. Verifies itself before returning anything.
 * auxRand is optional and is not the sole source of k generation: bad CSPRNG won't be dangerous.
 */ function schnorrSign(message, privateKey, auxRand = (0, _utils.randomBytes)(32)) {
    const m = (0, _utilsJs.ensureBytes)("message", message);
    const { bytes: px, scalar: d } = schnorrGetExtPubKey(privateKey); // checks for isWithinCurveOrder
    const a = (0, _utilsJs.ensureBytes)("auxRand", auxRand, 32); // Auxiliary random data a: a 32-byte array
    const t = numTo32b(d ^ (0, _utilsJs.bytesToNumberBE)(taggedHash("BIP0340/aux", a))); // Let t be the byte-wise xor of bytes(d) and hash/aux(a)
    const rand = taggedHash("BIP0340/nonce", t, px, m); // Let rand = hash/nonce(t || bytes(P) || m)
    const k_ = modN((0, _utilsJs.bytesToNumberBE)(rand)); // Let k' = int(rand) mod n
    if (k_ === _0n) throw new Error("sign failed: k is zero"); // Fail if k' = 0.
    const { bytes: rx, scalar: k } = schnorrGetExtPubKey(k_); // Let R = k'⋅G.
    const e = challenge(rx, px, m); // Let e = int(hash/challenge(bytes(R) || bytes(P) || m)) mod n.
    const sig = new Uint8Array(64); // Let sig = bytes(R) || bytes((k + ed) mod n).
    sig.set(rx, 0);
    sig.set(numTo32b(modN(k + e * d)), 32);
    // If Verify(bytes(P), m, sig) (see below) returns failure, abort
    if (!schnorrVerify(sig, m, px)) throw new Error("sign: Invalid signature produced");
    return sig;
}
/**
 * Verifies Schnorr signature.
 * Will swallow errors & return false except for initial type validation of arguments.
 */ function schnorrVerify(signature, message, publicKey) {
    const sig = (0, _utilsJs.ensureBytes)("signature", signature, 64);
    const m = (0, _utilsJs.ensureBytes)("message", message);
    const pub = (0, _utilsJs.ensureBytes)("publicKey", publicKey, 32);
    try {
        const P = lift_x((0, _utilsJs.bytesToNumberBE)(pub)); // P = lift_x(int(pk)); fail if that fails
        const r = (0, _utilsJs.bytesToNumberBE)(sig.subarray(0, 32)); // Let r = int(sig[0:32]); fail if r ≥ p.
        if (!fe(r)) return false;
        const s = (0, _utilsJs.bytesToNumberBE)(sig.subarray(32, 64)); // Let s = int(sig[32:64]); fail if s ≥ n.
        if (!ge(s)) return false;
        const e = challenge(numTo32b(r), pointToBytes(P), m); // int(challenge(bytes(r)||bytes(P)||m))%n
        const R = GmulAdd(P, s, modN(-e)); // R = s⋅G - e⋅P
        if (!R || !R.hasEvenY() || R.toAffine().x !== r) return false; // -eP == (n-e)P
        return true; // Fail if is_infinite(R) / not has_even_y(R) / x(R) ≠ r.
    } catch (error) {
        return false;
    }
}
const schnorr = /* @__PURE__ */ (()=>({
        getPublicKey: schnorrGetPublicKey,
        sign: schnorrSign,
        verify: schnorrVerify,
        utils: {
            randomPrivateKey: secp256k1.utils.randomPrivateKey,
            lift_x,
            pointToBytes,
            numberToBytesBE: (0, _utilsJs.numberToBytesBE),
            bytesToNumberBE: (0, _utilsJs.bytesToNumberBE),
            taggedHash,
            mod: (0, _modularJs.mod)
        }
    }))();
const isoMap = /* @__PURE__ */ (()=>(0, _hashToCurveJs.isogenyMap)(Fp, [
        // xNum
        [
            "0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa8c7",
            "0x7d3d4c80bc321d5b9f315cea7fd44c5d595d2fc0bf63b92dfff1044f17c6581",
            "0x534c328d23f234e6e2a413deca25caece4506144037c40314ecbd0b53d9dd262",
            "0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa88c"
        ],
        // xDen
        [
            "0xd35771193d94918a9ca34ccbb7b640dd86cd409542f8487d9fe6b745781eb49b",
            "0xedadc6f64383dc1df7c4b2d51b54225406d36b641f5e41bbc52a56612a8c6d14",
            "0x0000000000000000000000000000000000000000000000000000000000000001"
        ],
        // yNum
        [
            "0x4bda12f684bda12f684bda12f684bda12f684bda12f684bda12f684b8e38e23c",
            "0xc75e0c32d5cb7c0fa9d0a54b12a0a6d5647ab046d686da6fdffc90fc201d71a3",
            "0x29a6194691f91a73715209ef6512e576722830a201be2018a765e85a9ecee931",
            "0x2f684bda12f684bda12f684bda12f684bda12f684bda12f684bda12f38e38d84"
        ],
        // yDen
        [
            "0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffff93b",
            "0x7a06534bb8bdb49fd5e9e6632722c2989467c1bfc8e8d978dfb425d2685c2573",
            "0x6484aa716545ca2cf3a70c3fa8fe337e0a3d21162f0d6299a7bf8192bfd2a76f",
            "0x0000000000000000000000000000000000000000000000000000000000000001"
        ]
    ].map((i)=>i.map((j)=>BigInt(j)))))();
const mapSWU = /* @__PURE__ */ (()=>(0, _weierstrassJs.mapToCurveSimpleSWU)(Fp, {
        A: BigInt("0x3f8731abdd661adca08a5558f0f5d272e953d363cb6f0e5d405447c01a444533"),
        B: BigInt("1771"),
        Z: Fp.create(BigInt("-11"))
    }))();
const htf = /* @__PURE__ */ (()=>(0, _hashToCurveJs.createHasher)(secp256k1.ProjectivePoint, (scalars)=>{
        const { x, y } = mapSWU(Fp.create(scalars[0]));
        return isoMap(x, y);
    }, {
        DST: "secp256k1_XMD:SHA-256_SSWU_RO_",
        encodeDST: "secp256k1_XMD:SHA-256_SSWU_NU_",
        p: Fp.ORDER,
        m: 1,
        k: 128,
        expand: "xmd",
        hash: (0, _sha256.sha256)
    }))();
const hashToCurve = /* @__PURE__ */ (()=>htf.hashToCurve)();
const encodeToCurve = /* @__PURE__ */ (()=>htf.encodeToCurve)();

},{"@noble/hashes/sha256":"hPfLW","@noble/hashes/utils":"eYkBB","./abstract/modular.js":"aWzDR","./abstract/weierstrass.js":"dvVS3","./abstract/utils.js":"6xA5w","./abstract/hash-to-curve.js":"xT4Ur","./_shortw_utils.js":"e5PHG","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aWzDR":[function(require,module,exports) {
/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */ // Utilities for modular arithmetics and finite fields
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
// Calculates a modulo b
parcelHelpers.export(exports, "mod", ()=>mod);
/**
 * Efficiently raise num to power and do modular division.
 * Unsafe in some contexts: uses ladder, so can expose bigint bits.
 * @example
 * pow(2n, 6n, 11n) // 64n % 11n == 9n
 */ // TODO: use field version && remove
parcelHelpers.export(exports, "pow", ()=>pow);
// Does x ^ (2 ^ power) mod p. pow2(30, 4) == 30 ^ (2 ^ 4)
parcelHelpers.export(exports, "pow2", ()=>pow2);
// Inverses number over modulo
parcelHelpers.export(exports, "invert", ()=>invert);
// Tonelli-Shanks algorithm
// Paper 1: https://eprint.iacr.org/2012/685.pdf (page 12)
// Paper 2: Square Roots from 1; 24, 51, 10 to Dan Shanks
parcelHelpers.export(exports, "tonelliShanks", ()=>tonelliShanks);
parcelHelpers.export(exports, "FpSqrt", ()=>FpSqrt);
parcelHelpers.export(exports, "isNegativeLE", ()=>isNegativeLE);
parcelHelpers.export(exports, "validateField", ()=>validateField);
// Generic field functions
parcelHelpers.export(exports, "FpPow", ()=>FpPow);
// 0 is non-invertible: non-batched version will throw on 0
parcelHelpers.export(exports, "FpInvertBatch", ()=>FpInvertBatch);
parcelHelpers.export(exports, "FpDiv", ()=>FpDiv);
// This function returns True whenever the value x is a square in the field F.
parcelHelpers.export(exports, "FpIsSquare", ()=>FpIsSquare);
// CURVE.n lengths
parcelHelpers.export(exports, "nLength", ()=>nLength);
/**
 * Initializes a galois field over prime. Non-primes are not supported for now.
 * Do not init in loop: slow. Very fragile: always run a benchmark on change.
 * Major performance gains:
 * a) non-normalized operations like mulN instead of mul
 * b) `Object.freeze`
 * c) Same object shape: never add or remove keys
 * @param ORDER prime positive bigint
 * @param bitLen how many bits the field consumes
 * @param isLE (def: false) if encoding / decoding should be in little-endian
 * @param redef optional faster redefinitions of sqrt and other methods
 */ parcelHelpers.export(exports, "Field", ()=>Field);
parcelHelpers.export(exports, "FpSqrtOdd", ()=>FpSqrtOdd);
parcelHelpers.export(exports, "FpSqrtEven", ()=>FpSqrtEven);
/**
 * FIPS 186 B.4.1-compliant "constant-time" private key generation utility.
 * Can take (n+8) or more bytes of uniform input e.g. from CSPRNG or KDF
 * and convert them into private scalar, with the modulo bias being negligible.
 * Needs at least 40 bytes of input for 32-byte private key.
 * https://research.kudelskisecurity.com/2020/07/28/the-definitive-guide-to-modulo-bias-and-how-to-avoid-it/
 * @param hash hash output from SHA3 or a similar function
 * @param groupOrder size of subgroup - (e.g. curveFn.CURVE.n)
 * @param isLE interpret hash bytes as LE num
 * @returns valid private scalar
 */ parcelHelpers.export(exports, "hashToPrivateScalar", ()=>hashToPrivateScalar);
var _utilsJs = require("./utils.js");
// prettier-ignore
const _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3);
// prettier-ignore
const _4n = BigInt(4), _5n = BigInt(5), _8n = BigInt(8);
// prettier-ignore
const _9n = BigInt(9), _16n = BigInt(16);
function mod(a, b) {
    const result = a % b;
    return result >= _0n ? result : b + result;
}
function pow(num, power, modulo) {
    if (modulo <= _0n || power < _0n) throw new Error("Expected power/modulo > 0");
    if (modulo === _1n) return _0n;
    let res = _1n;
    while(power > _0n){
        if (power & _1n) res = res * num % modulo;
        num = num * num % modulo;
        power >>= _1n;
    }
    return res;
}
function pow2(x, power, modulo) {
    let res = x;
    while(power-- > _0n){
        res *= res;
        res %= modulo;
    }
    return res;
}
function invert(number, modulo) {
    if (number === _0n || modulo <= _0n) throw new Error(`invert: expected positive integers, got n=${number} mod=${modulo}`);
    // Euclidean GCD https://brilliant.org/wiki/extended-euclidean-algorithm/
    // Fermat's little theorem "CT-like" version inv(n) = n^(m-2) mod m is 30x slower.
    let a = mod(number, modulo);
    let b = modulo;
    // prettier-ignore
    let x = _0n, y = _1n, u = _1n, v = _0n;
    while(a !== _0n){
        // JIT applies optimization if those two lines follow each other
        const q = b / a;
        const r = b % a;
        const m = x - u * q;
        const n = y - v * q;
        // prettier-ignore
        b = a, a = r, x = u, y = v, u = m, v = n;
    }
    const gcd = b;
    if (gcd !== _1n) throw new Error("invert: does not exist");
    return mod(x, modulo);
}
function tonelliShanks(P) {
    // Legendre constant: used to calculate Legendre symbol (a | p),
    // which denotes the value of a^((p-1)/2) (mod p).
    // (a | p) ≡ 1    if a is a square (mod p)
    // (a | p) ≡ -1   if a is not a square (mod p)
    // (a | p) ≡ 0    if a ≡ 0 (mod p)
    const legendreC = (P - _1n) / _2n;
    let Q, S, Z;
    // Step 1: By factoring out powers of 2 from p - 1,
    // find q and s such that p - 1 = q*(2^s) with q odd
    for(Q = P - _1n, S = 0; Q % _2n === _0n; Q /= _2n, S++);
    // Step 2: Select a non-square z such that (z | p) ≡ -1 and set c ≡ zq
    for(Z = _2n; Z < P && pow(Z, legendreC, P) !== P - _1n; Z++);
    // Fast-path
    if (S === 1) {
        const p1div4 = (P + _1n) / _4n;
        return function tonelliFast(Fp, n) {
            const root = Fp.pow(n, p1div4);
            if (!Fp.eql(Fp.sqr(root), n)) throw new Error("Cannot find square root");
            return root;
        };
    }
    // Slow-path
    const Q1div2 = (Q + _1n) / _2n;
    return function tonelliSlow(Fp, n) {
        // Step 0: Check that n is indeed a square: (n | p) should not be ≡ -1
        if (Fp.pow(n, legendreC) === Fp.neg(Fp.ONE)) throw new Error("Cannot find square root");
        let r = S;
        // TODO: will fail at Fp2/etc
        let g = Fp.pow(Fp.mul(Fp.ONE, Z), Q); // will update both x and b
        let x = Fp.pow(n, Q1div2); // first guess at the square root
        let b = Fp.pow(n, Q); // first guess at the fudge factor
        while(!Fp.eql(b, Fp.ONE)){
            if (Fp.eql(b, Fp.ZERO)) return Fp.ZERO; // https://en.wikipedia.org/wiki/Tonelli%E2%80%93Shanks_algorithm (4. If t = 0, return r = 0)
            // Find m such b^(2^m)==1
            let m = 1;
            for(let t2 = Fp.sqr(b); m < r; m++){
                if (Fp.eql(t2, Fp.ONE)) break;
                t2 = Fp.sqr(t2); // t2 *= t2
            }
            // NOTE: r-m-1 can be bigger than 32, need to convert to bigint before shift, otherwise there will be overflow
            const ge = Fp.pow(g, _1n << BigInt(r - m - 1)); // ge = 2^(r-m-1)
            g = Fp.sqr(ge); // g = ge * ge
            x = Fp.mul(x, ge); // x *= ge
            b = Fp.mul(b, g); // b *= g
            r = m;
        }
        return x;
    };
}
function FpSqrt(P) {
    // NOTE: different algorithms can give different roots, it is up to user to decide which one they want.
    // For example there is FpSqrtOdd/FpSqrtEven to choice root based on oddness (used for hash-to-curve).
    // P ≡ 3 (mod 4)
    // √n = n^((P+1)/4)
    if (P % _4n === _3n) {
        // Not all roots possible!
        // const ORDER =
        //   0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaabn;
        // const NUM = 72057594037927816n;
        const p1div4 = (P + _1n) / _4n;
        return function sqrt3mod4(Fp, n) {
            const root = Fp.pow(n, p1div4);
            // Throw if root**2 != n
            if (!Fp.eql(Fp.sqr(root), n)) throw new Error("Cannot find square root");
            return root;
        };
    }
    // Atkin algorithm for q ≡ 5 (mod 8), https://eprint.iacr.org/2012/685.pdf (page 10)
    if (P % _8n === _5n) {
        const c1 = (P - _5n) / _8n;
        return function sqrt5mod8(Fp, n) {
            const n2 = Fp.mul(n, _2n);
            const v = Fp.pow(n2, c1);
            const nv = Fp.mul(n, v);
            const i = Fp.mul(Fp.mul(nv, _2n), v);
            const root = Fp.mul(nv, Fp.sub(i, Fp.ONE));
            if (!Fp.eql(Fp.sqr(root), n)) throw new Error("Cannot find square root");
            return root;
        };
    }
    // P ≡ 9 (mod 16)
    _9n;
    // Other cases: Tonelli-Shanks algorithm
    return tonelliShanks(P);
}
const isNegativeLE = (num, modulo)=>(mod(num, modulo) & _1n) === _1n;
// prettier-ignore
const FIELD_FIELDS = [
    "create",
    "isValid",
    "is0",
    "neg",
    "inv",
    "sqrt",
    "sqr",
    "eql",
    "add",
    "sub",
    "mul",
    "pow",
    "div",
    "addN",
    "subN",
    "mulN",
    "sqrN"
];
function validateField(field) {
    const initial = {
        ORDER: "bigint",
        MASK: "bigint",
        BYTES: "isSafeInteger",
        BITS: "isSafeInteger"
    };
    const opts = FIELD_FIELDS.reduce((map, val)=>{
        map[val] = "function";
        return map;
    }, initial);
    return (0, _utilsJs.validateObject)(field, opts);
}
function FpPow(f, num, power) {
    // Should have same speed as pow for bigints
    // TODO: benchmark!
    if (power < _0n) throw new Error("Expected power > 0");
    if (power === _0n) return f.ONE;
    if (power === _1n) return num;
    let p = f.ONE;
    let d = num;
    while(power > _0n){
        if (power & _1n) p = f.mul(p, d);
        d = f.sqr(d);
        power >>= _1n;
    }
    return p;
}
function FpInvertBatch(f, nums) {
    const tmp = new Array(nums.length);
    // Walk from first to last, multiply them by each other MOD p
    const lastMultiplied = nums.reduce((acc, num, i)=>{
        if (f.is0(num)) return acc;
        tmp[i] = acc;
        return f.mul(acc, num);
    }, f.ONE);
    // Invert last element
    const inverted = f.inv(lastMultiplied);
    // Walk from last to first, multiply them by inverted each other MOD p
    nums.reduceRight((acc, num, i)=>{
        if (f.is0(num)) return acc;
        tmp[i] = f.mul(acc, tmp[i]);
        return f.mul(acc, num);
    }, inverted);
    return tmp;
}
function FpDiv(f, lhs, rhs) {
    return f.mul(lhs, typeof rhs === "bigint" ? invert(rhs, f.ORDER) : f.inv(rhs));
}
function FpIsSquare(f) {
    const legendreConst = (f.ORDER - _1n) / _2n; // Integer arithmetic
    return (x)=>{
        const p = f.pow(x, legendreConst);
        return f.eql(p, f.ZERO) || f.eql(p, f.ONE);
    };
}
function nLength(n, nBitLength) {
    // Bit size, byte size of CURVE.n
    const _nBitLength = nBitLength !== undefined ? nBitLength : n.toString(2).length;
    const nByteLength = Math.ceil(_nBitLength / 8);
    return {
        nBitLength: _nBitLength,
        nByteLength
    };
}
function Field(ORDER, bitLen, isLE = false, redef = {}) {
    if (ORDER <= _0n) throw new Error(`Expected Fp ORDER > 0, got ${ORDER}`);
    const { nBitLength: BITS, nByteLength: BYTES } = nLength(ORDER, bitLen);
    if (BYTES > 2048) throw new Error("Field lengths over 2048 bytes are not supported");
    const sqrtP = FpSqrt(ORDER);
    const f = Object.freeze({
        ORDER,
        BITS,
        BYTES,
        MASK: (0, _utilsJs.bitMask)(BITS),
        ZERO: _0n,
        ONE: _1n,
        create: (num)=>mod(num, ORDER),
        isValid: (num)=>{
            if (typeof num !== "bigint") throw new Error(`Invalid field element: expected bigint, got ${typeof num}`);
            return _0n <= num && num < ORDER; // 0 is valid element, but it's not invertible
        },
        is0: (num)=>num === _0n,
        isOdd: (num)=>(num & _1n) === _1n,
        neg: (num)=>mod(-num, ORDER),
        eql: (lhs, rhs)=>lhs === rhs,
        sqr: (num)=>mod(num * num, ORDER),
        add: (lhs, rhs)=>mod(lhs + rhs, ORDER),
        sub: (lhs, rhs)=>mod(lhs - rhs, ORDER),
        mul: (lhs, rhs)=>mod(lhs * rhs, ORDER),
        pow: (num, power)=>FpPow(f, num, power),
        div: (lhs, rhs)=>mod(lhs * invert(rhs, ORDER), ORDER),
        // Same as above, but doesn't normalize
        sqrN: (num)=>num * num,
        addN: (lhs, rhs)=>lhs + rhs,
        subN: (lhs, rhs)=>lhs - rhs,
        mulN: (lhs, rhs)=>lhs * rhs,
        inv: (num)=>invert(num, ORDER),
        sqrt: redef.sqrt || ((n)=>sqrtP(f, n)),
        invertBatch: (lst)=>FpInvertBatch(f, lst),
        // TODO: do we really need constant cmov?
        // We don't have const-time bigints anyway, so probably will be not very useful
        cmov: (a, b, c)=>c ? b : a,
        toBytes: (num)=>isLE ? (0, _utilsJs.numberToBytesLE)(num, BYTES) : (0, _utilsJs.numberToBytesBE)(num, BYTES),
        fromBytes: (bytes)=>{
            if (bytes.length !== BYTES) throw new Error(`Fp.fromBytes: expected ${BYTES}, got ${bytes.length}`);
            return isLE ? (0, _utilsJs.bytesToNumberLE)(bytes) : (0, _utilsJs.bytesToNumberBE)(bytes);
        }
    });
    return Object.freeze(f);
}
function FpSqrtOdd(Fp, elm) {
    if (!Fp.isOdd) throw new Error(`Field doesn't have isOdd`);
    const root = Fp.sqrt(elm);
    return Fp.isOdd(root) ? root : Fp.neg(root);
}
function FpSqrtEven(Fp, elm) {
    if (!Fp.isOdd) throw new Error(`Field doesn't have isOdd`);
    const root = Fp.sqrt(elm);
    return Fp.isOdd(root) ? Fp.neg(root) : root;
}
function hashToPrivateScalar(hash, groupOrder, isLE = false) {
    hash = (0, _utilsJs.ensureBytes)("privateHash", hash);
    const hashLen = hash.length;
    const minLen = nLength(groupOrder).nByteLength + 8;
    if (minLen < 24 || hashLen < minLen || hashLen > 1024) throw new Error(`hashToPrivateScalar: expected ${minLen}-1024 bytes of input, got ${hashLen}`);
    const num = isLE ? (0, _utilsJs.bytesToNumberLE)(hash) : (0, _utilsJs.bytesToNumberBE)(hash);
    return mod(num, groupOrder - _1n) + _1n;
}

},{"./utils.js":"6xA5w","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6xA5w":[function(require,module,exports) {
/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */ // 100 lines of code in the file are duplicated from noble-hashes (utils).
// This is OK: `abstract` directory does not use noble-hashes.
// User may opt-in into using different hashing library. This way, noble-hashes
// won't be included into their bundle.
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'
 */ parcelHelpers.export(exports, "bytesToHex", ()=>bytesToHex);
parcelHelpers.export(exports, "numberToHexUnpadded", ()=>numberToHexUnpadded);
parcelHelpers.export(exports, "hexToNumber", ()=>hexToNumber);
/**
 * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])
 */ parcelHelpers.export(exports, "hexToBytes", ()=>hexToBytes);
// BE: Big Endian, LE: Little Endian
parcelHelpers.export(exports, "bytesToNumberBE", ()=>bytesToNumberBE);
parcelHelpers.export(exports, "bytesToNumberLE", ()=>bytesToNumberLE);
parcelHelpers.export(exports, "numberToBytesBE", ()=>numberToBytesBE);
parcelHelpers.export(exports, "numberToBytesLE", ()=>numberToBytesLE);
// Unpadded, rarely used
parcelHelpers.export(exports, "numberToVarBytesBE", ()=>numberToVarBytesBE);
/**
 * Takes hex string or Uint8Array, converts to Uint8Array.
 * Validates output length.
 * Will throw error for other types.
 * @param title descriptive title for an error e.g. 'private key'
 * @param hex hex string or Uint8Array
 * @param expectedLength optional, will compare to result array's length
 * @returns
 */ parcelHelpers.export(exports, "ensureBytes", ()=>ensureBytes);
/**
 * Copies several Uint8Arrays into one.
 */ parcelHelpers.export(exports, "concatBytes", ()=>concatBytes);
parcelHelpers.export(exports, "equalBytes", ()=>equalBytes);
/**
 * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])
 */ parcelHelpers.export(exports, "utf8ToBytes", ()=>utf8ToBytes);
// Bit operations
/**
 * Calculates amount of bits in a bigint.
 * Same as `n.toString(2).length`
 */ parcelHelpers.export(exports, "bitLen", ()=>bitLen);
/**
 * Gets single bit at position.
 * NOTE: first bit position is 0 (same as arrays)
 * Same as `!!+Array.from(n.toString(2)).reverse()[pos]`
 */ parcelHelpers.export(exports, "bitGet", ()=>bitGet);
parcelHelpers.export(exports, "bitSet", ()=>bitSet);
parcelHelpers.export(exports, "bitMask", ()=>bitMask);
/**
 * Minimal HMAC-DRBG from NIST 800-90 for RFC6979 sigs.
 * @returns function that will call DRBG until 2nd arg returns something meaningful
 * @example
 *   const drbg = createHmacDRBG<Key>(32, 32, hmac);
 *   drbg(seed, bytesToKey); // bytesToKey must return Key or undefined
 */ parcelHelpers.export(exports, "createHmacDrbg", ()=>createHmacDrbg);
// type Record<K extends string | number | symbol, T> = { [P in K]: T; }
parcelHelpers.export(exports, "validateObject", ()=>validateObject) // validate type tests
 // const o: { a: number; b: number; c: number } = { a: 1, b: 5, c: 6 };
 // const z0 = validateObject(o, { a: 'isSafeInteger' }, { c: 'bigint' }); // Ok!
 // // Should fail type-check
 // const z1 = validateObject(o, { a: 'tmp' }, { c: 'zz' });
 // const z2 = validateObject(o, { a: 'isSafeInteger' }, { c: 'zz' });
 // const z3 = validateObject(o, { test: 'boolean', z: 'bug' });
 // const z4 = validateObject(o, { a: 'boolean', z: 'bug' });
;
const _0n = BigInt(0);
const _1n = BigInt(1);
const _2n = BigInt(2);
const u8a = (a)=>a instanceof Uint8Array;
const hexes = Array.from({
    length: 256
}, (v, i)=>i.toString(16).padStart(2, "0"));
function bytesToHex(bytes) {
    if (!u8a(bytes)) throw new Error("Uint8Array expected");
    // pre-caching improves the speed 6x
    let hex = "";
    for(let i = 0; i < bytes.length; i++)hex += hexes[bytes[i]];
    return hex;
}
function numberToHexUnpadded(num) {
    const hex = num.toString(16);
    return hex.length & 1 ? `0${hex}` : hex;
}
function hexToNumber(hex) {
    if (typeof hex !== "string") throw new Error("hex string expected, got " + typeof hex);
    // Big Endian
    return BigInt(hex === "" ? "0" : `0x${hex}`);
}
function hexToBytes(hex) {
    if (typeof hex !== "string") throw new Error("hex string expected, got " + typeof hex);
    const len = hex.length;
    if (len % 2) throw new Error("padded hex string expected, got unpadded hex of length " + len);
    const array = new Uint8Array(len / 2);
    for(let i = 0; i < array.length; i++){
        const j = i * 2;
        const hexByte = hex.slice(j, j + 2);
        const byte = Number.parseInt(hexByte, 16);
        if (Number.isNaN(byte) || byte < 0) throw new Error("Invalid byte sequence");
        array[i] = byte;
    }
    return array;
}
function bytesToNumberBE(bytes) {
    return hexToNumber(bytesToHex(bytes));
}
function bytesToNumberLE(bytes) {
    if (!u8a(bytes)) throw new Error("Uint8Array expected");
    return hexToNumber(bytesToHex(Uint8Array.from(bytes).reverse()));
}
function numberToBytesBE(n, len) {
    return hexToBytes(n.toString(16).padStart(len * 2, "0"));
}
function numberToBytesLE(n, len) {
    return numberToBytesBE(n, len).reverse();
}
function numberToVarBytesBE(n) {
    return hexToBytes(numberToHexUnpadded(n));
}
function ensureBytes(title, hex, expectedLength) {
    let res;
    if (typeof hex === "string") try {
        res = hexToBytes(hex);
    } catch (e) {
        throw new Error(`${title} must be valid hex string, got "${hex}". Cause: ${e}`);
    }
    else if (u8a(hex)) // Uint8Array.from() instead of hash.slice() because node.js Buffer
    // is instance of Uint8Array, and its slice() creates **mutable** copy
    res = Uint8Array.from(hex);
    else throw new Error(`${title} must be hex string or Uint8Array`);
    const len = res.length;
    if (typeof expectedLength === "number" && len !== expectedLength) throw new Error(`${title} expected ${expectedLength} bytes, got ${len}`);
    return res;
}
function concatBytes(...arrays) {
    const r = new Uint8Array(arrays.reduce((sum, a)=>sum + a.length, 0));
    let pad = 0; // walk through each item, ensure they have proper type
    arrays.forEach((a)=>{
        if (!u8a(a)) throw new Error("Uint8Array expected");
        r.set(a, pad);
        pad += a.length;
    });
    return r;
}
function equalBytes(b1, b2) {
    // We don't care about timing attacks here
    if (b1.length !== b2.length) return false;
    for(let i = 0; i < b1.length; i++)if (b1[i] !== b2[i]) return false;
    return true;
}
function utf8ToBytes(str) {
    if (typeof str !== "string") throw new Error(`utf8ToBytes expected string, got ${typeof str}`);
    return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809
}
function bitLen(n) {
    let len;
    for(len = 0; n > _0n; n >>= _1n, len += 1);
    return len;
}
function bitGet(n, pos) {
    return n >> BigInt(pos) & _1n;
}
const bitSet = (n, pos, value)=>{
    return n | (value ? _1n : _0n) << BigInt(pos);
};
const bitMask = (n)=>(_2n << BigInt(n - 1)) - _1n;
// DRBG
const u8n = (data)=>new Uint8Array(data); // creates Uint8Array
const u8fr = (arr)=>Uint8Array.from(arr); // another shortcut
function createHmacDrbg(hashLen, qByteLen, hmacFn) {
    if (typeof hashLen !== "number" || hashLen < 2) throw new Error("hashLen must be a number");
    if (typeof qByteLen !== "number" || qByteLen < 2) throw new Error("qByteLen must be a number");
    if (typeof hmacFn !== "function") throw new Error("hmacFn must be a function");
    // Step B, Step C: set hashLen to 8*ceil(hlen/8)
    let v = u8n(hashLen); // Minimal non-full-spec HMAC-DRBG from NIST 800-90 for RFC6979 sigs.
    let k = u8n(hashLen); // Steps B and C of RFC6979 3.2: set hashLen, in our case always same
    let i = 0; // Iterations counter, will throw when over 1000
    const reset = ()=>{
        v.fill(1);
        k.fill(0);
        i = 0;
    };
    const h = (...b)=>hmacFn(k, v, ...b); // hmac(k)(v, ...values)
    const reseed = (seed = u8n())=>{
        // HMAC-DRBG reseed() function. Steps D-G
        k = h(u8fr([
            0x00
        ]), seed); // k = hmac(k || v || 0x00 || seed)
        v = h(); // v = hmac(k || v)
        if (seed.length === 0) return;
        k = h(u8fr([
            0x01
        ]), seed); // k = hmac(k || v || 0x01 || seed)
        v = h(); // v = hmac(k || v)
    };
    const gen = ()=>{
        // HMAC-DRBG generate() function
        if (i++ >= 1000) throw new Error("drbg: tried 1000 values");
        let len = 0;
        const out = [];
        while(len < qByteLen){
            v = h();
            const sl = v.slice();
            out.push(sl);
            len += v.length;
        }
        return concatBytes(...out);
    };
    const genUntil = (seed, pred)=>{
        reset();
        reseed(seed); // Steps D-G
        let res = undefined; // Step H: grind until k is in [1..n-1]
        while(!(res = pred(gen())))reseed();
        reset();
        return res;
    };
    return genUntil;
}
// Validating curves and fields
const validatorFns = {
    bigint: (val)=>typeof val === "bigint",
    function: (val)=>typeof val === "function",
    boolean: (val)=>typeof val === "boolean",
    string: (val)=>typeof val === "string",
    isSafeInteger: (val)=>Number.isSafeInteger(val),
    array: (val)=>Array.isArray(val),
    field: (val, object)=>object.Fp.isValid(val),
    hash: (val)=>typeof val === "function" && Number.isSafeInteger(val.outputLen)
};
function validateObject(object, validators, optValidators = {}) {
    const checkField = (fieldName, type, isOptional)=>{
        const checkVal = validatorFns[type];
        if (typeof checkVal !== "function") throw new Error(`Invalid validator "${type}", expected function`);
        const val = object[fieldName];
        if (isOptional && val === undefined) return;
        if (!checkVal(val, object)) throw new Error(`Invalid param ${String(fieldName)}=${val} (${typeof val}), expected ${type}`);
    };
    for (const [fieldName, type] of Object.entries(validators))checkField(fieldName, type, false);
    for (const [fieldName, type] of Object.entries(optValidators))checkField(fieldName, type, true);
    return object;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dvVS3":[function(require,module,exports) {
/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */ // Short Weierstrass curve. The formula is: y² = x³ + ax + b
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "DER", ()=>DER);
parcelHelpers.export(exports, "weierstrassPoints", ()=>weierstrassPoints);
parcelHelpers.export(exports, "weierstrass", ()=>weierstrass);
/**
 * Implementation of the Shallue and van de Woestijne method for any weierstrass curve.
 * TODO: check if there is a way to merge this with uvRatio in Edwards; move to modular.
 * b = True and y = sqrt(u / v) if (u / v) is square in F, and
 * b = False and y = sqrt(Z * (u / v)) otherwise.
 * @param Fp
 * @param Z
 * @returns
 */ parcelHelpers.export(exports, "SWUFpSqrtRatio", ()=>SWUFpSqrtRatio);
/**
 * From draft-irtf-cfrg-hash-to-curve-16
 */ parcelHelpers.export(exports, "mapToCurveSimpleSWU", ()=>mapToCurveSimpleSWU);
var _modularJs = require("./modular.js");
var _utilsJs = require("./utils.js");
var _curveJs = require("./curve.js");
function validatePointOpts(curve) {
    const opts = (0, _curveJs.validateBasic)(curve);
    _utilsJs.validateObject(opts, {
        a: "field",
        b: "field"
    }, {
        allowedPrivateKeyLengths: "array",
        wrapPrivateKey: "boolean",
        isTorsionFree: "function",
        clearCofactor: "function",
        allowInfinityPoint: "boolean",
        fromBytes: "function",
        toBytes: "function"
    });
    const { endo, Fp, a } = opts;
    if (endo) {
        if (!Fp.eql(a, Fp.ZERO)) throw new Error("Endomorphism can only be defined for Koblitz curves that have a=0");
        if (typeof endo !== "object" || typeof endo.beta !== "bigint" || typeof endo.splitScalar !== "function") throw new Error("Expected endomorphism with beta: bigint and splitScalar: function");
    }
    return Object.freeze({
        ...opts
    });
}
// ASN.1 DER encoding utilities
const { bytesToNumberBE: b2n, hexToBytes: h2b } = _utilsJs;
const DER = {
    // asn.1 DER encoding utils
    Err: class DERErr extends Error {
        constructor(m = ""){
            super(m);
        }
    },
    _parseInt (data) {
        const { Err: E } = DER;
        if (data.length < 2 || data[0] !== 0x02) throw new E("Invalid signature integer tag");
        const len = data[1];
        const res = data.subarray(2, len + 2);
        if (!len || res.length !== len) throw new E("Invalid signature integer: wrong length");
        // https://crypto.stackexchange.com/a/57734 Leftmost bit of first byte is 'negative' flag,
        // since we always use positive integers here. It must always be empty:
        // - add zero byte if exists
        // - if next byte doesn't have a flag, leading zero is not allowed (minimal encoding)
        if (res[0] & 128) throw new E("Invalid signature integer: negative");
        if (res[0] === 0x00 && !(res[1] & 128)) throw new E("Invalid signature integer: unnecessary leading zero");
        return {
            d: b2n(res),
            l: data.subarray(len + 2)
        }; // d is data, l is left
    },
    toSig (hex) {
        // parse DER signature
        const { Err: E } = DER;
        const data = typeof hex === "string" ? h2b(hex) : hex;
        if (!(data instanceof Uint8Array)) throw new Error("ui8a expected");
        let l = data.length;
        if (l < 2 || data[0] != 0x30) throw new E("Invalid signature tag");
        if (data[1] !== l - 2) throw new E("Invalid signature: incorrect length");
        const { d: r, l: sBytes } = DER._parseInt(data.subarray(2));
        const { d: s, l: rBytesLeft } = DER._parseInt(sBytes);
        if (rBytesLeft.length) throw new E("Invalid signature: left bytes after parsing");
        return {
            r,
            s
        };
    },
    hexFromSig (sig) {
        // Add leading zero if first byte has negative bit enabled. More details in '_parseInt'
        const slice = (s)=>Number.parseInt(s[0], 16) & 8 ? "00" + s : s;
        const h = (num)=>{
            const hex = num.toString(16);
            return hex.length & 1 ? `0${hex}` : hex;
        };
        const s = slice(h(sig.s));
        const r = slice(h(sig.r));
        const shl = s.length / 2;
        const rhl = r.length / 2;
        const sl = h(shl);
        const rl = h(rhl);
        return `30${h(rhl + shl + 4)}02${rl}${r}02${sl}${s}`;
    }
};
// Be friendly to bad ECMAScript parsers by not using bigint literals
// prettier-ignore
const _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3), _4n = BigInt(4);
function weierstrassPoints(opts) {
    const CURVE = validatePointOpts(opts);
    const { Fp } = CURVE; // All curves has same field / group length as for now, but they can differ
    const toBytes = CURVE.toBytes || ((c, point, isCompressed)=>{
        const a = point.toAffine();
        return _utilsJs.concatBytes(Uint8Array.from([
            0x04
        ]), Fp.toBytes(a.x), Fp.toBytes(a.y));
    });
    const fromBytes = CURVE.fromBytes || ((bytes)=>{
        // const head = bytes[0];
        const tail = bytes.subarray(1);
        // if (head !== 0x04) throw new Error('Only non-compressed encoding is supported');
        const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));
        const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));
        return {
            x,
            y
        };
    });
    /**
     * y² = x³ + ax + b: Short weierstrass curve formula
     * @returns y²
     */ function weierstrassEquation(x) {
        const { a, b } = CURVE;
        const x2 = Fp.sqr(x); // x * x
        const x3 = Fp.mul(x2, x); // x2 * x
        return Fp.add(Fp.add(x3, Fp.mul(x, a)), b); // x3 + a * x + b
    }
    // Validate whether the passed curve params are valid.
    // We check if curve equation works for generator point.
    // `assertValidity()` won't work: `isTorsionFree()` is not available at this point in bls12-381.
    // ProjectivePoint class has not been initialized yet.
    if (!Fp.eql(Fp.sqr(CURVE.Gy), weierstrassEquation(CURVE.Gx))) throw new Error("bad generator point: equation left != right");
    // Valid group elements reside in range 1..n-1
    function isWithinCurveOrder(num) {
        return typeof num === "bigint" && _0n < num && num < CURVE.n;
    }
    function assertGE(num) {
        if (!isWithinCurveOrder(num)) throw new Error("Expected valid bigint: 0 < bigint < curve.n");
    }
    // Validates if priv key is valid and converts it to bigint.
    // Supports options allowedPrivateKeyLengths and wrapPrivateKey.
    function normPrivateKeyToScalar(key) {
        const { allowedPrivateKeyLengths: lengths, nByteLength, wrapPrivateKey, n } = CURVE;
        if (lengths && typeof key !== "bigint") {
            if (key instanceof Uint8Array) key = _utilsJs.bytesToHex(key);
            // Normalize to hex string, pad. E.g. P521 would norm 130-132 char hex to 132-char bytes
            if (typeof key !== "string" || !lengths.includes(key.length)) throw new Error("Invalid key");
            key = key.padStart(nByteLength * 2, "0");
        }
        let num;
        try {
            num = typeof key === "bigint" ? key : _utilsJs.bytesToNumberBE((0, _utilsJs.ensureBytes)("private key", key, nByteLength));
        } catch (error) {
            throw new Error(`private key must be ${nByteLength} bytes, hex or bigint, not ${typeof key}`);
        }
        if (wrapPrivateKey) num = _modularJs.mod(num, n); // disabled by default, enabled for BLS
        assertGE(num); // num in range [1..N-1]
        return num;
    }
    const pointPrecomputes = new Map();
    function assertPrjPoint(other) {
        if (!(other instanceof Point)) throw new Error("ProjectivePoint expected");
    }
    /**
     * Projective Point works in 3d / projective (homogeneous) coordinates: (x, y, z) ∋ (x=x/z, y=y/z)
     * Default Point works in 2d / affine coordinates: (x, y)
     * We're doing calculations in projective, because its operations don't require costly inversion.
     */ class Point {
        constructor(px, py, pz){
            this.px = px;
            this.py = py;
            this.pz = pz;
            if (px == null || !Fp.isValid(px)) throw new Error("x required");
            if (py == null || !Fp.isValid(py)) throw new Error("y required");
            if (pz == null || !Fp.isValid(pz)) throw new Error("z required");
        }
        // Does not validate if the point is on-curve.
        // Use fromHex instead, or call assertValidity() later.
        static fromAffine(p) {
            const { x, y } = p || {};
            if (!p || !Fp.isValid(x) || !Fp.isValid(y)) throw new Error("invalid affine point");
            if (p instanceof Point) throw new Error("projective point not allowed");
            const is0 = (i)=>Fp.eql(i, Fp.ZERO);
            // fromAffine(x:0, y:0) would produce (x:0, y:0, z:1), but we need (x:0, y:1, z:0)
            if (is0(x) && is0(y)) return Point.ZERO;
            return new Point(x, y, Fp.ONE);
        }
        get x() {
            return this.toAffine().x;
        }
        get y() {
            return this.toAffine().y;
        }
        /**
         * Takes a bunch of Projective Points but executes only one
         * inversion on all of them. Inversion is very slow operation,
         * so this improves performance massively.
         * Optimization: converts a list of projective points to a list of identical points with Z=1.
         */ static normalizeZ(points) {
            const toInv = Fp.invertBatch(points.map((p)=>p.pz));
            return points.map((p, i)=>p.toAffine(toInv[i])).map(Point.fromAffine);
        }
        /**
         * Converts hash string or Uint8Array to Point.
         * @param hex short/long ECDSA hex
         */ static fromHex(hex) {
            const P = Point.fromAffine(fromBytes((0, _utilsJs.ensureBytes)("pointHex", hex)));
            P.assertValidity();
            return P;
        }
        // Multiplies generator point by privateKey.
        static fromPrivateKey(privateKey) {
            return Point.BASE.multiply(normPrivateKeyToScalar(privateKey));
        }
        // "Private method", don't use it directly
        _setWindowSize(windowSize) {
            this._WINDOW_SIZE = windowSize;
            pointPrecomputes.delete(this);
        }
        // A point on curve is valid if it conforms to equation.
        assertValidity() {
            // Zero is valid point too!
            if (this.is0()) {
                if (CURVE.allowInfinityPoint) return;
                throw new Error("bad point: ZERO");
            }
            // Some 3rd-party test vectors require different wording between here & `fromCompressedHex`
            const { x, y } = this.toAffine();
            // Check if x, y are valid field elements
            if (!Fp.isValid(x) || !Fp.isValid(y)) throw new Error("bad point: x or y not FE");
            const left = Fp.sqr(y); // y²
            const right = weierstrassEquation(x); // x³ + ax + b
            if (!Fp.eql(left, right)) throw new Error("bad point: equation left != right");
            if (!this.isTorsionFree()) throw new Error("bad point: not in prime-order subgroup");
        }
        hasEvenY() {
            const { y } = this.toAffine();
            if (Fp.isOdd) return !Fp.isOdd(y);
            throw new Error("Field doesn't support isOdd");
        }
        /**
         * Compare one point to another.
         */ equals(other) {
            assertPrjPoint(other);
            const { px: X1, py: Y1, pz: Z1 } = this;
            const { px: X2, py: Y2, pz: Z2 } = other;
            const U1 = Fp.eql(Fp.mul(X1, Z2), Fp.mul(X2, Z1));
            const U2 = Fp.eql(Fp.mul(Y1, Z2), Fp.mul(Y2, Z1));
            return U1 && U2;
        }
        /**
         * Flips point to one corresponding to (x, -y) in Affine coordinates.
         */ negate() {
            return new Point(this.px, Fp.neg(this.py), this.pz);
        }
        // Renes-Costello-Batina exception-free doubling formula.
        // There is 30% faster Jacobian formula, but it is not complete.
        // https://eprint.iacr.org/2015/1060, algorithm 3
        // Cost: 8M + 3S + 3*a + 2*b3 + 15add.
        double() {
            const { a, b } = CURVE;
            const b3 = Fp.mul(b, _3n);
            const { px: X1, py: Y1, pz: Z1 } = this;
            let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore
            let t0 = Fp.mul(X1, X1); // step 1
            let t1 = Fp.mul(Y1, Y1);
            let t2 = Fp.mul(Z1, Z1);
            let t3 = Fp.mul(X1, Y1);
            t3 = Fp.add(t3, t3); // step 5
            Z3 = Fp.mul(X1, Z1);
            Z3 = Fp.add(Z3, Z3);
            X3 = Fp.mul(a, Z3);
            Y3 = Fp.mul(b3, t2);
            Y3 = Fp.add(X3, Y3); // step 10
            X3 = Fp.sub(t1, Y3);
            Y3 = Fp.add(t1, Y3);
            Y3 = Fp.mul(X3, Y3);
            X3 = Fp.mul(t3, X3);
            Z3 = Fp.mul(b3, Z3); // step 15
            t2 = Fp.mul(a, t2);
            t3 = Fp.sub(t0, t2);
            t3 = Fp.mul(a, t3);
            t3 = Fp.add(t3, Z3);
            Z3 = Fp.add(t0, t0); // step 20
            t0 = Fp.add(Z3, t0);
            t0 = Fp.add(t0, t2);
            t0 = Fp.mul(t0, t3);
            Y3 = Fp.add(Y3, t0);
            t2 = Fp.mul(Y1, Z1); // step 25
            t2 = Fp.add(t2, t2);
            t0 = Fp.mul(t2, t3);
            X3 = Fp.sub(X3, t0);
            Z3 = Fp.mul(t2, t1);
            Z3 = Fp.add(Z3, Z3); // step 30
            Z3 = Fp.add(Z3, Z3);
            return new Point(X3, Y3, Z3);
        }
        // Renes-Costello-Batina exception-free addition formula.
        // There is 30% faster Jacobian formula, but it is not complete.
        // https://eprint.iacr.org/2015/1060, algorithm 1
        // Cost: 12M + 0S + 3*a + 3*b3 + 23add.
        add(other) {
            assertPrjPoint(other);
            const { px: X1, py: Y1, pz: Z1 } = this;
            const { px: X2, py: Y2, pz: Z2 } = other;
            let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore
            const a = CURVE.a;
            const b3 = Fp.mul(CURVE.b, _3n);
            let t0 = Fp.mul(X1, X2); // step 1
            let t1 = Fp.mul(Y1, Y2);
            let t2 = Fp.mul(Z1, Z2);
            let t3 = Fp.add(X1, Y1);
            let t4 = Fp.add(X2, Y2); // step 5
            t3 = Fp.mul(t3, t4);
            t4 = Fp.add(t0, t1);
            t3 = Fp.sub(t3, t4);
            t4 = Fp.add(X1, Z1);
            let t5 = Fp.add(X2, Z2); // step 10
            t4 = Fp.mul(t4, t5);
            t5 = Fp.add(t0, t2);
            t4 = Fp.sub(t4, t5);
            t5 = Fp.add(Y1, Z1);
            X3 = Fp.add(Y2, Z2); // step 15
            t5 = Fp.mul(t5, X3);
            X3 = Fp.add(t1, t2);
            t5 = Fp.sub(t5, X3);
            Z3 = Fp.mul(a, t4);
            X3 = Fp.mul(b3, t2); // step 20
            Z3 = Fp.add(X3, Z3);
            X3 = Fp.sub(t1, Z3);
            Z3 = Fp.add(t1, Z3);
            Y3 = Fp.mul(X3, Z3);
            t1 = Fp.add(t0, t0); // step 25
            t1 = Fp.add(t1, t0);
            t2 = Fp.mul(a, t2);
            t4 = Fp.mul(b3, t4);
            t1 = Fp.add(t1, t2);
            t2 = Fp.sub(t0, t2); // step 30
            t2 = Fp.mul(a, t2);
            t4 = Fp.add(t4, t2);
            t0 = Fp.mul(t1, t4);
            Y3 = Fp.add(Y3, t0);
            t0 = Fp.mul(t5, t4); // step 35
            X3 = Fp.mul(t3, X3);
            X3 = Fp.sub(X3, t0);
            t0 = Fp.mul(t3, t1);
            Z3 = Fp.mul(t5, Z3);
            Z3 = Fp.add(Z3, t0); // step 40
            return new Point(X3, Y3, Z3);
        }
        subtract(other) {
            return this.add(other.negate());
        }
        is0() {
            return this.equals(Point.ZERO);
        }
        wNAF(n) {
            return wnaf.wNAFCached(this, pointPrecomputes, n, (comp)=>{
                const toInv = Fp.invertBatch(comp.map((p)=>p.pz));
                return comp.map((p, i)=>p.toAffine(toInv[i])).map(Point.fromAffine);
            });
        }
        /**
         * Non-constant-time multiplication. Uses double-and-add algorithm.
         * It's faster, but should only be used when you don't care about
         * an exposed private key e.g. sig verification, which works over *public* keys.
         */ multiplyUnsafe(n) {
            const I = Point.ZERO;
            if (n === _0n) return I;
            assertGE(n); // Will throw on 0
            if (n === _1n) return this;
            const { endo } = CURVE;
            if (!endo) return wnaf.unsafeLadder(this, n);
            // Apply endomorphism
            let { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);
            let k1p = I;
            let k2p = I;
            let d = this;
            while(k1 > _0n || k2 > _0n){
                if (k1 & _1n) k1p = k1p.add(d);
                if (k2 & _1n) k2p = k2p.add(d);
                d = d.double();
                k1 >>= _1n;
                k2 >>= _1n;
            }
            if (k1neg) k1p = k1p.negate();
            if (k2neg) k2p = k2p.negate();
            k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);
            return k1p.add(k2p);
        }
        /**
         * Constant time multiplication.
         * Uses wNAF method. Windowed method may be 10% faster,
         * but takes 2x longer to generate and consumes 2x memory.
         * Uses precomputes when available.
         * Uses endomorphism for Koblitz curves.
         * @param scalar by which the point would be multiplied
         * @returns New point
         */ multiply(scalar) {
            assertGE(scalar);
            let n = scalar;
            let point, fake; // Fake point is used to const-time mult
            const { endo } = CURVE;
            if (endo) {
                const { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);
                let { p: k1p, f: f1p } = this.wNAF(k1);
                let { p: k2p, f: f2p } = this.wNAF(k2);
                k1p = wnaf.constTimeNegate(k1neg, k1p);
                k2p = wnaf.constTimeNegate(k2neg, k2p);
                k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);
                point = k1p.add(k2p);
                fake = f1p.add(f2p);
            } else {
                const { p, f } = this.wNAF(n);
                point = p;
                fake = f;
            }
            // Normalize `z` for both points, but return only real one
            return Point.normalizeZ([
                point,
                fake
            ])[0];
        }
        /**
         * Efficiently calculate `aP + bQ`. Unsafe, can expose private key, if used incorrectly.
         * Not using Strauss-Shamir trick: precomputation tables are faster.
         * The trick could be useful if both P and Q are not G (not in our case).
         * @returns non-zero affine point
         */ multiplyAndAddUnsafe(Q, a, b) {
            const G = Point.BASE; // No Strauss-Shamir trick: we have 10% faster G precomputes
            const mul = (P, a // Select faster multiply() method
            )=>a === _0n || a === _1n || !P.equals(G) ? P.multiplyUnsafe(a) : P.multiply(a);
            const sum = mul(this, a).add(mul(Q, b));
            return sum.is0() ? undefined : sum;
        }
        // Converts Projective point to affine (x, y) coordinates.
        // Can accept precomputed Z^-1 - for example, from invertBatch.
        // (x, y, z) ∋ (x=x/z, y=y/z)
        toAffine(iz) {
            const { px: x, py: y, pz: z } = this;
            const is0 = this.is0();
            // If invZ was 0, we return zero point. However we still want to execute
            // all operations, so we replace invZ with a random number, 1.
            if (iz == null) iz = is0 ? Fp.ONE : Fp.inv(z);
            const ax = Fp.mul(x, iz);
            const ay = Fp.mul(y, iz);
            const zz = Fp.mul(z, iz);
            if (is0) return {
                x: Fp.ZERO,
                y: Fp.ZERO
            };
            if (!Fp.eql(zz, Fp.ONE)) throw new Error("invZ was invalid");
            return {
                x: ax,
                y: ay
            };
        }
        isTorsionFree() {
            const { h: cofactor, isTorsionFree } = CURVE;
            if (cofactor === _1n) return true; // No subgroups, always torsion-free
            if (isTorsionFree) return isTorsionFree(Point, this);
            throw new Error("isTorsionFree() has not been declared for the elliptic curve");
        }
        clearCofactor() {
            const { h: cofactor, clearCofactor } = CURVE;
            if (cofactor === _1n) return this; // Fast-path
            if (clearCofactor) return clearCofactor(Point, this);
            return this.multiplyUnsafe(CURVE.h);
        }
        toRawBytes(isCompressed = true) {
            this.assertValidity();
            return toBytes(Point, this, isCompressed);
        }
        toHex(isCompressed = true) {
            return _utilsJs.bytesToHex(this.toRawBytes(isCompressed));
        }
    }
    Point.BASE = new Point(CURVE.Gx, CURVE.Gy, Fp.ONE);
    Point.ZERO = new Point(Fp.ZERO, Fp.ONE, Fp.ZERO);
    const _bits = CURVE.nBitLength;
    const wnaf = (0, _curveJs.wNAF)(Point, CURVE.endo ? Math.ceil(_bits / 2) : _bits);
    // Validate if generator point is on curve
    return {
        CURVE,
        ProjectivePoint: Point,
        normPrivateKeyToScalar,
        weierstrassEquation,
        isWithinCurveOrder
    };
}
function validateOpts(curve) {
    const opts = (0, _curveJs.validateBasic)(curve);
    _utilsJs.validateObject(opts, {
        hash: "hash",
        hmac: "function",
        randomBytes: "function"
    }, {
        bits2int: "function",
        bits2int_modN: "function",
        lowS: "boolean"
    });
    return Object.freeze({
        lowS: true,
        ...opts
    });
}
function weierstrass(curveDef) {
    const CURVE = validateOpts(curveDef);
    const { Fp, n: CURVE_ORDER } = CURVE;
    const compressedLen = Fp.BYTES + 1; // e.g. 33 for 32
    const uncompressedLen = 2 * Fp.BYTES + 1; // e.g. 65 for 32
    function isValidFieldElement(num) {
        return _0n < num && num < Fp.ORDER; // 0 is banned since it's not invertible FE
    }
    function modN(a) {
        return _modularJs.mod(a, CURVE_ORDER);
    }
    function invN(a) {
        return _modularJs.invert(a, CURVE_ORDER);
    }
    const { ProjectivePoint: Point, normPrivateKeyToScalar, weierstrassEquation, isWithinCurveOrder } = weierstrassPoints({
        ...CURVE,
        toBytes (c, point, isCompressed) {
            const a = point.toAffine();
            const x = Fp.toBytes(a.x);
            const cat = _utilsJs.concatBytes;
            if (isCompressed) return cat(Uint8Array.from([
                point.hasEvenY() ? 0x02 : 0x03
            ]), x);
            else return cat(Uint8Array.from([
                0x04
            ]), x, Fp.toBytes(a.y));
        },
        fromBytes (bytes) {
            const len = bytes.length;
            const head = bytes[0];
            const tail = bytes.subarray(1);
            // this.assertValidity() is done inside of fromHex
            if (len === compressedLen && (head === 0x02 || head === 0x03)) {
                const x = _utilsJs.bytesToNumberBE(tail);
                if (!isValidFieldElement(x)) throw new Error("Point is not on curve");
                const y2 = weierstrassEquation(x); // y² = x³ + ax + b
                let y = Fp.sqrt(y2); // y = y² ^ (p+1)/4
                const isYOdd = (y & _1n) === _1n;
                // ECDSA
                const isHeadOdd = (head & 1) === 1;
                if (isHeadOdd !== isYOdd) y = Fp.neg(y);
                return {
                    x,
                    y
                };
            } else if (len === uncompressedLen && head === 0x04) {
                const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));
                const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));
                return {
                    x,
                    y
                };
            } else throw new Error(`Point of length ${len} was invalid. Expected ${compressedLen} compressed bytes or ${uncompressedLen} uncompressed bytes`);
        }
    });
    const numToNByteStr = (num)=>_utilsJs.bytesToHex(_utilsJs.numberToBytesBE(num, CURVE.nByteLength));
    function isBiggerThanHalfOrder(number) {
        const HALF = CURVE_ORDER >> _1n;
        return number > HALF;
    }
    function normalizeS(s) {
        return isBiggerThanHalfOrder(s) ? modN(-s) : s;
    }
    // slice bytes num
    const slcNum = (b, from, to)=>_utilsJs.bytesToNumberBE(b.slice(from, to));
    /**
     * ECDSA signature with its (r, s) properties. Supports DER & compact representations.
     */ class Signature {
        constructor(r, s, recovery){
            this.r = r;
            this.s = s;
            this.recovery = recovery;
            this.assertValidity();
        }
        // pair (bytes of r, bytes of s)
        static fromCompact(hex) {
            const l = CURVE.nByteLength;
            hex = (0, _utilsJs.ensureBytes)("compactSignature", hex, l * 2);
            return new Signature(slcNum(hex, 0, l), slcNum(hex, l, 2 * l));
        }
        // DER encoded ECDSA signature
        // https://bitcoin.stackexchange.com/questions/57644/what-are-the-parts-of-a-bitcoin-transaction-input-script
        static fromDER(hex) {
            const { r, s } = DER.toSig((0, _utilsJs.ensureBytes)("DER", hex));
            return new Signature(r, s);
        }
        assertValidity() {
            // can use assertGE here
            if (!isWithinCurveOrder(this.r)) throw new Error("r must be 0 < r < CURVE.n");
            if (!isWithinCurveOrder(this.s)) throw new Error("s must be 0 < s < CURVE.n");
        }
        addRecoveryBit(recovery) {
            return new Signature(this.r, this.s, recovery);
        }
        recoverPublicKey(msgHash) {
            const { r, s, recovery: rec } = this;
            const h = bits2int_modN((0, _utilsJs.ensureBytes)("msgHash", msgHash)); // Truncate hash
            if (rec == null || ![
                0,
                1,
                2,
                3
            ].includes(rec)) throw new Error("recovery id invalid");
            const radj = rec === 2 || rec === 3 ? r + CURVE.n : r;
            if (radj >= Fp.ORDER) throw new Error("recovery id 2 or 3 invalid");
            const prefix = (rec & 1) === 0 ? "02" : "03";
            const R = Point.fromHex(prefix + numToNByteStr(radj));
            const ir = invN(radj); // r^-1
            const u1 = modN(-h * ir); // -hr^-1
            const u2 = modN(s * ir); // sr^-1
            const Q = Point.BASE.multiplyAndAddUnsafe(R, u1, u2); // (sr^-1)R-(hr^-1)G = -(hr^-1)G + (sr^-1)
            if (!Q) throw new Error("point at infinify"); // unsafe is fine: no priv data leaked
            Q.assertValidity();
            return Q;
        }
        // Signatures should be low-s, to prevent malleability.
        hasHighS() {
            return isBiggerThanHalfOrder(this.s);
        }
        normalizeS() {
            return this.hasHighS() ? new Signature(this.r, modN(-this.s), this.recovery) : this;
        }
        // DER-encoded
        toDERRawBytes() {
            return _utilsJs.hexToBytes(this.toDERHex());
        }
        toDERHex() {
            return DER.hexFromSig({
                r: this.r,
                s: this.s
            });
        }
        // padded bytes of r, then padded bytes of s
        toCompactRawBytes() {
            return _utilsJs.hexToBytes(this.toCompactHex());
        }
        toCompactHex() {
            return numToNByteStr(this.r) + numToNByteStr(this.s);
        }
    }
    const utils = {
        isValidPrivateKey (privateKey) {
            try {
                normPrivateKeyToScalar(privateKey);
                return true;
            } catch (error) {
                return false;
            }
        },
        normPrivateKeyToScalar: normPrivateKeyToScalar,
        /**
         * Produces cryptographically secure private key from random of size (nBitLength+64)
         * as per FIPS 186 B.4.1 with modulo bias being neglible.
         */ randomPrivateKey: ()=>{
            const rand = CURVE.randomBytes(Fp.BYTES + 8);
            const num = _modularJs.hashToPrivateScalar(rand, CURVE_ORDER);
            return _utilsJs.numberToBytesBE(num, CURVE.nByteLength);
        },
        /**
         * Creates precompute table for an arbitrary EC point. Makes point "cached".
         * Allows to massively speed-up `point.multiply(scalar)`.
         * @returns cached point
         * @example
         * const fast = utils.precompute(8, ProjectivePoint.fromHex(someonesPubKey));
         * fast.multiply(privKey); // much faster ECDH now
         */ precompute (windowSize = 8, point = Point.BASE) {
            point._setWindowSize(windowSize);
            point.multiply(BigInt(3)); // 3 is arbitrary, just need any number here
            return point;
        }
    };
    /**
     * Computes public key for a private key. Checks for validity of the private key.
     * @param privateKey private key
     * @param isCompressed whether to return compact (default), or full key
     * @returns Public key, full when isCompressed=false; short when isCompressed=true
     */ function getPublicKey(privateKey, isCompressed = true) {
        return Point.fromPrivateKey(privateKey).toRawBytes(isCompressed);
    }
    /**
     * Quick and dirty check for item being public key. Does not validate hex, or being on-curve.
     */ function isProbPub(item) {
        const arr = item instanceof Uint8Array;
        const str = typeof item === "string";
        const len = (arr || str) && item.length;
        if (arr) return len === compressedLen || len === uncompressedLen;
        if (str) return len === 2 * compressedLen || len === 2 * uncompressedLen;
        if (item instanceof Point) return true;
        return false;
    }
    /**
     * ECDH (Elliptic Curve Diffie Hellman).
     * Computes shared public key from private key and public key.
     * Checks: 1) private key validity 2) shared key is on-curve.
     * Does NOT hash the result.
     * @param privateA private key
     * @param publicB different public key
     * @param isCompressed whether to return compact (default), or full key
     * @returns shared public key
     */ function getSharedSecret(privateA, publicB, isCompressed = true) {
        if (isProbPub(privateA)) throw new Error("first arg must be private key");
        if (!isProbPub(publicB)) throw new Error("second arg must be public key");
        const b = Point.fromHex(publicB); // check for being on-curve
        return b.multiply(normPrivateKeyToScalar(privateA)).toRawBytes(isCompressed);
    }
    // RFC6979: ensure ECDSA msg is X bytes and < N. RFC suggests optional truncating via bits2octets.
    // FIPS 186-4 4.6 suggests the leftmost min(nBitLen, outLen) bits, which matches bits2int.
    // bits2int can produce res>N, we can do mod(res, N) since the bitLen is the same.
    // int2octets can't be used; pads small msgs with 0: unacceptatble for trunc as per RFC vectors
    const bits2int = CURVE.bits2int || function(bytes) {
        // For curves with nBitLength % 8 !== 0: bits2octets(bits2octets(m)) !== bits2octets(m)
        // for some cases, since bytes.length * 8 is not actual bitLength.
        const num = _utilsJs.bytesToNumberBE(bytes); // check for == u8 done here
        const delta = bytes.length * 8 - CURVE.nBitLength; // truncate to nBitLength leftmost bits
        return delta > 0 ? num >> BigInt(delta) : num;
    };
    const bits2int_modN = CURVE.bits2int_modN || function(bytes) {
        return modN(bits2int(bytes)); // can't use bytesToNumberBE here
    };
    // NOTE: pads output with zero as per spec
    const ORDER_MASK = _utilsJs.bitMask(CURVE.nBitLength);
    /**
     * Converts to bytes. Checks if num in `[0..ORDER_MASK-1]` e.g.: `[0..2^256-1]`.
     */ function int2octets(num) {
        if (typeof num !== "bigint") throw new Error("bigint expected");
        if (!(_0n <= num && num < ORDER_MASK)) throw new Error(`bigint expected < 2^${CURVE.nBitLength}`);
        // works with order, can have different size than numToField!
        return _utilsJs.numberToBytesBE(num, CURVE.nByteLength);
    }
    // Steps A, D of RFC6979 3.2
    // Creates RFC6979 seed; converts msg/privKey to numbers.
    // Used only in sign, not in verify.
    // NOTE: we cannot assume here that msgHash has same amount of bytes as curve order, this will be wrong at least for P521.
    // Also it can be bigger for P224 + SHA256
    function prepSig(msgHash, privateKey, opts = defaultSigOpts) {
        if ([
            "recovered",
            "canonical"
        ].some((k)=>k in opts)) throw new Error("sign() legacy options not supported");
        const { hash, randomBytes } = CURVE;
        let { lowS, prehash, extraEntropy: ent } = opts; // generates low-s sigs by default
        if (lowS == null) lowS = true; // RFC6979 3.2: we skip step A, because we already provide hash
        msgHash = (0, _utilsJs.ensureBytes)("msgHash", msgHash);
        if (prehash) msgHash = (0, _utilsJs.ensureBytes)("prehashed msgHash", hash(msgHash));
        // We can't later call bits2octets, since nested bits2int is broken for curves
        // with nBitLength % 8 !== 0. Because of that, we unwrap it here as int2octets call.
        // const bits2octets = (bits) => int2octets(bits2int_modN(bits))
        const h1int = bits2int_modN(msgHash);
        const d = normPrivateKeyToScalar(privateKey); // validate private key, convert to bigint
        const seedArgs = [
            int2octets(d),
            int2octets(h1int)
        ];
        // extraEntropy. RFC6979 3.6: additional k' (optional).
        if (ent != null) {
            // K = HMAC_K(V || 0x00 || int2octets(x) || bits2octets(h1) || k')
            const e = ent === true ? randomBytes(Fp.BYTES) : ent; // generate random bytes OR pass as-is
            seedArgs.push((0, _utilsJs.ensureBytes)("extraEntropy", e, Fp.BYTES)); // check for being of size BYTES
        }
        const seed = _utilsJs.concatBytes(...seedArgs); // Step D of RFC6979 3.2
        const m = h1int; // NOTE: no need to call bits2int second time here, it is inside truncateHash!
        // Converts signature params into point w r/s, checks result for validity.
        function k2sig(kBytes) {
            // RFC 6979 Section 3.2, step 3: k = bits2int(T)
            const k = bits2int(kBytes); // Cannot use fields methods, since it is group element
            if (!isWithinCurveOrder(k)) return; // Important: all mod() calls here must be done over N
            const ik = invN(k); // k^-1 mod n
            const q = Point.BASE.multiply(k).toAffine(); // q = Gk
            const r = modN(q.x); // r = q.x mod n
            if (r === _0n) return;
            // Can use scalar blinding b^-1(bm + bdr) where b ∈ [1,q−1] according to
            // https://tches.iacr.org/index.php/TCHES/article/view/7337/6509. We've decided against it:
            // a) dependency on CSPRNG b) 15% slowdown c) doesn't really help since bigints are not CT
            const s = modN(ik * modN(m + r * d)); // Not using blinding here
            if (s === _0n) return;
            let recovery = (q.x === r ? 0 : 2) | Number(q.y & _1n); // recovery bit (2 or 3, when q.x > n)
            let normS = s;
            if (lowS && isBiggerThanHalfOrder(s)) {
                normS = normalizeS(s); // if lowS was passed, ensure s is always
                recovery ^= 1; // // in the bottom half of N
            }
            return new Signature(r, normS, recovery); // use normS, not s
        }
        return {
            seed,
            k2sig
        };
    }
    const defaultSigOpts = {
        lowS: CURVE.lowS,
        prehash: false
    };
    const defaultVerOpts = {
        lowS: CURVE.lowS,
        prehash: false
    };
    /**
     * Signs message hash with a private key.
     * ```
     * sign(m, d, k) where
     *   (x, y) = G × k
     *   r = x mod n
     *   s = (m + dr)/k mod n
     * ```
     * @param msgHash NOT message. msg needs to be hashed to `msgHash`, or use `prehash`.
     * @param privKey private key
     * @param opts lowS for non-malleable sigs. extraEntropy for mixing randomness into k. prehash will hash first arg.
     * @returns signature with recovery param
     */ function sign(msgHash, privKey, opts = defaultSigOpts) {
        const { seed, k2sig } = prepSig(msgHash, privKey, opts); // Steps A, D of RFC6979 3.2.
        const C = CURVE;
        const drbg = _utilsJs.createHmacDrbg(C.hash.outputLen, C.nByteLength, C.hmac);
        return drbg(seed, k2sig); // Steps B, C, D, E, F, G
    }
    // Enable precomputes. Slows down first publicKey computation by 20ms.
    Point.BASE._setWindowSize(8);
    // utils.precompute(8, ProjectivePoint.BASE)
    /**
     * Verifies a signature against message hash and public key.
     * Rejects lowS signatures by default: to override,
     * specify option `{lowS: false}`. Implements section 4.1.4 from https://www.secg.org/sec1-v2.pdf:
     *
     * ```
     * verify(r, s, h, P) where
     *   U1 = hs^-1 mod n
     *   U2 = rs^-1 mod n
     *   R = U1⋅G - U2⋅P
     *   mod(R.x, n) == r
     * ```
     */ function verify(signature, msgHash, publicKey, opts = defaultVerOpts) {
        const sg = signature;
        msgHash = (0, _utilsJs.ensureBytes)("msgHash", msgHash);
        publicKey = (0, _utilsJs.ensureBytes)("publicKey", publicKey);
        if ("strict" in opts) throw new Error("options.strict was renamed to lowS");
        const { lowS, prehash } = opts;
        let _sig = undefined;
        let P;
        try {
            if (typeof sg === "string" || sg instanceof Uint8Array) // Signature can be represented in 2 ways: compact (2*nByteLength) & DER (variable-length).
            // Since DER can also be 2*nByteLength bytes, we check for it first.
            try {
                _sig = Signature.fromDER(sg);
            } catch (derError) {
                if (!(derError instanceof DER.Err)) throw derError;
                _sig = Signature.fromCompact(sg);
            }
            else if (typeof sg === "object" && typeof sg.r === "bigint" && typeof sg.s === "bigint") {
                const { r, s } = sg;
                _sig = new Signature(r, s);
            } else throw new Error("PARSE");
            P = Point.fromHex(publicKey);
        } catch (error) {
            if (error.message === "PARSE") throw new Error(`signature must be Signature instance, Uint8Array or hex string`);
            return false;
        }
        if (lowS && _sig.hasHighS()) return false;
        if (prehash) msgHash = CURVE.hash(msgHash);
        const { r, s } = _sig;
        const h = bits2int_modN(msgHash); // Cannot use fields methods, since it is group element
        const is = invN(s); // s^-1
        const u1 = modN(h * is); // u1 = hs^-1 mod n
        const u2 = modN(r * is); // u2 = rs^-1 mod n
        const R = Point.BASE.multiplyAndAddUnsafe(P, u1, u2)?.toAffine(); // R = u1⋅G + u2⋅P
        if (!R) return false;
        const v = modN(R.x);
        return v === r;
    }
    return {
        CURVE,
        getPublicKey,
        getSharedSecret,
        sign,
        verify,
        ProjectivePoint: Point,
        Signature,
        utils
    };
}
function SWUFpSqrtRatio(Fp, Z) {
    // Generic implementation
    const q = Fp.ORDER;
    let l = _0n;
    for(let o = q - _1n; o % _2n === _0n; o /= _2n)l += _1n;
    const c1 = l; // 1. c1, the largest integer such that 2^c1 divides q - 1.
    // We need 2n ** c1 and 2n ** (c1-1). We can't use **; but we can use <<.
    // 2n ** c1 == 2n << (c1-1)
    const _2n_pow_c1_1 = _2n << c1 - _1n - _1n;
    const _2n_pow_c1 = _2n_pow_c1_1 * _2n;
    const c2 = (q - _1n) / _2n_pow_c1; // 2. c2 = (q - 1) / (2^c1)  # Integer arithmetic
    const c3 = (c2 - _1n) / _2n; // 3. c3 = (c2 - 1) / 2            # Integer arithmetic
    const c4 = _2n_pow_c1 - _1n; // 4. c4 = 2^c1 - 1                # Integer arithmetic
    const c5 = _2n_pow_c1_1; // 5. c5 = 2^(c1 - 1)                  # Integer arithmetic
    const c6 = Fp.pow(Z, c2); // 6. c6 = Z^c2
    const c7 = Fp.pow(Z, (c2 + _1n) / _2n); // 7. c7 = Z^((c2 + 1) / 2)
    let sqrtRatio = (u, v)=>{
        let tv1 = c6; // 1. tv1 = c6
        let tv2 = Fp.pow(v, c4); // 2. tv2 = v^c4
        let tv3 = Fp.sqr(tv2); // 3. tv3 = tv2^2
        tv3 = Fp.mul(tv3, v); // 4. tv3 = tv3 * v
        let tv5 = Fp.mul(u, tv3); // 5. tv5 = u * tv3
        tv5 = Fp.pow(tv5, c3); // 6. tv5 = tv5^c3
        tv5 = Fp.mul(tv5, tv2); // 7. tv5 = tv5 * tv2
        tv2 = Fp.mul(tv5, v); // 8. tv2 = tv5 * v
        tv3 = Fp.mul(tv5, u); // 9. tv3 = tv5 * u
        let tv4 = Fp.mul(tv3, tv2); // 10. tv4 = tv3 * tv2
        tv5 = Fp.pow(tv4, c5); // 11. tv5 = tv4^c5
        let isQR = Fp.eql(tv5, Fp.ONE); // 12. isQR = tv5 == 1
        tv2 = Fp.mul(tv3, c7); // 13. tv2 = tv3 * c7
        tv5 = Fp.mul(tv4, tv1); // 14. tv5 = tv4 * tv1
        tv3 = Fp.cmov(tv2, tv3, isQR); // 15. tv3 = CMOV(tv2, tv3, isQR)
        tv4 = Fp.cmov(tv5, tv4, isQR); // 16. tv4 = CMOV(tv5, tv4, isQR)
        // 17. for i in (c1, c1 - 1, ..., 2):
        for(let i = c1; i > _1n; i--){
            let tv5 = i - _2n; // 18.    tv5 = i - 2
            tv5 = _2n << tv5 - _1n; // 19.    tv5 = 2^tv5
            let tvv5 = Fp.pow(tv4, tv5); // 20.    tv5 = tv4^tv5
            const e1 = Fp.eql(tvv5, Fp.ONE); // 21.    e1 = tv5 == 1
            tv2 = Fp.mul(tv3, tv1); // 22.    tv2 = tv3 * tv1
            tv1 = Fp.mul(tv1, tv1); // 23.    tv1 = tv1 * tv1
            tvv5 = Fp.mul(tv4, tv1); // 24.    tv5 = tv4 * tv1
            tv3 = Fp.cmov(tv2, tv3, e1); // 25.    tv3 = CMOV(tv2, tv3, e1)
            tv4 = Fp.cmov(tvv5, tv4, e1); // 26.    tv4 = CMOV(tv5, tv4, e1)
        }
        return {
            isValid: isQR,
            value: tv3
        };
    };
    if (Fp.ORDER % _4n === _3n) {
        // sqrt_ratio_3mod4(u, v)
        const c1 = (Fp.ORDER - _3n) / _4n; // 1. c1 = (q - 3) / 4     # Integer arithmetic
        const c2 = Fp.sqrt(Fp.neg(Z)); // 2. c2 = sqrt(-Z)
        sqrtRatio = (u, v)=>{
            let tv1 = Fp.sqr(v); // 1. tv1 = v^2
            const tv2 = Fp.mul(u, v); // 2. tv2 = u * v
            tv1 = Fp.mul(tv1, tv2); // 3. tv1 = tv1 * tv2
            let y1 = Fp.pow(tv1, c1); // 4. y1 = tv1^c1
            y1 = Fp.mul(y1, tv2); // 5. y1 = y1 * tv2
            const y2 = Fp.mul(y1, c2); // 6. y2 = y1 * c2
            const tv3 = Fp.mul(Fp.sqr(y1), v); // 7. tv3 = y1^2; 8. tv3 = tv3 * v
            const isQR = Fp.eql(tv3, u); // 9. isQR = tv3 == u
            let y = Fp.cmov(y2, y1, isQR); // 10. y = CMOV(y2, y1, isQR)
            return {
                isValid: isQR,
                value: y
            }; // 11. return (isQR, y) isQR ? y : y*c2
        };
    }
    // No curves uses that
    // if (Fp.ORDER % _8n === _5n) // sqrt_ratio_5mod8
    return sqrtRatio;
}
function mapToCurveSimpleSWU(Fp, opts) {
    _modularJs.validateField(Fp);
    if (!Fp.isValid(opts.A) || !Fp.isValid(opts.B) || !Fp.isValid(opts.Z)) throw new Error("mapToCurveSimpleSWU: invalid opts");
    const sqrtRatio = SWUFpSqrtRatio(Fp, opts.Z);
    if (!Fp.isOdd) throw new Error("Fp.isOdd is not implemented!");
    // Input: u, an element of F.
    // Output: (x, y), a point on E.
    return (u)=>{
        // prettier-ignore
        let tv1, tv2, tv3, tv4, tv5, tv6, x, y;
        tv1 = Fp.sqr(u); // 1.  tv1 = u^2
        tv1 = Fp.mul(tv1, opts.Z); // 2.  tv1 = Z * tv1
        tv2 = Fp.sqr(tv1); // 3.  tv2 = tv1^2
        tv2 = Fp.add(tv2, tv1); // 4.  tv2 = tv2 + tv1
        tv3 = Fp.add(tv2, Fp.ONE); // 5.  tv3 = tv2 + 1
        tv3 = Fp.mul(tv3, opts.B); // 6.  tv3 = B * tv3
        tv4 = Fp.cmov(opts.Z, Fp.neg(tv2), !Fp.eql(tv2, Fp.ZERO)); // 7.  tv4 = CMOV(Z, -tv2, tv2 != 0)
        tv4 = Fp.mul(tv4, opts.A); // 8.  tv4 = A * tv4
        tv2 = Fp.sqr(tv3); // 9.  tv2 = tv3^2
        tv6 = Fp.sqr(tv4); // 10. tv6 = tv4^2
        tv5 = Fp.mul(tv6, opts.A); // 11. tv5 = A * tv6
        tv2 = Fp.add(tv2, tv5); // 12. tv2 = tv2 + tv5
        tv2 = Fp.mul(tv2, tv3); // 13. tv2 = tv2 * tv3
        tv6 = Fp.mul(tv6, tv4); // 14. tv6 = tv6 * tv4
        tv5 = Fp.mul(tv6, opts.B); // 15. tv5 = B * tv6
        tv2 = Fp.add(tv2, tv5); // 16. tv2 = tv2 + tv5
        x = Fp.mul(tv1, tv3); // 17.   x = tv1 * tv3
        const { isValid, value } = sqrtRatio(tv2, tv6); // 18. (is_gx1_square, y1) = sqrt_ratio(tv2, tv6)
        y = Fp.mul(tv1, u); // 19.   y = tv1 * u  -> Z * u^3 * y1
        y = Fp.mul(y, value); // 20.   y = y * y1
        x = Fp.cmov(x, tv3, isValid); // 21.   x = CMOV(x, tv3, is_gx1_square)
        y = Fp.cmov(y, value, isValid); // 22.   y = CMOV(y, y1, is_gx1_square)
        const e1 = Fp.isOdd(u) === Fp.isOdd(y); // 23.  e1 = sgn0(u) == sgn0(y)
        y = Fp.cmov(Fp.neg(y), y, e1); // 24.   y = CMOV(-y, y, e1)
        x = Fp.div(x, tv4); // 25.   x = x / tv4
        return {
            x,
            y
        };
    };
}

},{"./modular.js":"aWzDR","./utils.js":"6xA5w","./curve.js":"37yfg","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"37yfg":[function(require,module,exports) {
/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */ // Abelian group utilities
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
// Elliptic curve multiplication of Point by scalar. Fragile.
// Scalars should always be less than curve order: this should be checked inside of a curve itself.
// Creates precomputation tables for fast multiplication:
// - private scalar is split by fixed size windows of W bits
// - every window point is collected from window's table & added to accumulator
// - since windows are different, same point inside tables won't be accessed more than once per calc
// - each multiplication is 'Math.ceil(CURVE_ORDER / 𝑊) + 1' point additions (fixed for any scalar)
// - +1 window is neccessary for wNAF
// - wNAF reduces table size: 2x less memory + 2x faster generation, but 10% slower multiplication
// TODO: Research returning 2d JS array of windows, instead of a single window. This would allow
// windows to be in different memory locations
parcelHelpers.export(exports, "wNAF", ()=>wNAF);
parcelHelpers.export(exports, "validateBasic", ()=>validateBasic);
var _modularJs = require("./modular.js");
var _utilsJs = require("./utils.js");
const _0n = BigInt(0);
const _1n = BigInt(1);
function wNAF(c, bits) {
    const constTimeNegate = (condition, item)=>{
        const neg = item.negate();
        return condition ? neg : item;
    };
    const opts = (W)=>{
        const windows = Math.ceil(bits / W) + 1; // +1, because
        const windowSize = 2 ** (W - 1); // -1 because we skip zero
        return {
            windows,
            windowSize
        };
    };
    return {
        constTimeNegate,
        // non-const time multiplication ladder
        unsafeLadder (elm, n) {
            let p = c.ZERO;
            let d = elm;
            while(n > _0n){
                if (n & _1n) p = p.add(d);
                d = d.double();
                n >>= _1n;
            }
            return p;
        },
        /**
         * Creates a wNAF precomputation window. Used for caching.
         * Default window size is set by `utils.precompute()` and is equal to 8.
         * Number of precomputed points depends on the curve size:
         * 2^(𝑊−1) * (Math.ceil(𝑛 / 𝑊) + 1), where:
         * - 𝑊 is the window size
         * - 𝑛 is the bitlength of the curve order.
         * For a 256-bit curve and window size 8, the number of precomputed points is 128 * 33 = 4224.
         * @returns precomputed point tables flattened to a single array
         */ precomputeWindow (elm, W) {
            const { windows, windowSize } = opts(W);
            const points = [];
            let p = elm;
            let base = p;
            for(let window = 0; window < windows; window++){
                base = p;
                points.push(base);
                // =1, because we skip zero
                for(let i = 1; i < windowSize; i++){
                    base = base.add(p);
                    points.push(base);
                }
                p = base.double();
            }
            return points;
        },
        /**
         * Implements ec multiplication using precomputed tables and w-ary non-adjacent form.
         * @param W window size
         * @param precomputes precomputed tables
         * @param n scalar (we don't check here, but should be less than curve order)
         * @returns real and fake (for const-time) points
         */ wNAF (W, precomputes, n) {
            // TODO: maybe check that scalar is less than group order? wNAF behavious is undefined otherwise
            // But need to carefully remove other checks before wNAF. ORDER == bits here
            const { windows, windowSize } = opts(W);
            let p = c.ZERO;
            let f = c.BASE;
            const mask = BigInt(2 ** W - 1); // Create mask with W ones: 0b1111 for W=4 etc.
            const maxNumber = 2 ** W;
            const shiftBy = BigInt(W);
            for(let window = 0; window < windows; window++){
                const offset = window * windowSize;
                // Extract W bits.
                let wbits = Number(n & mask);
                // Shift number by W bits.
                n >>= shiftBy;
                // If the bits are bigger than max size, we'll split those.
                // +224 => 256 - 32
                if (wbits > windowSize) {
                    wbits -= maxNumber;
                    n += _1n;
                }
                // This code was first written with assumption that 'f' and 'p' will never be infinity point:
                // since each addition is multiplied by 2 ** W, it cannot cancel each other. However,
                // there is negate now: it is possible that negated element from low value
                // would be the same as high element, which will create carry into next window.
                // It's not obvious how this can fail, but still worth investigating later.
                // Check if we're onto Zero point.
                // Add random point inside current window to f.
                const offset1 = offset;
                const offset2 = offset + Math.abs(wbits) - 1; // -1 because we skip zero
                const cond1 = window % 2 !== 0;
                const cond2 = wbits < 0;
                if (wbits === 0) // The most important part for const-time getPublicKey
                f = f.add(constTimeNegate(cond1, precomputes[offset1]));
                else p = p.add(constTimeNegate(cond2, precomputes[offset2]));
            }
            // JIT-compiler should not eliminate f here, since it will later be used in normalizeZ()
            // Even if the variable is still unused, there are some checks which will
            // throw an exception, so compiler needs to prove they won't happen, which is hard.
            // At this point there is a way to F be infinity-point even if p is not,
            // which makes it less const-time: around 1 bigint multiply.
            return {
                p,
                f
            };
        },
        wNAFCached (P, precomputesMap, n, transform) {
            // @ts-ignore
            const W = P._WINDOW_SIZE || 1;
            // Calculate precomputes on a first run, reuse them after
            let comp = precomputesMap.get(P);
            if (!comp) {
                comp = this.precomputeWindow(P, W);
                if (W !== 1) precomputesMap.set(P, transform(comp));
            }
            return this.wNAF(W, comp, n);
        }
    };
}
function validateBasic(curve) {
    (0, _modularJs.validateField)(curve.Fp);
    (0, _utilsJs.validateObject)(curve, {
        n: "bigint",
        h: "bigint",
        Gx: "field",
        Gy: "field"
    }, {
        nBitLength: "isSafeInteger",
        nByteLength: "isSafeInteger"
    });
    // Set defaults
    return Object.freeze({
        ...(0, _modularJs.nLength)(curve.n, curve.nBitLength),
        ...curve,
        p: curve.Fp.ORDER
    });
}

},{"./modular.js":"aWzDR","./utils.js":"6xA5w","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"xT4Ur":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
// Produces a uniformly random byte string using a cryptographic hash function H that outputs b bits
// https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-hash-to-curve-11#section-5.4.1
parcelHelpers.export(exports, "expand_message_xmd", ()=>expand_message_xmd);
parcelHelpers.export(exports, "expand_message_xof", ()=>expand_message_xof);
/**
 * Hashes arbitrary-length byte strings to a list of one or more elements of a finite field F
 * https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-hash-to-curve-11#section-5.3
 * @param msg a byte string containing the message to hash
 * @param count the number of elements of F to output
 * @param options `{DST: string, p: bigint, m: number, k: number, expand: 'xmd' | 'xof', hash: H}`, see above
 * @returns [u_0, ..., u_(count - 1)], a list of field elements.
 */ parcelHelpers.export(exports, "hash_to_field", ()=>hash_to_field);
parcelHelpers.export(exports, "isogenyMap", ()=>isogenyMap);
parcelHelpers.export(exports, "createHasher", ()=>createHasher);
var _modularJs = require("./modular.js");
var _utilsJs = require("./utils.js");
function validateDST(dst) {
    if (dst instanceof Uint8Array) return dst;
    if (typeof dst === "string") return (0, _utilsJs.utf8ToBytes)(dst);
    throw new Error("DST must be Uint8Array or string");
}
// Octet Stream to Integer. "spec" implementation of os2ip is 2.5x slower vs bytesToNumberBE.
const os2ip = (0, _utilsJs.bytesToNumberBE);
// Integer to Octet Stream (numberToBytesBE)
function i2osp(value, length) {
    if (value < 0 || value >= 1 << 8 * length) throw new Error(`bad I2OSP call: value=${value} length=${length}`);
    const res = Array.from({
        length
    }).fill(0);
    for(let i = length - 1; i >= 0; i--){
        res[i] = value & 0xff;
        value >>>= 8;
    }
    return new Uint8Array(res);
}
function strxor(a, b) {
    const arr = new Uint8Array(a.length);
    for(let i = 0; i < a.length; i++)arr[i] = a[i] ^ b[i];
    return arr;
}
function isBytes(item) {
    if (!(item instanceof Uint8Array)) throw new Error("Uint8Array expected");
}
function isNum(item) {
    if (!Number.isSafeInteger(item)) throw new Error("number expected");
}
function expand_message_xmd(msg, DST, lenInBytes, H) {
    isBytes(msg);
    isBytes(DST);
    isNum(lenInBytes);
    // https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-hash-to-curve-16#section-5.3.3
    if (DST.length > 255) DST = H((0, _utilsJs.concatBytes)((0, _utilsJs.utf8ToBytes)("H2C-OVERSIZE-DST-"), DST));
    const { outputLen: b_in_bytes, blockLen: r_in_bytes } = H;
    const ell = Math.ceil(lenInBytes / b_in_bytes);
    if (ell > 255) throw new Error("Invalid xmd length");
    const DST_prime = (0, _utilsJs.concatBytes)(DST, i2osp(DST.length, 1));
    const Z_pad = i2osp(0, r_in_bytes);
    const l_i_b_str = i2osp(lenInBytes, 2); // len_in_bytes_str
    const b = new Array(ell);
    const b_0 = H((0, _utilsJs.concatBytes)(Z_pad, msg, l_i_b_str, i2osp(0, 1), DST_prime));
    b[0] = H((0, _utilsJs.concatBytes)(b_0, i2osp(1, 1), DST_prime));
    for(let i = 1; i <= ell; i++){
        const args = [
            strxor(b_0, b[i - 1]),
            i2osp(i + 1, 1),
            DST_prime
        ];
        b[i] = H((0, _utilsJs.concatBytes)(...args));
    }
    const pseudo_random_bytes = (0, _utilsJs.concatBytes)(...b);
    return pseudo_random_bytes.slice(0, lenInBytes);
}
function expand_message_xof(msg, DST, lenInBytes, k, H) {
    isBytes(msg);
    isBytes(DST);
    isNum(lenInBytes);
    // https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-hash-to-curve-16#section-5.3.3
    // DST = H('H2C-OVERSIZE-DST-' || a_very_long_DST, Math.ceil((lenInBytes * k) / 8));
    if (DST.length > 255) {
        const dkLen = Math.ceil(2 * k / 8);
        DST = H.create({
            dkLen
        }).update((0, _utilsJs.utf8ToBytes)("H2C-OVERSIZE-DST-")).update(DST).digest();
    }
    if (lenInBytes > 65535 || DST.length > 255) throw new Error("expand_message_xof: invalid lenInBytes");
    return H.create({
        dkLen: lenInBytes
    }).update(msg).update(i2osp(lenInBytes, 2))// 2. DST_prime = DST || I2OSP(len(DST), 1)
    .update(DST).update(i2osp(DST.length, 1)).digest();
}
function hash_to_field(msg, count, options) {
    (0, _utilsJs.validateObject)(options, {
        DST: "string",
        p: "bigint",
        m: "isSafeInteger",
        k: "isSafeInteger",
        hash: "hash"
    });
    const { p, k, m, hash, expand, DST: _DST } = options;
    isBytes(msg);
    isNum(count);
    const DST = validateDST(_DST);
    const log2p = p.toString(2).length;
    const L = Math.ceil((log2p + k) / 8); // section 5.1 of ietf draft link above
    const len_in_bytes = count * m * L;
    let prb; // pseudo_random_bytes
    if (expand === "xmd") prb = expand_message_xmd(msg, DST, len_in_bytes, hash);
    else if (expand === "xof") prb = expand_message_xof(msg, DST, len_in_bytes, k, hash);
    else if (expand === "_internal_pass") // for internal tests only
    prb = msg;
    else throw new Error('expand must be "xmd" or "xof"');
    const u = new Array(count);
    for(let i = 0; i < count; i++){
        const e = new Array(m);
        for(let j = 0; j < m; j++){
            const elm_offset = L * (j + i * m);
            const tv = prb.subarray(elm_offset, elm_offset + L);
            e[j] = (0, _modularJs.mod)(os2ip(tv), p);
        }
        u[i] = e;
    }
    return u;
}
function isogenyMap(field, map) {
    // Make same order as in spec
    const COEFF = map.map((i)=>Array.from(i).reverse());
    return (x, y)=>{
        const [xNum, xDen, yNum, yDen] = COEFF.map((val)=>val.reduce((acc, i)=>field.add(field.mul(acc, x), i)));
        x = field.div(xNum, xDen); // xNum / xDen
        y = field.mul(y, field.div(yNum, yDen)); // y * (yNum / yDev)
        return {
            x,
            y
        };
    };
}
function createHasher(Point, mapToCurve, def) {
    if (typeof mapToCurve !== "function") throw new Error("mapToCurve() must be defined");
    return {
        // Encodes byte string to elliptic curve
        // https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-hash-to-curve-16#section-3
        hashToCurve (msg, options) {
            const u = hash_to_field(msg, 2, {
                ...def,
                DST: def.DST,
                ...options
            });
            const u0 = Point.fromAffine(mapToCurve(u[0]));
            const u1 = Point.fromAffine(mapToCurve(u[1]));
            const P = u0.add(u1).clearCofactor();
            P.assertValidity();
            return P;
        },
        // https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-hash-to-curve-16#section-3
        encodeToCurve (msg, options) {
            const u = hash_to_field(msg, 1, {
                ...def,
                DST: def.encodeDST,
                ...options
            });
            const P = Point.fromAffine(mapToCurve(u[0])).clearCofactor();
            P.assertValidity();
            return P;
        }
    };
}

},{"./modular.js":"aWzDR","./utils.js":"6xA5w","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"e5PHG":[function(require,module,exports) {
/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
// connects noble-curves to noble-hashes
parcelHelpers.export(exports, "getHash", ()=>getHash);
parcelHelpers.export(exports, "createCurve", ()=>createCurve);
var _hmac = require("@noble/hashes/hmac");
var _utils = require("@noble/hashes/utils");
var _weierstrassJs = require("./abstract/weierstrass.js");
function getHash(hash) {
    return {
        hash,
        hmac: (key, ...msgs)=>(0, _hmac.hmac)(hash, key, (0, _utils.concatBytes)(...msgs)),
        randomBytes: (0, _utils.randomBytes)
    };
}
function createCurve(curveDef, defHash) {
    const create = (hash)=>(0, _weierstrassJs.weierstrass)({
            ...curveDef,
            ...getHash(hash)
        });
    return Object.freeze({
        ...create(defHash),
        create
    });
}

},{"@noble/hashes/hmac":"1S2SD","@noble/hashes/utils":"eYkBB","./abstract/weierstrass.js":"dvVS3","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4v3XI":[function(require,module,exports) {
/*
This file is part of web3.js.

web3.js is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

web3.js is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "keyStoreSchema", ()=>keyStoreSchema);
const keyStoreSchema = {
    type: "object",
    required: [
        "crypto",
        "id",
        "version",
        "address"
    ],
    properties: {
        crypto: {
            type: "object",
            required: [
                "cipher",
                "ciphertext",
                "cipherparams",
                "kdf",
                "kdfparams",
                "mac"
            ],
            properties: {
                cipher: {
                    type: "string"
                },
                ciphertext: {
                    type: "string"
                },
                cipherparams: {
                    type: "object"
                },
                kdf: {
                    type: "string"
                },
                kdfparams: {
                    type: "object"
                },
                salt: {
                    type: "string"
                },
                mac: {
                    type: "string"
                }
            }
        },
        id: {
            type: "string"
        },
        version: {
            type: "number"
        },
        address: {
            type: "string"
        }
    }
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"25DH0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
// eslint-disable-next-line @typescript-eslint/no-extraneous-class
parcelHelpers.export(exports, "TransactionFactory", ()=>TransactionFactory);
var _utilsJs = require("../common/utils.js");
var _eip1559TransactionJs = require("./eip1559Transaction.js");
var _eip2930TransactionJs = require("./eip2930Transaction.js");
var _legacyTransactionJs = require("./legacyTransaction.js");
const extraTxTypes = new Map();
class TransactionFactory {
    // It is not possible to instantiate a TransactionFactory object.
    // eslint-disable-next-line @typescript-eslint/no-empty-function, no-useless-constructor
    constructor(){}
    static typeToInt(txType) {
        return Number((0, _utilsJs.uint8ArrayToBigInt)((0, _utilsJs.toUint8Array)(txType)));
    }
    static registerTransactionType(type, txClass) {
        const txType = TransactionFactory.typeToInt(type);
        extraTxTypes.set(txType, txClass);
    }
    /**
     * Create a transaction from a `txData` object
     *
     * @param txData - The transaction data. The `type` field will determine which transaction type is returned (if undefined, creates a legacy transaction)
     * @param txOptions - Options to pass on to the constructor of the transaction
     */ static fromTxData(txData, txOptions = {}) {
        if (!("type" in txData) || txData.type === undefined) // Assume legacy transaction
        return (0, _legacyTransactionJs.Transaction).fromTxData(txData, txOptions);
        const txType = TransactionFactory.typeToInt(txData.type);
        if (txType === 0) return (0, _legacyTransactionJs.Transaction).fromTxData(txData, txOptions);
        if (txType === 1) // eslint-disable-next-line @typescript-eslint/consistent-type-assertions
        return (0, _eip2930TransactionJs.AccessListEIP2930Transaction).fromTxData(// eslint-disable-next-line @typescript-eslint/consistent-type-assertions
        txData, txOptions);
        if (txType === 2) return (0, _eip1559TransactionJs.FeeMarketEIP1559Transaction).fromTxData(// eslint-disable-next-line @typescript-eslint/consistent-type-assertions
        txData, txOptions);
        const ExtraTransaction = extraTxTypes.get(txType);
        if (ExtraTransaction === null || ExtraTransaction === void 0 ? void 0 : ExtraTransaction.fromTxData) return ExtraTransaction.fromTxData(txData, txOptions);
        throw new Error(`Tx instantiation with type ${txType} not supported`);
    }
    /**
     * This method tries to decode serialized data.
     *
     * @param data - The data Uint8Array
     * @param txOptions - The transaction options
     */ static fromSerializedData(data, txOptions = {}) {
        if (data[0] <= 0x7f) // Determine the type.
        switch(data[0]){
            case 1:
                return (0, _eip2930TransactionJs.AccessListEIP2930Transaction).fromSerializedTx(data, txOptions);
            case 2:
                return (0, _eip1559TransactionJs.FeeMarketEIP1559Transaction).fromSerializedTx(data, txOptions);
            default:
                {
                    const ExtraTransaction = extraTxTypes.get(Number(data[0]));
                    if (ExtraTransaction === null || ExtraTransaction === void 0 ? void 0 : ExtraTransaction.fromSerializedTx) return ExtraTransaction.fromSerializedTx(data, txOptions);
                    throw new Error(`TypedTransaction with ID ${data[0]} unknown`);
                }
        }
        else return (0, _legacyTransactionJs.Transaction).fromSerializedTx(data, txOptions);
    }
    /**
     * When decoding a BlockBody, in the transactions field, a field is either:
     * A Uint8Array (a TypedTransaction - encoded as TransactionType || rlp(TransactionPayload))
     * A Uint8Array[] (Legacy Transaction)
     * This method returns the right transaction.
     *
     * @param data - A Uint8Array or Uint8Array[]
     * @param txOptions - The transaction options
     */ static fromBlockBodyData(data, txOptions = {}) {
        if (data instanceof Uint8Array) return this.fromSerializedData(data, txOptions);
        if (Array.isArray(data)) // It is a legacy transaction
        return (0, _legacyTransactionJs.Transaction).fromValuesArray(data, txOptions);
        throw new Error("Cannot decode transaction: unknown type input");
    }
}

},{"../common/utils.js":"9o2Mr","./eip1559Transaction.js":"o5zTD","./eip2930Transaction.js":"lMryF","./legacyTransaction.js":"3UHS4","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9o2Mr":[function(require,module,exports) {
/*
This file is part of web3.js.

web3.js is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

web3.js is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "stripHexPrefix", ()=>stripHexPrefix);
/**
 * Parses a genesis.json exported from Geth into parameters for Common instance
 * @param json representing the Geth genesis file
 * @param name optional chain name
 * @returns parsed params
 */ parcelHelpers.export(exports, "parseGethGenesis", ()=>parseGethGenesis);
/**
 * Pads a `String` to have an even length
 * @param value
 * @return output
 */ parcelHelpers.export(exports, "padToEven", ()=>padToEven);
parcelHelpers.export(exports, "intToUint8Array", ()=>intToUint8Array);
parcelHelpers.export(exports, "toUint8Array", ()=>toUint8Array);
/**
 * Converts a {@link Uint8Array} to a {@link bigint}
 */ parcelHelpers.export(exports, "uint8ArrayToBigInt", ()=>uint8ArrayToBigInt);
/**
 * Converts a {@link bigint} to a {@link Uint8Array}
 */ parcelHelpers.export(exports, "bigIntToUint8Array", ()=>bigIntToUint8Array);
parcelHelpers.export(exports, "zeros", ()=>zeros);
/**
 * Throws if input is not a Uint8Array
 * @param {Uint8Array} input value to check
 */ parcelHelpers.export(exports, "assertIsUint8Array", ()=>assertIsUint8Array);
parcelHelpers.export(exports, "setLengthLeft", ()=>setLengthLeft);
/**
 * Trims leading zeros from a `Uint8Array`, `String` or `Number[]`.
 * @param a (Uint8Array|Array|String)
 * @return (Uint8Array|Array|String)
 */ parcelHelpers.export(exports, "stripZeros", ()=>stripZeros);
parcelHelpers.export(exports, "unpadUint8Array", ()=>unpadUint8Array);
parcelHelpers.export(exports, "bigIntToHex", ()=>bigIntToHex);
/**
 * Convert value from bigint to an unpadded Uint8Array
 * (useful for RLP transport)
 * @param value value to convert
 */ parcelHelpers.export(exports, "bigIntToUnpaddedUint8Array", ()=>bigIntToUnpaddedUint8Array);
parcelHelpers.export(exports, "ecrecover", ()=>ecrecover);
parcelHelpers.export(exports, "toType", ()=>toType);
var _web3Validator = require("web3-validator");
var _web3Utils = require("web3-utils");
var _constantsJs = require("../tx/constants.js");
var _enumsJs = require("./enums.js");
var _typesJs = require("./types.js");
const stripHexPrefix = (str)=>{
    if (typeof str !== "string") throw new Error(`[stripHexPrefix] input must be type 'string', received ${typeof str}`);
    return (0, _web3Validator.isHexPrefixed)(str) ? str.slice(2) : str;
};
/**
 * Transforms Geth formatted nonce (i.e. hex string) to 8 byte 0x-prefixed string used internally
 * @param nonce string parsed from the Geth genesis file
 * @returns nonce as a 0x-prefixed 8 byte string
 */ function formatNonce(nonce) {
    if (!nonce || nonce === "0x0") return "0x0000000000000000";
    if ((0, _web3Validator.isHexPrefixed)(nonce)) return `0x${stripHexPrefix(nonce).padStart(16, "0")}`;
    return `0x${nonce.padStart(16, "0")}`;
}
/**
 * Converts a `Number` into a hex `String`
 * @param {Number} i
 * @return {String}
 */ const intToHex = function(i) {
    if (!Number.isSafeInteger(i) || i < 0) throw new Error(`Received an invalid integer type: ${i}`);
    return `0x${i.toString(16)}`;
};
/**
 * Converts Geth genesis parameters to an EthereumJS compatible `CommonOpts` object
 * @param json object representing the Geth genesis file
 * @param optional mergeForkIdPostMerge which clarifies the placement of MergeForkIdTransition
 * hardfork, which by default is post merge as with the merged eth networks but could also come
 * before merge like in kiln genesis
 * @returns genesis parameters in a `CommonOpts` compliant object
 */ function parseGethParams(json, mergeForkIdPostMerge = true) {
    var _a, _b;
    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
    const { name, config, difficulty, mixHash, gasLimit, coinbase, baseFeePerGas } = json;
    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
    let { extraData, timestamp, nonce } = json;
    const genesisTimestamp = Number(timestamp);
    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
    const { chainId } = config;
    // geth is not strictly putting empty fields with a 0x prefix
    if (extraData === "") extraData = "0x";
    // geth may use number for timestamp
    if (!(0, _web3Validator.isHexPrefixed)(timestamp)) // eslint-disable-next-line radix
    timestamp = intToHex(parseInt(timestamp));
    // geth may not give us a nonce strictly formatted to an 8 byte hex string
    if (nonce.length !== 18) nonce = formatNonce(nonce);
    // EIP155 and EIP158 are both part of Spurious Dragon hardfork and must occur at the same time
    // but have different configuration parameters in geth genesis parameters
    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
    if (config.eip155Block !== config.eip158Block) throw new Error("EIP155 block number must equal EIP 158 block number since both are part of SpuriousDragon hardfork and the client only supports activating the full hardfork");
    const params = {
        name,
        chainId,
        networkId: chainId,
        genesis: {
            timestamp,
            // eslint-disable-next-line radix
            gasLimit: parseInt(gasLimit),
            // eslint-disable-next-line radix
            difficulty: parseInt(difficulty),
            nonce,
            extraData,
            mixHash,
            coinbase,
            baseFeePerGas
        },
        hardfork: undefined,
        hardforks: [],
        bootstrapNodes: [],
        consensus: // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
        config.clique !== undefined ? {
            type: "poa",
            algorithm: "clique",
            clique: {
                // The recent geth genesis seems to be using blockperiodseconds
                // and epochlength for clique specification
                // see: https://hackmd.io/PqZgMpnkSWCWv5joJoFymQ
                // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-assignment
                period: (_a = config.clique.period) !== null && _a !== void 0 ? _a : config.clique.blockperiodseconds,
                // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access,  @typescript-eslint/no-unsafe-assignment
                epoch: (_b = config.clique.epoch) !== null && _b !== void 0 ? _b : config.clique.epochlength
            }
        } : {
            type: "pow",
            algorithm: "ethash",
            ethash: {}
        }
    };
    const forkMap = {
        [(0, _enumsJs.Hardfork).Homestead]: {
            name: "homesteadBlock"
        },
        [(0, _enumsJs.Hardfork).Dao]: {
            name: "daoForkBlock"
        },
        [(0, _enumsJs.Hardfork).TangerineWhistle]: {
            name: "eip150Block"
        },
        [(0, _enumsJs.Hardfork).SpuriousDragon]: {
            name: "eip155Block"
        },
        [(0, _enumsJs.Hardfork).Byzantium]: {
            name: "byzantiumBlock"
        },
        [(0, _enumsJs.Hardfork).Constantinople]: {
            name: "constantinopleBlock"
        },
        [(0, _enumsJs.Hardfork).Petersburg]: {
            name: "petersburgBlock"
        },
        [(0, _enumsJs.Hardfork).Istanbul]: {
            name: "istanbulBlock"
        },
        [(0, _enumsJs.Hardfork).MuirGlacier]: {
            name: "muirGlacierBlock"
        },
        [(0, _enumsJs.Hardfork).Berlin]: {
            name: "berlinBlock"
        },
        [(0, _enumsJs.Hardfork).London]: {
            name: "londonBlock"
        },
        [(0, _enumsJs.Hardfork).MergeForkIdTransition]: {
            name: "mergeForkBlock",
            postMerge: mergeForkIdPostMerge
        },
        [(0, _enumsJs.Hardfork).Shanghai]: {
            name: "shanghaiTime",
            postMerge: true,
            isTimestamp: true
        },
        [(0, _enumsJs.Hardfork).ShardingForkDev]: {
            name: "shardingForkTime",
            postMerge: true,
            isTimestamp: true
        }
    };
    // forkMapRev is the map from config field name to Hardfork
    const forkMapRev = Object.keys(forkMap).reduce((acc, elem)=>{
        acc[forkMap[elem].name] = elem;
        return acc;
    }, {});
    // eslint-disable-next-line @typescript-eslint/no-unsafe-argument
    const configHardforkNames = Object.keys(config).filter(// eslint-disable-next-line no-null/no-null, @typescript-eslint/no-unsafe-member-access
    (key)=>forkMapRev[key] !== undefined && config[key] !== undefined && config[key] !== null);
    params.hardforks = configHardforkNames.map((nameBlock)=>({
            name: forkMapRev[nameBlock],
            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
            block: // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
            forkMap[forkMapRev[nameBlock]].isTimestamp === true || // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
            typeof config[nameBlock] !== "number" ? null : config[nameBlock],
            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
            timestamp: // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
            forkMap[forkMapRev[nameBlock]].isTimestamp === true && // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
            typeof config[nameBlock] === "number" ? config[nameBlock] : undefined
        }))// eslint-disable-next-line no-null/no-null
    .filter((fork)=>fork.block !== null || fork.timestamp !== undefined);
    params.hardforks.sort((a, b)=>{
        var _a, _b;
        return ((_a = a.block) !== null && _a !== void 0 ? _a : Infinity) - ((_b = b.block) !== null && _b !== void 0 ? _b : Infinity);
    });
    params.hardforks.sort((a, b)=>{
        var _a, _b;
        return ((_a = a.timestamp) !== null && _a !== void 0 ? _a : genesisTimestamp) - ((_b = b.timestamp) !== null && _b !== void 0 ? _b : genesisTimestamp);
    });
    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
    if (config.terminalTotalDifficulty !== undefined) {
        // Following points need to be considered for placement of merge hf
        // - Merge hardfork can't be placed at genesis
        // - Place merge hf before any hardforks that require CL participation for e.g. withdrawals
        // - Merge hardfork has to be placed just after genesis if any of the genesis hardforks make CL
        //   necessary for e.g. withdrawals
        const mergeConfig = {
            name: (0, _enumsJs.Hardfork).Merge,
            // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-assignment
            ttd: config.terminalTotalDifficulty,
            // eslint-disable-next-line no-null/no-null
            block: null
        };
        // Merge hardfork has to be placed before first hardfork that is dependent on merge
        const postMergeIndex = params.hardforks.findIndex(// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
        (hf)=>{
            var _a;
            return ((_a = forkMap[hf.name]) === null || _a === void 0 ? void 0 : _a.postMerge) === true;
        });
        if (postMergeIndex !== -1) params.hardforks.splice(postMergeIndex, 0, mergeConfig);
        else params.hardforks.push(mergeConfig);
    }
    const latestHardfork = params.hardforks.length > 0 ? params.hardforks.slice(-1)[0] : undefined;
    params.hardfork = latestHardfork === null || latestHardfork === void 0 ? void 0 : latestHardfork.name;
    params.hardforks.unshift({
        name: (0, _enumsJs.Hardfork).Chainstart,
        block: 0
    });
    return params;
}
function parseGethGenesis(json, name, mergeForkIdPostMerge) {
    try {
        if ([
            "config",
            "difficulty",
            "gasLimit",
            "alloc"
        ].some((field)=>!(field in json))) throw new Error("Invalid format, expected geth genesis fields missing");
        if (name !== undefined) // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, no-param-reassign
        json.name = name;
        return parseGethParams(json, mergeForkIdPostMerge);
    } catch (e) {
        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/restrict-template-expressions
        throw new Error(`Error parsing parameters file: ${e.message}`);
    }
}
function padToEven(value) {
    let a = value;
    if (typeof a !== "string") throw new Error(`[padToEven] value must be type 'string', received ${typeof a}`);
    if (a.length % 2) a = `0${a}`;
    return a;
}
const intToUint8Array = function(i) {
    const hex = intToHex(i);
    return (0, _web3Utils.hexToBytes)(`0x${padToEven(hex.slice(2))}`);
};
const toUint8Array = function(v) {
    // eslint-disable-next-line no-null/no-null
    if (v === null || v === undefined) return new Uint8Array();
    if (v instanceof Uint8Array) return v;
    if (Array.isArray(v)) return Uint8Array.from(v);
    if (typeof v === "string") {
        if (!(0, _web3Validator.isHexString)(v)) throw new Error(`Cannot convert string to Uint8Array. only supports 0x-prefixed hex strings and this string was given: ${v}`);
        return (0, _web3Utils.hexToBytes)(padToEven(stripHexPrefix(v)));
    }
    if (typeof v === "number") return toUint8Array((0, _web3Utils.numberToHex)(v));
    if (typeof v === "bigint") {
        if (v < BigInt(0)) throw new Error(`Cannot convert negative bigint to Uint8Array. Given: ${v}`);
        let n = v.toString(16);
        if (n.length % 2) n = `0${n}`;
        return toUint8Array(`0x${n}`);
    }
    if (v.toArray) // converts a BN to a Uint8Array
    return Uint8Array.from(v.toArray());
    throw new Error("invalid type");
};
function uint8ArrayToBigInt(buf) {
    const hex = (0, _web3Utils.bytesToHex)(buf);
    if (hex === "0x") return BigInt(0);
    return BigInt(hex);
}
function bigIntToUint8Array(num) {
    return toUint8Array(`0x${num.toString(16)}`);
}
const zeros = function(bytes) {
    return new Uint8Array(bytes).fill(0);
};
/**
 * Pads a `Uint8Array` with zeros till it has `length` bytes.
 * Truncates the beginning or end of input if its length exceeds `length`.
 * @param msg the value to pad (Uint8Array)
 * @param length the number of bytes the output should be
 * @param right whether to start padding form the left or right
 * @return (Uint8Array)
 */ const setLength = function(msg, length, right) {
    const buf = zeros(length);
    if (right) {
        if (msg.length < length) {
            buf.set(msg);
            return buf;
        }
        return msg.subarray(0, length);
    }
    if (msg.length < length) {
        buf.set(msg, length - msg.length);
        return buf;
    }
    return msg.subarray(-length);
};
function assertIsUint8Array(input) {
    if (!(input instanceof Uint8Array)) {
        // eslint-disable-next-line @typescript-eslint/restrict-template-expressions
        const msg = `This method only supports Uint8Array but input was: ${input}`;
        throw new Error(msg);
    }
}
const setLengthLeft = function(msg, length) {
    assertIsUint8Array(msg);
    return setLength(msg, length, false);
};
function stripZeros(a) {
    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-assignment
    let first = a[0];
    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-call
    while(a.length > 0 && first.toString() === "0"){
        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-assignment, prefer-destructuring, @typescript-eslint/no-unsafe-call, no-param-reassign
        a = a.slice(1);
        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment, prefer-destructuring, @typescript-eslint/no-unsafe-member-access
        first = a[0];
    }
    // eslint-disable-next-line @typescript-eslint/no-unsafe-return
    return a;
}
const unpadUint8Array = function(a) {
    assertIsUint8Array(a);
    return stripZeros(a);
};
const bigIntToHex = (num)=>`0x${num.toString(16)}`;
function bigIntToUnpaddedUint8Array(value) {
    return unpadUint8Array(bigIntToUint8Array(value));
}
function calculateSigRecovery(v, chainId) {
    if (v === BigInt(0) || v === BigInt(1)) return v;
    if (chainId === undefined) return v - BigInt(27);
    return v - (chainId * BigInt(2) + BigInt(35));
}
function isValidSigRecovery(recovery) {
    return recovery === BigInt(0) || recovery === BigInt(1);
}
const ecrecover = function(msgHash, v, r, s, chainId) {
    const recovery = calculateSigRecovery(v, chainId);
    if (!isValidSigRecovery(recovery)) throw new Error("Invalid signature v value");
    const senderPubKey = new (0, _constantsJs.secp256k1).Signature(uint8ArrayToBigInt(r), uint8ArrayToBigInt(s)).addRecoveryBit(Number(recovery)).recoverPublicKey(msgHash).toRawBytes(false);
    return senderPubKey.slice(1);
};
function toType(input, outputType) {
    // eslint-disable-next-line no-null/no-null
    if (input === null) // eslint-disable-next-line no-null/no-null
    return null;
    if (input === undefined) return undefined;
    if (typeof input === "string" && !(0, _web3Validator.isHexString)(input)) throw new Error(`A string must be provided with a 0x-prefix, given: ${input}`);
    else if (typeof input === "number" && !Number.isSafeInteger(input)) throw new Error("The provided number is greater than MAX_SAFE_INTEGER (please use an alternative input type)");
    const output = toUint8Array(input);
    switch(outputType){
        case (0, _typesJs.TypeOutput).Uint8Array:
            return output;
        case (0, _typesJs.TypeOutput).BigInt:
            return uint8ArrayToBigInt(output);
        case (0, _typesJs.TypeOutput).Number:
            {
                const bigInt = uint8ArrayToBigInt(output);
                if (bigInt > BigInt(Number.MAX_SAFE_INTEGER)) throw new Error("The provided number is greater than MAX_SAFE_INTEGER (please use an alternative output type)");
                return Number(bigInt);
            }
        case (0, _typesJs.TypeOutput).PrefixedHexString:
            return (0, _web3Utils.bytesToHex)(output);
        default:
            throw new Error("unknown outputType");
    }
}

},{"web3-validator":"6HK71","web3-utils":"8WsWI","../tx/constants.js":"3b6oT","./enums.js":"fSM6S","./types.js":"03HK1","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fSM6S":[function(require,module,exports) {
/*
This file is part of web3.js.

web3.js is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

web3.js is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Chain", ()=>Chain);
parcelHelpers.export(exports, "Hardfork", ()=>Hardfork);
parcelHelpers.export(exports, "ConsensusType", ()=>ConsensusType);
parcelHelpers.export(exports, "ConsensusAlgorithm", ()=>ConsensusAlgorithm);
parcelHelpers.export(exports, "CustomChain", ()=>CustomChain);
var Chain;
(function(Chain) {
    Chain[Chain["Mainnet"] = 1] = "Mainnet";
    Chain[Chain["Goerli"] = 5] = "Goerli";
    Chain[Chain["Sepolia"] = 11155111] = "Sepolia";
})(Chain || (Chain = {}));
var Hardfork;
(function(Hardfork) {
    Hardfork["Chainstart"] = "chainstart";
    Hardfork["Homestead"] = "homestead";
    Hardfork["Dao"] = "dao";
    Hardfork["TangerineWhistle"] = "tangerineWhistle";
    Hardfork["SpuriousDragon"] = "spuriousDragon";
    Hardfork["Byzantium"] = "byzantium";
    Hardfork["Constantinople"] = "constantinople";
    Hardfork["Petersburg"] = "petersburg";
    Hardfork["Istanbul"] = "istanbul";
    Hardfork["MuirGlacier"] = "muirGlacier";
    Hardfork["Berlin"] = "berlin";
    Hardfork["London"] = "london";
    Hardfork["ArrowGlacier"] = "arrowGlacier";
    Hardfork["GrayGlacier"] = "grayGlacier";
    Hardfork["MergeForkIdTransition"] = "mergeForkIdTransition";
    Hardfork["Merge"] = "merge";
    Hardfork["Shanghai"] = "shanghai";
    Hardfork["ShardingForkDev"] = "shardingFork";
})(Hardfork || (Hardfork = {}));
var ConsensusType;
(function(ConsensusType) {
    ConsensusType["ProofOfStake"] = "pos";
    ConsensusType["ProofOfWork"] = "pow";
    ConsensusType["ProofOfAuthority"] = "poa";
})(ConsensusType || (ConsensusType = {}));
var ConsensusAlgorithm;
(function(ConsensusAlgorithm) {
    ConsensusAlgorithm["Ethash"] = "ethash";
    ConsensusAlgorithm["Clique"] = "clique";
    ConsensusAlgorithm["Casper"] = "casper";
})(ConsensusAlgorithm || (ConsensusAlgorithm = {}));
var CustomChain;
(function(CustomChain) {
    /**
     * Polygon (Matic) Mainnet
     *
     * - [Documentation](https://docs.matic.network/docs/develop/network-details/network)
     */ CustomChain["PolygonMainnet"] = "polygon-mainnet";
    /**
     * Polygon (Matic) Mumbai Testnet
     *
     * - [Documentation](https://docs.matic.network/docs/develop/network-details/network)
     */ CustomChain["PolygonMumbai"] = "polygon-mumbai";
    /**
     * Arbitrum Rinkeby Testnet
     *
     * - [Documentation](https://developer.offchainlabs.com/docs/public_testnet)
     */ CustomChain["ArbitrumRinkebyTestnet"] = "arbitrum-rinkeby-testnet";
    /**
     * Arbitrum One - mainnet for Arbitrum roll-up
     *
     * - [Documentation](https://developer.offchainlabs.com/public-chains)
     */ CustomChain["ArbitrumOne"] = "arbitrum-one";
    /**
     * xDai EVM sidechain with a native stable token
     *
     * - [Documentation](https://www.xdaichain.com/)
     */ CustomChain["xDaiChain"] = "x-dai-chain";
    /**
     * Optimistic Kovan - testnet for Optimism roll-up
     *
     * - [Documentation](https://community.optimism.io/docs/developers/tutorials.html)
     */ CustomChain["OptimisticKovan"] = "optimistic-kovan";
    /**
     * Optimistic Ethereum - mainnet for Optimism roll-up
     *
     * - [Documentation](https://community.optimism.io/docs/developers/tutorials.html)
     */ CustomChain["OptimisticEthereum"] = "optimistic-ethereum";
})(CustomChain || (CustomChain = {}));

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"03HK1":[function(require,module,exports) {
/**
 * Type output options
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "TypeOutput", ()=>TypeOutput);
var TypeOutput;
(function(TypeOutput) {
    TypeOutput[TypeOutput["Number"] = 0] = "Number";
    TypeOutput[TypeOutput["BigInt"] = 1] = "BigInt";
    TypeOutput[TypeOutput["Uint8Array"] = 2] = "Uint8Array";
    TypeOutput[TypeOutput["PrefixedHexString"] = 3] = "PrefixedHexString";
})(TypeOutput || (TypeOutput = {}));

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"o5zTD":[function(require,module,exports) {
/*
This file is part of web3.js.

web3.js is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

web3.js is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Typed transaction with a new gas fee market mechanism
 *
 * - TransactionType: 2
 * - EIP: [EIP-1559](https://eips.ethereum.org/EIPS/eip-1559)
 */ // eslint-disable-next-line no-use-before-define
parcelHelpers.export(exports, "FeeMarketEIP1559Transaction", ()=>FeeMarketEIP1559Transaction);
var _keccakJs = require("ethereum-cryptography/keccak.js");
var _web3Validator = require("web3-validator");
var _rlp = require("@ethereumjs/rlp");
var _web3Utils = require("web3-utils");
var _constantsJs = require("./constants.js");
var _baseTransactionJs = require("./baseTransaction.js");
var _utilsJs = require("./utils.js");
var _utilsJs1 = require("../common/utils.js");
const TRANSACTION_TYPE = 2;
const TRANSACTION_TYPE_UINT8ARRAY = (0, _web3Utils.hexToBytes)(TRANSACTION_TYPE.toString(16).padStart(2, "0"));
class FeeMarketEIP1559Transaction extends (0, _baseTransactionJs.BaseTransaction) {
    /**
     * This constructor takes the values, validates them, assigns them and freezes the object.
     *
     * It is not recommended to use this constructor directly. Instead use
     * the static factory methods to assist in creating a Transaction object from
     * varying data types.
     */ constructor(txData, opts = {}){
        var _a;
        super(Object.assign(Object.assign({}, txData), {
            type: TRANSACTION_TYPE
        }), opts);
        /**
         * The default HF if the tx type is active on that HF
         * or the first greater HF where the tx is active.
         *
         * @hidden
         */ this.DEFAULT_HARDFORK = "london";
        const { chainId, accessList, maxFeePerGas, maxPriorityFeePerGas } = txData;
        this.common = this._getCommon(opts.common, chainId);
        this.chainId = this.common.chainId();
        if (!this.common.isActivatedEIP(1559)) throw new Error("EIP-1559 not enabled on Common");
        this.activeCapabilities = this.activeCapabilities.concat([
            1559,
            2718,
            2930
        ]);
        // Populate the access list fields
        const accessListData = (0, _utilsJs.getAccessListData)(accessList !== null && accessList !== void 0 ? accessList : []);
        this.accessList = accessListData.accessList;
        this.AccessListJSON = accessListData.AccessListJSON;
        // Verify the access list format.
        (0, _utilsJs.verifyAccessList)(this.accessList);
        this.maxFeePerGas = (0, _utilsJs1.uint8ArrayToBigInt)((0, _utilsJs1.toUint8Array)(maxFeePerGas === "" ? "0x" : maxFeePerGas));
        this.maxPriorityFeePerGas = (0, _utilsJs1.uint8ArrayToBigInt)((0, _utilsJs1.toUint8Array)(maxPriorityFeePerGas === "" ? "0x" : maxPriorityFeePerGas));
        this._validateCannotExceedMaxInteger({
            maxFeePerGas: this.maxFeePerGas,
            maxPriorityFeePerGas: this.maxPriorityFeePerGas
        });
        (0, _baseTransactionJs.BaseTransaction)._validateNotArray(txData);
        if (this.gasLimit * this.maxFeePerGas > (0, _constantsJs.MAX_INTEGER)) {
            const msg = this._errorMsg("gasLimit * maxFeePerGas cannot exceed MAX_INTEGER (2^256-1)");
            throw new Error(msg);
        }
        if (this.maxFeePerGas < this.maxPriorityFeePerGas) {
            const msg = this._errorMsg("maxFeePerGas cannot be less than maxPriorityFeePerGas (The total must be the larger of the two)");
            throw new Error(msg);
        }
        this._validateYParity();
        this._validateHighS();
        const freeze = (_a = opts === null || opts === void 0 ? void 0 : opts.freeze) !== null && _a !== void 0 ? _a : true;
        if (freeze) Object.freeze(this);
    }
    /**
     * Instantiate a transaction from a data dictionary.
     *
     * Format: { chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, to, value, data,
     * accessList, v, r, s }
     *
     * Notes:
     * - `chainId` will be set automatically if not provided
     * - All parameters are optional and have some basic default values
     */ static fromTxData(txData, opts = {}) {
        return new FeeMarketEIP1559Transaction(txData, opts);
    }
    /**
     * Instantiate a transaction from the serialized tx.
     *
     * Format: `0x02 || rlp([chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, to, value, data,
     * accessList, signatureYParity, signatureR, signatureS])`
     */ static fromSerializedTx(serialized, opts = {}) {
        if (!(0, _web3Utils.uint8ArrayEquals)(serialized.subarray(0, 1), TRANSACTION_TYPE_UINT8ARRAY)) throw new Error(`Invalid serialized tx input: not an EIP-1559 transaction (wrong tx type, expected: ${TRANSACTION_TYPE}, received: ${(0, _web3Utils.bytesToHex)(serialized.subarray(0, 1))}`);
        const values = (0, _rlp.RLP).decode(serialized.subarray(1));
        if (!Array.isArray(values)) throw new Error("Invalid serialized tx input: must be array");
        // eslint-disable-next-line @typescript-eslint/no-unsafe-argument
        return FeeMarketEIP1559Transaction.fromValuesArray(values, opts);
    }
    /**
     * Create a transaction from a values array.
     *
     * Format: `[chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, to, value, data,
     * accessList, signatureYParity, signatureR, signatureS]`
     */ static fromValuesArray(values, opts = {}) {
        if (values.length !== 9 && values.length !== 12) throw new Error("Invalid EIP-1559 transaction. Only expecting 9 values (for unsigned tx) or 12 values (for signed tx).");
        const [chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, to, value, data, accessList, v, r, s] = values;
        this._validateNotArray({
            chainId,
            v
        });
        (0, _web3Validator.validateNoLeadingZeroes)({
            nonce,
            maxPriorityFeePerGas,
            maxFeePerGas,
            gasLimit,
            value,
            v,
            r,
            s
        });
        return new FeeMarketEIP1559Transaction({
            chainId: (0, _utilsJs1.uint8ArrayToBigInt)(chainId),
            nonce,
            maxPriorityFeePerGas,
            maxFeePerGas,
            gasLimit,
            to,
            value,
            data,
            accessList: accessList !== null && accessList !== void 0 ? accessList : [],
            v: v !== undefined ? (0, _utilsJs1.uint8ArrayToBigInt)(v) : undefined,
            r,
            s
        }, opts);
    }
    /**
     * The amount of gas paid for the data in this tx
     */ getDataFee() {
        if (this.cache.dataFee && this.cache.dataFee.hardfork === this.common.hardfork()) return this.cache.dataFee.value;
        let cost = super.getDataFee();
        cost += BigInt((0, _utilsJs.getDataFeeEIP2930)(this.accessList, this.common));
        if (Object.isFrozen(this)) this.cache.dataFee = {
            value: cost,
            hardfork: this.common.hardfork()
        };
        return cost;
    }
    /**
     * The up front amount that an account must have for this transaction to be valid
     * @param baseFee The base fee of the block (will be set to 0 if not provided)
     */ getUpfrontCost(baseFee = BigInt(0)) {
        const prio = this.maxPriorityFeePerGas;
        const maxBase = this.maxFeePerGas - baseFee;
        const inclusionFeePerGas = prio < maxBase ? prio : maxBase;
        const gasPrice = inclusionFeePerGas + baseFee;
        return this.gasLimit * gasPrice + this.value;
    }
    /**
     * Returns a Uint8Array Array of the raw Uint8Arrays of the EIP-1559 transaction, in order.
     *
     * Format: `[chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, to, value, data,
     * accessList, signatureYParity, signatureR, signatureS]`
     *
     * Use {@link FeeMarketEIP1559Transaction.serialize} to add a transaction to a block
     * with {@link Block.fromValuesArray}.
     *
     * For an unsigned tx this method uses the empty Uint8Array values for the
     * signature parameters `v`, `r` and `s` for encoding. For an EIP-155 compliant
     * representation for external signing use {@link FeeMarketEIP1559Transaction.getMessageToSign}.
     */ raw() {
        return [
            (0, _utilsJs1.bigIntToUnpaddedUint8Array)(this.chainId),
            (0, _utilsJs1.bigIntToUnpaddedUint8Array)(this.nonce),
            (0, _utilsJs1.bigIntToUnpaddedUint8Array)(this.maxPriorityFeePerGas),
            (0, _utilsJs1.bigIntToUnpaddedUint8Array)(this.maxFeePerGas),
            (0, _utilsJs1.bigIntToUnpaddedUint8Array)(this.gasLimit),
            this.to !== undefined ? this.to.buf : Uint8Array.from([]),
            (0, _utilsJs1.bigIntToUnpaddedUint8Array)(this.value),
            this.data,
            this.accessList,
            this.v !== undefined ? (0, _utilsJs1.bigIntToUnpaddedUint8Array)(this.v) : Uint8Array.from([]),
            this.r !== undefined ? (0, _utilsJs1.bigIntToUnpaddedUint8Array)(this.r) : Uint8Array.from([]),
            this.s !== undefined ? (0, _utilsJs1.bigIntToUnpaddedUint8Array)(this.s) : Uint8Array.from([])
        ];
    }
    /**
     * Returns the serialized encoding of the EIP-1559 transaction.
     *
     * Format: `0x02 || rlp([chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, to, value, data,
     * accessList, signatureYParity, signatureR, signatureS])`
     *
     * Note that in contrast to the legacy tx serialization format this is not
     * valid RLP any more due to the raw tx type preceding and concatenated to
     * the RLP encoding of the values.
     */ serialize() {
        const base = this.raw();
        return (0, _web3Utils.uint8ArrayConcat)(TRANSACTION_TYPE_UINT8ARRAY, (0, _rlp.RLP).encode(base));
    }
    /**
     * Returns the serialized unsigned tx (hashed or raw), which can be used
     * to sign the transaction (e.g. for sending to a hardware wallet).
     *
     * Note: in contrast to the legacy tx the raw message format is already
     * serialized and doesn't need to be RLP encoded any more.
     *
     * ```javascript
     * const serializedMessage = tx.getMessageToSign(false) // use this for the HW wallet input
     * ```
     *
     * @param hashMessage - Return hashed message if set to true (default: true)
     */ getMessageToSign(hashMessage = true) {
        const base = this.raw().slice(0, 9);
        const message = (0, _web3Utils.uint8ArrayConcat)(TRANSACTION_TYPE_UINT8ARRAY, (0, _rlp.RLP).encode(base));
        if (hashMessage) return (0, _keccakJs.keccak256)(message);
        return message;
    }
    /**
     * Computes a sha3-256 hash of the serialized tx.
     *
     * This method can only be used for signed txs (it throws otherwise).
     * Use {@link FeeMarketEIP1559Transaction.getMessageToSign} to get a tx hash for the purpose of signing.
     */ hash() {
        if (!this.isSigned()) {
            const msg = this._errorMsg("Cannot call hash method if transaction is not signed");
            throw new Error(msg);
        }
        if (Object.isFrozen(this)) {
            if (!this.cache.hash) this.cache.hash = (0, _keccakJs.keccak256)(this.serialize());
            return this.cache.hash;
        }
        return (0, _keccakJs.keccak256)(this.serialize());
    }
    /**
     * Computes a sha3-256 hash which can be used to verify the signature
     */ getMessageToVerifySignature() {
        return this.getMessageToSign();
    }
    /**
     * Returns the public key of the sender
     */ getSenderPublicKey() {
        if (!this.isSigned()) {
            const msg = this._errorMsg("Cannot call this method if transaction is not signed");
            throw new Error(msg);
        }
        const msgHash = this.getMessageToVerifySignature();
        const { v, r, s } = this;
        this._validateHighS();
        try {
            return (0, _utilsJs1.ecrecover)(msgHash, v + BigInt(27), (0, _utilsJs1.bigIntToUnpaddedUint8Array)(r), (0, _utilsJs1.bigIntToUnpaddedUint8Array)(s));
        } catch (e) {
            const msg = this._errorMsg("Invalid Signature");
            throw new Error(msg);
        }
    }
    _processSignature(v, r, s) {
        const opts = Object.assign(Object.assign({}, this.txOptions), {
            common: this.common
        });
        return FeeMarketEIP1559Transaction.fromTxData({
            chainId: this.chainId,
            nonce: this.nonce,
            maxPriorityFeePerGas: this.maxPriorityFeePerGas,
            maxFeePerGas: this.maxFeePerGas,
            gasLimit: this.gasLimit,
            to: this.to,
            value: this.value,
            data: this.data,
            accessList: this.accessList,
            v: v - BigInt(27),
            r: (0, _utilsJs1.uint8ArrayToBigInt)(r),
            s: (0, _utilsJs1.uint8ArrayToBigInt)(s)
        }, opts);
    }
    /**
     * Returns an object with the JSON representation of the transaction
     */ toJSON() {
        const accessListJSON = (0, _utilsJs.getAccessListJSON)(this.accessList);
        return {
            chainId: (0, _utilsJs1.bigIntToHex)(this.chainId),
            nonce: (0, _utilsJs1.bigIntToHex)(this.nonce),
            maxPriorityFeePerGas: (0, _utilsJs1.bigIntToHex)(this.maxPriorityFeePerGas),
            maxFeePerGas: (0, _utilsJs1.bigIntToHex)(this.maxFeePerGas),
            gasLimit: (0, _utilsJs1.bigIntToHex)(this.gasLimit),
            to: this.to !== undefined ? this.to.toString() : undefined,
            value: (0, _utilsJs1.bigIntToHex)(this.value),
            data: (0, _web3Utils.bytesToHex)(this.data),
            accessList: accessListJSON,
            v: this.v !== undefined ? (0, _utilsJs1.bigIntToHex)(this.v) : undefined,
            r: this.r !== undefined ? (0, _utilsJs1.bigIntToHex)(this.r) : undefined,
            s: this.s !== undefined ? (0, _utilsJs1.bigIntToHex)(this.s) : undefined
        };
    }
    /**
     * Return a compact error string representation of the object
     */ errorStr() {
        let errorStr = this._getSharedErrorPostfix();
        errorStr += ` maxFeePerGas=${this.maxFeePerGas} maxPriorityFeePerGas=${this.maxPriorityFeePerGas}`;
        return errorStr;
    }
    /**
     * Internal helper function to create an annotated error message
     *
     * @param msg Base error message
     * @hidden
     */ _errorMsg(msg) {
        return `${msg} (${this.errorStr()})`;
    }
}

},{"ethereum-cryptography/keccak.js":"5j5ih","web3-validator":"6HK71","@ethereumjs/rlp":"chaum","web3-utils":"8WsWI","./constants.js":"3b6oT","./baseTransaction.js":"9F41h","./utils.js":"1DKQY","../common/utils.js":"9o2Mr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"chaum":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.RLP = exports.utils = exports.decode = exports.encode = void 0;
/**
 * RLP Encoding based on https://ethereum.org/en/developers/docs/data-structures-and-encoding/rlp/
 * This function takes in data, converts it to Uint8Array if not,
 * and adds a length for recursion.
 * @param input Will be converted to Uint8Array
 * @returns Uint8Array of encoded data
 **/ function encode(input) {
    if (Array.isArray(input)) {
        const output = [];
        let outputLength = 0;
        for(let i = 0; i < input.length; i++){
            const encoded = encode(input[i]);
            output.push(encoded);
            outputLength += encoded.length;
        }
        return concatBytes(encodeLength(outputLength, 192), ...output);
    }
    const inputBuf = toBytes(input);
    if (inputBuf.length === 1 && inputBuf[0] < 128) return inputBuf;
    return concatBytes(encodeLength(inputBuf.length, 128), inputBuf);
}
exports.encode = encode;
/**
 * Slices a Uint8Array, throws if the slice goes out-of-bounds of the Uint8Array.
 * E.g. `safeSlice(hexToBytes('aa'), 1, 2)` will throw.
 * @param input
 * @param start
 * @param end
 */ function safeSlice(input, start, end) {
    if (end > input.length) throw new Error("invalid RLP (safeSlice): end slice of Uint8Array out-of-bounds");
    return input.slice(start, end);
}
/**
 * Parse integers. Check if there is no leading zeros
 * @param v The value to parse
 */ function decodeLength(v) {
    if (v[0] === 0) throw new Error("invalid RLP: extra zeros");
    return parseHexByte(bytesToHex(v));
}
function encodeLength(len, offset) {
    if (len < 56) return Uint8Array.from([
        len + offset
    ]);
    const hexLength = numberToHex(len);
    const lLength = hexLength.length / 2;
    const firstByte = numberToHex(offset + 55 + lLength);
    return Uint8Array.from(hexToBytes(firstByte + hexLength));
}
function decode(input, stream = false) {
    if (typeof input === "undefined" || input === null || input.length === 0) return Uint8Array.from([]);
    const inputBytes = toBytes(input);
    const decoded = _decode(inputBytes);
    if (stream) return decoded;
    if (decoded.remainder.length !== 0) throw new Error("invalid RLP: remainder must be zero");
    return decoded.data;
}
exports.decode = decode;
/** Decode an input with RLP */ function _decode(input) {
    let length, llength, data, innerRemainder, d;
    const decoded = [];
    const firstByte = input[0];
    if (firstByte <= 0x7f) // a single byte whose value is in the [0x00, 0x7f] range, that byte is its own RLP encoding.
    return {
        data: input.slice(0, 1),
        remainder: input.slice(1)
    };
    else if (firstByte <= 0xb7) {
        // string is 0-55 bytes long. A single byte with value 0x80 plus the length of the string followed by the string
        // The range of the first byte is [0x80, 0xb7]
        length = firstByte - 0x7f;
        // set 0x80 null to 0
        if (firstByte === 0x80) data = Uint8Array.from([]);
        else data = safeSlice(input, 1, length);
        if (length === 2 && data[0] < 0x80) throw new Error("invalid RLP encoding: invalid prefix, single byte < 0x80 are not prefixed");
        return {
            data,
            remainder: input.slice(length)
        };
    } else if (firstByte <= 0xbf) {
        // string is greater than 55 bytes long. A single byte with the value (0xb7 plus the length of the length),
        // followed by the length, followed by the string
        llength = firstByte - 0xb6;
        if (input.length - 1 < llength) throw new Error("invalid RLP: not enough bytes for string length");
        length = decodeLength(safeSlice(input, 1, llength));
        if (length <= 55) throw new Error("invalid RLP: expected string length to be greater than 55");
        data = safeSlice(input, llength, length + llength);
        return {
            data,
            remainder: input.slice(length + llength)
        };
    } else if (firstByte <= 0xf7) {
        // a list between 0-55 bytes long
        length = firstByte - 0xbf;
        innerRemainder = safeSlice(input, 1, length);
        while(innerRemainder.length){
            d = _decode(innerRemainder);
            decoded.push(d.data);
            innerRemainder = d.remainder;
        }
        return {
            data: decoded,
            remainder: input.slice(length)
        };
    } else {
        // a list over 55 bytes long
        llength = firstByte - 0xf6;
        length = decodeLength(safeSlice(input, 1, llength));
        if (length < 56) throw new Error("invalid RLP: encoded list too short");
        const totalLength = llength + length;
        if (totalLength > input.length) throw new Error("invalid RLP: total length is larger than the data");
        innerRemainder = safeSlice(input, llength, totalLength);
        while(innerRemainder.length){
            d = _decode(innerRemainder);
            decoded.push(d.data);
            innerRemainder = d.remainder;
        }
        return {
            data: decoded,
            remainder: input.slice(totalLength)
        };
    }
}
const cachedHexes = Array.from({
    length: 256
}, (_v, i)=>i.toString(16).padStart(2, "0"));
function bytesToHex(uint8a) {
    // Pre-caching chars with `cachedHexes` speeds this up 6x
    let hex = "";
    for(let i = 0; i < uint8a.length; i++)hex += cachedHexes[uint8a[i]];
    return hex;
}
function parseHexByte(hexByte) {
    const byte = Number.parseInt(hexByte, 16);
    if (Number.isNaN(byte)) throw new Error("Invalid byte sequence");
    return byte;
}
// Caching slows it down 2-3x
function hexToBytes(hex) {
    if (typeof hex !== "string") throw new TypeError("hexToBytes: expected string, got " + typeof hex);
    if (hex.length % 2) throw new Error("hexToBytes: received invalid unpadded hex");
    const array = new Uint8Array(hex.length / 2);
    for(let i = 0; i < array.length; i++){
        const j = i * 2;
        array[i] = parseHexByte(hex.slice(j, j + 2));
    }
    return array;
}
/** Concatenates two Uint8Arrays into one. */ function concatBytes(...arrays) {
    if (arrays.length === 1) return arrays[0];
    const length = arrays.reduce((a, arr)=>a + arr.length, 0);
    const result = new Uint8Array(length);
    for(let i = 0, pad = 0; i < arrays.length; i++){
        const arr = arrays[i];
        result.set(arr, pad);
        pad += arr.length;
    }
    return result;
}
function utf8ToBytes(utf) {
    return new TextEncoder().encode(utf);
}
/** Transform an integer into its hexadecimal value */ function numberToHex(integer) {
    if (integer < 0) throw new Error("Invalid integer as argument, must be unsigned!");
    const hex = integer.toString(16);
    return hex.length % 2 ? `0${hex}` : hex;
}
/** Pad a string to be even */ function padToEven(a) {
    return a.length % 2 ? `0${a}` : a;
}
/** Check if a string is prefixed by 0x */ function isHexPrefixed(str) {
    return str.length >= 2 && str[0] === "0" && str[1] === "x";
}
/** Removes 0x from a given String */ function stripHexPrefix(str) {
    if (typeof str !== "string") return str;
    return isHexPrefixed(str) ? str.slice(2) : str;
}
/** Transform anything into a Uint8Array */ function toBytes(v) {
    if (v instanceof Uint8Array) return v;
    if (typeof v === "string") {
        if (isHexPrefixed(v)) return hexToBytes(padToEven(stripHexPrefix(v)));
        return utf8ToBytes(v);
    }
    if (typeof v === "number" || typeof v === "bigint") {
        if (!v) return Uint8Array.from([]);
        return hexToBytes(numberToHex(v));
    }
    if (v === null || v === undefined) return Uint8Array.from([]);
    throw new Error("toBytes: received unsupported type " + typeof v);
}
exports.utils = {
    bytesToHex,
    concatBytes,
    hexToBytes,
    utf8ToBytes
};
exports.RLP = {
    encode,
    decode
};

},{}],"9F41h":[function(require,module,exports) {
/*
This file is part of web3.js.

web3.js is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

web3.js is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * This base class will likely be subject to further
 * refactoring along the introduction of additional tx types
 * on the Ethereum network.
 *
 * It is therefore not recommended to use directly.
 */ parcelHelpers.export(exports, "BaseTransaction", ()=>BaseTransaction);
var _web3Utils = require("web3-utils");
var _constantsJs = require("./constants.js");
var _utilsJs = require("../common/utils.js");
var _commonJs = require("../common/common.js");
var _enumsJs = require("../common/enums.js");
var _typesJs = require("./types.js");
var _addressJs = require("./address.js");
var _utilsJs1 = require("./utils.js");
class BaseTransaction {
    constructor(txData, opts){
        var _a, _b;
        this.cache = {
            hash: undefined,
            dataFee: undefined
        };
        /**
         * List of tx type defining EIPs,
         * e.g. 1559 (fee market) and 2930 (access lists)
         * for FeeMarketEIP1559Transaction objects
         */ this.activeCapabilities = [];
        /**
         * The default chain the tx falls back to if no Common
         * is provided and if the chain can't be derived from
         * a passed in chainId (only EIP-2718 typed txs) or
         * EIP-155 signature (legacy txs).
         *
         * @hidden
         */ this.DEFAULT_CHAIN = (0, _enumsJs.Chain).Mainnet;
        /**
         * The default HF if the tx type is active on that HF
         * or the first greater HF where the tx is active.
         *
         * @hidden
         */ this.DEFAULT_HARDFORK = (0, _enumsJs.Hardfork).Merge;
        const { nonce, gasLimit, to, value, data, v, r, s, type } = txData;
        this._type = Number((0, _utilsJs.uint8ArrayToBigInt)((0, _utilsJs.toUint8Array)(type)));
        this.txOptions = opts;
        const toB = (0, _utilsJs.toUint8Array)(to === "" ? "0x" : to);
        const vB = (0, _utilsJs.toUint8Array)(v === "" ? "0x" : v);
        const rB = (0, _utilsJs.toUint8Array)(r === "" ? "0x" : r);
        const sB = (0, _utilsJs.toUint8Array)(s === "" ? "0x" : s);
        this.nonce = (0, _utilsJs.uint8ArrayToBigInt)((0, _utilsJs.toUint8Array)(nonce === "" ? "0x" : nonce));
        this.gasLimit = (0, _utilsJs.uint8ArrayToBigInt)((0, _utilsJs.toUint8Array)(gasLimit === "" ? "0x" : gasLimit));
        this.to = toB.length > 0 ? new (0, _addressJs.Address)(toB) : undefined;
        this.value = (0, _utilsJs.uint8ArrayToBigInt)((0, _utilsJs.toUint8Array)(value === "" ? "0x" : value));
        this.data = (0, _utilsJs.toUint8Array)(data === "" ? "0x" : data);
        this.v = vB.length > 0 ? (0, _utilsJs.uint8ArrayToBigInt)(vB) : undefined;
        this.r = rB.length > 0 ? (0, _utilsJs.uint8ArrayToBigInt)(rB) : undefined;
        this.s = sB.length > 0 ? (0, _utilsJs.uint8ArrayToBigInt)(sB) : undefined;
        this._validateCannotExceedMaxInteger({
            value: this.value,
            r: this.r,
            s: this.s
        });
        // geth limits gasLimit to 2^64-1
        this._validateCannotExceedMaxInteger({
            gasLimit: this.gasLimit
        }, 64);
        // EIP-2681 limits nonce to 2^64-1 (cannot equal 2^64-1)
        this._validateCannotExceedMaxInteger({
            nonce: this.nonce
        }, 64, true);
        // eslint-disable-next-line no-null/no-null
        const createContract = this.to === undefined || this.to === null;
        const allowUnlimitedInitCodeSize = (_a = opts.allowUnlimitedInitCodeSize) !== null && _a !== void 0 ? _a : false;
        const common = (_b = opts.common) !== null && _b !== void 0 ? _b : this._getCommon();
        if (createContract && common.isActivatedEIP(3860) && !allowUnlimitedInitCodeSize) (0, _utilsJs1.checkMaxInitCodeSize)(common, this.data.length);
    }
    /**
     * Returns the transaction type.
     *
     * Note: legacy txs will return tx type `0`.
     */ get type() {
        return this._type;
    }
    /**
     * Checks if a tx type defining capability is active
     * on a tx, for example the EIP-1559 fee market mechanism
     * or the EIP-2930 access list feature.
     *
     * Note that this is different from the tx type itself,
     * so EIP-2930 access lists can very well be active
     * on an EIP-1559 tx for example.
     *
     * This method can be useful for feature checks if the
     * tx type is unknown (e.g. when instantiated with
     * the tx factory).
     *
     * See `Capabilites` in the `types` module for a reference
     * on all supported capabilities.
     */ supports(capability) {
        return this.activeCapabilities.includes(capability);
    }
    validate(stringError = false) {
        const errors = [];
        if (this.getBaseFee() > this.gasLimit) errors.push(`gasLimit is too low. given ${this.gasLimit}, need at least ${this.getBaseFee()}`);
        if (this.isSigned() && !this.verifySignature()) errors.push("Invalid Signature");
        return stringError ? errors : errors.length === 0;
    }
    _validateYParity() {
        const { v } = this;
        if (v !== undefined && v !== BigInt(0) && v !== BigInt(1)) {
            const msg = this._errorMsg("The y-parity of the transaction should either be 0 or 1");
            throw new Error(msg);
        }
    }
    /**
     * EIP-2: All transaction signatures whose s-value is greater than secp256k1n/2are considered invalid.
     * Reasoning: https://ethereum.stackexchange.com/a/55728
     */ _validateHighS() {
        const { s } = this;
        if (this.common.gteHardfork("homestead") && s !== undefined && s > (0, _constantsJs.SECP256K1_ORDER_DIV_2)) {
            const msg = this._errorMsg("Invalid Signature: s-values greater than secp256k1n/2 are considered invalid");
            throw new Error(msg);
        }
    }
    /**
     * The minimum amount of gas the tx must have (DataFee + TxFee + Creation Fee)
     */ getBaseFee() {
        const txFee = this.common.param("gasPrices", "tx");
        let fee = this.getDataFee();
        if (txFee) fee += txFee;
        if (this.common.gteHardfork("homestead") && this.toCreationAddress()) {
            const txCreationFee = this.common.param("gasPrices", "txCreation");
            if (txCreationFee) fee += txCreationFee;
        }
        return fee;
    }
    /**
     * The amount of gas paid for the data in this tx
     */ getDataFee() {
        const txDataZero = this.common.param("gasPrices", "txDataZero");
        const txDataNonZero = this.common.param("gasPrices", "txDataNonZero");
        let cost = BigInt(0);
        // eslint-disable-next-line @typescript-eslint/prefer-for-of
        for(let i = 0; i < this.data.length; i += 1)// eslint-disable-next-line @typescript-eslint/no-unused-expressions, no-unused-expressions
        this.data[i] === 0 ? cost += txDataZero : cost += txDataNonZero;
        // eslint-disable-next-line no-null/no-null
        if ((this.to === undefined || this.to === null) && this.common.isActivatedEIP(3860)) {
            const dataLength = BigInt(Math.ceil(this.data.length / 32));
            const initCodeCost = this.common.param("gasPrices", "initCodeWordCost") * dataLength;
            cost += initCodeCost;
        }
        return cost;
    }
    /**
     * If the tx's `to` is to the creation address
     */ toCreationAddress() {
        return this.to === undefined || this.to.buf.length === 0;
    }
    isSigned() {
        const { v, r, s } = this;
        if (v === undefined || r === undefined || s === undefined) return false;
        return true;
    }
    /**
     * Determines if the signature is valid
     */ verifySignature() {
        try {
            // Main signature verification is done in `getSenderPublicKey()`
            const publicKey = this.getSenderPublicKey();
            return (0, _utilsJs.unpadUint8Array)(publicKey).length !== 0;
        } catch (e) {
            return false;
        }
    }
    /**
     * Returns the sender's address
     */ getSenderAddress() {
        return new (0, _addressJs.Address)((0, _addressJs.Address).publicToAddress(this.getSenderPublicKey()));
    }
    /**
     * Signs a transaction.
     *
     * Note that the signed tx is returned as a new object,
     * use as follows:
     * ```javascript
     * const signedTx = tx.sign(privateKey)
     * ```
     */ sign(privateKey) {
        if (privateKey.length !== 32) {
            const msg = this._errorMsg("Private key must be 32 bytes in length.");
            throw new Error(msg);
        }
        // Hack for the constellation that we have got a legacy tx after spuriousDragon with a non-EIP155 conforming signature
        // and want to recreate a signature (where EIP155 should be applied)
        // Leaving this hack lets the legacy.spec.ts -> sign(), verifySignature() test fail
        // 2021-06-23
        let hackApplied = false;
        if (this.type === 0 && this.common.gteHardfork("spuriousDragon") && !this.supports((0, _typesJs.Capability).EIP155ReplayProtection)) {
            this.activeCapabilities.push((0, _typesJs.Capability).EIP155ReplayProtection);
            hackApplied = true;
        }
        const msgHash = this.getMessageToSign(true);
        const { v, r, s } = this._ecsign(msgHash, privateKey);
        const tx = this._processSignature(v, r, s);
        // Hack part 2
        if (hackApplied) {
            const index = this.activeCapabilities.indexOf((0, _typesJs.Capability).EIP155ReplayProtection);
            if (index > -1) this.activeCapabilities.splice(index, 1);
        }
        return tx;
    }
    /**
     * Does chain ID checks on common and returns a common
     * to be used on instantiation
     * @hidden
     *
     * @param common - {@link Common} instance from tx options
     * @param chainId - Chain ID from tx options (typed txs) or signature (legacy tx)
     */ _getCommon(common, chainId) {
        var _a;
        // Chain ID provided
        if (chainId !== undefined) {
            const chainIdBigInt = (0, _utilsJs.uint8ArrayToBigInt)((0, _utilsJs.toUint8Array)(chainId));
            if (common) {
                if (common.chainId() !== chainIdBigInt) {
                    const msg = this._errorMsg("The chain ID does not match the chain ID of Common");
                    throw new Error(msg);
                }
                // Common provided, chain ID does match
                // -> Return provided Common
                return common.copy();
            }
            if ((0, _commonJs.Common).isSupportedChainId(chainIdBigInt)) // No Common, chain ID supported by Common
            // -> Instantiate Common with chain ID
            return new (0, _commonJs.Common)({
                chain: chainIdBigInt,
                hardfork: this.DEFAULT_HARDFORK
            });
            // No Common, chain ID not supported by Common
            // -> Instantiate custom Common derived from DEFAULT_CHAIN
            return (0, _commonJs.Common).custom({
                name: "custom-chain",
                networkId: chainIdBigInt,
                chainId: chainIdBigInt
            }, {
                baseChain: this.DEFAULT_CHAIN,
                hardfork: this.DEFAULT_HARDFORK
            });
        }
        // No chain ID provided
        // -> return Common provided or create new default Common
        return (_a = common === null || common === void 0 ? void 0 : common.copy()) !== null && _a !== void 0 ? _a : new (0, _commonJs.Common)({
            chain: this.DEFAULT_CHAIN,
            hardfork: this.DEFAULT_HARDFORK
        });
    }
    /**
     * Validates that an object with BigInt values cannot exceed the specified bit limit.
     * @param values Object containing string keys and BigInt values
     * @param bits Number of bits to check (64 or 256)
     * @param cannotEqual Pass true if the number also cannot equal one less the maximum value
     */ _validateCannotExceedMaxInteger(values, bits = 256, cannotEqual = false) {
        for (const [key, value] of Object.entries(values))switch(bits){
            case 64:
                if (cannotEqual) {
                    if (value !== undefined && value >= (0, _constantsJs.MAX_UINT64)) {
                        const msg = this._errorMsg(`${key} cannot equal or exceed MAX_UINT64 (2^64-1), given ${value}`);
                        throw new Error(msg);
                    }
                } else if (value !== undefined && value > (0, _constantsJs.MAX_UINT64)) {
                    const msg = this._errorMsg(`${key} cannot exceed MAX_UINT64 (2^64-1), given ${value}`);
                    throw new Error(msg);
                }
                break;
            case 256:
                if (cannotEqual) {
                    if (value !== undefined && value >= (0, _constantsJs.MAX_INTEGER)) {
                        const msg = this._errorMsg(`${key} cannot equal or exceed MAX_INTEGER (2^256-1), given ${value}`);
                        throw new Error(msg);
                    }
                } else if (value !== undefined && value > (0, _constantsJs.MAX_INTEGER)) {
                    const msg = this._errorMsg(`${key} cannot exceed MAX_INTEGER (2^256-1), given ${value}`);
                    throw new Error(msg);
                }
                break;
            default:
                {
                    const msg = this._errorMsg("unimplemented bits value");
                    throw new Error(msg);
                }
        }
    }
    static _validateNotArray(values) {
        const txDataKeys = [
            "nonce",
            "gasPrice",
            "gasLimit",
            "to",
            "value",
            "data",
            "v",
            "r",
            "s",
            "type",
            "baseFee",
            "maxFeePerGas",
            "chainId"
        ];
        for (const [key, value] of Object.entries(values))if (txDataKeys.includes(key)) {
            if (Array.isArray(value)) throw new Error(`${key} cannot be an array`);
        }
    }
    /**
     * Returns the shared error postfix part for _error() method
     * tx type implementations.
     */ _getSharedErrorPostfix() {
        let hash = "";
        try {
            hash = this.isSigned() ? (0, _web3Utils.bytesToHex)(this.hash()) : "not available (unsigned)";
        } catch (e) {
            hash = "error";
        }
        let isSigned = "";
        try {
            isSigned = this.isSigned().toString();
        } catch (e) {
            hash = "error";
        }
        let hf = "";
        try {
            hf = this.common.hardfork();
        } catch (e) {
            hf = "error";
        }
        let postfix = `tx type=${this.type} hash=${hash} nonce=${this.nonce} value=${this.value} `;
        postfix += `signed=${isSigned} hf=${hf}`;
        return postfix;
    }
    // eslint-disable-next-line class-methods-use-this
    _ecsign(msgHash, privateKey, chainId) {
        const signature = (0, _constantsJs.secp256k1).sign(msgHash, privateKey);
        const signatureBytes = signature.toCompactRawBytes();
        const r = signatureBytes.subarray(0, 32);
        const s = signatureBytes.subarray(32, 64);
        const v = chainId === undefined ? BigInt(signature.recovery + 27) : BigInt(signature.recovery + 35) + BigInt(chainId) * BigInt(2);
        return {
            r,
            s,
            v
        };
    }
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    static fromSerializedTx(// @ts-expect-error unused variable
    serialized, // @ts-expect-error unused variable
    opts = {}) {}
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    static fromTxData(// @ts-expect-error unused variable
    txData, // @ts-expect-error unused variable
    opts = {}) {}
}

},{"web3-utils":"8WsWI","./constants.js":"3b6oT","../common/utils.js":"9o2Mr","../common/common.js":"j9XJn","../common/enums.js":"fSM6S","./types.js":"bsFYj","./address.js":"7FYqc","./utils.js":"1DKQY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"j9XJn":[function(require,module,exports) {
/*
This file is part of web3.js.

web3.js is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

web3.js is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Common class to access chain and hardfork parameters and to provide
 * a unified and shared view on the network and hardfork state.
 *
 * Use the {@link Common.custom} static constructor for creating simple
 * custom chain {@link Common} objects (more complete custom chain setups
 * can be created via the main constructor and the {@link CommonOpts.customChains} parameter).
 */ parcelHelpers.export(exports, "Common", ()=>Common);
var _crc32 = require("crc-32");
var _crc32Default = parcelHelpers.interopDefault(_crc32);
var _web3Utils = require("web3-utils");
var _typesJs = require("./types.js");
var _utilsJs = require("./utils.js");
var _goerliJs = require("./chains/goerli.js");
var _goerliJsDefault = parcelHelpers.interopDefault(_goerliJs);
var _mainnetJs = require("./chains/mainnet.js");
var _mainnetJsDefault = parcelHelpers.interopDefault(_mainnetJs);
var _sepoliaJs = require("./chains/sepolia.js");
var _sepoliaJsDefault = parcelHelpers.interopDefault(_sepoliaJs);
var _indexJs = require("./eips/index.js");
var _enumsJs = require("./enums.js");
var _indexJs1 = require("./hardforks/index.js");
const { buf: crc32Uint8Array } = (0, _crc32Default.default);
class Common extends (0, _web3Utils.EventEmitter) {
    constructor(opts){
        var _a, _b;
        super();
        this._eips = [];
        this._customChains = (_a = opts.customChains) !== null && _a !== void 0 ? _a : [];
        this._chainParams = this.setChain(opts.chain);
        this.DEFAULT_HARDFORK = (_b = this._chainParams.defaultHardfork) !== null && _b !== void 0 ? _b : (0, _enumsJs.Hardfork).Merge;
        // Assign hardfork changes in the sequence of the applied hardforks
        this.HARDFORK_CHANGES = this.hardforks().map((hf)=>[
                hf.name,
                (0, _indexJs1.hardforks)[hf.name]
            ]);
        this._hardfork = this.DEFAULT_HARDFORK;
        if (opts.hardfork !== undefined) this.setHardfork(opts.hardfork);
        if (opts.eips) this.setEIPs(opts.eips);
    }
    /**
     * Creates a {@link Common} object for a custom chain, based on a standard one.
     *
     * It uses all the {@link Chain} parameters from the {@link baseChain} option except the ones overridden
     * in a provided {@link chainParamsOrName} dictionary. Some usage example:
     *
     * ```javascript
     * Common.custom({chainId: 123})
     * ```
     *
     * There are also selected supported custom chains which can be initialized by using one of the
     * {@link CustomChains} for {@link chainParamsOrName}, e.g.:
     *
     * ```javascript
     * Common.custom(CustomChains.MaticMumbai)
     * ```
     *
     * Note that these supported custom chains only provide some base parameters (usually the chain and
     * network ID and a name) and can only be used for selected use cases (e.g. sending a tx with
     * the `web3-utils/tx` library to a Layer-2 chain).
     *
     * @param chainParamsOrName Custom parameter dict (`name` will default to `custom-chain`) or string with name of a supported custom chain
     * @param opts Custom chain options to set the {@link CustomCommonOpts.baseChain}, selected {@link CustomCommonOpts.hardfork} and others
     */ static custom(chainParamsOrName, opts = {}) {
        var _a;
        const baseChain = (_a = opts.baseChain) !== null && _a !== void 0 ? _a : "mainnet";
        const standardChainParams = Object.assign({}, Common._getChainParams(baseChain));
        standardChainParams.name = "custom-chain";
        if (typeof chainParamsOrName !== "string") return new Common(Object.assign({
            chain: Object.assign(Object.assign({}, standardChainParams), chainParamsOrName)
        }, opts));
        if (chainParamsOrName === (0, _enumsJs.CustomChain).PolygonMainnet) return Common.custom({
            name: (0, _enumsJs.CustomChain).PolygonMainnet,
            chainId: 137,
            networkId: 137
        }, opts);
        if (chainParamsOrName === (0, _enumsJs.CustomChain).PolygonMumbai) return Common.custom({
            name: (0, _enumsJs.CustomChain).PolygonMumbai,
            chainId: 80001,
            networkId: 80001
        }, opts);
        if (chainParamsOrName === (0, _enumsJs.CustomChain).ArbitrumRinkebyTestnet) return Common.custom({
            name: (0, _enumsJs.CustomChain).ArbitrumRinkebyTestnet,
            chainId: 421611,
            networkId: 421611
        }, opts);
        if (chainParamsOrName === (0, _enumsJs.CustomChain).ArbitrumOne) return Common.custom({
            name: (0, _enumsJs.CustomChain).ArbitrumOne,
            chainId: 42161,
            networkId: 42161
        }, opts);
        if (chainParamsOrName === (0, _enumsJs.CustomChain).xDaiChain) return Common.custom({
            name: (0, _enumsJs.CustomChain).xDaiChain,
            chainId: 100,
            networkId: 100
        }, opts);
        if (chainParamsOrName === (0, _enumsJs.CustomChain).OptimisticKovan) return Common.custom({
            name: (0, _enumsJs.CustomChain).OptimisticKovan,
            chainId: 69,
            networkId: 69
        }, Object.assign({
            hardfork: (0, _enumsJs.Hardfork).Berlin
        }, opts));
        if (chainParamsOrName === (0, _enumsJs.CustomChain).OptimisticEthereum) return Common.custom({
            name: (0, _enumsJs.CustomChain).OptimisticEthereum,
            chainId: 10,
            networkId: 10
        }, Object.assign({
            hardfork: (0, _enumsJs.Hardfork).Berlin
        }, opts));
        // eslint-disable-next-line @typescript-eslint/restrict-template-expressions
        throw new Error(`Custom chain ${chainParamsOrName} not supported`);
    }
    /**
     * Static method to load and set common from a geth genesis json
     * @param genesisJson json of geth configuration
     * @param { chain, eips, genesisHash, hardfork, mergeForkIdPostMerge } to further configure the common instance
     * @returns Common
     */ static fromGethGenesis(genesisJson, { chain, eips, genesisHash, hardfork, mergeForkIdPostMerge }) {
        var _a;
        const genesisParams = (0, _utilsJs.parseGethGenesis)(genesisJson, chain, mergeForkIdPostMerge);
        const common = new Common({
            chain: (_a = genesisParams.name) !== null && _a !== void 0 ? _a : "custom",
            customChains: [
                genesisParams
            ],
            eips,
            hardfork: hardfork !== null && hardfork !== void 0 ? hardfork : genesisParams.hardfork
        });
        if (genesisHash !== undefined) common.setForkHashes(genesisHash);
        return common;
    }
    /**
     * Static method to determine if a {@link chainId} is supported as a standard chain
     * @param chainId bigint id (`1`) of a standard chain
     * @returns boolean
     */ static isSupportedChainId(chainId) {
        const initializedChains = this._getInitializedChains();
        return Boolean(initializedChains.names[chainId.toString()]);
    }
    static _getChainParams(_chain, customChains) {
        let chain = _chain;
        const initializedChains = this._getInitializedChains(customChains);
        if (typeof chain === "number" || typeof chain === "bigint") {
            chain = chain.toString();
            if (initializedChains.names[chain]) {
                const name = initializedChains.names[chain];
                return initializedChains[name];
            }
            throw new Error(`Chain with ID ${chain} not supported`);
        }
        if (initializedChains[chain] !== undefined) return initializedChains[chain];
        throw new Error(`Chain with name ${chain} not supported`);
    }
    /**
     * Sets the chain
     * @param chain String ('mainnet') or Number (1) chain representation.
     *              Or, a Dictionary of chain parameters for a private network.
     * @returns The dictionary with parameters set as chain
     */ setChain(chain) {
        if (typeof chain === "number" || typeof chain === "bigint" || typeof chain === "string") this._chainParams = Common._getChainParams(chain, this._customChains);
        else if (typeof chain === "object") {
            if (this._customChains.length > 0) throw new Error("Chain must be a string, number, or bigint when initialized with customChains passed in");
            const required = [
                "networkId",
                "genesis",
                "hardforks",
                "bootstrapNodes"
            ];
            for (const param of required){
                if (!(param in chain)) throw new Error(`Missing required chain parameter: ${param}`);
            }
            this._chainParams = chain;
        } else throw new Error("Wrong input format");
        for (const hf of this.hardforks()){
            if (hf.block === undefined) throw new Error(`Hardfork cannot have undefined block number`);
        }
        return this._chainParams;
    }
    /**
     * Sets the hardfork to get params for
     * @param hardfork String identifier (e.g. 'byzantium') or {@link Hardfork} enum
     */ setHardfork(hardfork) {
        let existing = false;
        for (const hfChanges of this.HARDFORK_CHANGES)if (hfChanges[0] === hardfork) {
            if (this._hardfork !== hardfork) {
                this._hardfork = hardfork;
                this.emit("hardforkChanged", hardfork);
            }
            existing = true;
        }
        if (!existing) throw new Error(`Hardfork with name ${hardfork} not supported`);
    }
    /**
     * Returns the hardfork based on the block number or an optional
     * total difficulty (Merge HF) provided.
     *
     * An optional TD takes precedence in case the corresponding HF block
     * is set to `null` or otherwise needs to match (if not an error
     * will be thrown).
     *
     * @param blockNumber
     * @param td : total difficulty of the parent block (for block hf) OR of the chain latest (for chain hf)
     * @param timestamp: timestamp in seconds at which block was/is to be minted
     * @returns The name of the HF
     */ getHardforkByBlockNumber(_blockNumber, _td, _timestamp) {
        const blockNumber = (0, _utilsJs.toType)(_blockNumber, (0, _typesJs.TypeOutput).BigInt);
        const td = (0, _utilsJs.toType)(_td, (0, _typesJs.TypeOutput).BigInt);
        const timestamp = (0, _utilsJs.toType)(_timestamp, (0, _typesJs.TypeOutput).Number);
        // Filter out hardforks with no block number, no ttd or no timestamp (i.e. unapplied hardforks)
        const hfs = this.hardforks().filter((hf)=>// eslint-disable-next-line no-null/no-null
            hf.block !== null || // eslint-disable-next-line no-null/no-null
            hf.ttd !== null && hf.ttd !== undefined || hf.timestamp !== undefined);
        // eslint-disable-next-line no-null/no-null
        const mergeIndex = hfs.findIndex((hf)=>hf.ttd !== null && hf.ttd !== undefined);
        const doubleTTDHF = hfs.slice(mergeIndex + 1)// eslint-disable-next-line no-null/no-null
        .findIndex((hf)=>hf.ttd !== null && hf.ttd !== undefined);
        if (doubleTTDHF >= 0) throw Error(`More than one merge hardforks found with ttd specified`);
        // Find the first hardfork that has a block number greater than `blockNumber`
        // (skips the merge hardfork since it cannot have a block number specified).
        // If timestamp is not provided, it also skips timestamps hardforks to continue
        // discovering/checking number hardforks.
        let hfIndex = hfs.findIndex((hf)=>// eslint-disable-next-line no-null/no-null
            hf.block !== null && hf.block > blockNumber || timestamp !== undefined && Number(hf.timestamp) > timestamp);
        if (hfIndex === -1) // all hardforks apply, set hfIndex to the last one as that's the candidate
        hfIndex = hfs.length;
        else if (hfIndex === 0) // cannot have a case where a block number is before all applied hardforks
        // since the chain has to start with a hardfork
        throw Error("Must have at least one hardfork at block 0");
        // If timestamp is not provided, we need to rollback to the last hf with block or ttd
        if (timestamp === undefined) {
            const stepBack = hfs.slice(0, hfIndex).reverse()// eslint-disable-next-line no-null/no-null
            .findIndex((hf)=>hf.block !== null || hf.ttd !== undefined);
            hfIndex -= stepBack;
        }
        // Move hfIndex one back to arrive at candidate hardfork
        hfIndex -= 1;
        // If the timestamp was not provided, we could have skipped timestamp hardforks to look for number
        // hardforks. so it will now be needed to rollback
        // eslint-disable-next-line no-null/no-null
        if (hfs[hfIndex].block === null && hfs[hfIndex].timestamp === undefined) // We're on the merge hardfork.  Let's check the TTD
        // eslint-disable-next-line no-null/no-null
        {
            if (td === undefined || td === null || BigInt(hfs[hfIndex].ttd) > td) // Merge ttd greater than current td so we're on hardfork before merge
            hfIndex -= 1;
        } else if (mergeIndex >= 0 && td !== undefined && td !== null) {
            if (hfIndex >= mergeIndex && BigInt(hfs[mergeIndex].ttd) > td) throw Error("Maximum HF determined by total difficulty is lower than the block number HF");
            else if (hfIndex < mergeIndex && BigInt(hfs[mergeIndex].ttd) <= td) throw Error("HF determined by block number is lower than the minimum total difficulty HF");
        }
        const hfStartIndex = hfIndex;
        // Move the hfIndex to the end of the hardforks that might be scheduled on the same block/timestamp
        // This won't anyway be the case with Merge hfs
        for(; hfIndex < hfs.length - 1; hfIndex += 1){
            // break out if hfIndex + 1 is not scheduled at hfIndex
            if (hfs[hfIndex].block !== hfs[hfIndex + 1].block || hfs[hfIndex].timestamp !== hfs[hfIndex + 1].timestamp) break;
        }
        if (timestamp) {
            const minTimeStamp = hfs.slice(0, hfStartIndex).reduce((acc, hf)=>{
                var _a;
                return Math.max(Number((_a = hf.timestamp) !== null && _a !== void 0 ? _a : "0"), acc);
            }, 0);
            if (minTimeStamp > timestamp) throw Error(`Maximum HF determined by timestamp is lower than the block number/ttd HF`);
            const maxTimeStamp = hfs.slice(hfIndex + 1).reduce((acc, hf)=>{
                var _a;
                return Math.min(Number((_a = hf.timestamp) !== null && _a !== void 0 ? _a : timestamp), acc);
            }, timestamp);
            if (maxTimeStamp < timestamp) throw Error(`Maximum HF determined by block number/ttd is lower than timestamp HF`);
        }
        const hardfork = hfs[hfIndex];
        return hardfork.name;
    }
    /**
     * Sets a new hardfork based on the block number or an optional
     * total difficulty (Merge HF) provided.
     *
     * An optional TD takes precedence in case the corresponding HF block
     * is set to `null` or otherwise needs to match (if not an error
     * will be thrown).
     *
     * @param blockNumber
     * @param td
     * @param timestamp
     * @returns The name of the HF set
     */ setHardforkByBlockNumber(blockNumber, td, timestamp) {
        const hardfork = this.getHardforkByBlockNumber(blockNumber, td, timestamp);
        this.setHardfork(hardfork);
        return hardfork;
    }
    /**
     * Internal helper function, returns the params for the given hardfork for the chain set
     * @param hardfork Hardfork name
     * @returns Dictionary with hardfork params or null if hardfork not on chain
     */ // eslint-disable-next-line @typescript-eslint/ban-types
    _getHardfork(hardfork) {
        const hfs = this.hardforks();
        for (const hf of hfs){
            if (hf.name === hardfork) return hf;
        }
        // eslint-disable-next-line no-null/no-null
        return null;
    }
    /**
     * Sets the active EIPs
     * @param eips
     */ setEIPs(eips = []) {
        for (const eip of eips){
            if (!(eip in (0, _indexJs.EIPs))) throw new Error(`${eip} not supported`);
            // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-argument
            const minHF = this.gteHardfork((0, _indexJs.EIPs)[eip].minimumHardfork);
            if (!minHF) throw new Error(// eslint-disable-next-line @typescript-eslint/restrict-template-expressions
            `${eip} cannot be activated on hardfork ${this.hardfork()}, minimumHardfork: ${minHF}`);
            // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
            if ((0, _indexJs.EIPs)[eip].requiredEIPs !== undefined) // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
            for (const elem of (0, _indexJs.EIPs)[eip].requiredEIPs){
                // eslint-disable-next-line @typescript-eslint/no-unsafe-argument
                if (!(eips.includes(elem) || this.isActivatedEIP(elem))) throw new Error(// eslint-disable-next-line @typescript-eslint/restrict-template-expressions
                `${eip} requires EIP ${elem}, but is not included in the EIP list`);
            }
        }
        this._eips = eips;
    }
    /**
     * Returns a parameter for the current chain setup
     *
     * If the parameter is present in an EIP, the EIP always takes precedence.
     * Otherwise the parameter if taken from the latest applied HF with
     * a change on the respective parameter.
     *
     * @param topic Parameter topic ('gasConfig', 'gasPrices', 'vm', 'pow')
     * @param name Parameter name (e.g. 'minGasLimit' for 'gasConfig' topic)
     * @returns The value requested or `BigInt(0)` if not found
     */ param(topic, name) {
        // TODO: consider the case that different active EIPs
        // can change the same parameter
        let value;
        for (const eip of this._eips){
            value = this.paramByEIP(topic, name, eip);
            if (value !== undefined) return value;
        }
        return this.paramByHardfork(topic, name, this._hardfork);
    }
    /**
     * Returns the parameter corresponding to a hardfork
     * @param topic Parameter topic ('gasConfig', 'gasPrices', 'vm', 'pow')
     * @param name Parameter name (e.g. 'minGasLimit' for 'gasConfig' topic)
     * @param hardfork Hardfork name
     * @returns The value requested or `BigInt(0)` if not found
     */ paramByHardfork(topic, name, hardfork) {
        // eslint-disable-next-line no-null/no-null
        let value = null;
        for (const hfChanges of this.HARDFORK_CHANGES){
            // EIP-referencing HF file (e.g. berlin.json)
            if ("eips" in hfChanges[1]) {
                // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-assignment
                const hfEIPs = hfChanges[1].eips;
                for (const eip of hfEIPs){
                    // eslint-disable-next-line @typescript-eslint/no-unsafe-argument
                    const valueEIP = this.paramByEIP(topic, name, eip);
                    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
                    value = typeof valueEIP === "bigint" ? valueEIP : value;
                }
            // Parameter-inlining HF file (e.g. istanbul.json)
            } else {
                // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
                if (hfChanges[1][topic] === undefined) throw new Error(`Topic ${topic} not defined`);
                // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
                if (hfChanges[1][topic][name] !== undefined) // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-assignment
                value = hfChanges[1][topic][name].v;
            }
            if (hfChanges[0] === hardfork) break;
        }
        // eslint-disable-next-line @typescript-eslint/no-unsafe-argument
        return BigInt(value !== null && value !== void 0 ? value : 0);
    }
    /**
     * Returns a parameter corresponding to an EIP
     * @param topic Parameter topic ('gasConfig', 'gasPrices', 'vm', 'pow')
     * @param name Parameter name (e.g. 'minGasLimit' for 'gasConfig' topic)
     * @param eip Number of the EIP
     * @returns The value requested or `undefined` if not found
     */ // eslint-disable-next-line class-methods-use-this
    paramByEIP(topic, name, eip) {
        if (!(eip in (0, _indexJs.EIPs))) throw new Error(`${eip} not supported`);
        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
        const eipParams = (0, _indexJs.EIPs)[eip];
        if (!(topic in eipParams)) throw new Error(`Topic ${topic} not defined`);
        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
        if (eipParams[topic][name] === undefined) return undefined;
        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-assignment
        const value = eipParams[topic][name].v;
        // eslint-disable-next-line @typescript-eslint/no-unsafe-argument
        return BigInt(value);
    }
    /**
     * Returns a parameter for the hardfork active on block number or
     * optional provided total difficulty (Merge HF)
     * @param topic Parameter topic
     * @param name Parameter name
     * @param blockNumber Block number
     * @param td Total difficulty
     *    * @returns The value requested or `BigInt(0)` if not found
     */ paramByBlock(topic, name, blockNumber, td, timestamp) {
        const hardfork = this.getHardforkByBlockNumber(blockNumber, td, timestamp);
        return this.paramByHardfork(topic, name, hardfork);
    }
    /**
     * Checks if an EIP is activated by either being included in the EIPs
     * manually passed in with the {@link CommonOpts.eips} or in a
     * hardfork currently being active
     *
     * Note: this method only works for EIPs being supported
     * by the {@link CommonOpts.eips} constructor option
     * @param eip
     */ isActivatedEIP(eip) {
        if (this.eips().includes(eip)) return true;
        for (const hfChanges of this.HARDFORK_CHANGES){
            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
            const hf = hfChanges[1];
            // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-argument
            if (this.gteHardfork(hf.name) && "eips" in hf) {
                // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
                if (hf.eips.includes(eip)) return true;
            }
        }
        return false;
    }
    /**
     * Checks if set or provided hardfork is active on block number
     * @param hardfork Hardfork name or null (for HF set)
     * @param blockNumber
     * @returns True if HF is active on block number
     */ hardforkIsActiveOnBlock(// eslint-disable-next-line @typescript-eslint/ban-types
    _hardfork, _blockNumber) {
        const blockNumber = (0, _utilsJs.toType)(_blockNumber, (0, _typesJs.TypeOutput).BigInt);
        const hardfork = _hardfork !== null && _hardfork !== void 0 ? _hardfork : this._hardfork;
        const hfBlock = this.hardforkBlock(hardfork);
        if (typeof hfBlock === "bigint" && hfBlock !== BigInt(0) && blockNumber >= hfBlock) return true;
        return false;
    }
    /**
     * Alias to hardforkIsActiveOnBlock when hardfork is set
     * @param blockNumber
     * @returns True if HF is active on block number
     */ activeOnBlock(blockNumber) {
        // eslint-disable-next-line no-null/no-null
        return this.hardforkIsActiveOnBlock(null, blockNumber);
    }
    /**
     * Sequence based check if given or set HF1 is greater than or equal HF2
     * @param hardfork1 Hardfork name or null (if set)
     * @param hardfork2 Hardfork name
     * @param opts Hardfork options
     * @returns True if HF1 gte HF2
     */ hardforkGteHardfork(// eslint-disable-next-line @typescript-eslint/ban-types
    _hardfork1, hardfork2) {
        const hardfork1 = _hardfork1 !== null && _hardfork1 !== void 0 ? _hardfork1 : this._hardfork;
        const hardforks = this.hardforks();
        let posHf1 = -1;
        let posHf2 = -1;
        let index = 0;
        for (const hf of hardforks){
            if (hf.name === hardfork1) posHf1 = index;
            if (hf.name === hardfork2) posHf2 = index;
            index += 1;
        }
        return posHf1 >= posHf2 && posHf2 !== -1;
    }
    /**
     * Alias to hardforkGteHardfork when hardfork is set
     * @param hardfork Hardfork name
     * @returns True if hardfork set is greater than hardfork provided
     */ gteHardfork(hardfork) {
        // eslint-disable-next-line no-null/no-null
        return this.hardforkGteHardfork(null, hardfork);
    }
    /**
     * Returns the hardfork change block for hardfork provided or set
     * @param hardfork Hardfork name, optional if HF set
     * @returns Block number or null if unscheduled
     */ // eslint-disable-next-line @typescript-eslint/ban-types
    hardforkBlock(_hardfork) {
        var _a;
        const hardfork = _hardfork !== null && _hardfork !== void 0 ? _hardfork : this._hardfork;
        const block = (_a = this._getHardfork(hardfork)) === null || _a === void 0 ? void 0 : _a.block;
        // eslint-disable-next-line no-null/no-null
        if (block === undefined || block === null) // eslint-disable-next-line no-null/no-null
        return null;
        return BigInt(block);
    }
    // eslint-disable-next-line @typescript-eslint/ban-types
    hardforkTimestamp(_hardfork) {
        var _a;
        const hardfork = _hardfork !== null && _hardfork !== void 0 ? _hardfork : this._hardfork;
        const timestamp = (_a = this._getHardfork(hardfork)) === null || _a === void 0 ? void 0 : _a.timestamp;
        // eslint-disable-next-line no-null/no-null
        if (timestamp === undefined || timestamp === null) // eslint-disable-next-line no-null/no-null
        return null;
        return BigInt(timestamp);
    }
    /**
     * Returns the hardfork change block for eip
     * @param eip EIP number
     * @returns Block number or null if unscheduled
     */ // eslint-disable-next-line @typescript-eslint/ban-types
    eipBlock(eip) {
        for (const hfChanges of this.HARDFORK_CHANGES){
            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
            const hf = hfChanges[1];
            if ("eips" in hf) {
                // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions, @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-call
                if (hf.eips.includes(eip)) return this.hardforkBlock(typeof hfChanges[0] === "number" ? String(hfChanges[0]) : hfChanges[0]);
            }
        }
        // eslint-disable-next-line no-null/no-null
        return null;
    }
    /**
     * Returns the hardfork change total difficulty (Merge HF) for hardfork provided or set
     * @param hardfork Hardfork name, optional if HF set
     * @returns Total difficulty or null if no set
     */ // eslint-disable-next-line @typescript-eslint/ban-types
    hardforkTTD(_hardfork) {
        var _a;
        const hardfork = _hardfork !== null && _hardfork !== void 0 ? _hardfork : this._hardfork;
        const ttd = (_a = this._getHardfork(hardfork)) === null || _a === void 0 ? void 0 : _a.ttd;
        // eslint-disable-next-line no-null/no-null
        if (ttd === undefined || ttd === null) // eslint-disable-next-line no-null/no-null
        return null;
        return BigInt(ttd);
    }
    /**
     * True if block number provided is the hardfork (given or set) change block
     * @param blockNumber Number of the block to check
     * @param hardfork Hardfork name, optional if HF set
     * @returns True if blockNumber is HF block
     * @deprecated
     */ isHardforkBlock(_blockNumber, _hardfork) {
        const blockNumber = (0, _utilsJs.toType)(_blockNumber, (0, _typesJs.TypeOutput).BigInt);
        const hardfork = _hardfork !== null && _hardfork !== void 0 ? _hardfork : this._hardfork;
        const block = this.hardforkBlock(hardfork);
        return typeof block === "bigint" && block !== BigInt(0) ? block === blockNumber : false;
    }
    /**
     * Returns the change block for the next hardfork after the hardfork provided or set
     * @param hardfork Hardfork name, optional if HF set
     * @returns Block timestamp, number or null if not available
     */ // eslint-disable-next-line @typescript-eslint/ban-types
    nextHardforkBlockOrTimestamp(_hardfork) {
        var _a, _b;
        const hardfork = _hardfork !== null && _hardfork !== void 0 ? _hardfork : this._hardfork;
        const hfs = this.hardforks();
        let hfIndex = hfs.findIndex((hf)=>hf.name === hardfork);
        // If the current hardfork is merge, go one behind as merge hf is not part of these
        // calcs even if the merge hf block is set
        if (hardfork === (0, _enumsJs.Hardfork).Merge) hfIndex -= 1;
        // Hardfork not found
        if (hfIndex < 0) // eslint-disable-next-line no-null/no-null
        return null;
        let currHfTimeOrBlock = (_a = hfs[hfIndex].timestamp) !== null && _a !== void 0 ? _a : hfs[hfIndex].block;
        currHfTimeOrBlock = // eslint-disable-next-line no-null/no-null
        currHfTimeOrBlock !== null && currHfTimeOrBlock !== undefined ? Number(currHfTimeOrBlock) : null;
        const nextHf = hfs.slice(hfIndex + 1).find((hf)=>{
            var _a;
            let hfTimeOrBlock = (_a = hf.timestamp) !== null && _a !== void 0 ? _a : hf.block;
            hfTimeOrBlock = // eslint-disable-next-line no-null/no-null
            hfTimeOrBlock !== null && hfTimeOrBlock !== undefined ? Number(hfTimeOrBlock) : null;
            return hf.name !== (0, _enumsJs.Hardfork).Merge && // eslint-disable-next-line no-null/no-null
            hfTimeOrBlock !== null && hfTimeOrBlock !== undefined && hfTimeOrBlock !== currHfTimeOrBlock;
        });
        // If no next hf found with valid block or timestamp return null
        if (nextHf === undefined) // eslint-disable-next-line no-null/no-null
        return null;
        const nextHfBlock = (_b = nextHf.timestamp) !== null && _b !== void 0 ? _b : nextHf.block;
        // eslint-disable-next-line no-null/no-null
        if (nextHfBlock === null || nextHfBlock === undefined) // eslint-disable-next-line no-null/no-null
        return null;
        return BigInt(nextHfBlock);
    }
    /**
     * Returns the change block for the next hardfork after the hardfork provided or set
     * @param hardfork Hardfork name, optional if HF set
     * @returns Block number or null if not available
     * @deprecated
     */ // eslint-disable-next-line @typescript-eslint/ban-types
    nextHardforkBlock(_hardfork) {
        const hardfork = _hardfork !== null && _hardfork !== void 0 ? _hardfork : this._hardfork;
        let hfBlock = this.hardforkBlock(hardfork);
        // If this is a merge hardfork with block not set, then we fallback to previous hardfork
        // to find the nextHardforkBlock
        // eslint-disable-next-line no-null/no-null
        if (hfBlock === null && hardfork === (0, _enumsJs.Hardfork).Merge) {
            const hfs = this.hardforks();
            // eslint-disable-next-line no-null/no-null
            const mergeIndex = hfs.findIndex((hf)=>hf.ttd !== null && hf.ttd !== undefined);
            if (mergeIndex < 0) throw Error(`Merge hardfork should have been found`);
            hfBlock = this.hardforkBlock(hfs[mergeIndex - 1].name);
        }
        // eslint-disable-next-line no-null/no-null
        if (hfBlock === null) // eslint-disable-next-line no-null/no-null
        return null;
        // Next fork block number or null if none available
        // Logic: if accumulator is still null and on the first occurrence of
        // a block greater than the current hfBlock set the accumulator,
        // pass on the accumulator as the final result from this time on
        // eslint-disable-next-line no-null/no-null, @typescript-eslint/ban-types
        const nextHfBlock = this.hardforks().reduce((acc, hf)=>{
            // We need to ignore the merge block in our next hardfork calc
            const block = BigInt(// eslint-disable-next-line no-null/no-null
            hf.block === null || hf.ttd !== undefined && hf.ttd !== null ? 0 : hf.block);
            // Typescript can't seem to follow that the hfBlock is not null at this point
            // eslint-disable-next-line no-null/no-null
            return block > hfBlock && acc === null ? block : acc;
        // eslint-disable-next-line no-null/no-null
        }, null);
        return nextHfBlock;
    }
    /**
     * True if block number provided is the hardfork change block following the hardfork given or set
     * @param blockNumber Number of the block to check
     * @param hardfork Hardfork name, optional if HF set
     * @returns True if blockNumber is HF block
     * @deprecated
     */ isNextHardforkBlock(_blockNumber, _hardfork) {
        const blockNumber = (0, _utilsJs.toType)(_blockNumber, (0, _typesJs.TypeOutput).BigInt);
        const hardfork = _hardfork !== null && _hardfork !== void 0 ? _hardfork : this._hardfork;
        // eslint-disable-next-line deprecation/deprecation
        const nextHardforkBlock = this.nextHardforkBlock(hardfork);
        // eslint-disable-next-line no-null/no-null
        return nextHardforkBlock === null ? false : nextHardforkBlock === blockNumber;
    }
    /**
     * Internal helper function to calculate a fork hash
     * @param hardfork Hardfork name
     * @param genesisHash Genesis block hash of the chain
     * @returns Fork hash as hex string
     */ _calcForkHash(hardfork, genesisHash) {
        let hfUint8Array = new Uint8Array();
        let prevBlockOrTime = 0;
        for (const hf of this.hardforks()){
            const { block, timestamp, name } = hf;
            // Timestamp to be used for timestamp based hfs even if we may bundle
            // block number with them retrospectively
            let blockOrTime = timestamp !== null && timestamp !== void 0 ? timestamp : block;
            // eslint-disable-next-line no-null/no-null
            blockOrTime = blockOrTime !== null ? Number(blockOrTime) : null;
            // Skip for chainstart (0), not applied HFs (null) and
            // when already applied on same blockOrTime HFs
            // and on the merge since forkhash doesn't change on merge hf
            if (typeof blockOrTime === "number" && blockOrTime !== 0 && blockOrTime !== prevBlockOrTime && name !== (0, _enumsJs.Hardfork).Merge) {
                const hfBlockUint8Array = (0, _web3Utils.hexToBytes)(blockOrTime.toString(16).padStart(16, "0"));
                hfUint8Array = (0, _web3Utils.uint8ArrayConcat)(hfUint8Array, hfBlockUint8Array);
                prevBlockOrTime = blockOrTime;
            }
            if (hf.name === hardfork) break;
        }
        const inputUint8Array = (0, _web3Utils.uint8ArrayConcat)(genesisHash, hfUint8Array);
        // CRC32 delivers result as signed (negative) 32-bit integer,
        // convert to hex string
        // eslint-disable-next-line no-bitwise
        const forkhash = (0, _web3Utils.bytesToHex)((0, _utilsJs.intToUint8Array)(crc32Uint8Array(inputUint8Array) >>> 0));
        return forkhash;
    }
    /**
     * Returns an eth/64 compliant fork hash (EIP-2124)
     * @param hardfork Hardfork name, optional if HF set
     * @param genesisHash Genesis block hash of the chain, optional if already defined and not needed to be calculated
     */ forkHash(_hardfork, genesisHash) {
        const hardfork = _hardfork !== null && _hardfork !== void 0 ? _hardfork : this._hardfork;
        const data = this._getHardfork(hardfork);
        if (// eslint-disable-next-line no-null/no-null
        data === null || // eslint-disable-next-line no-null/no-null
        (data === null || data === void 0 ? void 0 : data.block) === null && (data === null || data === void 0 ? void 0 : data.timestamp) === undefined && (data === null || data === void 0 ? void 0 : data.ttd) === undefined) {
            const msg = "No fork hash calculation possible for future hardfork";
            throw new Error(msg);
        }
        // eslint-disable-next-line no-null/no-null
        if ((data === null || data === void 0 ? void 0 : data.forkHash) !== null && (data === null || data === void 0 ? void 0 : data.forkHash) !== undefined) return data.forkHash;
        if (!genesisHash) throw new Error("genesisHash required for forkHash calculation");
        return this._calcForkHash(hardfork, genesisHash);
    }
    /**
     *
     * @param forkHash Fork hash as a hex string
     * @returns Array with hardfork data (name, block, forkHash)
     */ // eslint-disable-next-line @typescript-eslint/ban-types
    hardforkForForkHash(forkHash) {
        const resArray = this.hardforks().filter((hf)=>hf.forkHash === forkHash);
        // eslint-disable-next-line no-null/no-null
        return resArray.length >= 1 ? resArray[resArray.length - 1] : null;
    }
    /**
     * Sets any missing forkHashes on the passed-in {@link Common} instance
     * @param common The {@link Common} to set the forkHashes for
     * @param genesisHash The genesis block hash
     */ setForkHashes(genesisHash) {
        var _a;
        for (const hf of this.hardforks()){
            const blockOrTime = (_a = hf.timestamp) !== null && _a !== void 0 ? _a : hf.block;
            if (// eslint-disable-next-line no-null/no-null
            (hf.forkHash === null || hf.forkHash === undefined) && // eslint-disable-next-line no-null/no-null
            (blockOrTime !== null && blockOrTime !== undefined || typeof hf.ttd !== "undefined")) hf.forkHash = this.forkHash(hf.name, genesisHash);
        }
    }
    /**
     * Returns the Genesis parameters of the current chain
     * @returns Genesis dictionary
     */ genesis() {
        return this._chainParams.genesis;
    }
    /**
     * Returns the hardforks for current chain
     * @returns {Array} Array with arrays of hardforks
     */ hardforks() {
        return this._chainParams.hardforks;
    }
    /**
     * Returns bootstrap nodes for the current chain
     * @returns {Dictionary} Dict with bootstrap nodes
     */ bootstrapNodes() {
        return this._chainParams.bootstrapNodes;
    }
    /**
     * Returns DNS networks for the current chain
     * @returns {String[]} Array of DNS ENR urls
     */ dnsNetworks() {
        return this._chainParams.dnsNetworks;
    }
    /**
     * Returns the hardfork set
     * @returns Hardfork name
     */ hardfork() {
        return this._hardfork;
    }
    /**
     * Returns the Id of current chain
     * @returns chain Id
     */ chainId() {
        return BigInt(this._chainParams.chainId);
    }
    /**
     * Returns the name of current chain
     * @returns chain name (lower case)
     */ chainName() {
        return this._chainParams.name;
    }
    /**
     * Returns the Id of current network
     * @returns network Id
     */ networkId() {
        return BigInt(this._chainParams.networkId);
    }
    /**
     * Returns the active EIPs
     * @returns List of EIPs
     */ eips() {
        return this._eips;
    }
    /**
     * Returns the consensus type of the network
     * Possible values: "pow"|"poa"|"pos"
     *
     * Note: This value can update along a Hardfork.
     */ consensusType() {
        const hardfork = this.hardfork();
        let value;
        for (const hfChanges of this.HARDFORK_CHANGES){
            if ("consensus" in hfChanges[1]) // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-assignment
            value = hfChanges[1].consensus.type;
            if (hfChanges[0] === hardfork) break;
        }
        // eslint-disable-next-line @typescript-eslint/no-unsafe-return
        return value !== null && value !== void 0 ? value : this._chainParams.consensus.type;
    }
    /**
     * Returns the concrete consensus implementation
     * algorithm or protocol for the network
     * e.g. "ethash" for "pow" consensus type,
     * "clique" for "poa" consensus type or
     * "casper" for "pos" consensus type.
     *
     * Note: This value can update along a Hardfork.
     */ consensusAlgorithm() {
        const hardfork = this.hardfork();
        let value;
        for (const hfChanges of this.HARDFORK_CHANGES){
            if ("consensus" in hfChanges[1]) // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-assignment
            value = hfChanges[1].consensus.algorithm;
            if (hfChanges[0] === hardfork) break;
        }
        // eslint-disable-next-line @typescript-eslint/no-unsafe-return
        return value !== null && value !== void 0 ? value : this._chainParams.consensus.algorithm;
    }
    /**
     * Returns a dictionary with consensus configuration
     * parameters based on the consensus algorithm
     *
     * Expected returns (parameters must be present in
     * the respective chain json files):
     *
     * ethash: empty object
     * clique: period, epoch
     * casper: empty object
     *
     * Note: This value can update along a Hardfork.
     */ consensusConfig() {
        var _a;
        const hardfork = this.hardfork();
        let value;
        for (const hfChanges of this.HARDFORK_CHANGES){
            if ("consensus" in hfChanges[1]) // The config parameter is named after the respective consensus algorithm
            // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-assignment
            value = hfChanges[1].consensus[hfChanges[1].consensus.algorithm];
            if (hfChanges[0] === hardfork) break;
        }
        // eslint-disable-next-line @typescript-eslint/no-unsafe-return
        return (_a = value !== null && value !== void 0 ? value : this._chainParams.consensus[this.consensusAlgorithm()]) !== null && _a !== void 0 ? _a : {};
    }
    /**
     * Returns a deep copy of this {@link Common} instance.
     */ copy() {
        // eslint-disable-next-line @typescript-eslint/no-unsafe-argument, @typescript-eslint/no-unsafe-assignment
        const copy = Object.assign(Object.create(Object.getPrototypeOf(this)), this);
        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-call
        copy.removeAllListeners();
        // eslint-disable-next-line @typescript-eslint/no-unsafe-return
        return copy;
    }
    static _getInitializedChains(customChains) {
        const names = {};
        for (const [name, id] of Object.entries((0, _enumsJs.Chain)))names[id] = name.toLowerCase();
        const chains = {
            mainnet: (0, _mainnetJsDefault.default),
            goerli: (0, _goerliJsDefault.default),
            sepolia: (0, _sepoliaJsDefault.default)
        };
        if (customChains) for (const chain of customChains){
            const { name } = chain;
            names[chain.chainId.toString()] = name;
            chains[name] = chain;
        }
        chains.names = names;
        return chains;
    }
}

},{"crc-32":"1lOc6","web3-utils":"8WsWI","./types.js":"03HK1","./utils.js":"9o2Mr","./chains/goerli.js":"XsjFq","./chains/mainnet.js":"5zbaf","./chains/sepolia.js":"cReY7","./eips/index.js":"bu5HE","./enums.js":"fSM6S","./hardforks/index.js":"4CnNh","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1lOc6":[function(require,module,exports) {
/*! crc32.js (C) 2014-present SheetJS -- http://sheetjs.com */ /* vim: set ts=2: */ /*exported CRC32 */ var CRC32;
(function(factory) {
    /*jshint ignore:start */ /*eslint-disable */ if (typeof DO_NOT_EXPORT_CRC === "undefined") factory(exports);
    else factory(CRC32 = {});
/*eslint-enable */ /*jshint ignore:end */ })(function(CRC32) {
    CRC32.version = "1.2.2";
    /*global Int32Array */ function signed_crc_table() {
        var c = 0, table = new Array(256);
        for(var n = 0; n != 256; ++n){
            c = n;
            c = c & 1 ? -306674912 ^ c >>> 1 : c >>> 1;
            c = c & 1 ? -306674912 ^ c >>> 1 : c >>> 1;
            c = c & 1 ? -306674912 ^ c >>> 1 : c >>> 1;
            c = c & 1 ? -306674912 ^ c >>> 1 : c >>> 1;
            c = c & 1 ? -306674912 ^ c >>> 1 : c >>> 1;
            c = c & 1 ? -306674912 ^ c >>> 1 : c >>> 1;
            c = c & 1 ? -306674912 ^ c >>> 1 : c >>> 1;
            c = c & 1 ? -306674912 ^ c >>> 1 : c >>> 1;
            table[n] = c;
        }
        return typeof Int32Array !== "undefined" ? new Int32Array(table) : table;
    }
    var T0 = signed_crc_table();
    function slice_by_16_tables(T) {
        var c = 0, v = 0, n = 0, table = typeof Int32Array !== "undefined" ? new Int32Array(4096) : new Array(4096);
        for(n = 0; n != 256; ++n)table[n] = T[n];
        for(n = 0; n != 256; ++n){
            v = T[n];
            for(c = 256 + n; c < 4096; c += 256)v = table[c] = v >>> 8 ^ T[v & 0xFF];
        }
        var out = [];
        for(n = 1; n != 16; ++n)out[n - 1] = typeof Int32Array !== "undefined" ? table.subarray(n * 256, n * 256 + 256) : table.slice(n * 256, n * 256 + 256);
        return out;
    }
    var TT = slice_by_16_tables(T0);
    var T1 = TT[0], T2 = TT[1], T3 = TT[2], T4 = TT[3], T5 = TT[4];
    var T6 = TT[5], T7 = TT[6], T8 = TT[7], T9 = TT[8], Ta = TT[9];
    var Tb = TT[10], Tc = TT[11], Td = TT[12], Te = TT[13], Tf = TT[14];
    function crc32_bstr(bstr, seed) {
        var C = seed ^ -1;
        for(var i = 0, L = bstr.length; i < L;)C = C >>> 8 ^ T0[(C ^ bstr.charCodeAt(i++)) & 0xFF];
        return ~C;
    }
    function crc32_buf(B, seed) {
        var C = seed ^ -1, L = B.length - 15, i = 0;
        for(; i < L;)C = Tf[B[i++] ^ C & 255] ^ Te[B[i++] ^ C >> 8 & 255] ^ Td[B[i++] ^ C >> 16 & 255] ^ Tc[B[i++] ^ C >>> 24] ^ Tb[B[i++]] ^ Ta[B[i++]] ^ T9[B[i++]] ^ T8[B[i++]] ^ T7[B[i++]] ^ T6[B[i++]] ^ T5[B[i++]] ^ T4[B[i++]] ^ T3[B[i++]] ^ T2[B[i++]] ^ T1[B[i++]] ^ T0[B[i++]];
        L += 15;
        while(i < L)C = C >>> 8 ^ T0[(C ^ B[i++]) & 0xFF];
        return ~C;
    }
    function crc32_str(str, seed) {
        var C = seed ^ -1;
        for(var i = 0, L = str.length, c = 0, d = 0; i < L;){
            c = str.charCodeAt(i++);
            if (c < 0x80) C = C >>> 8 ^ T0[(C ^ c) & 0xFF];
            else if (c < 0x800) {
                C = C >>> 8 ^ T0[(C ^ (192 | c >> 6 & 31)) & 0xFF];
                C = C >>> 8 ^ T0[(C ^ (128 | c & 63)) & 0xFF];
            } else if (c >= 0xD800 && c < 0xE000) {
                c = (c & 1023) + 64;
                d = str.charCodeAt(i++) & 1023;
                C = C >>> 8 ^ T0[(C ^ (240 | c >> 8 & 7)) & 0xFF];
                C = C >>> 8 ^ T0[(C ^ (128 | c >> 2 & 63)) & 0xFF];
                C = C >>> 8 ^ T0[(C ^ (128 | d >> 6 & 15 | (c & 3) << 4)) & 0xFF];
                C = C >>> 8 ^ T0[(C ^ (128 | d & 63)) & 0xFF];
            } else {
                C = C >>> 8 ^ T0[(C ^ (224 | c >> 12 & 15)) & 0xFF];
                C = C >>> 8 ^ T0[(C ^ (128 | c >> 6 & 63)) & 0xFF];
                C = C >>> 8 ^ T0[(C ^ (128 | c & 63)) & 0xFF];
            }
        }
        return ~C;
    }
    CRC32.table = T0;
    // $FlowIgnore
    CRC32.bstr = crc32_bstr;
    // $FlowIgnore
    CRC32.buf = crc32_buf;
    // $FlowIgnore
    CRC32.str = crc32_str;
});

},{}],"XsjFq":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = {
    "name": "goerli",
    "chainId": 5,
    "networkId": 5,
    "defaultHardfork": "merge",
    "consensus": {
        "type": "poa",
        "algorithm": "clique",
        "clique": {
            "period": 15,
            "epoch": 30000
        }
    },
    "comment": "Cross-client PoA test network",
    "url": "https://github.com/goerli/testnet",
    "genesis": {
        "timestamp": "0x5c51a607",
        "gasLimit": 10485760,
        "difficulty": 1,
        "nonce": "0x0000000000000000",
        "extraData": "0x22466c6578692069732061207468696e6722202d204166726900000000000000e0a2bd4258d2768837baa26a28fe71dc079f84c70000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
    },
    "hardforks": [
        {
            "name": "chainstart",
            "block": 0,
            "forkHash": "0xa3f5ab08"
        },
        {
            "name": "homestead",
            "block": 0,
            "forkHash": "0xa3f5ab08"
        },
        {
            "name": "tangerineWhistle",
            "block": 0,
            "forkHash": "0xa3f5ab08"
        },
        {
            "name": "spuriousDragon",
            "block": 0,
            "forkHash": "0xa3f5ab08"
        },
        {
            "name": "byzantium",
            "block": 0,
            "forkHash": "0xa3f5ab08"
        },
        {
            "name": "constantinople",
            "block": 0,
            "forkHash": "0xa3f5ab08"
        },
        {
            "name": "petersburg",
            "block": 0,
            "forkHash": "0xa3f5ab08"
        },
        {
            "name": "istanbul",
            "block": 1561651,
            "forkHash": "0xc25efa5c"
        },
        {
            "name": "berlin",
            "block": 4460644,
            "forkHash": "0x757a1c47"
        },
        {
            "name": "london",
            "block": 5062605,
            "forkHash": "0xb8c6299d"
        },
        {
            "//_comment": "The forkHash will remain same as mergeForkIdTransition is post merge, terminal block: https://goerli.etherscan.io/block/7382818",
            "name": "merge",
            "ttd": "10790000",
            "block": 7382819,
            "forkHash": "0xb8c6299d"
        },
        {
            "name": "mergeForkIdTransition",
            "block": null,
            "forkHash": null
        },
        {
            "name": "shanghai",
            "block": null,
            "forkHash": null
        }
    ],
    "bootstrapNodes": [],
    "dnsNetworks": [
        "enrtree://AKA3AM6LPBYEUDMVNU3BSVQJ5AD45Y7YPOHJLEF6W26QOE4VTUDPE@all.goerli.ethdisco.net"
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5zbaf":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = {
    "name": "mainnet",
    "chainId": 1,
    "networkId": 1,
    "defaultHardfork": "merge",
    "consensus": {
        "type": "pow",
        "algorithm": "ethash",
        "ethash": {}
    },
    "comment": "The Ethereum main chain",
    "url": "https://ethstats.net/",
    "genesis": {
        "gasLimit": 5000,
        "difficulty": 17179869184,
        "nonce": "0x0000000000000042",
        "extraData": "0x11bbe8db4e347b4e8c937c1c8370e4b5ed33adb3db69cbdb7a38e1e50b1b82fa"
    },
    "hardforks": [
        {
            "name": "chainstart",
            "block": 0,
            "forkHash": "0xfc64ec04"
        },
        {
            "name": "homestead",
            "block": 1150000,
            "forkHash": "0x97c2c34c"
        },
        {
            "name": "dao",
            "block": 1920000,
            "forkHash": "0x91d1f948"
        },
        {
            "name": "tangerineWhistle",
            "block": 2463000,
            "forkHash": "0x7a64da13"
        },
        {
            "name": "spuriousDragon",
            "block": 2675000,
            "forkHash": "0x3edd5b10"
        },
        {
            "name": "byzantium",
            "block": 4370000,
            "forkHash": "0xa00bc324"
        },
        {
            "name": "constantinople",
            "block": 7280000,
            "forkHash": "0x668db0af"
        },
        {
            "name": "petersburg",
            "block": 7280000,
            "forkHash": "0x668db0af"
        },
        {
            "name": "istanbul",
            "block": 9069000,
            "forkHash": "0x879d6e30"
        },
        {
            "name": "muirGlacier",
            "block": 9200000,
            "forkHash": "0xe029e991"
        },
        {
            "name": "berlin",
            "block": 12244000,
            "forkHash": "0x0eb440f6"
        },
        {
            "name": "london",
            "block": 12965000,
            "forkHash": "0xb715077d"
        },
        {
            "name": "arrowGlacier",
            "block": 13773000,
            "forkHash": "0x20c327fc"
        },
        {
            "name": "grayGlacier",
            "block": 15050000,
            "forkHash": "0xf0afd0e3"
        },
        {
            "//_comment": "The forkHash will remain same as mergeForkIdTransition is post merge, terminal block: https://etherscan.io/block/15537393",
            "name": "merge",
            "ttd": "58750000000000000000000",
            "block": 15537394,
            "forkHash": "0xf0afd0e3"
        },
        {
            "name": "mergeForkIdTransition",
            "block": null,
            "forkHash": null
        },
        {
            "name": "shanghai",
            "block": null,
            "forkHash": null
        }
    ],
    "bootstrapNodes": [],
    "dnsNetworks": [
        "enrtree://AKA3AM6LPBYEUDMVNU3BSVQJ5AD45Y7YPOHJLEF6W26QOE4VTUDPE@all.mainnet.ethdisco.net"
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cReY7":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = {
    "name": "sepolia",
    "chainId": 11155111,
    "networkId": 11155111,
    "defaultHardfork": "merge",
    "consensus": {
        "type": "pow",
        "algorithm": "ethash",
        "ethash": {}
    },
    "comment": "PoW test network to replace Ropsten",
    "url": "https://github.com/ethereum/go-ethereum/pull/23730",
    "genesis": {
        "timestamp": "0x6159af19",
        "gasLimit": 30000000,
        "difficulty": 131072,
        "nonce": "0x0000000000000000",
        "extraData": "0x5365706f6c69612c20417468656e732c204174746963612c2047726565636521"
    },
    "hardforks": [
        {
            "name": "chainstart",
            "block": 0,
            "forkHash": "0xfe3366e7"
        },
        {
            "name": "homestead",
            "block": 0,
            "forkHash": "0xfe3366e7"
        },
        {
            "name": "tangerineWhistle",
            "block": 0,
            "forkHash": "0xfe3366e7"
        },
        {
            "name": "spuriousDragon",
            "block": 0,
            "forkHash": "0xfe3366e7"
        },
        {
            "name": "byzantium",
            "block": 0,
            "forkHash": "0xfe3366e7"
        },
        {
            "name": "constantinople",
            "block": 0,
            "forkHash": "0xfe3366e7"
        },
        {
            "name": "petersburg",
            "block": 0,
            "forkHash": "0xfe3366e7"
        },
        {
            "name": "istanbul",
            "block": 0,
            "forkHash": "0xfe3366e7"
        },
        {
            "name": "muirGlacier",
            "block": 0,
            "forkHash": "0xfe3366e7"
        },
        {
            "name": "berlin",
            "block": 0,
            "forkHash": "0xfe3366e7"
        },
        {
            "name": "london",
            "block": 0,
            "forkHash": "0xfe3366e7"
        },
        {
            "//_comment": "The forkHash will remain same as mergeForkIdTransition is post merge, terminal block: https://sepolia.etherscan.io/block/1450408",
            "name": "merge",
            "ttd": "17000000000000000",
            "block": 1450409,
            "forkHash": "0xfe3366e7"
        },
        {
            "name": "mergeForkIdTransition",
            "block": 1735371,
            "forkHash": "0xb96cbd13"
        },
        {
            "name": "shanghai",
            "block": null,
            "timestamp": "1677557088",
            "forkHash": "0xf7f9bc08"
        }
    ],
    "bootstrapNodes": [],
    "dnsNetworks": [
        "enrtree://AKA3AM6LPBYEUDMVNU3BSVQJ5AD45Y7YPOHJLEF6W26QOE4VTUDPE@all.sepolia.ethdisco.net"
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bu5HE":[function(require,module,exports) {
/*
This file is part of web3.js.

web3.js is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

web3.js is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "EIPs", ()=>EIPs);
var _1153Js = require("./1153.js");
var _1153JsDefault = parcelHelpers.interopDefault(_1153Js);
var _1559Js = require("./1559.js");
var _1559JsDefault = parcelHelpers.interopDefault(_1559Js);
var _2315Js = require("./2315.js");
var _2315JsDefault = parcelHelpers.interopDefault(_2315Js);
var _2537Js = require("./2537.js");
var _2537JsDefault = parcelHelpers.interopDefault(_2537Js);
var _2565Js = require("./2565.js");
var _2565JsDefault = parcelHelpers.interopDefault(_2565Js);
var _2718Js = require("./2718.js");
var _2718JsDefault = parcelHelpers.interopDefault(_2718Js);
var _2929Js = require("./2929.js");
var _2929JsDefault = parcelHelpers.interopDefault(_2929Js);
var _2930Js = require("./2930.js");
var _2930JsDefault = parcelHelpers.interopDefault(_2930Js);
var _3198Js = require("./3198.js");
var _3198JsDefault = parcelHelpers.interopDefault(_3198Js);
var _3529Js = require("./3529.js");
var _3529JsDefault = parcelHelpers.interopDefault(_3529Js);
var _3540Js = require("./3540.js");
var _3540JsDefault = parcelHelpers.interopDefault(_3540Js);
var _3541Js = require("./3541.js");
var _3541JsDefault = parcelHelpers.interopDefault(_3541Js);
var _3554Js = require("./3554.js");
var _3554JsDefault = parcelHelpers.interopDefault(_3554Js);
var _3607Js = require("./3607.js");
var _3607JsDefault = parcelHelpers.interopDefault(_3607Js);
var _3651Js = require("./3651.js");
var _3651JsDefault = parcelHelpers.interopDefault(_3651Js);
var _3670Js = require("./3670.js");
var _3670JsDefault = parcelHelpers.interopDefault(_3670Js);
var _3675Js = require("./3675.js");
var _3675JsDefault = parcelHelpers.interopDefault(_3675Js);
var _3855Js = require("./3855.js");
var _3855JsDefault = parcelHelpers.interopDefault(_3855Js);
var _3860Js = require("./3860.js");
var _3860JsDefault = parcelHelpers.interopDefault(_3860Js);
var _4345Js = require("./4345.js");
var _4345JsDefault = parcelHelpers.interopDefault(_4345Js);
var _4399Js = require("./4399.js");
var _4399JsDefault = parcelHelpers.interopDefault(_4399Js);
var _5133Js = require("./5133.js");
var _5133JsDefault = parcelHelpers.interopDefault(_5133Js);
const EIPs = {
    1153: (0, _1153JsDefault.default),
    1559: (0, _1559JsDefault.default),
    2315: (0, _2315JsDefault.default),
    2537: (0, _2537JsDefault.default),
    2565: (0, _2565JsDefault.default),
    2718: (0, _2718JsDefault.default),
    2929: (0, _2929JsDefault.default),
    2930: (0, _2930JsDefault.default),
    3198: (0, _3198JsDefault.default),
    3529: (0, _3529JsDefault.default),
    3540: (0, _3540JsDefault.default),
    3541: (0, _3541JsDefault.default),
    3554: (0, _3554JsDefault.default),
    3607: (0, _3607JsDefault.default),
    3651: (0, _3651JsDefault.default),
    3670: (0, _3670JsDefault.default),
    3675: (0, _3675JsDefault.default),
    3855: (0, _3855JsDefault.default),
    3860: (0, _3860JsDefault.default),
    4345: (0, _4345JsDefault.default),
    4399: (0, _4399JsDefault.default),
    5133: (0, _5133JsDefault.default)
};

},{"./1153.js":"lSqZD","./1559.js":"eQ46m","./2315.js":"eiQvG","./2537.js":"4apqf","./2565.js":"dweLq","./2718.js":"hKljw","./2929.js":"dm9fo","./2930.js":"2i9Fm","./3198.js":"4ODzq","./3529.js":"guWgf","./3540.js":"ltVdm","./3541.js":"l0AT0","./3554.js":"anMXA","./3607.js":"kA5Ps","./3651.js":"976Ki","./3670.js":"c4EXf","./3675.js":"1695s","./3855.js":"gw8o5","./3860.js":"6gJJY","./4345.js":"jbnvM","./4399.js":"jOZut","./5133.js":"fE2eN","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lSqZD":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = {
    "name": "EIP-1153",
    "number": 1153,
    "comment": "Transient Storage",
    "url": "https://eips.ethereum.org/EIPS/eip-1153",
    "status": "Review",
    "minimumHardfork": "chainstart",
    "requiredEIPs": [],
    "gasConfig": {},
    "gasPrices": {
        "tstore": {
            "v": 100,
            "d": "Base fee of the TSTORE opcode"
        },
        "tload": {
            "v": 100,
            "d": "Base fee of the TLOAD opcode"
        }
    },
    "vm": {},
    "pow": {}
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eQ46m":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = {
    "name": "EIP-1559",
    "number": 1559,
    "comment": "Fee market change for ETH 1.0 chain",
    "url": "https://eips.ethereum.org/EIPS/eip-1559",
    "status": "Final",
    "minimumHardfork": "berlin",
    "requiredEIPs": [
        2930
    ],
    "gasConfig": {
        "baseFeeMaxChangeDenominator": {
            "v": 8,
            "d": "Maximum base fee change denominator"
        },
        "elasticityMultiplier": {
            "v": 2,
            "d": "Maximum block gas target elasticity"
        },
        "initialBaseFee": {
            "v": 1000000000,
            "d": "Initial base fee on first EIP1559 block"
        }
    },
    "gasPrices": {},
    "vm": {},
    "pow": {}
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eiQvG":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = {
    "name": "EIP-2315",
    "number": 2315,
    "comment": "Simple subroutines for the EVM",
    "url": "https://eips.ethereum.org/EIPS/eip-2315",
    "status": "Draft",
    "minimumHardfork": "istanbul",
    "gasConfig": {},
    "gasPrices": {
        "beginsub": {
            "v": 2,
            "d": "Base fee of the BEGINSUB opcode"
        },
        "returnsub": {
            "v": 5,
            "d": "Base fee of the RETURNSUB opcode"
        },
        "jumpsub": {
            "v": 10,
            "d": "Base fee of the JUMPSUB opcode"
        }
    },
    "vm": {},
    "pow": {}
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4apqf":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = {
    "name": "EIP-2537",
    "number": 2537,
    "comment": "BLS12-381 precompiles",
    "url": "https://eips.ethereum.org/EIPS/eip-2537",
    "status": "Draft",
    "minimumHardfork": "chainstart",
    "gasConfig": {},
    "gasPrices": {
        "Bls12381G1AddGas": {
            "v": 600,
            "d": "Gas cost of a single BLS12-381 G1 addition precompile-call"
        },
        "Bls12381G1MulGas": {
            "v": 12000,
            "d": "Gas cost of a single BLS12-381 G1 multiplication precompile-call"
        },
        "Bls12381G2AddGas": {
            "v": 4500,
            "d": "Gas cost of a single BLS12-381 G2 addition precompile-call"
        },
        "Bls12381G2MulGas": {
            "v": 55000,
            "d": "Gas cost of a single BLS12-381 G2 multiplication precompile-call"
        },
        "Bls12381PairingBaseGas": {
            "v": 115000,
            "d": "Base gas cost of BLS12-381 pairing check"
        },
        "Bls12381PairingPerPairGas": {
            "v": 23000,
            "d": "Per-pair gas cost of BLS12-381 pairing check"
        },
        "Bls12381MapG1Gas": {
            "v": 5500,
            "d": "Gas cost of BLS12-381 map field element to G1"
        },
        "Bls12381MapG2Gas": {
            "v": 110000,
            "d": "Gas cost of BLS12-381 map field element to G2"
        },
        "Bls12381MultiExpGasDiscount": {
            "v": [
                [
                    1,
                    1200
                ],
                [
                    2,
                    888
                ],
                [
                    3,
                    764
                ],
                [
                    4,
                    641
                ],
                [
                    5,
                    594
                ],
                [
                    6,
                    547
                ],
                [
                    7,
                    500
                ],
                [
                    8,
                    453
                ],
                [
                    9,
                    438
                ],
                [
                    10,
                    423
                ],
                [
                    11,
                    408
                ],
                [
                    12,
                    394
                ],
                [
                    13,
                    379
                ],
                [
                    14,
                    364
                ],
                [
                    15,
                    349
                ],
                [
                    16,
                    334
                ],
                [
                    17,
                    330
                ],
                [
                    18,
                    326
                ],
                [
                    19,
                    322
                ],
                [
                    20,
                    318
                ],
                [
                    21,
                    314
                ],
                [
                    22,
                    310
                ],
                [
                    23,
                    306
                ],
                [
                    24,
                    302
                ],
                [
                    25,
                    298
                ],
                [
                    26,
                    294
                ],
                [
                    27,
                    289
                ],
                [
                    28,
                    285
                ],
                [
                    29,
                    281
                ],
                [
                    30,
                    277
                ],
                [
                    31,
                    273
                ],
                [
                    32,
                    269
                ],
                [
                    33,
                    268
                ],
                [
                    34,
                    266
                ],
                [
                    35,
                    265
                ],
                [
                    36,
                    263
                ],
                [
                    37,
                    262
                ],
                [
                    38,
                    260
                ],
                [
                    39,
                    259
                ],
                [
                    40,
                    257
                ],
                [
                    41,
                    256
                ],
                [
                    42,
                    254
                ],
                [
                    43,
                    253
                ],
                [
                    44,
                    251
                ],
                [
                    45,
                    250
                ],
                [
                    46,
                    248
                ],
                [
                    47,
                    247
                ],
                [
                    48,
                    245
                ],
                [
                    49,
                    244
                ],
                [
                    50,
                    242
                ],
                [
                    51,
                    241
                ],
                [
                    52,
                    239
                ],
                [
                    53,
                    238
                ],
                [
                    54,
                    236
                ],
                [
                    55,
                    235
                ],
                [
                    56,
                    233
                ],
                [
                    57,
                    232
                ],
                [
                    58,
                    231
                ],
                [
                    59,
                    229
                ],
                [
                    60,
                    228
                ],
                [
                    61,
                    226
                ],
                [
                    62,
                    225
                ],
                [
                    63,
                    223
                ],
                [
                    64,
                    222
                ],
                [
                    65,
                    221
                ],
                [
                    66,
                    220
                ],
                [
                    67,
                    219
                ],
                [
                    68,
                    219
                ],
                [
                    69,
                    218
                ],
                [
                    70,
                    217
                ],
                [
                    71,
                    216
                ],
                [
                    72,
                    216
                ],
                [
                    73,
                    215
                ],
                [
                    74,
                    214
                ],
                [
                    75,
                    213
                ],
                [
                    76,
                    213
                ],
                [
                    77,
                    212
                ],
                [
                    78,
                    211
                ],
                [
                    79,
                    211
                ],
                [
                    80,
                    210
                ],
                [
                    81,
                    209
                ],
                [
                    82,
                    208
                ],
                [
                    83,
                    208
                ],
                [
                    84,
                    207
                ],
                [
                    85,
                    206
                ],
                [
                    86,
                    205
                ],
                [
                    87,
                    205
                ],
                [
                    88,
                    204
                ],
                [
                    89,
                    203
                ],
                [
                    90,
                    202
                ],
                [
                    91,
                    202
                ],
                [
                    92,
                    201
                ],
                [
                    93,
                    200
                ],
                [
                    94,
                    199
                ],
                [
                    95,
                    199
                ],
                [
                    96,
                    198
                ],
                [
                    97,
                    197
                ],
                [
                    98,
                    196
                ],
                [
                    99,
                    196
                ],
                [
                    100,
                    195
                ],
                [
                    101,
                    194
                ],
                [
                    102,
                    193
                ],
                [
                    103,
                    193
                ],
                [
                    104,
                    192
                ],
                [
                    105,
                    191
                ],
                [
                    106,
                    191
                ],
                [
                    107,
                    190
                ],
                [
                    108,
                    189
                ],
                [
                    109,
                    188
                ],
                [
                    110,
                    188
                ],
                [
                    111,
                    187
                ],
                [
                    112,
                    186
                ],
                [
                    113,
                    185
                ],
                [
                    114,
                    185
                ],
                [
                    115,
                    184
                ],
                [
                    116,
                    183
                ],
                [
                    117,
                    182
                ],
                [
                    118,
                    182
                ],
                [
                    119,
                    181
                ],
                [
                    120,
                    180
                ],
                [
                    121,
                    179
                ],
                [
                    122,
                    179
                ],
                [
                    123,
                    178
                ],
                [
                    124,
                    177
                ],
                [
                    125,
                    176
                ],
                [
                    126,
                    176
                ],
                [
                    127,
                    175
                ],
                [
                    128,
                    174
                ]
            ],
            "d": "Discount gas costs of calls to the MultiExp precompiles with `k` (point, scalar) pair"
        }
    },
    "vm": {},
    "pow": {}
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dweLq":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = {
    "name": "EIP-2565",
    "number": 2565,
    "comment": "ModExp gas cost",
    "url": "https://eips.ethereum.org/EIPS/eip-2565",
    "status": "Final",
    "minimumHardfork": "byzantium",
    "gasConfig": {},
    "gasPrices": {
        "modexpGquaddivisor": {
            "v": 3,
            "d": "Gquaddivisor from modexp precompile for gas calculation"
        }
    },
    "vm": {},
    "pow": {}
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hKljw":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = {
    "name": "EIP-2718",
    "comment": "Typed Transaction Envelope",
    "url": "https://eips.ethereum.org/EIPS/eip-2718",
    "status": "Final",
    "minimumHardfork": "chainstart",
    "gasConfig": {},
    "gasPrices": {},
    "vm": {},
    "pow": {}
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dm9fo":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = {
    "name": "EIP-2929",
    "comment": "Gas cost increases for state access opcodes",
    "url": "https://eips.ethereum.org/EIPS/eip-2929",
    "status": "Final",
    "minimumHardfork": "chainstart",
    "gasConfig": {},
    "gasPrices": {
        "coldsload": {
            "v": 2100,
            "d": "Gas cost of the first read of storage from a given location (per transaction)"
        },
        "coldaccountaccess": {
            "v": 2600,
            "d": "Gas cost of the first read of a given address (per transaction)"
        },
        "warmstorageread": {
            "v": 100,
            "d": "Gas cost of reading storage locations which have already loaded 'cold'"
        },
        "sstoreCleanGasEIP2200": {
            "v": 2900,
            "d": "Once per SSTORE operation from clean non-zero to something else"
        },
        "sstoreNoopGasEIP2200": {
            "v": 100,
            "d": "Once per SSTORE operation if the value doesn't change"
        },
        "sstoreDirtyGasEIP2200": {
            "v": 100,
            "d": "Once per SSTORE operation if a dirty value is changed"
        },
        "sstoreInitRefundEIP2200": {
            "v": 19900,
            "d": "Once per SSTORE operation for resetting to the original zero value"
        },
        "sstoreCleanRefundEIP2200": {
            "v": 4900,
            "d": "Once per SSTORE operation for resetting to the original non-zero value"
        },
        "call": {
            "v": 0,
            "d": "Base fee of the CALL opcode"
        },
        "callcode": {
            "v": 0,
            "d": "Base fee of the CALLCODE opcode"
        },
        "delegatecall": {
            "v": 0,
            "d": "Base fee of the DELEGATECALL opcode"
        },
        "staticcall": {
            "v": 0,
            "d": "Base fee of the STATICCALL opcode"
        },
        "balance": {
            "v": 0,
            "d": "Base fee of the BALANCE opcode"
        },
        "extcodesize": {
            "v": 0,
            "d": "Base fee of the EXTCODESIZE opcode"
        },
        "extcodecopy": {
            "v": 0,
            "d": "Base fee of the EXTCODECOPY opcode"
        },
        "extcodehash": {
            "v": 0,
            "d": "Base fee of the EXTCODEHASH opcode"
        },
        "sload": {
            "v": 0,
            "d": "Base fee of the SLOAD opcode"
        },
        "sstore": {
            "v": 0,
            "d": "Base fee of the SSTORE opcode"
        }
    },
    "vm": {},
    "pow": {}
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2i9Fm":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = {
    "name": "EIP-2930",
    "comment": "Optional access lists",
    "url": "https://eips.ethereum.org/EIPS/eip-2930",
    "status": "Final",
    "minimumHardfork": "istanbul",
    "requiredEIPs": [
        2718,
        2929
    ],
    "gasConfig": {},
    "gasPrices": {
        "accessListStorageKeyCost": {
            "v": 1900,
            "d": "Gas cost per storage key in an Access List transaction"
        },
        "accessListAddressCost": {
            "v": 2400,
            "d": "Gas cost per storage key in an Access List transaction"
        }
    },
    "vm": {},
    "pow": {}
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4ODzq":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = {
    "name": "EIP-3198",
    "number": 3198,
    "comment": "BASEFEE opcode",
    "url": "https://eips.ethereum.org/EIPS/eip-3198",
    "status": "Final",
    "minimumHardfork": "london",
    "gasConfig": {},
    "gasPrices": {
        "basefee": {
            "v": 2,
            "d": "Gas cost of the BASEFEE opcode"
        }
    },
    "vm": {},
    "pow": {}
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"guWgf":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = {
    "name": "EIP-3529",
    "comment": "Reduction in refunds",
    "url": "https://eips.ethereum.org/EIPS/eip-3529",
    "status": "Final",
    "minimumHardfork": "berlin",
    "requiredEIPs": [
        2929
    ],
    "gasConfig": {
        "maxRefundQuotient": {
            "v": 5,
            "d": "Maximum refund quotient; max tx refund is min(tx.gasUsed/maxRefundQuotient, tx.gasRefund)"
        }
    },
    "gasPrices": {
        "selfdestructRefund": {
            "v": 0,
            "d": "Refunded following a selfdestruct operation"
        },
        "sstoreClearRefundEIP2200": {
            "v": 4800,
            "d": "Once per SSTORE operation for clearing an originally existing storage slot"
        }
    },
    "vm": {},
    "pow": {}
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ltVdm":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = {
    "name": "EIP-3540",
    "number": 3540,
    "comment": "EVM Object Format (EOF) v1",
    "url": "https://eips.ethereum.org/EIPS/eip-3540",
    "status": "Review",
    "minimumHardfork": "london",
    "requiredEIPs": [
        3541
    ],
    "gasConfig": {},
    "gasPrices": {},
    "vm": {},
    "pow": {}
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"l0AT0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = {
    "name": "EIP-3541",
    "comment": "Reject new contracts starting with the 0xEF byte",
    "url": "https://eips.ethereum.org/EIPS/eip-3541",
    "status": "Final",
    "minimumHardfork": "berlin",
    "requiredEIPs": [],
    "gasConfig": {},
    "gasPrices": {},
    "vm": {},
    "pow": {}
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"anMXA":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = {
    "name": "EIP-3554",
    "comment": "Reduction in refunds",
    "url": "Difficulty Bomb Delay to December 1st 2021",
    "status": "Final",
    "minimumHardfork": "muirGlacier",
    "requiredEIPs": [],
    "gasConfig": {},
    "gasPrices": {},
    "vm": {},
    "pow": {
        "difficultyBombDelay": {
            "v": 9500000,
            "d": "the amount of blocks to delay the difficulty bomb with"
        }
    }
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kA5Ps":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = {
    "name": "EIP-3607",
    "number": 3607,
    "comment": "Reject transactions from senders with deployed code",
    "url": "https://eips.ethereum.org/EIPS/eip-3607",
    "status": "Final",
    "minimumHardfork": "chainstart",
    "requiredEIPs": [],
    "gasConfig": {},
    "gasPrices": {},
    "vm": {},
    "pow": {}
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"976Ki":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = {
    "name": "EIP-3651",
    "number": 3198,
    "comment": "Warm COINBASE",
    "url": "https://eips.ethereum.org/EIPS/eip-3651",
    "status": "Review",
    "minimumHardfork": "london",
    "requiredEIPs": [
        2929
    ],
    "gasConfig": {},
    "gasPrices": {},
    "vm": {},
    "pow": {}
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"c4EXf":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = {
    "name": "EIP-3670",
    "number": 3670,
    "comment": "EOF - Code Validation",
    "url": "https://eips.ethereum.org/EIPS/eip-3670",
    "status": "Review",
    "minimumHardfork": "london",
    "requiredEIPs": [
        3540
    ],
    "gasConfig": {},
    "gasPrices": {},
    "vm": {},
    "pow": {}
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1695s":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = {
    "name": "EIP-3675",
    "number": 3675,
    "comment": "Upgrade consensus to Proof-of-Stake",
    "url": "https://eips.ethereum.org/EIPS/eip-3675",
    "status": "Final",
    "minimumHardfork": "london",
    "requiredEIPs": [],
    "gasConfig": {},
    "gasPrices": {},
    "vm": {},
    "pow": {}
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gw8o5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = {
    "name": "EIP-3855",
    "number": 3855,
    "comment": "PUSH0 instruction",
    "url": "https://eips.ethereum.org/EIPS/eip-3855",
    "status": "Review",
    "minimumHardfork": "chainstart",
    "requiredEIPs": [],
    "gasConfig": {},
    "gasPrices": {
        "push0": {
            "v": 2,
            "d": "Base fee of the PUSH0 opcode"
        }
    },
    "vm": {},
    "pow": {}
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6gJJY":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = {
    "name": "EIP-3860",
    "number": 3860,
    "comment": "Limit and meter initcode",
    "url": "https://eips.ethereum.org/EIPS/eip-3860",
    "status": "Review",
    "minimumHardfork": "spuriousDragon",
    "requiredEIPs": [],
    "gasConfig": {},
    "gasPrices": {
        "initCodeWordCost": {
            "v": 2,
            "d": "Gas to pay for each word (32 bytes) of initcode when creating a contract"
        }
    },
    "vm": {
        "maxInitCodeSize": {
            "v": 49152,
            "d": "Maximum length of initialization code when creating a contract"
        }
    },
    "pow": {}
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jbnvM":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = {
    "name": "EIP-4345",
    "number": 4345,
    "comment": "Difficulty Bomb Delay to June 2022",
    "url": "https://eips.ethereum.org/EIPS/eip-4345",
    "status": "Final",
    "minimumHardfork": "london",
    "gasConfig": {},
    "gasPrices": {},
    "vm": {},
    "pow": {
        "difficultyBombDelay": {
            "v": 10700000,
            "d": "the amount of blocks to delay the difficulty bomb with"
        }
    }
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jOZut":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = {
    "name": "EIP-4399",
    "number": 4399,
    "comment": "Supplant DIFFICULTY opcode with PREVRANDAO",
    "url": "https://eips.ethereum.org/EIPS/eip-4399",
    "status": "Review",
    "minimumHardfork": "london",
    "requiredEIPs": [],
    "gasConfig": {},
    "gasPrices": {},
    "vm": {},
    "pow": {}
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fE2eN":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = {
    "name": "EIP-5133",
    "number": 5133,
    "comment": "Delaying Difficulty Bomb to mid-September 2022",
    "url": "https://eips.ethereum.org/EIPS/eip-5133",
    "status": "Draft",
    "minimumHardfork": "grayGlacier",
    "gasConfig": {},
    "gasPrices": {},
    "vm": {},
    "pow": {
        "difficultyBombDelay": {
            "v": 11400000,
            "d": "the amount of blocks to delay the difficulty bomb with"
        }
    }
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4CnNh":[function(require,module,exports) {
/*
This file is part of web3.js.

web3.js is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

web3.js is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "hardforks", ()=>hardforks);
var _chainstartJs = require("./chainstart.js");
var _chainstartJsDefault = parcelHelpers.interopDefault(_chainstartJs);
var _daoJs = require("./dao.js");
var _daoJsDefault = parcelHelpers.interopDefault(_daoJs);
var _homesteadJs = require("./homestead.js");
var _homesteadJsDefault = parcelHelpers.interopDefault(_homesteadJs);
var _tangerineWhistleJs = require("./tangerineWhistle.js");
var _tangerineWhistleJsDefault = parcelHelpers.interopDefault(_tangerineWhistleJs);
var _spuriousDragonJs = require("./spuriousDragon.js");
var _spuriousDragonJsDefault = parcelHelpers.interopDefault(_spuriousDragonJs);
var _byzantiumJs = require("./byzantium.js");
var _byzantiumJsDefault = parcelHelpers.interopDefault(_byzantiumJs);
var _constantinopleJs = require("./constantinople.js");
var _constantinopleJsDefault = parcelHelpers.interopDefault(_constantinopleJs);
var _petersburgJs = require("./petersburg.js");
var _petersburgJsDefault = parcelHelpers.interopDefault(_petersburgJs);
var _istanbulJs = require("./istanbul.js");
var _istanbulJsDefault = parcelHelpers.interopDefault(_istanbulJs);
var _muirGlacierJs = require("./muirGlacier.js");
var _muirGlacierJsDefault = parcelHelpers.interopDefault(_muirGlacierJs);
var _berlinJs = require("./berlin.js");
var _berlinJsDefault = parcelHelpers.interopDefault(_berlinJs);
var _londonJs = require("./london.js");
var _londonJsDefault = parcelHelpers.interopDefault(_londonJs);
var _shanghaiJs = require("./shanghai.js");
var _shanghaiJsDefault = parcelHelpers.interopDefault(_shanghaiJs);
var _arrowGlacierJs = require("./arrowGlacier.js");
var _arrowGlacierJsDefault = parcelHelpers.interopDefault(_arrowGlacierJs);
var _grayGlacierJs = require("./grayGlacier.js");
var _grayGlacierJsDefault = parcelHelpers.interopDefault(_grayGlacierJs);
var _mergeForkIdTransitionJs = require("./mergeForkIdTransition.js");
var _mergeForkIdTransitionJsDefault = parcelHelpers.interopDefault(_mergeForkIdTransitionJs);
var _mergeJs = require("./merge.js");
var _mergeJsDefault = parcelHelpers.interopDefault(_mergeJs);
const hardforks = {
    chainstart: (0, _chainstartJsDefault.default),
    homestead: (0, _homesteadJsDefault.default),
    dao: (0, _daoJsDefault.default),
    tangerineWhistle: (0, _tangerineWhistleJsDefault.default),
    spuriousDragon: (0, _spuriousDragonJsDefault.default),
    byzantium: (0, _byzantiumJsDefault.default),
    constantinople: (0, _constantinopleJsDefault.default),
    petersburg: (0, _petersburgJsDefault.default),
    istanbul: (0, _istanbulJsDefault.default),
    muirGlacier: (0, _muirGlacierJsDefault.default),
    berlin: (0, _berlinJsDefault.default),
    london: (0, _londonJsDefault.default),
    shanghai: (0, _shanghaiJsDefault.default),
    arrowGlacier: (0, _arrowGlacierJsDefault.default),
    grayGlacier: (0, _grayGlacierJsDefault.default),
    mergeForkIdTransition: (0, _mergeForkIdTransitionJsDefault.default),
    merge: (0, _mergeJsDefault.default)
};

},{"./chainstart.js":"au4J2","./dao.js":"hyfQZ","./homestead.js":"ijTJA","./tangerineWhistle.js":"lIeiE","./spuriousDragon.js":"ialWp","./byzantium.js":"1U9wy","./constantinople.js":"a4YNN","./petersburg.js":"eZpP2","./istanbul.js":"iifdu","./muirGlacier.js":"he0O4","./berlin.js":"fQgqD","./london.js":"srvo2","./shanghai.js":"0BKkd","./arrowGlacier.js":"4rFwn","./grayGlacier.js":"4DHZr","./mergeForkIdTransition.js":"amMWc","./merge.js":"4q9sB","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"au4J2":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = {
    "name": "chainstart",
    "comment": "Start of the Ethereum main chain",
    "url": "",
    "status": "",
    "gasConfig": {
        "minGasLimit": {
            "v": 5000,
            "d": "Minimum the gas limit may ever be"
        },
        "gasLimitBoundDivisor": {
            "v": 1024,
            "d": "The bound divisor of the gas limit, used in update calculations"
        },
        "maxRefundQuotient": {
            "v": 2,
            "d": "Maximum refund quotient; max tx refund is min(tx.gasUsed/maxRefundQuotient, tx.gasRefund)"
        }
    },
    "gasPrices": {
        "base": {
            "v": 2,
            "d": "Gas base cost, used e.g. for ChainID opcode (Istanbul)"
        },
        "tierStep": {
            "v": [
                0,
                2,
                3,
                5,
                8,
                10,
                20
            ],
            "d": "Once per operation, for a selection of them"
        },
        "exp": {
            "v": 10,
            "d": "Base fee of the EXP opcode"
        },
        "expByte": {
            "v": 10,
            "d": "Times ceil(log256(exponent)) for the EXP instruction"
        },
        "sha3": {
            "v": 30,
            "d": "Base fee of the SHA3 opcode"
        },
        "sha3Word": {
            "v": 6,
            "d": "Once per word of the SHA3 operation's data"
        },
        "sload": {
            "v": 50,
            "d": "Base fee of the SLOAD opcode"
        },
        "sstoreSet": {
            "v": 20000,
            "d": "Once per SSTORE operation if the zeroness changes from zero"
        },
        "sstoreReset": {
            "v": 5000,
            "d": "Once per SSTORE operation if the zeroness does not change from zero"
        },
        "sstoreRefund": {
            "v": 15000,
            "d": "Once per SSTORE operation if the zeroness changes to zero"
        },
        "jumpdest": {
            "v": 1,
            "d": "Base fee of the JUMPDEST opcode"
        },
        "log": {
            "v": 375,
            "d": "Base fee of the LOG opcode"
        },
        "logData": {
            "v": 8,
            "d": "Per byte in a LOG* operation's data"
        },
        "logTopic": {
            "v": 375,
            "d": "Multiplied by the * of the LOG*, per LOG transaction. e.g. LOG0 incurs 0 * c_txLogTopicGas, LOG4 incurs 4 * c_txLogTopicGas"
        },
        "create": {
            "v": 32000,
            "d": "Base fee of the CREATE opcode"
        },
        "call": {
            "v": 40,
            "d": "Base fee of the CALL opcode"
        },
        "callStipend": {
            "v": 2300,
            "d": "Free gas given at beginning of call"
        },
        "callValueTransfer": {
            "v": 9000,
            "d": "Paid for CALL when the value transfor is non-zero"
        },
        "callNewAccount": {
            "v": 25000,
            "d": "Paid for CALL when the destination address didn't exist prior"
        },
        "selfdestructRefund": {
            "v": 24000,
            "d": "Refunded following a selfdestruct operation"
        },
        "memory": {
            "v": 3,
            "d": "Times the address of the (highest referenced byte in memory + 1). NOTE: referencing happens on read, write and in instructions such as RETURN and CALL"
        },
        "quadCoeffDiv": {
            "v": 512,
            "d": "Divisor for the quadratic particle of the memory cost equation"
        },
        "createData": {
            "v": 200,
            "d": ""
        },
        "tx": {
            "v": 21000,
            "d": "Per transaction. NOTE: Not payable on data of calls between transactions"
        },
        "txCreation": {
            "v": 32000,
            "d": "The cost of creating a contract via tx"
        },
        "txDataZero": {
            "v": 4,
            "d": "Per byte of data attached to a transaction that equals zero. NOTE: Not payable on data of calls between transactions"
        },
        "txDataNonZero": {
            "v": 68,
            "d": "Per byte of data attached to a transaction that is not equal to zero. NOTE: Not payable on data of calls between transactions"
        },
        "copy": {
            "v": 3,
            "d": "Multiplied by the number of 32-byte words that are copied (round up) for any *COPY operation and added"
        },
        "ecRecover": {
            "v": 3000,
            "d": ""
        },
        "sha256": {
            "v": 60,
            "d": ""
        },
        "sha256Word": {
            "v": 12,
            "d": ""
        },
        "ripemd160": {
            "v": 600,
            "d": ""
        },
        "ripemd160Word": {
            "v": 120,
            "d": ""
        },
        "identity": {
            "v": 15,
            "d": ""
        },
        "identityWord": {
            "v": 3,
            "d": ""
        },
        "stop": {
            "v": 0,
            "d": "Base fee of the STOP opcode"
        },
        "add": {
            "v": 3,
            "d": "Base fee of the ADD opcode"
        },
        "mul": {
            "v": 5,
            "d": "Base fee of the MUL opcode"
        },
        "sub": {
            "v": 3,
            "d": "Base fee of the SUB opcode"
        },
        "div": {
            "v": 5,
            "d": "Base fee of the DIV opcode"
        },
        "sdiv": {
            "v": 5,
            "d": "Base fee of the SDIV opcode"
        },
        "mod": {
            "v": 5,
            "d": "Base fee of the MOD opcode"
        },
        "smod": {
            "v": 5,
            "d": "Base fee of the SMOD opcode"
        },
        "addmod": {
            "v": 8,
            "d": "Base fee of the ADDMOD opcode"
        },
        "mulmod": {
            "v": 8,
            "d": "Base fee of the MULMOD opcode"
        },
        "signextend": {
            "v": 5,
            "d": "Base fee of the SIGNEXTEND opcode"
        },
        "lt": {
            "v": 3,
            "d": "Base fee of the LT opcode"
        },
        "gt": {
            "v": 3,
            "d": "Base fee of the GT opcode"
        },
        "slt": {
            "v": 3,
            "d": "Base fee of the SLT opcode"
        },
        "sgt": {
            "v": 3,
            "d": "Base fee of the SGT opcode"
        },
        "eq": {
            "v": 3,
            "d": "Base fee of the EQ opcode"
        },
        "iszero": {
            "v": 3,
            "d": "Base fee of the ISZERO opcode"
        },
        "and": {
            "v": 3,
            "d": "Base fee of the AND opcode"
        },
        "or": {
            "v": 3,
            "d": "Base fee of the OR opcode"
        },
        "xor": {
            "v": 3,
            "d": "Base fee of the XOR opcode"
        },
        "not": {
            "v": 3,
            "d": "Base fee of the NOT opcode"
        },
        "byte": {
            "v": 3,
            "d": "Base fee of the BYTE opcode"
        },
        "address": {
            "v": 2,
            "d": "Base fee of the ADDRESS opcode"
        },
        "balance": {
            "v": 20,
            "d": "Base fee of the BALANCE opcode"
        },
        "origin": {
            "v": 2,
            "d": "Base fee of the ORIGIN opcode"
        },
        "caller": {
            "v": 2,
            "d": "Base fee of the CALLER opcode"
        },
        "callvalue": {
            "v": 2,
            "d": "Base fee of the CALLVALUE opcode"
        },
        "calldataload": {
            "v": 3,
            "d": "Base fee of the CALLDATALOAD opcode"
        },
        "calldatasize": {
            "v": 2,
            "d": "Base fee of the CALLDATASIZE opcode"
        },
        "calldatacopy": {
            "v": 3,
            "d": "Base fee of the CALLDATACOPY opcode"
        },
        "codesize": {
            "v": 2,
            "d": "Base fee of the CODESIZE opcode"
        },
        "codecopy": {
            "v": 3,
            "d": "Base fee of the CODECOPY opcode"
        },
        "gasprice": {
            "v": 2,
            "d": "Base fee of the GASPRICE opcode"
        },
        "extcodesize": {
            "v": 20,
            "d": "Base fee of the EXTCODESIZE opcode"
        },
        "extcodecopy": {
            "v": 20,
            "d": "Base fee of the EXTCODECOPY opcode"
        },
        "blockhash": {
            "v": 20,
            "d": "Base fee of the BLOCKHASH opcode"
        },
        "coinbase": {
            "v": 2,
            "d": "Base fee of the COINBASE opcode"
        },
        "timestamp": {
            "v": 2,
            "d": "Base fee of the TIMESTAMP opcode"
        },
        "number": {
            "v": 2,
            "d": "Base fee of the NUMBER opcode"
        },
        "difficulty": {
            "v": 2,
            "d": "Base fee of the DIFFICULTY opcode"
        },
        "gaslimit": {
            "v": 2,
            "d": "Base fee of the GASLIMIT opcode"
        },
        "pop": {
            "v": 2,
            "d": "Base fee of the POP opcode"
        },
        "mload": {
            "v": 3,
            "d": "Base fee of the MLOAD opcode"
        },
        "mstore": {
            "v": 3,
            "d": "Base fee of the MSTORE opcode"
        },
        "mstore8": {
            "v": 3,
            "d": "Base fee of the MSTORE8 opcode"
        },
        "sstore": {
            "v": 0,
            "d": "Base fee of the SSTORE opcode"
        },
        "jump": {
            "v": 8,
            "d": "Base fee of the JUMP opcode"
        },
        "jumpi": {
            "v": 10,
            "d": "Base fee of the JUMPI opcode"
        },
        "pc": {
            "v": 2,
            "d": "Base fee of the PC opcode"
        },
        "msize": {
            "v": 2,
            "d": "Base fee of the MSIZE opcode"
        },
        "gas": {
            "v": 2,
            "d": "Base fee of the GAS opcode"
        },
        "push": {
            "v": 3,
            "d": "Base fee of the PUSH opcode"
        },
        "dup": {
            "v": 3,
            "d": "Base fee of the DUP opcode"
        },
        "swap": {
            "v": 3,
            "d": "Base fee of the SWAP opcode"
        },
        "callcode": {
            "v": 40,
            "d": "Base fee of the CALLCODE opcode"
        },
        "return": {
            "v": 0,
            "d": "Base fee of the RETURN opcode"
        },
        "invalid": {
            "v": 0,
            "d": "Base fee of the INVALID opcode"
        },
        "selfdestruct": {
            "v": 0,
            "d": "Base fee of the SELFDESTRUCT opcode"
        }
    },
    "vm": {
        "stackLimit": {
            "v": 1024,
            "d": "Maximum size of VM stack allowed"
        },
        "callCreateDepth": {
            "v": 1024,
            "d": "Maximum depth of call/create stack"
        },
        "maxExtraDataSize": {
            "v": 32,
            "d": "Maximum size extra data may be after Genesis"
        }
    },
    "pow": {
        "minimumDifficulty": {
            "v": 131072,
            "d": "The minimum that the difficulty may ever be"
        },
        "difficultyBoundDivisor": {
            "v": 2048,
            "d": "The bound divisor of the difficulty, used in the update calculations"
        },
        "durationLimit": {
            "v": 13,
            "d": "The decision boundary on the blocktime duration used to determine whether difficulty should go up or not"
        },
        "epochDuration": {
            "v": 30000,
            "d": "Duration between proof-of-work epochs"
        },
        "timebombPeriod": {
            "v": 100000,
            "d": "Exponential difficulty timebomb period"
        },
        "minerReward": {
            "v": "5000000000000000000",
            "d": "the amount a miner get rewarded for mining a block"
        },
        "difficultyBombDelay": {
            "v": 0,
            "d": "the amount of blocks to delay the difficulty bomb with"
        }
    }
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hyfQZ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = {
    "name": "dao",
    "comment": "DAO rescue hardfork",
    "url": "https://eips.ethereum.org/EIPS/eip-779",
    "status": "Final",
    "gasConfig": {},
    "gasPrices": {},
    "vm": {},
    "pow": {}
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ijTJA":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = {
    "name": "homestead",
    "comment": "Homestead hardfork with protocol and network changes",
    "url": "https://eips.ethereum.org/EIPS/eip-606",
    "status": "Final",
    "gasConfig": {},
    "gasPrices": {
        "delegatecall": {
            "v": 40,
            "d": "Base fee of the DELEGATECALL opcode"
        }
    },
    "vm": {},
    "pow": {}
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lIeiE":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = {
    "name": "tangerineWhistle",
    "comment": "Hardfork with gas cost changes for IO-heavy operations",
    "url": "https://eips.ethereum.org/EIPS/eip-608",
    "status": "Final",
    "gasConfig": {},
    "gasPrices": {
        "sload": {
            "v": 200,
            "d": "Once per SLOAD operation"
        },
        "call": {
            "v": 700,
            "d": "Once per CALL operation & message call transaction"
        },
        "extcodesize": {
            "v": 700,
            "d": "Base fee of the EXTCODESIZE opcode"
        },
        "extcodecopy": {
            "v": 700,
            "d": "Base fee of the EXTCODECOPY opcode"
        },
        "balance": {
            "v": 400,
            "d": "Base fee of the BALANCE opcode"
        },
        "delegatecall": {
            "v": 700,
            "d": "Base fee of the DELEGATECALL opcode"
        },
        "callcode": {
            "v": 700,
            "d": "Base fee of the CALLCODE opcode"
        },
        "selfdestruct": {
            "v": 5000,
            "d": "Base fee of the SELFDESTRUCT opcode"
        }
    },
    "vm": {},
    "pow": {}
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ialWp":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = {
    "name": "spuriousDragon",
    "comment": "HF with EIPs for simple replay attack protection, EXP cost increase, state trie clearing, contract code size limit",
    "url": "https://eips.ethereum.org/EIPS/eip-607",
    "status": "Final",
    "gasConfig": {},
    "gasPrices": {
        "expByte": {
            "v": 50,
            "d": "Times ceil(log256(exponent)) for the EXP instruction"
        }
    },
    "vm": {
        "maxCodeSize": {
            "v": 24576,
            "d": "Maximum length of contract code"
        }
    },
    "pow": {}
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1U9wy":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = {
    "name": "byzantium",
    "comment": "Hardfork with new precompiles, instructions and other protocol changes",
    "url": "https://eips.ethereum.org/EIPS/eip-609",
    "status": "Final",
    "gasConfig": {},
    "gasPrices": {
        "modexpGquaddivisor": {
            "v": 20,
            "d": "Gquaddivisor from modexp precompile for gas calculation"
        },
        "ecAdd": {
            "v": 500,
            "d": "Gas costs for curve addition precompile"
        },
        "ecMul": {
            "v": 40000,
            "d": "Gas costs for curve multiplication precompile"
        },
        "ecPairing": {
            "v": 100000,
            "d": "Base gas costs for curve pairing precompile"
        },
        "ecPairingWord": {
            "v": 80000,
            "d": "Gas costs regarding curve pairing precompile input length"
        },
        "revert": {
            "v": 0,
            "d": "Base fee of the REVERT opcode"
        },
        "staticcall": {
            "v": 700,
            "d": "Base fee of the STATICCALL opcode"
        },
        "returndatasize": {
            "v": 2,
            "d": "Base fee of the RETURNDATASIZE opcode"
        },
        "returndatacopy": {
            "v": 3,
            "d": "Base fee of the RETURNDATACOPY opcode"
        }
    },
    "vm": {},
    "pow": {
        "minerReward": {
            "v": "3000000000000000000",
            "d": "the amount a miner get rewarded for mining a block"
        },
        "difficultyBombDelay": {
            "v": 3000000,
            "d": "the amount of blocks to delay the difficulty bomb with"
        }
    }
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"a4YNN":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = {
    "name": "constantinople",
    "comment": "Postponed hardfork including EIP-1283 (SSTORE gas metering changes)",
    "url": "https://eips.ethereum.org/EIPS/eip-1013",
    "status": "Final",
    "gasConfig": {},
    "gasPrices": {
        "netSstoreNoopGas": {
            "v": 200,
            "d": "Once per SSTORE operation if the value doesn't change"
        },
        "netSstoreInitGas": {
            "v": 20000,
            "d": "Once per SSTORE operation from clean zero"
        },
        "netSstoreCleanGas": {
            "v": 5000,
            "d": "Once per SSTORE operation from clean non-zero"
        },
        "netSstoreDirtyGas": {
            "v": 200,
            "d": "Once per SSTORE operation from dirty"
        },
        "netSstoreClearRefund": {
            "v": 15000,
            "d": "Once per SSTORE operation for clearing an originally existing storage slot"
        },
        "netSstoreResetRefund": {
            "v": 4800,
            "d": "Once per SSTORE operation for resetting to the original non-zero value"
        },
        "netSstoreResetClearRefund": {
            "v": 19800,
            "d": "Once per SSTORE operation for resetting to the original zero value"
        },
        "shl": {
            "v": 3,
            "d": "Base fee of the SHL opcode"
        },
        "shr": {
            "v": 3,
            "d": "Base fee of the SHR opcode"
        },
        "sar": {
            "v": 3,
            "d": "Base fee of the SAR opcode"
        },
        "extcodehash": {
            "v": 400,
            "d": "Base fee of the EXTCODEHASH opcode"
        },
        "create2": {
            "v": 32000,
            "d": "Base fee of the CREATE2 opcode"
        }
    },
    "vm": {},
    "pow": {
        "minerReward": {
            "v": "2000000000000000000",
            "d": "The amount a miner gets rewarded for mining a block"
        },
        "difficultyBombDelay": {
            "v": 5000000,
            "d": "the amount of blocks to delay the difficulty bomb with"
        }
    }
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eZpP2":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = {
    "name": "petersburg",
    "comment": "Aka constantinopleFix, removes EIP-1283, activate together with or after constantinople",
    "url": "https://eips.ethereum.org/EIPS/eip-1716",
    "status": "Final",
    "gasConfig": {},
    "gasPrices": {
        "netSstoreNoopGas": {
            "v": null,
            "d": "Removed along EIP-1283"
        },
        "netSstoreInitGas": {
            "v": null,
            "d": "Removed along EIP-1283"
        },
        "netSstoreCleanGas": {
            "v": null,
            "d": "Removed along EIP-1283"
        },
        "netSstoreDirtyGas": {
            "v": null,
            "d": "Removed along EIP-1283"
        },
        "netSstoreClearRefund": {
            "v": null,
            "d": "Removed along EIP-1283"
        },
        "netSstoreResetRefund": {
            "v": null,
            "d": "Removed along EIP-1283"
        },
        "netSstoreResetClearRefund": {
            "v": null,
            "d": "Removed along EIP-1283"
        }
    },
    "vm": {},
    "pow": {}
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"iifdu":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = {
    "name": "istanbul",
    "comment": "HF targeted for December 2019 following the Constantinople/Petersburg HF",
    "url": "https://eips.ethereum.org/EIPS/eip-1679",
    "status": "Final",
    "gasConfig": {},
    "gasPrices": {
        "blake2Round": {
            "v": 1,
            "d": "Gas cost per round for the Blake2 F precompile"
        },
        "ecAdd": {
            "v": 150,
            "d": "Gas costs for curve addition precompile"
        },
        "ecMul": {
            "v": 6000,
            "d": "Gas costs for curve multiplication precompile"
        },
        "ecPairing": {
            "v": 45000,
            "d": "Base gas costs for curve pairing precompile"
        },
        "ecPairingWord": {
            "v": 34000,
            "d": "Gas costs regarding curve pairing precompile input length"
        },
        "txDataNonZero": {
            "v": 16,
            "d": "Per byte of data attached to a transaction that is not equal to zero. NOTE: Not payable on data of calls between transactions"
        },
        "sstoreSentryGasEIP2200": {
            "v": 2300,
            "d": "Minimum gas required to be present for an SSTORE call, not consumed"
        },
        "sstoreNoopGasEIP2200": {
            "v": 800,
            "d": "Once per SSTORE operation if the value doesn't change"
        },
        "sstoreDirtyGasEIP2200": {
            "v": 800,
            "d": "Once per SSTORE operation if a dirty value is changed"
        },
        "sstoreInitGasEIP2200": {
            "v": 20000,
            "d": "Once per SSTORE operation from clean zero to non-zero"
        },
        "sstoreInitRefundEIP2200": {
            "v": 19200,
            "d": "Once per SSTORE operation for resetting to the original zero value"
        },
        "sstoreCleanGasEIP2200": {
            "v": 5000,
            "d": "Once per SSTORE operation from clean non-zero to something else"
        },
        "sstoreCleanRefundEIP2200": {
            "v": 4200,
            "d": "Once per SSTORE operation for resetting to the original non-zero value"
        },
        "sstoreClearRefundEIP2200": {
            "v": 15000,
            "d": "Once per SSTORE operation for clearing an originally existing storage slot"
        },
        "balance": {
            "v": 700,
            "d": "Base fee of the BALANCE opcode"
        },
        "extcodehash": {
            "v": 700,
            "d": "Base fee of the EXTCODEHASH opcode"
        },
        "chainid": {
            "v": 2,
            "d": "Base fee of the CHAINID opcode"
        },
        "selfbalance": {
            "v": 5,
            "d": "Base fee of the SELFBALANCE opcode"
        },
        "sload": {
            "v": 800,
            "d": "Base fee of the SLOAD opcode"
        }
    },
    "vm": {},
    "pow": {}
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"he0O4":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = {
    "name": "muirGlacier",
    "comment": "HF to delay the difficulty bomb",
    "url": "https://eips.ethereum.org/EIPS/eip-2384",
    "status": "Final",
    "gasConfig": {},
    "gasPrices": {},
    "vm": {},
    "pow": {
        "difficultyBombDelay": {
            "v": 9000000,
            "d": "the amount of blocks to delay the difficulty bomb with"
        }
    }
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fQgqD":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = {
    "name": "berlin",
    "comment": "HF targeted for July 2020 following the Muir Glacier HF",
    "url": "https://eips.ethereum.org/EIPS/eip-2070",
    "status": "Final",
    "eips": [
        2565,
        2929,
        2718,
        2930
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"srvo2":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = {
    "name": "london",
    "comment": "HF targeted for July 2021 following the Berlin fork",
    "url": "https://github.com/ethereum/eth1.0-specs/blob/master/network-upgrades/mainnet-upgrades/london.md",
    "status": "Final",
    "eips": [
        1559,
        3198,
        3529,
        3541
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"0BKkd":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = {
    "name": "shanghai",
    "comment": "Next feature hardfork after the merge hardfork having withdrawals, warm coinbase, push0, limit/meter initcode",
    "url": "https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/shanghai.md",
    "status": "Final",
    "eips": [
        3651,
        3855,
        3860,
        4895
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4rFwn":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = {
    "name": "arrowGlacier",
    "comment": "HF to delay the difficulty bomb",
    "url": "https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/arrow-glacier.md",
    "status": "Final",
    "eips": [
        4345
    ],
    "gasConfig": {},
    "gasPrices": {},
    "vm": {},
    "pow": {}
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4DHZr":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = {
    "name": "grayGlacier",
    "comment": "Delaying the difficulty bomb to Mid September 2022",
    "url": "https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/gray-glacier.md",
    "status": "Draft",
    "eips": [
        5133
    ],
    "gasConfig": {},
    "gasPrices": {},
    "vm": {},
    "pow": {}
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"amMWc":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = {
    "name": "mergeForkIdTransition",
    "comment": "Pre-merge hardfork to fork off non-upgraded clients",
    "url": "https://eips.ethereum.org/EIPS/eip-3675",
    "status": "Draft",
    "eips": []
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4q9sB":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = {
    "name": "merge",
    "comment": "Hardfork to upgrade the consensus mechanism to Proof-of-Stake",
    "url": "https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/merge.md",
    "status": "Final",
    "consensus": {
        "type": "pos",
        "algorithm": "casper",
        "casper": {}
    },
    "eips": [
        3675,
        4399
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bsFYj":[function(require,module,exports) {
/**
 * Can be used in conjunction with {@link Transaction.supports}
 * to query on tx capabilities
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Capability", ()=>Capability);
parcelHelpers.export(exports, "isAccessListUint8Array", ()=>isAccessListUint8Array);
parcelHelpers.export(exports, "isAccessList", ()=>isAccessList);
var Capability;
(function(Capability) {
    /**
     * Tx supports EIP-155 replay protection
     * See: [155](https://eips.ethereum.org/EIPS/eip-155) Replay Attack Protection EIP
     */ Capability[Capability["EIP155ReplayProtection"] = 155] = "EIP155ReplayProtection";
    /**
     * Tx supports EIP-1559 gas fee market mechanism
     * See: [1559](https://eips.ethereum.org/EIPS/eip-1559) Fee Market EIP
     */ Capability[Capability["EIP1559FeeMarket"] = 1559] = "EIP1559FeeMarket";
    /**
     * Tx is a typed transaction as defined in EIP-2718
     * See: [2718](https://eips.ethereum.org/EIPS/eip-2718) Transaction Type EIP
     */ Capability[Capability["EIP2718TypedTransaction"] = 2718] = "EIP2718TypedTransaction";
    /**
     * Tx supports access list generation as defined in EIP-2930
     * See: [2930](https://eips.ethereum.org/EIPS/eip-2930) Access Lists EIP
     */ Capability[Capability["EIP2930AccessLists"] = 2930] = "EIP2930AccessLists";
})(Capability || (Capability = {}));
function isAccessListUint8Array(input) {
    if (input.length === 0) return true;
    const firstItem = input[0];
    if (Array.isArray(firstItem)) return true;
    return false;
}
function isAccessList(input) {
    return !isAccessListUint8Array(input); // This is exactly the same method, except the output is negated.
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7FYqc":[function(require,module,exports) {
/*
This file is part of web3.js.

web3.js is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

web3.js is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Address", ()=>Address);
var _keccakJs = require("ethereum-cryptography/keccak.js");
var _web3Utils = require("web3-utils");
var _constantsJs = require("./constants.js");
var _utilsJs = require("../common/utils.js");
class Address {
    constructor(buf){
        if (buf.length !== 20) throw new Error("Invalid address length");
        this.buf = buf;
    }
    /**
     * Returns the zero address.
     */ static zero() {
        return new Address((0, _utilsJs.zeros)(20));
    }
    /**
     * Is address equal to another.
     */ equals(address) {
        return (0, _web3Utils.uint8ArrayEquals)(this.buf, address.buf);
    }
    /**
     * Is address zero.
     */ isZero() {
        return this.equals(Address.zero());
    }
    /**
     * Returns hex encoding of address.
     */ toString() {
        return (0, _web3Utils.bytesToHex)(this.buf);
    }
    /**
     * Returns Uint8Array representation of address.
     */ toArray() {
        return this.buf;
    }
    /**
     * Returns the ethereum address of a given public key.
     * Accepts "Ethereum public keys" and SEC1 encoded keys.
     * @param pubKey The two points of an uncompressed key, unless sanitize is enabled
     * @param sanitize Accept public keys in other formats
     */ static publicToAddress(_pubKey, sanitize = false) {
        let pubKey = _pubKey;
        (0, _utilsJs.assertIsUint8Array)(pubKey);
        if (sanitize && pubKey.length !== 64) pubKey = (0, _constantsJs.secp256k1).ProjectivePoint.fromHex(pubKey).toRawBytes(false).slice(1);
        if (pubKey.length !== 64) throw new Error("Expected pubKey to be of length 64");
        // Only take the lower 160bits of the hash
        return (0, _keccakJs.keccak256)(pubKey).slice(-20);
    }
}

},{"ethereum-cryptography/keccak.js":"5j5ih","web3-utils":"8WsWI","./constants.js":"3b6oT","../common/utils.js":"9o2Mr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1DKQY":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "checkMaxInitCodeSize", ()=>checkMaxInitCodeSize);
parcelHelpers.export(exports, "getAccessListData", ()=>getAccessListData);
parcelHelpers.export(exports, "verifyAccessList", ()=>verifyAccessList);
parcelHelpers.export(exports, "getAccessListJSON", ()=>getAccessListJSON);
parcelHelpers.export(exports, "getDataFeeEIP2930", ()=>getDataFeeEIP2930);
var _web3Utils = require("web3-utils");
var _utilsJs = require("../common/utils.js");
var _typesJs = require("./types.js");
const checkMaxInitCodeSize = (common, length)=>{
    const maxInitCodeSize = common.param("vm", "maxInitCodeSize");
    if (maxInitCodeSize && BigInt(length) > maxInitCodeSize) throw new Error(`the initcode size of this transaction is too large: it is ${length} while the max is ${common.param("vm", "maxInitCodeSize")}`);
};
const getAccessListData = (accessList)=>{
    let AccessListJSON;
    let uint8arrayAccessList;
    if ((0, _typesJs.isAccessList)(accessList)) {
        AccessListJSON = accessList;
        const newAccessList = [];
        // eslint-disable-next-line @typescript-eslint/prefer-for-of
        for(let i = 0; i < accessList.length; i += 1){
            const item = accessList[i];
            const addressBytes = (0, _utilsJs.toUint8Array)(item.address);
            const storageItems = [];
            // eslint-disable-next-line @typescript-eslint/prefer-for-of
            for(let index = 0; index < item.storageKeys.length; index += 1)storageItems.push((0, _utilsJs.toUint8Array)(item.storageKeys[index]));
            newAccessList.push([
                addressBytes,
                storageItems
            ]);
        }
        uint8arrayAccessList = newAccessList;
    } else {
        uint8arrayAccessList = accessList !== null && accessList !== void 0 ? accessList : [];
        // build the JSON
        const json = [];
        // eslint-disable-next-line @typescript-eslint/prefer-for-of
        for(let i = 0; i < uint8arrayAccessList.length; i += 1){
            const data = uint8arrayAccessList[i];
            const address = (0, _web3Utils.bytesToHex)(data[0]);
            const storageKeys = [];
            // eslint-disable-next-line @typescript-eslint/prefer-for-of
            for(let item = 0; item < data[1].length; item += 1)storageKeys.push((0, _web3Utils.bytesToHex)(data[1][item]));
            const jsonItem = {
                address,
                storageKeys
            };
            json.push(jsonItem);
        }
        AccessListJSON = json;
    }
    return {
        AccessListJSON,
        accessList: uint8arrayAccessList
    };
};
const verifyAccessList = (accessList)=>{
    // eslint-disable-next-line @typescript-eslint/prefer-for-of
    for(let key = 0; key < accessList.length; key += 1){
        const accessListItem = accessList[key];
        const address = accessListItem[0];
        const storageSlots = accessListItem[1];
        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/consistent-type-assertions
        if (accessListItem[2] !== undefined) throw new Error("Access list item cannot have 3 elements. It can only have an address, and an array of storage slots.");
        if (address.length !== 20) throw new Error("Invalid EIP-2930 transaction: address length should be 20 bytes");
        // eslint-disable-next-line @typescript-eslint/prefer-for-of
        for(let storageSlot = 0; storageSlot < storageSlots.length; storageSlot += 1){
            if (storageSlots[storageSlot].length !== 32) throw new Error("Invalid EIP-2930 transaction: storage slot length should be 32 bytes");
        }
    }
};
const getAccessListJSON = (accessList)=>{
    const accessListJSON = [];
    // eslint-disable-next-line @typescript-eslint/prefer-for-of
    for(let index = 0; index < accessList.length; index += 1){
        const item = accessList[index];
        const JSONItem = {
            // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/consistent-type-assertions
            address: (0, _web3Utils.bytesToHex)((0, _utilsJs.setLengthLeft)(item[0], 20)),
            storageKeys: []
        };
        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-assignment, @typescript-eslint/prefer-optional-chain
        const storageSlots = item && item[1];
        // eslint-disable-next-line @typescript-eslint/prefer-for-of
        for(let slot = 0; slot < storageSlots.length; slot += 1){
            const storageSlot = storageSlots[slot];
            JSONItem.storageKeys.push((0, _web3Utils.bytesToHex)((0, _utilsJs.setLengthLeft)(storageSlot, 32)));
        }
        accessListJSON.push(JSONItem);
    }
    return accessListJSON;
};
const getDataFeeEIP2930 = (accessList, common)=>{
    const accessListStorageKeyCost = common.param("gasPrices", "accessListStorageKeyCost");
    const accessListAddressCost = common.param("gasPrices", "accessListAddressCost");
    let slots = 0;
    // eslint-disable-next-line @typescript-eslint/prefer-for-of
    for(let index = 0; index < accessList.length; index += 1){
        const item = accessList[index];
        const storageSlots = item[1];
        slots += storageSlots.length;
    }
    const addresses = accessList.length;
    return addresses * Number(accessListAddressCost) + slots * Number(accessListStorageKeyCost);
};

},{"web3-utils":"8WsWI","../common/utils.js":"9o2Mr","./types.js":"bsFYj","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lMryF":[function(require,module,exports) {
/*
This file is part of web3.js.

web3.js is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

web3.js is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Typed transaction with optional access lists
 *
 * - TransactionType: 1
 * - EIP: [EIP-2930](https://eips.ethereum.org/EIPS/eip-2930)
 */ // eslint-disable-next-line no-use-before-define
parcelHelpers.export(exports, "AccessListEIP2930Transaction", ()=>AccessListEIP2930Transaction);
var _keccakJs = require("ethereum-cryptography/keccak.js");
var _web3Validator = require("web3-validator");
var _rlp = require("@ethereumjs/rlp");
var _web3Utils = require("web3-utils");
var _constantsJs = require("./constants.js");
var _utilsJs = require("./utils.js");
var _utilsJs1 = require("../common/utils.js");
var _baseTransactionJs = require("./baseTransaction.js");
const TRANSACTION_TYPE = 1;
const TRANSACTION_TYPE_UINT8ARRAY = (0, _web3Utils.hexToBytes)(TRANSACTION_TYPE.toString(16).padStart(2, "0"));
class AccessListEIP2930Transaction extends (0, _baseTransactionJs.BaseTransaction) {
    /**
     * This constructor takes the values, validates them, assigns them and freezes the object.
     *
     * It is not recommended to use this constructor directly. Instead use
     * the static factory methods to assist in creating a Transaction object from
     * varying data types.
     */ constructor(txData, opts = {}){
        var _a;
        super(Object.assign(Object.assign({}, txData), {
            type: TRANSACTION_TYPE
        }), opts);
        /**
         * The default HF if the tx type is active on that HF
         * or the first greater HF where the tx is active.
         *
         * @hidden
         */ this.DEFAULT_HARDFORK = "berlin";
        const { chainId, accessList, gasPrice } = txData;
        this.common = this._getCommon(opts.common, chainId);
        this.chainId = this.common.chainId();
        // EIP-2718 check is done in Common
        if (!this.common.isActivatedEIP(2930)) throw new Error("EIP-2930 not enabled on Common");
        this.activeCapabilities = this.activeCapabilities.concat([
            2718,
            2930
        ]);
        // Populate the access list fields
        const accessListData = (0, _utilsJs.getAccessListData)(accessList !== null && accessList !== void 0 ? accessList : []);
        this.accessList = accessListData.accessList;
        this.AccessListJSON = accessListData.AccessListJSON;
        // Verify the access list format.
        (0, _utilsJs.verifyAccessList)(this.accessList);
        this.gasPrice = (0, _utilsJs1.uint8ArrayToBigInt)((0, _utilsJs1.toUint8Array)(gasPrice === "" ? "0x" : gasPrice));
        this._validateCannotExceedMaxInteger({
            gasPrice: this.gasPrice
        });
        (0, _baseTransactionJs.BaseTransaction)._validateNotArray(txData);
        if (this.gasPrice * this.gasLimit > (0, _constantsJs.MAX_INTEGER)) {
            const msg = this._errorMsg("gasLimit * gasPrice cannot exceed MAX_INTEGER");
            throw new Error(msg);
        }
        this._validateYParity();
        this._validateHighS();
        const freeze = (_a = opts === null || opts === void 0 ? void 0 : opts.freeze) !== null && _a !== void 0 ? _a : true;
        if (freeze) Object.freeze(this);
    }
    /**
     * Instantiate a transaction from a data dictionary.
     *
     * Format: { chainId, nonce, gasPrice, gasLimit, to, value, data, accessList,
     * v, r, s }
     *
     * Notes:
     * - `chainId` will be set automatically if not provided
     * - All parameters are optional and have some basic default values
     */ static fromTxData(txData, opts = {}) {
        return new AccessListEIP2930Transaction(txData, opts);
    }
    /**
     * Instantiate a transaction from the serialized tx.
     *
     * Format: `0x01 || rlp([chainId, nonce, gasPrice, gasLimit, to, value, data, accessList,
     * signatureYParity (v), signatureR (r), signatureS (s)])`
     */ static fromSerializedTx(serialized, opts = {}) {
        if (!(0, _web3Utils.uint8ArrayEquals)(serialized.subarray(0, 1), TRANSACTION_TYPE_UINT8ARRAY)) throw new Error(`Invalid serialized tx input: not an EIP-2930 transaction (wrong tx type, expected: ${TRANSACTION_TYPE}, received: ${(0, _web3Utils.bytesToHex)(serialized.subarray(0, 1))}`);
        const values = (0, _rlp.RLP).decode(Uint8Array.from(serialized.subarray(1)));
        if (!Array.isArray(values)) throw new Error("Invalid serialized tx input: must be array");
        // eslint-disable-next-line @typescript-eslint/no-unsafe-argument
        return AccessListEIP2930Transaction.fromValuesArray(values, opts);
    }
    /**
     * Create a transaction from a values array.
     *
     * Format: `[chainId, nonce, gasPrice, gasLimit, to, value, data, accessList,
     * signatureYParity (v), signatureR (r), signatureS (s)]`
     */ static fromValuesArray(values, opts = {}) {
        if (values.length !== 8 && values.length !== 11) throw new Error("Invalid EIP-2930 transaction. Only expecting 8 values (for unsigned tx) or 11 values (for signed tx).");
        const [chainId, nonce, gasPrice, gasLimit, to, value, data, accessList, v, r, s] = values;
        this._validateNotArray({
            chainId,
            v
        });
        (0, _web3Validator.validateNoLeadingZeroes)({
            nonce,
            gasPrice,
            gasLimit,
            value,
            v,
            r,
            s
        });
        const emptyAccessList = [];
        return new AccessListEIP2930Transaction({
            chainId: (0, _utilsJs1.uint8ArrayToBigInt)(chainId),
            nonce,
            gasPrice,
            gasLimit,
            to,
            value,
            data,
            accessList: accessList !== null && accessList !== void 0 ? accessList : emptyAccessList,
            v: v !== undefined ? (0, _utilsJs1.uint8ArrayToBigInt)(v) : undefined,
            r,
            s
        }, opts);
    }
    /**
     * The amount of gas paid for the data in this tx
     */ getDataFee() {
        if (this.cache.dataFee && this.cache.dataFee.hardfork === this.common.hardfork()) return this.cache.dataFee.value;
        let cost = super.getDataFee();
        cost += BigInt((0, _utilsJs.getDataFeeEIP2930)(this.accessList, this.common));
        if (Object.isFrozen(this)) this.cache.dataFee = {
            value: cost,
            hardfork: this.common.hardfork()
        };
        return cost;
    }
    /**
     * The up front amount that an account must have for this transaction to be valid
     */ getUpfrontCost() {
        return this.gasLimit * this.gasPrice + this.value;
    }
    /**
     * Returns a Uint8Array Array of the raw Uint8Arrays of the EIP-2930 transaction, in order.
     *
     * Format: `[chainId, nonce, gasPrice, gasLimit, to, value, data, accessList,
     * signatureYParity (v), signatureR (r), signatureS (s)]`
     *
     * Use {@link AccessListEIP2930Transaction.serialize} to add a transaction to a block
     * with {@link Block.fromValuesArray}.
     *
     * For an unsigned tx this method uses the empty UINT8ARRAY values for the
     * signature parameters `v`, `r` and `s` for encoding. For an EIP-155 compliant
     * representation for external signing use {@link AccessListEIP2930Transaction.getMessageToSign}.
     */ raw() {
        return [
            (0, _utilsJs1.bigIntToUnpaddedUint8Array)(this.chainId),
            (0, _utilsJs1.bigIntToUnpaddedUint8Array)(this.nonce),
            (0, _utilsJs1.bigIntToUnpaddedUint8Array)(this.gasPrice),
            (0, _utilsJs1.bigIntToUnpaddedUint8Array)(this.gasLimit),
            this.to !== undefined ? this.to.buf : Uint8Array.from([]),
            (0, _utilsJs1.bigIntToUnpaddedUint8Array)(this.value),
            this.data,
            this.accessList,
            this.v !== undefined ? (0, _utilsJs1.bigIntToUnpaddedUint8Array)(this.v) : Uint8Array.from([]),
            this.r !== undefined ? (0, _utilsJs1.bigIntToUnpaddedUint8Array)(this.r) : Uint8Array.from([]),
            this.s !== undefined ? (0, _utilsJs1.bigIntToUnpaddedUint8Array)(this.s) : Uint8Array.from([])
        ];
    }
    /**
     * Returns the serialized encoding of the EIP-2930 transaction.
     *
     * Format: `0x01 || rlp([chainId, nonce, gasPrice, gasLimit, to, value, data, accessList,
     * signatureYParity (v), signatureR (r), signatureS (s)])`
     *
     * Note that in contrast to the legacy tx serialization format this is not
     * valid RLP any more due to the raw tx type preceding and concatenated to
     * the RLP encoding of the values.
     */ serialize() {
        const base = this.raw();
        return (0, _web3Utils.uint8ArrayConcat)(TRANSACTION_TYPE_UINT8ARRAY, (0, _rlp.RLP).encode(base));
    }
    /**
     * Returns the serialized unsigned tx (hashed or raw), which can be used
     * to sign the transaction (e.g. for sending to a hardware wallet).
     *
     * Note: in contrast to the legacy tx the raw message format is already
     * serialized and doesn't need to be RLP encoded any more.
     *
     * ```javascript
     * const serializedMessage = tx.getMessageToSign(false) // use this for the HW wallet input
     * ```
     *
     * @param hashMessage - Return hashed message if set to true (default: true)
     */ getMessageToSign(hashMessage = true) {
        const base = this.raw().slice(0, 8);
        const message = (0, _web3Utils.uint8ArrayConcat)(TRANSACTION_TYPE_UINT8ARRAY, (0, _rlp.RLP).encode(base));
        if (hashMessage) return (0, _keccakJs.keccak256)(message);
        return message;
    }
    /**
     * Computes a sha3-256 hash of the serialized tx.
     *
     * This method can only be used for signed txs (it throws otherwise).
     * Use {@link AccessListEIP2930Transaction.getMessageToSign} to get a tx hash for the purpose of signing.
     */ hash() {
        if (!this.isSigned()) {
            const msg = this._errorMsg("Cannot call hash method if transaction is not signed");
            throw new Error(msg);
        }
        if (Object.isFrozen(this)) {
            if (!this.cache.hash) this.cache.hash = (0, _keccakJs.keccak256)(this.serialize());
            return this.cache.hash;
        }
        return (0, _keccakJs.keccak256)(this.serialize());
    }
    /**
     * Computes a sha3-256 hash which can be used to verify the signature
     */ getMessageToVerifySignature() {
        return this.getMessageToSign();
    }
    /**
     * Returns the public key of the sender
     */ getSenderPublicKey() {
        if (!this.isSigned()) {
            const msg = this._errorMsg("Cannot call this method if transaction is not signed");
            throw new Error(msg);
        }
        const msgHash = this.getMessageToVerifySignature();
        const { v, r, s } = this;
        this._validateHighS();
        try {
            return (0, _utilsJs1.ecrecover)(msgHash, v + BigInt(27), (0, _utilsJs1.bigIntToUnpaddedUint8Array)(r), (0, _utilsJs1.bigIntToUnpaddedUint8Array)(s));
        } catch (e) {
            const msg = this._errorMsg("Invalid Signature");
            throw new Error(msg);
        }
    }
    _processSignature(v, r, s) {
        const opts = Object.assign(Object.assign({}, this.txOptions), {
            common: this.common
        });
        return AccessListEIP2930Transaction.fromTxData({
            chainId: this.chainId,
            nonce: this.nonce,
            gasPrice: this.gasPrice,
            gasLimit: this.gasLimit,
            to: this.to,
            value: this.value,
            data: this.data,
            accessList: this.accessList,
            v: v - BigInt(27),
            r: (0, _utilsJs1.uint8ArrayToBigInt)(r),
            s: (0, _utilsJs1.uint8ArrayToBigInt)(s)
        }, opts);
    }
    /**
     * Returns an object with the JSON representation of the transaction
     */ toJSON() {
        const accessListJSON = (0, _utilsJs.getAccessListJSON)(this.accessList);
        return {
            chainId: (0, _utilsJs1.bigIntToHex)(this.chainId),
            nonce: (0, _utilsJs1.bigIntToHex)(this.nonce),
            gasPrice: (0, _utilsJs1.bigIntToHex)(this.gasPrice),
            gasLimit: (0, _utilsJs1.bigIntToHex)(this.gasLimit),
            to: this.to !== undefined ? this.to.toString() : undefined,
            value: (0, _utilsJs1.bigIntToHex)(this.value),
            data: (0, _web3Utils.bytesToHex)(this.data),
            accessList: accessListJSON,
            v: this.v !== undefined ? (0, _utilsJs1.bigIntToHex)(this.v) : undefined,
            r: this.r !== undefined ? (0, _utilsJs1.bigIntToHex)(this.r) : undefined,
            s: this.s !== undefined ? (0, _utilsJs1.bigIntToHex)(this.s) : undefined
        };
    }
    /**
     * Return a compact error string representation of the object
     */ errorStr() {
        var _a, _b;
        let errorStr = this._getSharedErrorPostfix();
        // Keep ? for this.accessList since this otherwise causes Hardhat E2E tests to fail
        errorStr += ` gasPrice=${this.gasPrice} accessListCount=${(_b = (_a = this.accessList) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0}`;
        return errorStr;
    }
    /**
     * Internal helper function to create an annotated error message
     *
     * @param msg Base error message
     * @hidden
     */ _errorMsg(msg) {
        return `${msg} (${this.errorStr()})`;
    }
}

},{"ethereum-cryptography/keccak.js":"5j5ih","web3-validator":"6HK71","@ethereumjs/rlp":"chaum","web3-utils":"8WsWI","./constants.js":"3b6oT","./utils.js":"1DKQY","../common/utils.js":"9o2Mr","./baseTransaction.js":"9F41h","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3UHS4":[function(require,module,exports) {
/*
This file is part of web3.js.

web3.js is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

web3.js is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * An Ethereum non-typed (legacy) transaction
 */ // eslint-disable-next-line no-use-before-define
parcelHelpers.export(exports, "Transaction", ()=>Transaction);
var _rlp = require("@ethereumjs/rlp");
var _keccakJs = require("ethereum-cryptography/keccak.js");
var _web3Utils = require("web3-utils");
var _web3Validator = require("web3-validator");
var _utilsJs = require("../common/utils.js");
var _constantsJs = require("./constants.js");
var _baseTransactionJs = require("./baseTransaction.js");
var _typesJs = require("./types.js");
const TRANSACTION_TYPE = 0;
function meetsEIP155(_v, chainId) {
    const v = Number(_v);
    const chainIdDoubled = Number(chainId) * 2;
    return v === chainIdDoubled + 35 || v === chainIdDoubled + 36;
}
class Transaction extends (0, _baseTransactionJs.BaseTransaction) {
    /**
     * This constructor takes the values, validates them, assigns them and freezes the object.
     *
     * It is not recommended to use this constructor directly. Instead use
     * the static factory methods to assist in creating a Transaction object from
     * varying data types.
     */ constructor(txData, opts = {}){
        var _a;
        super(Object.assign(Object.assign({}, txData), {
            type: TRANSACTION_TYPE
        }), opts);
        this.common = this._validateTxV(this.v, opts.common);
        this.gasPrice = (0, _utilsJs.uint8ArrayToBigInt)((0, _utilsJs.toUint8Array)(txData.gasPrice === "" ? "0x" : txData.gasPrice));
        if (this.gasPrice * this.gasLimit > (0, _constantsJs.MAX_INTEGER)) {
            const msg = this._errorMsg("gas limit * gasPrice cannot exceed MAX_INTEGER (2^256-1)");
            throw new Error(msg);
        }
        this._validateCannotExceedMaxInteger({
            gasPrice: this.gasPrice
        });
        (0, _baseTransactionJs.BaseTransaction)._validateNotArray(txData);
        if (this.common.gteHardfork("spuriousDragon")) {
            if (!this.isSigned()) this.activeCapabilities.push((0, _typesJs.Capability).EIP155ReplayProtection);
            else // EIP155 spec:
            // If block.number >= 2,675,000 and v = CHAIN_ID * 2 + 35 or v = CHAIN_ID * 2 + 36
            // then when computing the hash of a transaction for purposes of signing or recovering
            // instead of hashing only the first six elements (i.e. nonce, gasprice, startgas, to, value, data)
            // hash nine elements, with v replaced by CHAIN_ID, r = 0 and s = 0.
            // v and chain ID meet EIP-155 conditions
            // eslint-disable-next-line no-lonely-if
            if (meetsEIP155(this.v, this.common.chainId())) this.activeCapabilities.push((0, _typesJs.Capability).EIP155ReplayProtection);
        }
        const freeze = (_a = opts === null || opts === void 0 ? void 0 : opts.freeze) !== null && _a !== void 0 ? _a : true;
        if (freeze) Object.freeze(this);
    }
    /**
     * Instantiate a transaction from a data dictionary.
     *
     * Format: { nonce, gasPrice, gasLimit, to, value, data, v, r, s }
     *
     * Notes:
     * - All parameters are optional and have some basic default values
     */ static fromTxData(txData, opts = {}) {
        return new Transaction(txData, opts);
    }
    /**
     * Instantiate a transaction from the serialized tx.
     *
     * Format: `rlp([nonce, gasPrice, gasLimit, to, value, data, v, r, s])`
     */ static fromSerializedTx(serialized, opts = {}) {
        const values = (0, _rlp.RLP).decode(serialized);
        if (!Array.isArray(values)) throw new Error("Invalid serialized tx input. Must be array");
        return this.fromValuesArray(values, opts);
    }
    /**
     * Create a transaction from a values array.
     *
     * Format: `[nonce, gasPrice, gasLimit, to, value, data, v, r, s]`
     */ static fromValuesArray(values, opts = {}) {
        // If length is not 6, it has length 9. If v/r/s are empty Uint8Array, it is still an unsigned transaction
        // This happens if you get the RLP data from `raw()`
        if (values.length !== 6 && values.length !== 9) throw new Error("Invalid transaction. Only expecting 6 values (for unsigned tx) or 9 values (for signed tx).");
        const [nonce, gasPrice, gasLimit, to, value, data, v, r, s] = values;
        (0, _web3Validator.validateNoLeadingZeroes)({
            nonce,
            gasPrice,
            gasLimit,
            value,
            v,
            r,
            s
        });
        return new Transaction({
            nonce,
            gasPrice,
            gasLimit,
            to,
            value,
            data,
            v,
            r,
            s
        }, opts);
    }
    /**
     * Returns a Uint8Array Array of the raw Uint8Arrays of the legacy transaction, in order.
     *
     * Format: `[nonce, gasPrice, gasLimit, to, value, data, v, r, s]`
     *
     * For legacy txs this is also the correct format to add transactions
     * to a block with {@link Block.fromValuesArray} (use the `serialize()` method
     * for typed txs).
     *
     * For an unsigned tx this method returns the empty Uint8Array values
     * for the signature parameters `v`, `r` and `s`. For an EIP-155 compliant
     * representation have a look at {@link Transaction.getMessageToSign}.
     */ raw() {
        return [
            (0, _utilsJs.bigIntToUnpaddedUint8Array)(this.nonce),
            (0, _utilsJs.bigIntToUnpaddedUint8Array)(this.gasPrice),
            (0, _utilsJs.bigIntToUnpaddedUint8Array)(this.gasLimit),
            this.to !== undefined ? this.to.buf : Uint8Array.from([]),
            (0, _utilsJs.bigIntToUnpaddedUint8Array)(this.value),
            this.data,
            this.v !== undefined ? (0, _utilsJs.bigIntToUnpaddedUint8Array)(this.v) : Uint8Array.from([]),
            this.r !== undefined ? (0, _utilsJs.bigIntToUnpaddedUint8Array)(this.r) : Uint8Array.from([]),
            this.s !== undefined ? (0, _utilsJs.bigIntToUnpaddedUint8Array)(this.s) : Uint8Array.from([])
        ];
    }
    /**
     * Returns the serialized encoding of the legacy transaction.
     *
     * Format: `rlp([nonce, gasPrice, gasLimit, to, value, data, v, r, s])`
     *
     * For an unsigned tx this method uses the empty Uint8Array values for the
     * signature parameters `v`, `r` and `s` for encoding. For an EIP-155 compliant
     * representation for external signing use {@link Transaction.getMessageToSign}.
     */ serialize() {
        return (0, _rlp.RLP).encode(this.raw());
    }
    _getMessageToSign() {
        const values = [
            (0, _utilsJs.bigIntToUnpaddedUint8Array)(this.nonce),
            (0, _utilsJs.bigIntToUnpaddedUint8Array)(this.gasPrice),
            (0, _utilsJs.bigIntToUnpaddedUint8Array)(this.gasLimit),
            this.to !== undefined ? this.to.buf : Uint8Array.from([]),
            (0, _utilsJs.bigIntToUnpaddedUint8Array)(this.value),
            this.data
        ];
        if (this.supports((0, _typesJs.Capability).EIP155ReplayProtection)) {
            values.push((0, _utilsJs.toUint8Array)(this.common.chainId()));
            values.push((0, _utilsJs.unpadUint8Array)((0, _utilsJs.toUint8Array)(0)));
            values.push((0, _utilsJs.unpadUint8Array)((0, _utilsJs.toUint8Array)(0)));
        }
        return values;
    }
    getMessageToSign(hashMessage = true) {
        const message = this._getMessageToSign();
        if (hashMessage) return (0, _keccakJs.keccak256)((0, _rlp.RLP).encode(message));
        return message;
    }
    /**
     * The amount of gas paid for the data in this tx
     */ getDataFee() {
        if (this.cache.dataFee && this.cache.dataFee.hardfork === this.common.hardfork()) return this.cache.dataFee.value;
        if (Object.isFrozen(this)) this.cache.dataFee = {
            value: super.getDataFee(),
            hardfork: this.common.hardfork()
        };
        return super.getDataFee();
    }
    /**
     * The up front amount that an account must have for this transaction to be valid
     */ getUpfrontCost() {
        return this.gasLimit * this.gasPrice + this.value;
    }
    /**
     * Computes a sha3-256 hash of the serialized tx.
     *
     * This method can only be used for signed txs (it throws otherwise).
     * Use {@link Transaction.getMessageToSign} to get a tx hash for the purpose of signing.
     */ hash() {
        if (!this.isSigned()) {
            const msg = this._errorMsg("Cannot call hash method if transaction is not signed");
            throw new Error(msg);
        }
        if (Object.isFrozen(this)) {
            if (!this.cache.hash) this.cache.hash = (0, _keccakJs.keccak256)((0, _rlp.RLP).encode(this.raw()));
            return this.cache.hash;
        }
        return (0, _keccakJs.keccak256)((0, _rlp.RLP).encode(this.raw()));
    }
    /**
     * Computes a sha3-256 hash which can be used to verify the signature
     */ getMessageToVerifySignature() {
        if (!this.isSigned()) {
            const msg = this._errorMsg("This transaction is not signed");
            throw new Error(msg);
        }
        const message = this._getMessageToSign();
        return (0, _keccakJs.keccak256)((0, _rlp.RLP).encode(message));
    }
    /**
     * Returns the public key of the sender
     */ getSenderPublicKey() {
        const msgHash = this.getMessageToVerifySignature();
        const { v, r, s } = this;
        this._validateHighS();
        try {
            return (0, _utilsJs.ecrecover)(msgHash, v, (0, _utilsJs.bigIntToUnpaddedUint8Array)(r), (0, _utilsJs.bigIntToUnpaddedUint8Array)(s), this.supports((0, _typesJs.Capability).EIP155ReplayProtection) ? this.common.chainId() : undefined);
        } catch (e) {
            const msg = this._errorMsg("Invalid Signature");
            throw new Error(msg);
        }
    }
    /**
     * Process the v, r, s values from the `sign` method of the base transaction.
     */ _processSignature(_v, r, s) {
        let v = _v;
        if (this.supports((0, _typesJs.Capability).EIP155ReplayProtection)) v += this.common.chainId() * BigInt(2) + BigInt(8);
        const opts = Object.assign(Object.assign({}, this.txOptions), {
            common: this.common
        });
        return Transaction.fromTxData({
            nonce: this.nonce,
            gasPrice: this.gasPrice,
            gasLimit: this.gasLimit,
            to: this.to,
            value: this.value,
            data: this.data,
            v,
            r: (0, _utilsJs.uint8ArrayToBigInt)(r),
            s: (0, _utilsJs.uint8ArrayToBigInt)(s)
        }, opts);
    }
    /**
     * Returns an object with the JSON representation of the transaction.
     */ toJSON() {
        return {
            nonce: (0, _utilsJs.bigIntToHex)(this.nonce),
            gasPrice: (0, _utilsJs.bigIntToHex)(this.gasPrice),
            gasLimit: (0, _utilsJs.bigIntToHex)(this.gasLimit),
            to: this.to !== undefined ? this.to.toString() : undefined,
            value: (0, _utilsJs.bigIntToHex)(this.value),
            data: (0, _web3Utils.bytesToHex)(this.data),
            v: this.v !== undefined ? (0, _utilsJs.bigIntToHex)(this.v) : undefined,
            r: this.r !== undefined ? (0, _utilsJs.bigIntToHex)(this.r) : undefined,
            s: this.s !== undefined ? (0, _utilsJs.bigIntToHex)(this.s) : undefined
        };
    }
    /**
     * Validates tx's `v` value
     */ _validateTxV(_v, common) {
        let chainIdBigInt;
        const v = _v !== undefined ? Number(_v) : undefined;
        // Check for valid v values in the scope of a signed legacy tx
        if (v !== undefined) {
            // v is 1. not matching the EIP-155 chainId included case and...
            // v is 2. not matching the classic v=27 or v=28 case
            if (v < 37 && v !== 27 && v !== 28) throw new Error(`Legacy txs need either v = 27/28 or v >= 37 (EIP-155 replay protection), got v = ${v}`);
        }
        // No unsigned tx and EIP-155 activated and chain ID included
        if (v !== undefined && v !== 0 && (!common || common.gteHardfork("spuriousDragon")) && v !== 27 && v !== 28) {
            if (common) {
                if (!meetsEIP155(BigInt(v), common.chainId())) throw new Error(`Incompatible EIP155-based V ${v} and chain id ${common.chainId()}. See the Common parameter of the Transaction constructor to set the chain id.`);
            } else {
                // Derive the original chain ID
                let numSub;
                if ((v - 35) % 2 === 0) numSub = 35;
                else numSub = 36;
                // Use derived chain ID to create a proper Common
                chainIdBigInt = BigInt(v - numSub) / BigInt(2);
            }
        }
        return this._getCommon(common, chainIdBigInt);
    }
    /**
     * Return a compact error string representation of the object
     */ errorStr() {
        let errorStr = this._getSharedErrorPostfix();
        errorStr += ` gasPrice=${this.gasPrice}`;
        return errorStr;
    }
    /**
     * Internal helper function to create an annotated error message
     *
     * @param msg Base error message
     * @hidden
     */ _errorMsg(msg) {
        return `${msg} (${this.errorStr()})`;
    }
}

},{"@ethereumjs/rlp":"chaum","ethereum-cryptography/keccak.js":"5j5ih","web3-utils":"8WsWI","web3-validator":"6HK71","../common/utils.js":"9o2Mr","./constants.js":"3b6oT","./baseTransaction.js":"9F41h","./types.js":"bsFYj","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lWVKr":[function(require,module,exports) {
/*
This file is part of web3.js.

web3.js is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

web3.js is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5xZqL":[function(require,module,exports) {
/*
This file is part of web3.js.

web3.js is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

web3.js is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/ // @ethereumjs/common version 3.1.1
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _commonJs = require("./common.js");
parcelHelpers.exportAll(_commonJs, exports);
var _enumsJs = require("./enums.js");
parcelHelpers.exportAll(_enumsJs, exports);
var _typesJs = require("./types.js");
parcelHelpers.exportAll(_typesJs, exports);
var _utilsJs = require("./utils.js");
parcelHelpers.exportAll(_utilsJs, exports);

},{"./common.js":"j9XJn","./enums.js":"fSM6S","./types.js":"03HK1","./utils.js":"9o2Mr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1wYUb":[function(require,module,exports) {
/*
This file is part of web3.js.

web3.js is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

web3.js is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/ // @ethereumjs/tx version 4.1.1
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "FeeMarketEIP1559Transaction", ()=>(0, _eip1559TransactionJs.FeeMarketEIP1559Transaction));
parcelHelpers.export(exports, "AccessListEIP2930Transaction", ()=>(0, _eip2930TransactionJs.AccessListEIP2930Transaction));
parcelHelpers.export(exports, "Transaction", ()=>(0, _legacyTransactionJs.Transaction));
parcelHelpers.export(exports, "TransactionFactory", ()=>(0, _transactionFactoryJs.TransactionFactory));
parcelHelpers.export(exports, "BaseTransaction", ()=>(0, _baseTransactionJs.BaseTransaction));
parcelHelpers.export(exports, "txUtils", ()=>_utilsJs);
var _eip1559TransactionJs = require("./eip1559Transaction.js");
var _eip2930TransactionJs = require("./eip2930Transaction.js");
var _legacyTransactionJs = require("./legacyTransaction.js");
var _transactionFactoryJs = require("./transactionFactory.js");
var _baseTransactionJs = require("./baseTransaction.js");
var _utilsJs = require("./utils.js");
var _typesJs = require("./types.js");
parcelHelpers.exportAll(_typesJs, exports);

},{"./eip1559Transaction.js":"o5zTD","./eip2930Transaction.js":"lMryF","./legacyTransaction.js":"3UHS4","./transactionFactory.js":"25DH0","./baseTransaction.js":"9F41h","./utils.js":"1DKQY","./types.js":"bsFYj","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"iPEUh":[function(require,module,exports) {
/*
This file is part of web3.js.

web3.js is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

web3.js is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "DEFAULT_BATCH_REQUEST_TIMEOUT", ()=>DEFAULT_BATCH_REQUEST_TIMEOUT);
parcelHelpers.export(exports, "Web3BatchRequest", ()=>Web3BatchRequest);
var _web3Utils = require("web3-utils");
var _web3Errors = require("web3-errors");
var __awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
const DEFAULT_BATCH_REQUEST_TIMEOUT = 1000;
class Web3BatchRequest {
    constructor(requestManager){
        this._requestManager = requestManager;
        this._requests = new Map();
    }
    get requests() {
        return [
            ...this._requests.values()
        ].map((r)=>r.payload);
    }
    add(request) {
        const payload = (0, _web3Utils.jsonRpc).toPayload(request);
        const promise = new (0, _web3Utils.Web3DeferredPromise)();
        this._requests.set(payload.id, {
            payload,
            promise
        });
        return promise;
    }
    // eslint-disable-next-line class-methods-use-this
    execute(options) {
        var _a;
        return __awaiter(this, void 0, void 0, function*() {
            if (this.requests.length === 0) return Promise.resolve([]);
            const request = new (0, _web3Utils.Web3DeferredPromise)({
                timeout: (_a = options === null || options === void 0 ? void 0 : options.timeout) !== null && _a !== void 0 ? _a : DEFAULT_BATCH_REQUEST_TIMEOUT,
                eagerStart: true,
                timeoutMessage: "Batch request timeout"
            });
            this._processBatchRequest(request).catch((err)=>request.reject(err));
            request.catch((err)=>{
                if (err instanceof (0, _web3Errors.OperationTimeoutError)) this._abortAllRequests("Batch request timeout");
                request.reject(err);
            });
            return request;
        });
    }
    _processBatchRequest(promise) {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function*() {
            const response = yield this._requestManager.sendBatch([
                ...this._requests.values()
            ].map((r)=>r.payload));
            if (response.length !== this._requests.size) {
                this._abortAllRequests("Invalid batch response");
                throw new (0, _web3Errors.ResponseError)(response, `Batch request size mismatch the results size. Requests: ${this._requests.size}, Responses: ${response.length}`);
            }
            const requestIds = this.requests.map((r)=>r.id).map(Number).sort((a, b)=>a - b);
            const responseIds = response.map((r)=>r.id).map(Number).sort((a, b)=>a - b);
            if (JSON.stringify(requestIds) !== JSON.stringify(responseIds)) {
                this._abortAllRequests("Invalid batch response");
                throw new (0, _web3Errors.ResponseError)(response, `Batch request mismatch the results. Requests: [${requestIds.join()}], Responses: [${responseIds.join()}]`);
            }
            for (const res of response){
                if ((0, _web3Utils.jsonRpc).isResponseWithResult(res)) (_a = this._requests.get(res.id)) === null || _a === void 0 || _a.promise.resolve(res.result);
                else if ((0, _web3Utils.jsonRpc).isResponseWithError(res)) (_b = this._requests.get(res.id)) === null || _b === void 0 || _b.promise.reject(res.error);
            }
            promise.resolve(response);
        });
    }
    _abortAllRequests(msg) {
        for (const { promise } of this._requests.values())promise.reject(new (0, _web3Errors.OperationAbortError)(msg));
    }
}

},{"web3-utils":"8WsWI","web3-errors":"jDvsn","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7PFp0":[function(require,module,exports) {
/*
This file is part of web3.js.

web3.js is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

web3.js is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2Rhbt":[function(require,module,exports) {
/*
This file is part of web3.js.

web3.js is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

web3.js is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "inputStorageKeysFormatter", ()=>inputStorageKeysFormatter);
parcelHelpers.export(exports, "outputProofFormatter", ()=>outputProofFormatter);
parcelHelpers.export(exports, "outputBigIntegerFormatter", ()=>outputBigIntegerFormatter);
parcelHelpers.export(exports, "inputBlockNumberFormatter", ()=>inputBlockNumberFormatter);
parcelHelpers.export(exports, "inputDefaultBlockNumberFormatter", ()=>inputDefaultBlockNumberFormatter);
parcelHelpers.export(exports, "inputAddressFormatter", ()=>inputAddressFormatter);
parcelHelpers.export(exports, "txInputOptionsFormatter", ()=>txInputOptionsFormatter);
parcelHelpers.export(exports, "inputCallFormatter", ()=>inputCallFormatter);
parcelHelpers.export(exports, "inputTransactionFormatter", ()=>inputTransactionFormatter);
parcelHelpers.export(exports, "inputSignFormatter", ()=>inputSignFormatter);
parcelHelpers.export(exports, "outputTransactionFormatter", ()=>outputTransactionFormatter);
parcelHelpers.export(exports, "inputTopicFormatter", ()=>inputTopicFormatter);
parcelHelpers.export(exports, "inputLogFormatter", ()=>inputLogFormatter);
parcelHelpers.export(exports, "outputLogFormatter", ()=>outputLogFormatter);
parcelHelpers.export(exports, "outputTransactionReceiptFormatter", ()=>outputTransactionReceiptFormatter);
parcelHelpers.export(exports, "outputBlockFormatter", ()=>outputBlockFormatter);
parcelHelpers.export(exports, "inputPostFormatter", ()=>inputPostFormatter);
parcelHelpers.export(exports, "outputPostFormatter", ()=>outputPostFormatter);
parcelHelpers.export(exports, "outputSyncingFormatter", ()=>outputSyncingFormatter);
var _web3Errors = require("web3-errors");
var _web3EthIban = require("web3-eth-iban");
var _web3Types = require("web3-types");
var _web3Utils = require("web3-utils");
var _web3Validator = require("web3-validator");
const inputStorageKeysFormatter = (keys)=>keys.map((num)=>(0, _web3Utils.numberToHex)(num));
const outputProofFormatter = (proof)=>({
        address: (0, _web3Utils.toChecksumAddress)(proof.address),
        nonce: (0, _web3Utils.hexToNumberString)(proof.nonce),
        balance: (0, _web3Utils.hexToNumberString)(proof.balance)
    });
const outputBigIntegerFormatter = (number)=>(0, _web3Utils.toNumber)(number);
const inputBlockNumberFormatter = (blockNumber)=>{
    if ((0, _web3Validator.isNullish)(blockNumber)) return undefined;
    if (typeof blockNumber === "string" && (0, _web3Validator.isBlockTag)(blockNumber)) return blockNumber;
    if (blockNumber === "genesis") return "0x0";
    if (typeof blockNumber === "string" && (0, _web3Utils.isHexStrict)(blockNumber)) return blockNumber.toLowerCase();
    return (0, _web3Utils.numberToHex)(blockNumber);
};
const inputDefaultBlockNumberFormatter = (blockNumber, defaultBlock)=>{
    if (!blockNumber) return inputBlockNumberFormatter(defaultBlock);
    return inputBlockNumberFormatter(blockNumber);
};
const inputAddressFormatter = (address)=>{
    if ((0, _web3EthIban.Iban).isValid(address) && (0, _web3EthIban.Iban).isDirect(address)) {
        const iban = new (0, _web3EthIban.Iban)(address);
        return iban.toAddress().toLowerCase();
    }
    if ((0, _web3Utils.isAddress)(address)) return `0x${address.toLowerCase().replace("0x", "")}`;
    throw new (0, _web3Errors.FormatterError)(`Provided address ${address} is invalid, the capitalization checksum test failed, or it's an indirect IBAN address which can't be converted.`);
};
const txInputOptionsFormatter = (options)=>{
    var _a;
    const modifiedOptions = Object.assign({}, options);
    if (options.to) // it might be contract creation
    modifiedOptions.to = inputAddressFormatter(options.to);
    if (options.data && options.input) throw new (0, _web3Errors.FormatterError)('You can\'t have "data" and "input" as properties of transactions at the same time, please use either "data" or "input" instead.');
    if (!options.input && options.data) {
        modifiedOptions.input = options.data;
        delete modifiedOptions.data;
    }
    if (options.input && !options.input.startsWith("0x")) modifiedOptions.input = `0x${options.input}`;
    if (modifiedOptions.input && !(0, _web3Utils.isHexStrict)(modifiedOptions.input)) throw new (0, _web3Errors.FormatterError)("The input field must be HEX encoded data.");
    // allow both
    if (options.gas || options.gasLimit) modifiedOptions.gas = (0, _web3Utils.toNumber)((_a = options.gas) !== null && _a !== void 0 ? _a : options.gasLimit);
    if (options.maxPriorityFeePerGas || options.maxFeePerGas) delete modifiedOptions.gasPrice;
    [
        "gasPrice",
        "gas",
        "value",
        "maxPriorityFeePerGas",
        "maxFeePerGas",
        "nonce",
        "chainId"
    ].filter((key)=>!(0, _web3Validator.isNullish)(modifiedOptions[key])).forEach((key)=>{
        modifiedOptions[key] = (0, _web3Utils.numberToHex)(modifiedOptions[key]);
    });
    return modifiedOptions;
};
const inputCallFormatter = (options, defaultAccount)=>{
    var _a;
    const opts = txInputOptionsFormatter(options);
    const from = (_a = opts.from) !== null && _a !== void 0 ? _a : defaultAccount;
    if (from) opts.from = inputAddressFormatter(from);
    return opts;
};
const inputTransactionFormatter = (options, defaultAccount)=>{
    var _a;
    const opts = txInputOptionsFormatter(options);
    // check from, only if not number, or object
    if (!(typeof opts.from === "number") && !(!!opts.from && typeof opts.from === "object")) {
        opts.from = (_a = opts.from) !== null && _a !== void 0 ? _a : defaultAccount;
        if (!options.from && !(typeof options.from === "number")) throw new (0, _web3Errors.FormatterError)('The send transactions "from" field must be defined!');
        opts.from = inputAddressFormatter(options.from);
    }
    return opts;
};
const inputSignFormatter = (data)=>(0, _web3Utils.isHexStrict)(data) ? data : (0, _web3Utils.utf8ToHex)(data);
const outputTransactionFormatter = (tx)=>{
    const modifiedTx = Object.assign({}, tx);
    if (tx.blockNumber) modifiedTx.blockNumber = (0, _web3Utils.hexToNumber)(tx.blockNumber);
    if (tx.transactionIndex) modifiedTx.transactionIndex = (0, _web3Utils.hexToNumber)(tx.transactionIndex);
    modifiedTx.nonce = (0, _web3Utils.hexToNumber)(tx.nonce);
    modifiedTx.gas = (0, _web3Utils.hexToNumber)(tx.gas);
    if (tx.gasPrice) modifiedTx.gasPrice = outputBigIntegerFormatter(tx.gasPrice);
    if (tx.maxFeePerGas) modifiedTx.maxFeePerGas = outputBigIntegerFormatter(tx.maxFeePerGas);
    if (tx.maxPriorityFeePerGas) modifiedTx.maxPriorityFeePerGas = outputBigIntegerFormatter(tx.maxPriorityFeePerGas);
    if (tx.type) modifiedTx.type = (0, _web3Utils.hexToNumber)(tx.type);
    modifiedTx.value = outputBigIntegerFormatter(tx.value);
    if (tx.to && (0, _web3Utils.isAddress)(tx.to)) // tx.to could be `0x0` or `null` while contract creation
    modifiedTx.to = (0, _web3Utils.toChecksumAddress)(tx.to);
    else modifiedTx.to = undefined; // set to `null` if invalid address
    if (tx.from) modifiedTx.from = (0, _web3Utils.toChecksumAddress)(tx.from);
    return modifiedTx;
};
const inputTopicFormatter = (topic)=>{
    // Using "null" value intentionally for validation
    // eslint-disable-next-line no-null/no-null
    if ((0, _web3Validator.isNullish)(topic)) return null;
    const value = String(topic);
    return (0, _web3Validator.isHex)(value) ? value : (0, _web3Utils.fromUtf8)(value);
};
const inputLogFormatter = (filter)=>{
    var _a;
    const val = (0, _web3Validator.isNullish)(filter) ? {} : (0, _web3Utils.mergeDeep)({}, filter);
    // If options !== undefined, don't blow out existing data
    if ((0, _web3Validator.isNullish)(val.fromBlock)) val.fromBlock = (0, _web3Types.BlockTags).LATEST;
    val.fromBlock = inputBlockNumberFormatter(val.fromBlock);
    if (!(0, _web3Validator.isNullish)(val.toBlock)) val.toBlock = inputBlockNumberFormatter(val.toBlock);
    // make sure topics, get converted to hex
    val.topics = (_a = val.topics) !== null && _a !== void 0 ? _a : [];
    val.topics = val.topics.map((topic)=>Array.isArray(topic) ? topic.map(inputTopicFormatter) : inputTopicFormatter(topic));
    if (val.address) val.address = Array.isArray(val.address) ? val.address.map((addr)=>inputAddressFormatter(addr)) : inputAddressFormatter(val.address);
    return val;
};
const outputLogFormatter = (log)=>{
    const modifiedLog = Object.assign({}, log);
    const logIndex = typeof log.logIndex === "string" ? log.logIndex : (0, _web3Utils.numberToHex)(log.logIndex);
    // generate a custom log id
    if (typeof log.blockHash === "string" && typeof log.transactionHash === "string") {
        const shaId = (0, _web3Utils.sha3Raw)(`${log.blockHash.replace("0x", "")}${log.transactionHash.replace("0x", "")}${logIndex.replace("0x", "")}`);
        modifiedLog.id = `log_${shaId.replace("0x", "").slice(0, 8)}`;
    } else if (!log.id) modifiedLog.id = undefined;
    if (log.blockNumber && (0, _web3Utils.isHexStrict)(log.blockNumber)) modifiedLog.blockNumber = (0, _web3Utils.hexToNumber)(log.blockNumber);
    if (log.transactionIndex && (0, _web3Utils.isHexStrict)(log.transactionIndex)) modifiedLog.transactionIndex = (0, _web3Utils.hexToNumber)(log.transactionIndex);
    if (log.logIndex && (0, _web3Utils.isHexStrict)(log.logIndex)) modifiedLog.logIndex = (0, _web3Utils.hexToNumber)(log.logIndex);
    if (log.address) modifiedLog.address = (0, _web3Utils.toChecksumAddress)(log.address);
    return modifiedLog;
};
const outputTransactionReceiptFormatter = (receipt)=>{
    if (typeof receipt !== "object") throw new (0, _web3Errors.FormatterError)(`Received receipt is invalid: ${String(receipt)}`);
    const modifiedReceipt = Object.assign({}, receipt);
    if (receipt.blockNumber) modifiedReceipt.blockNumber = (0, _web3Utils.hexToNumber)(receipt.blockNumber);
    if (receipt.transactionIndex) modifiedReceipt.transactionIndex = (0, _web3Utils.hexToNumber)(receipt.transactionIndex);
    modifiedReceipt.cumulativeGasUsed = (0, _web3Utils.hexToNumber)(receipt.cumulativeGasUsed);
    modifiedReceipt.gasUsed = (0, _web3Utils.hexToNumber)(receipt.gasUsed);
    if (receipt.logs && Array.isArray(receipt.logs)) modifiedReceipt.logs = receipt.logs.map(outputLogFormatter);
    if (receipt.effectiveGasPrice) modifiedReceipt.effectiveGasPrice = (0, _web3Utils.hexToNumber)(receipt.effectiveGasPrice);
    if (receipt.contractAddress) modifiedReceipt.contractAddress = (0, _web3Utils.toChecksumAddress)(receipt.contractAddress);
    if (receipt.status) modifiedReceipt.status = Boolean(parseInt(receipt.status, 10));
    return modifiedReceipt;
};
const outputBlockFormatter = (block)=>{
    const modifiedBlock = Object.assign({}, block);
    // transform to number
    modifiedBlock.gasLimit = (0, _web3Utils.hexToNumber)(block.gasLimit);
    modifiedBlock.gasUsed = (0, _web3Utils.hexToNumber)(block.gasUsed);
    modifiedBlock.size = (0, _web3Utils.hexToNumber)(block.size);
    modifiedBlock.timestamp = (0, _web3Utils.hexToNumber)(block.timestamp);
    if (block.number) modifiedBlock.number = (0, _web3Utils.hexToNumber)(block.number);
    if (block.difficulty) modifiedBlock.difficulty = outputBigIntegerFormatter(block.difficulty);
    if (block.totalDifficulty) modifiedBlock.totalDifficulty = outputBigIntegerFormatter(block.totalDifficulty);
    if (block.transactions && Array.isArray(block.transactions)) modifiedBlock.transactions = block.transactions.map(outputTransactionFormatter);
    if (block.miner) modifiedBlock.miner = (0, _web3Utils.toChecksumAddress)(block.miner);
    if (block.baseFeePerGas) modifiedBlock.baseFeePerGas = outputBigIntegerFormatter(block.baseFeePerGas);
    return modifiedBlock;
};
const inputPostFormatter = (post)=>{
    var _a;
    const modifiedPost = Object.assign({}, post);
    if (post.ttl) modifiedPost.ttl = (0, _web3Utils.numberToHex)(post.ttl);
    if (post.workToProve) modifiedPost.workToProve = (0, _web3Utils.numberToHex)(post.workToProve);
    if (post.priority) modifiedPost.priority = (0, _web3Utils.numberToHex)(post.priority);
    // fallback
    if (post.topics && !Array.isArray(post.topics)) modifiedPost.topics = post.topics ? [
        post.topics
    ] : [];
    // format the following options
    modifiedPost.topics = (_a = modifiedPost.topics) === null || _a === void 0 ? void 0 : _a.map((topic)=>topic.startsWith("0x") ? topic : (0, _web3Utils.fromUtf8)(topic));
    return modifiedPost;
};
const outputPostFormatter = (post)=>{
    var _a;
    const modifiedPost = Object.assign({}, post);
    if (post.expiry) modifiedPost.expiry = (0, _web3Utils.hexToNumber)(post.expiry);
    if (post.sent) modifiedPost.sent = (0, _web3Utils.hexToNumber)(post.sent);
    if (post.ttl) modifiedPost.ttl = (0, _web3Utils.hexToNumber)(post.ttl);
    if (post.workProved) modifiedPost.workProved = (0, _web3Utils.hexToNumber)(post.workProved);
    // post.payloadRaw = post.payload;
    // post.payload = utils.hexToAscii(post.payload);
    // if (utils.isJson(post.payload)) {
    //     post.payload = JSON.parse(post.payload);
    // }
    // format the following options
    if (!post.topics) modifiedPost.topics = [];
    modifiedPost.topics = (_a = modifiedPost.topics) === null || _a === void 0 ? void 0 : _a.map((0, _web3Utils.toUtf8));
    return modifiedPost;
};
const outputSyncingFormatter = (result)=>{
    const modifiedResult = Object.assign({}, result);
    modifiedResult.startingBlock = (0, _web3Utils.hexToNumber)(result.startingBlock);
    modifiedResult.currentBlock = (0, _web3Utils.hexToNumber)(result.currentBlock);
    modifiedResult.highestBlock = (0, _web3Utils.hexToNumber)(result.highestBlock);
    if (result.knownStates) modifiedResult.knownStates = (0, _web3Utils.hexToNumber)(result.knownStates);
    if (result.pulledStates) modifiedResult.pulledStates = (0, _web3Utils.hexToNumber)(result.pulledStates);
    return modifiedResult;
};

},{"web3-errors":"jDvsn","web3-eth-iban":"kmwjX","web3-types":"g7Ztk","web3-utils":"8WsWI","web3-validator":"6HK71","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kmwjX":[function(require,module,exports) {
/*
This file is part of web3.js.

web3.js is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

web3.js is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _ibanJs = require("./iban.js");
parcelHelpers.exportAll(_ibanJs, exports);
var _typesJs = require("./types.js");
parcelHelpers.exportAll(_typesJs, exports);
exports.default = (0, _ibanJs.Iban);

},{"./iban.js":"c4imA","./types.js":"6KCMg","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"c4imA":[function(require,module,exports) {
/*
This file is part of web3.js.

web3.js is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

web3.js is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Converts Ethereum addresses to IBAN or BBAN addresses and vice versa.
 */ parcelHelpers.export(exports, "Iban", ()=>Iban);
var _web3Utils = require("web3-utils");
var _web3Validator = require("web3-validator");
var _web3Errors = require("web3-errors");
class Iban {
    /**
     * Construct a direct or indirect IBAN that has conversion methods and validity checks.
     * If the provided string was not of either the length of a direct IBAN (34 or 35),
     * nor the length of an indirect IBAN (20), an Error will be thrown ('Invalid IBAN was provided').
     *
     * @param iban - a Direct or an Indirect IBAN
     * @returns - Iban instance
     *
     * @example
     * ```ts
     * const iban = new web3.eth.Iban("XE7338O073KYGTWWZN0F2WZ0R8PX5ZPPZS");
     * > Iban { _iban: 'XE7338O073KYGTWWZN0F2WZ0R8PX5ZPPZS' }
     * ```
     */ constructor(iban){
        /**
         * This method should be used to create the equivalent ethereum address for the early provided Direct IBAN address.
         * If the provided string was not a direct IBAN (has the length of 34 or 35), an Error will be thrown:
         * ('Iban is indirect and cannot be converted. Must be length of 34 or 35').
         * Note: this is also available as a static method.
         *
         * @return the equivalent ethereum address
         *
         * @example
         * ```ts
         * const iban = new web3.eth.Iban("XE7338O073KYGTWWZN0F2WZ0R8PX5ZPPZS");
         * iban.toAddress();
         * > "0x00c5496aEe77C1bA1f0854206A26DdA82a81D6D8"
         * ```
         */ this.toAddress = ()=>{
            if (this.isDirect()) {
                // check if Iban can be converted to an address
                const base36 = this._iban.slice(4);
                const parsedBigInt = Iban._parseInt(base36, 36); // convert the base36 string to a bigint
                const paddedBigInt = (0, _web3Utils.leftPad)(parsedBigInt, 40);
                return (0, _web3Utils.toChecksumAddress)(paddedBigInt);
            }
            throw new Error("Iban is indirect and cannot be converted. Must be length of 34 or 35");
        };
        if (Iban.isIndirect(iban) || Iban.isDirect(iban)) this._iban = iban;
        else throw new Error("Invalid IBAN was provided");
    }
    /**
     * A static method that checks if an IBAN is Direct.
     * It actually check the length of the provided variable and, only if it is 34 or 35, it returns true.
     * Note: this is also available as a method at an Iban instance.
     * @param iban - an IBAN to be checked
     * @returns - `true` if the provided `iban` is a Direct IBAN, and `false` otherwise.
     *
     * @example
     * ```ts
     * web3.eth.Iban.isDirect("XE81ETHXREGGAVOFYORK");
     * > false
     * ```
     */ static isDirect(iban) {
        return iban.length === 34 || iban.length === 35;
    }
    /**
     * An instance method that checks if iban number is Direct.
     * It actually check the length of the provided variable and, only if it is 34 or 35, it returns true.
     * Note: this is also available as a static method.
     * @param iban - an IBAN to be checked
     * @returns - `true` if the provided `iban` is a Direct IBAN, and `false` otherwise.
     *
     * @example
     * ```ts
     * const iban = new web3.eth.Iban("XE81ETHXREGGAVOFYORK");
     * iban.isDirect();
     * > false
     * ```
     */ isDirect() {
        return Iban.isDirect(this._iban);
    }
    /**
     * A static method that checks if an IBAN is Indirect.
     * It actually check the length of the provided variable and, only if it is 20, it returns true.
     * Note: this is also available as a method at an Iban instance.
     * @param iban - an IBAN to be checked
     * @returns - `true` if the provided `iban` is an Indirect IBAN, and `false` otherwise.
     *
     * @example
     * ```ts
     * web3.eth.Iban.isIndirect("XE81ETHXREGGAVOFYORK");
     * > true
     * ```
     */ static isIndirect(iban) {
        return iban.length === 20;
    }
    /**
     * check if iban number if indirect
     * It actually check the length of the provided variable and, only if it is 20, it returns true.
     * Note: this is also available as a static method.
     * @param iban - an IBAN to be checked
     * @returns - `true` if the provided `iban` is an Indirect IBAN, and `false` otherwise.
     *
     * @example
     * ```ts
     * const iban = new web3.eth.Iban("XE81ETHXREGGAVOFYORK");
     * iban.isIndirect();
     * > true
     * ```
     */ isIndirect() {
        return Iban.isIndirect(this._iban);
    }
    /**
     * This method could be used to check if a given string is valid IBAN object.
     * Note: this is also available as a method at an Iban instance.
     *
     * @param iban - a string to be checked if it is in IBAN
     * @returns - true if it is valid IBAN
     *
     * @example
     * ```ts
     * web3.eth.Iban.isValid("XE81ETHXREGGAVOFYORK");
     * > true
     *
     * web3.eth.Iban.isValid("XE82ETHXREGGAVOFYORK");
     * > false // because the checksum is incorrect
     * ```
     */ static isValid(iban) {
        return /^XE[0-9]{2}(ETH[0-9A-Z]{13}|[0-9A-Z]{30,31})$/.test(iban) && Iban._mod9710(Iban._iso13616Prepare(iban)) === 1;
    }
    /**
     * Should be called to check if the early provided IBAN is correct.
     * Note: this is also available as a static method.
     *
     * @example
     * ```ts
     * const iban = new web3.eth.Iban("XE81ETHXREGGAVOFYORK");
     * iban.isValid();
     * > true
     *
     * const iban = new web3.eth.Iban("XE82ETHXREGGAVOFYORK");
     * iban.isValid();
     * > false // because the checksum is incorrect
     * ```
     */ isValid() {
        return Iban.isValid(this._iban);
    }
    /**
     * Convert the passed BBAN to an IBAN for this country specification.
     * Please note that <i>"generation of the IBAN shall be the exclusive responsibility of the bank/branch servicing the account"</i>.
     * This method implements the preferred algorithm described in http://en.wikipedia.org/wiki/International_Bank_Account_Number#Generating_IBAN_check_digits
     *
     * @param bban - the BBAN to convert to IBAN
     * @returns an Iban class instance that holds the equivalent IBAN
     *
     * @example
     * ```ts
     * web3.eth.Iban.fromBban('ETHXREGGAVOFYORK');
     * > Iban {_iban: "XE7338O073KYGTWWZN0F2WZ0R8PX5ZPPZS"}
     * ```
     */ static fromBban(bban) {
        const countryCode = "XE";
        const remainder = this._mod9710(this._iso13616Prepare(`${countryCode}00${bban}`));
        const checkDigit = `0${(98 - remainder).toString()}`.slice(-2);
        return new Iban(`${countryCode}${checkDigit}${bban}`);
    }
    /**
     * Should be used to create IBAN object for given institution and identifier
     *
     * @param options - an object holds the `institution` and the `identifier` which will be composed to create an `Iban` object from.
     * @returns an Iban class instance that holds the equivalent IBAN
     *
     * @example
     * ```ts
     * web3.eth.Iban.createIndirect({
     *     institution: "XREG",
     *     identifier: "GAVOFYORK"
     * });
     * > Iban {_iban: "XE7338O073KYGTWWZN0F2WZ0R8PX5ZPPZS"}
     * ```
     */ static createIndirect(options) {
        return Iban.fromBban(`ETH${options.institution}${options.identifier}`);
    }
    /**
     * This method should be used to create iban object from an Ethereum address.
     *
     * @param address - an Ethereum address
     * @returns an Iban class instance that holds the equivalent IBAN
     *
     * @example
     * ```ts
     * web3.eth.Iban.fromAddress("0x00c5496aEe77C1bA1f0854206A26DdA82a81D6D8");
     * > Iban {_iban: "XE7338O073KYGTWWZN0F2WZ0R8PX5ZPPZS"}
     * ```
     */ static fromAddress(address) {
        if (!(0, _web3Validator.isAddress)(address)) throw new (0, _web3Errors.InvalidAddressError)(address);
        const num = BigInt((0, _web3Utils.hexToNumber)(address));
        const base36 = num.toString(36);
        const padded = (0, _web3Utils.leftPad)(base36, 15);
        return Iban.fromBban(padded.toUpperCase());
    }
    /**
     * This method should be used to create IBAN address from an Ethereum address
     *
     * @param address - an Ethereum address
     * @return the equivalent IBAN address
     *
     * @example
     * ```ts
     * web3.eth.Iban.toIban("0x00c5496aEe77C1bA1f0854206A26DdA82a81D6D8");
     * > "XE7338O073KYGTWWZN0F2WZ0R8PX5ZPPZS"
     * ```
     */ static toIban(address) {
        return Iban.fromAddress(address).toString();
    }
    /**
     * Should be called to get client identifier within institution
     *
     * @return the client of the IBAN instance.
     *
     * @example
     * ```ts
     * const iban = new web3.eth.Iban("XE81ETHXREGGAVOFYORK");
     * iban.client();
     * > 'GAVOFYORK'
     * ```
     */ client() {
        return this.isIndirect() ? this._iban.slice(11) : "";
    }
    /**
     * Returns the IBAN checksum of the early provided IBAN
     *
     * @example
     * ```ts
     * const iban = new web3.eth.Iban("XE81ETHXREGGAVOFYORK");
     * iban.checksum();
     * > "81"
     * ```
     *
     */ checksum() {
        return this._iban.slice(2, 4);
    }
    /**
     * Returns institution identifier from the early provided  IBAN
     *
     * @example
     * ```ts
     * const iban = new web3.eth.Iban("XE81ETHXREGGAVOFYORK");
     * iban.institution();
     * > 'XREG'
     * ```
     */ institution() {
        return this.isIndirect() ? this._iban.slice(7, 11) : "";
    }
    /**
     * Simply returns the early provided IBAN
     *
     * @example
     * ```ts
     * const iban = new web3.eth.Iban('XE7338O073KYGTWWZN0F2WZ0R8PX5ZPPZS');
     * iban.toString();
     * > 'XE7338O073KYGTWWZN0F2WZ0R8PX5ZPPZS'
     * ```
     */ toString() {
        return this._iban;
    }
}
/**
 * Prepare an IBAN for mod 97 computation by moving the first 4 chars to the end and transforming the letters to
 * numbers (A = 10, B = 11, ..., Z = 35), as specified in ISO13616.
 */ Iban._iso13616Prepare = (iban)=>{
    const A = "A".charCodeAt(0);
    const Z = "Z".charCodeAt(0);
    const upperIban = iban.toUpperCase();
    const modifiedIban = `${upperIban.slice(4)}${upperIban.slice(0, 4)}`;
    return modifiedIban.split("").map((n)=>{
        const code = n.charCodeAt(0);
        if (code >= A && code <= Z) // A = 10, B = 11, ... Z = 35
        return code - A + 10;
        return n;
    }).join("");
};
/**
 * return the bigint of the given string with the specified base
 */ Iban._parseInt = (str, base)=>[
        ...str
    ].reduce((acc, curr)=>BigInt(parseInt(curr, base)) + BigInt(base) * acc, BigInt(0));
/**
 * Calculates the MOD 97 10 of the passed IBAN as specified in ISO7064.
 */ Iban._mod9710 = (iban)=>{
    let remainder = iban;
    let block;
    while(remainder.length > 2){
        block = remainder.slice(0, 9);
        remainder = `${(parseInt(block, 10) % 97).toString()}${remainder.slice(block.length)}`;
    }
    return parseInt(remainder, 10) % 97;
};
/**
 * This method should be used to create an ethereum address from a Direct IBAN address.
 * If the provided string was not a direct IBAN (has the length of 34 or 35), an Error will be thrown:
 * ('Iban is indirect and cannot be converted. Must be length of 34 or 35').
 * Note: this is also available as a method at an Iban instance.
 *
 * @param iban - a Direct IBAN address
 * @return the equivalent ethereum address
 *
 * @example
 * ```ts
 * web3.eth.Iban.toAddress("XE7338O073KYGTWWZN0F2WZ0R8PX5ZPPZS");
 * > "0x00c5496aEe77C1bA1f0854206A26DdA82a81D6D8"
 * ```
 */ Iban.toAddress = (iban)=>{
    const ibanObject = new Iban(iban);
    return ibanObject.toAddress();
};

},{"web3-utils":"8WsWI","web3-validator":"6HK71","web3-errors":"jDvsn","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6KCMg":[function(require,module,exports) {
/*
This file is part of web3.js.

web3.js is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

web3.js is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7LNQs":[function(require,module,exports) {
/*
This file is part of web3.js.

web3.js is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

web3.js is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Web3PromiEvent", ()=>Web3PromiEvent);
var _web3EventEmitterJs = require("./web3_event_emitter.js");
var __awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var _a;
class Web3PromiEvent extends (0, _web3EventEmitterJs.Web3EventEmitter) {
    constructor(executor){
        super();
        // public tag to treat object as promise by different libs
        // eslint-disable-next-line @typescript-eslint/prefer-as-const
        this[_a] = "Promise";
        this._promise = new Promise(executor);
    }
    then(onfulfilled, onrejected) {
        return __awaiter(this, void 0, void 0, function*() {
            return this._promise.then(onfulfilled, onrejected);
        });
    }
    catch(onrejected) {
        return __awaiter(this, void 0, void 0, function*() {
            return this._promise.catch(onrejected);
        });
    }
    finally(onfinally) {
        return __awaiter(this, void 0, void 0, function*() {
            return this._promise.finally(onfinally);
        });
    }
    on(eventName, fn) {
        super.on(eventName, fn);
        return this;
    }
    once(eventName, fn) {
        super.once(eventName, fn);
        return this;
    }
}
_a = Symbol.toStringTag;

},{"./web3_event_emitter.js":"4LX4F","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"k52UE":[function(require,module,exports) {
/*
This file is part of web3.js.

web3.js is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

web3.js is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/ /**
 * The `web3-eth` package allows you to interact with an Ethereum blockchain and Ethereum smart contracts.
 *
 * To use this package standalone and use its methods use:
 * ```ts
 * import { Web3Context } from 'web3-core';
 * import { BlockTags } from 'web3-types';
 * import { DEFAULT_RETURN_FORMAT } from 'web3-types';
 * import { getBalance} from 'web3-eth';
 *
 * getBalance(
 *      new Web3Context('http://127.0.0.1:8545'),
 *      '0x407d73d8a49eeb85d32cf465507dd71d507100c1',
 *      BlockTags.LATEST,
 *      DEFAULT_RETURN_FORMAT
 * ).then(console.log);
 * > 1000000000000n
 * ```
 *
 * To use this package within the `web3` object use:
 * ```ts
 * import Web3 from 'web3';
 *
 * const web3 = new Web3(Web3.givenProvider || 'ws://some.local-or-remote.node:8546');
 * web3.eth.getBalance('0x407d73d8a49eeb85d32cf465507dd71d507100c1').then(console.log);
 * > 1000000000000n
 *```
 *
 * With `web3-eth` you can also subscribe (if supported by provider) to events in the Ethereum Blockchain, using the `subscribe` function. See more at the {@link Web3Eth.subscribe} function.
 */ /**
 *
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "detectTransactionType", ()=>(0, _detectTransactionTypeJs.detectTransactionType));
parcelHelpers.export(exports, "transactionBuilder", ()=>(0, _transactionBuilderJs.transactionBuilder));
var _setimmediate = require("setimmediate");
var _web3EthJs = require("./web3_eth.js");
parcelHelpers.exportAll(_web3EthJs, exports);
var _decodingJs = require("./utils/decoding.js");
parcelHelpers.exportAll(_decodingJs, exports);
var _schemasJs = require("./schemas.js");
parcelHelpers.exportAll(_schemasJs, exports);
var _constantsJs = require("./constants.js");
parcelHelpers.exportAll(_constantsJs, exports);
var _typesJs = require("./types.js");
parcelHelpers.exportAll(_typesJs, exports);
var _validationJs = require("./validation.js");
parcelHelpers.exportAll(_validationJs, exports);
var _rpcMethodWrappersJs = require("./rpc_method_wrappers.js");
parcelHelpers.exportAll(_rpcMethodWrappersJs, exports);
var _formatTransactionJs = require("./utils/format_transaction.js");
parcelHelpers.exportAll(_formatTransactionJs, exports);
var _prepareTransactionForSigningJs = require("./utils/prepare_transaction_for_signing.js");
parcelHelpers.exportAll(_prepareTransactionForSigningJs, exports);
var _web3SubscriptionsJs = require("./web3_subscriptions.js");
parcelHelpers.exportAll(_web3SubscriptionsJs, exports);
var _detectTransactionTypeJs = require("./utils/detect_transaction_type.js");
var _transactionBuilderJs = require("./utils/transaction_builder.js");
exports.default = (0, _web3EthJs.Web3Eth);

},{"setimmediate":"g4k8b","./web3_eth.js":"8dc9P","./utils/decoding.js":"gikUP","./schemas.js":"bf11F","./constants.js":"453pI","./types.js":"dSSq0","./validation.js":"bjQPv","./rpc_method_wrappers.js":"44lYD","./utils/format_transaction.js":"eLHOr","./utils/prepare_transaction_for_signing.js":"Jsj6O","./web3_subscriptions.js":"8o1MX","./utils/detect_transaction_type.js":"fmmhe","./utils/transaction_builder.js":"brU2r","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"g4k8b":[function(require,module,exports) {
var process = require("96b87729426a727d");
var global = arguments[3];
(function(global, undefined) {
    "use strict";
    if (global.setImmediate) return;
    var nextHandle = 1; // Spec says greater than zero
    var tasksByHandle = {};
    var currentlyRunningATask = false;
    var doc = global.document;
    var registerImmediate;
    function setImmediate(callback) {
        // Callback can either be a function or a string
        if (typeof callback !== "function") callback = new Function("" + callback);
        // Copy function arguments
        var args = new Array(arguments.length - 1);
        for(var i = 0; i < args.length; i++)args[i] = arguments[i + 1];
        // Store and register the task
        var task = {
            callback: callback,
            args: args
        };
        tasksByHandle[nextHandle] = task;
        registerImmediate(nextHandle);
        return nextHandle++;
    }
    function clearImmediate(handle) {
        delete tasksByHandle[handle];
    }
    function run(task) {
        var callback = task.callback;
        var args = task.args;
        switch(args.length){
            case 0:
                callback();
                break;
            case 1:
                callback(args[0]);
                break;
            case 2:
                callback(args[0], args[1]);
                break;
            case 3:
                callback(args[0], args[1], args[2]);
                break;
            default:
                callback.apply(undefined, args);
                break;
        }
    }
    function runIfPresent(handle) {
        // From the spec: "Wait until any invocations of this algorithm started before this one have completed."
        // So if we're currently running a task, we'll need to delay this invocation.
        if (currentlyRunningATask) // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a
        // "too much recursion" error.
        setTimeout(runIfPresent, 0, handle);
        else {
            var task = tasksByHandle[handle];
            if (task) {
                currentlyRunningATask = true;
                try {
                    run(task);
                } finally{
                    clearImmediate(handle);
                    currentlyRunningATask = false;
                }
            }
        }
    }
    function installNextTickImplementation() {
        registerImmediate = function(handle) {
            process.nextTick(function() {
                runIfPresent(handle);
            });
        };
    }
    function canUsePostMessage() {
        // The test against `importScripts` prevents this implementation from being installed inside a web worker,
        // where `global.postMessage` means something completely different and can't be used for this purpose.
        if (global.postMessage && !global.importScripts) {
            var postMessageIsAsynchronous = true;
            var oldOnMessage = global.onmessage;
            global.onmessage = function() {
                postMessageIsAsynchronous = false;
            };
            global.postMessage("", "*");
            global.onmessage = oldOnMessage;
            return postMessageIsAsynchronous;
        }
    }
    function installPostMessageImplementation() {
        // Installs an event handler on `global` for the `message` event: see
        // * https://developer.mozilla.org/en/DOM/window.postMessage
        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages
        var messagePrefix = "setImmediate$" + Math.random() + "$";
        var onGlobalMessage = function(event) {
            if (event.source === global && typeof event.data === "string" && event.data.indexOf(messagePrefix) === 0) runIfPresent(+event.data.slice(messagePrefix.length));
        };
        if (global.addEventListener) global.addEventListener("message", onGlobalMessage, false);
        else global.attachEvent("onmessage", onGlobalMessage);
        registerImmediate = function(handle) {
            global.postMessage(messagePrefix + handle, "*");
        };
    }
    function installMessageChannelImplementation() {
        var channel = new MessageChannel();
        channel.port1.onmessage = function(event) {
            var handle = event.data;
            runIfPresent(handle);
        };
        registerImmediate = function(handle) {
            channel.port2.postMessage(handle);
        };
    }
    function installReadyStateChangeImplementation() {
        var html = doc.documentElement;
        registerImmediate = function(handle) {
            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted
            // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.
            var script = doc.createElement("script");
            script.onreadystatechange = function() {
                runIfPresent(handle);
                script.onreadystatechange = null;
                html.removeChild(script);
                script = null;
            };
            html.appendChild(script);
        };
    }
    function installSetTimeoutImplementation() {
        registerImmediate = function(handle) {
            setTimeout(runIfPresent, 0, handle);
        };
    }
    // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.
    var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);
    attachTo = attachTo && attachTo.setTimeout ? attachTo : global;
    // Don't get fooled by e.g. browserify environments.
    if (({}).toString.call(global.process) === "[object process]") // For Node.js before 0.9
    installNextTickImplementation();
    else if (canUsePostMessage()) // For non-IE10 modern browsers
    installPostMessageImplementation();
    else if (global.MessageChannel) // For web workers, where supported
    installMessageChannelImplementation();
    else if (doc && "onreadystatechange" in doc.createElement("script")) // For IE 6–8
    installReadyStateChangeImplementation();
    else // For older browsers
    installSetTimeoutImplementation();
    attachTo.setImmediate = setImmediate;
    attachTo.clearImmediate = clearImmediate;
})(typeof self === "undefined" ? typeof global === "undefined" ? this : global : self);

},{"96b87729426a727d":"d5jf4"}],"d5jf4":[function(require,module,exports) {
// shim for using process in browser
var process = module.exports = {};
// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.
var cachedSetTimeout;
var cachedClearTimeout;
function defaultSetTimout() {
    throw new Error("setTimeout has not been defined");
}
function defaultClearTimeout() {
    throw new Error("clearTimeout has not been defined");
}
(function() {
    try {
        if (typeof setTimeout === "function") cachedSetTimeout = setTimeout;
        else cachedSetTimeout = defaultSetTimout;
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === "function") cachedClearTimeout = clearTimeout;
        else cachedClearTimeout = defaultClearTimeout;
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
})();
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) //normal enviroments in sane situations
    return setTimeout(fun, 0);
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch (e) {
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch (e) {
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }
}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) //normal enviroments in sane situations
    return clearTimeout(marker);
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e) {
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e) {
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }
}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;
function cleanUpNextTick() {
    if (!draining || !currentQueue) return;
    draining = false;
    if (currentQueue.length) queue = currentQueue.concat(queue);
    else queueIndex = -1;
    if (queue.length) drainQueue();
}
function drainQueue() {
    if (draining) return;
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;
    var len = queue.length;
    while(len){
        currentQueue = queue;
        queue = [];
        while(++queueIndex < len)if (currentQueue) currentQueue[queueIndex].run();
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}
process.nextTick = function(fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) for(var i = 1; i < arguments.length; i++)args[i - 1] = arguments[i];
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) runTimeout(drainQueue);
};
// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function() {
    this.fun.apply(null, this.array);
};
process.title = "browser";
process.browser = true;
process.env = {};
process.argv = [];
process.version = ""; // empty string to avoid regexp issues
process.versions = {};
function noop() {}
process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;
process.listeners = function(name) {
    return [];
};
process.binding = function(name) {
    throw new Error("process.binding is not supported");
};
process.cwd = function() {
    return "/";
};
process.chdir = function(dir) {
    throw new Error("process.chdir is not supported");
};
process.umask = function() {
    return 0;
};

},{}],"8dc9P":[function(require,module,exports) {
/*
This file is part of web3.js.

web3.js is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

web3.js is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "registeredSubscriptions", ()=>registeredSubscriptions);
parcelHelpers.export(exports, "Web3Eth", ()=>Web3Eth);
// Disabling because returnTypes must be last param to match 1.x params
/* eslint-disable default-param-last */ var _web3Types = require("web3-types");
var _web3Core = require("web3-core");
var _web3Errors = require("web3-errors");
var _web3Utils = require("web3-utils");
var _web3RpcMethods = require("web3-rpc-methods");
var _rpcMethodWrappersJs = require("./rpc_method_wrappers.js");
var _web3SubscriptionsJs = require("./web3_subscriptions.js");
var __awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
const registeredSubscriptions = {
    logs: (0, _web3SubscriptionsJs.LogsSubscription),
    newPendingTransactions: (0, _web3SubscriptionsJs.NewPendingTransactionsSubscription),
    newHeads: (0, _web3SubscriptionsJs.NewHeadsSubscription),
    syncing: (0, _web3SubscriptionsJs.SyncingSubscription),
    pendingTransactions: (0, _web3SubscriptionsJs.NewPendingTransactionsSubscription),
    newBlockHeaders: (0, _web3SubscriptionsJs.NewHeadsSubscription)
};
class Web3Eth extends (0, _web3Core.Web3Context) {
    constructor(providerOrContext){
        if (typeof providerOrContext === "string" || (0, _web3Core.isSupportedProvider)(providerOrContext)) {
            super({
                provider: providerOrContext,
                registeredSubscriptions
            });
            return;
        }
        if (providerOrContext.registeredSubscriptions) {
            super(providerOrContext);
            return;
        }
        super(Object.assign(Object.assign({}, providerOrContext), {
            registeredSubscriptions
        }));
    }
    /**
     * @returns Returns the ethereum protocol version of the node.
     *
     * ```ts
     * web3.eth.getProtocolVersion().then(console.log);
     * > "63"
     * ```
     */ getProtocolVersion() {
        return __awaiter(this, void 0, void 0, function*() {
            return (0, _web3RpcMethods.ethRpcMethods).getProtocolVersion(this.requestManager);
        });
    }
    // TODO Add returnFormat parameter
    /**
     * Checks if the node is currently syncing.
     *
     * @returns Either a {@link SyncingStatusAPI}, or `false`.
     *
     * ```ts
     * web3.eth.isSyncing().then(console.log);
     * > {
     *     startingBlock: 100,
     *     currentBlock: 312,
     *     highestBlock: 512,
     *     knownStates: 234566,
     *     pulledStates: 123455
     * }
     * ```
     */ isSyncing() {
        return __awaiter(this, void 0, void 0, function*() {
            return (0, _web3RpcMethods.ethRpcMethods).getSyncing(this.requestManager);
        });
    }
    // TODO consider adding returnFormat parameter (to format address as bytes)
    /**
     * @returns Returns the coinbase address to which mining rewards will go.
     *
     * ```ts
     * web3.eth.getCoinbase().then(console.log);
     * > "0x11f4d0A3c12e86B4b5F39B213F7E19D048276DAe"
     * ```
     */ getCoinbase() {
        return __awaiter(this, void 0, void 0, function*() {
            return (0, _web3RpcMethods.ethRpcMethods).getCoinbase(this.requestManager);
        });
    }
    /**
     * Checks whether the node is mining or not.
     *
     * @returns `true` if the node is mining, otherwise `false`.
     *
     * ```ts
     * web3.eth.isMining().then(console.log);
     * > true
     * ```
     */ isMining() {
        return __awaiter(this, void 0, void 0, function*() {
            return (0, _web3RpcMethods.ethRpcMethods).getMining(this.requestManager);
        });
    }
    /**
     * @deprecated Will be removed in the future, please use {@link Web3Eth.getHashRate} method instead.
     *
     * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.
     * @returns The number of hashes per second that the node is mining with.
     *
     * ```ts
     * web3.eth.getHashrate().then(console.log);
     * > 493736n
     *
     * web3.eth.getHashrate({ number: FMT_NUMBER.HEX , bytes: FMT_BYTES.HEX }).then(console.log);
     * > "0x788a8"
     * ```
     */ getHashrate(returnFormat = (0, _web3Types.DEFAULT_RETURN_FORMAT)) {
        return __awaiter(this, void 0, void 0, function*() {
            return this.getHashRate(returnFormat);
        });
    }
    /**
     * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.
     * @returns The number of hashes per second that the node is mining with.
     *
     * ```ts
     * web3.eth.getHashRate().then(console.log);
     * > 493736n
     *
     * web3.eth.getHashRate({ number: FMT_NUMBER.HEX , bytes: FMT_BYTES.HEX }).then(console.log);
     * > "0x788a8"
     * ```
     */ getHashRate(returnFormat = (0, _web3Types.DEFAULT_RETURN_FORMAT)) {
        return __awaiter(this, void 0, void 0, function*() {
            return _rpcMethodWrappersJs.getHashRate(this, returnFormat);
        });
    }
    /**
     * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.
     * @returns The gas price determined by the last few blocks median gas price.
     *
     * ```ts
     * web3.eth.getGasPrice().then(console.log);
     * > 20000000000n
     *
     * web3.eth.getGasPrice({ number: FMT_NUMBER.HEX , bytes: FMT_BYTES.HEX }).then(console.log);
     * > "0x4a817c800"
     * ```
     */ getGasPrice(returnFormat = (0, _web3Types.DEFAULT_RETURN_FORMAT)) {
        return __awaiter(this, void 0, void 0, function*() {
            return _rpcMethodWrappersJs.getGasPrice(this, returnFormat);
        });
    }
    /**
     * @returns A list of accounts the node controls (addresses are checksummed).
     *
     * ```ts
     * web3.eth.getAccounts().then(console.log);
     * > ["0x11f4d0A3c12e86B4b5F39B213F7E19D048276DAe", "0xDCc6960376d6C6dEa93647383FfB245CfCed97Cf"]
     * ```
     */ getAccounts() {
        var _a;
        return __awaiter(this, void 0, void 0, function*() {
            const hexAddresses = (_a = yield (0, _web3RpcMethods.ethRpcMethods).getAccounts(this.requestManager)) !== null && _a !== void 0 ? _a : [];
            return hexAddresses.map((address)=>(0, _web3Utils.toChecksumAddress)(address));
        });
    }
    /**
     * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.
     * @returns The current block number.
     *
     * ```ts
     * web3.eth.getBlockNumber().then(console.log);
     * > 2744n
     *
     * web3.eth.getBlockNumber({ number: FMT_NUMBER.HEX , bytes: FMT_BYTES.HEX }).then(console.log);
     * > "0xab8"
     * ```
     */ getBlockNumber(returnFormat = (0, _web3Types.DEFAULT_RETURN_FORMAT)) {
        return __awaiter(this, void 0, void 0, function*() {
            return _rpcMethodWrappersJs.getBlockNumber(this, returnFormat);
        });
    }
    /**
     * Get the balance of an address at a given block.
     *
     * @param address The address to get the balance of.
     * @param blockNumber ({@link BlockNumberOrTag} defaults to {@link Web3Eth.defaultBlock}) Specifies what block to use as the current state for the balance query.
     * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.
     * @returns The current balance for the given address in `wei`.
     *
     * ```ts
     * web3.eth.getBalance("0x407d73d8a49eeb85d32cf465507dd71d507100c1").then(console.log);
     * > 1000000000000n
     *
     * web3.eth.getBalance("0x407d73d8a49eeb85d32cf465507dd71d507100c1").then(console.log);
     * > "0xe8d4a51000"
     * ```
     */ getBalance(address, blockNumber = this.defaultBlock, returnFormat = (0, _web3Types.DEFAULT_RETURN_FORMAT)) {
        return __awaiter(this, void 0, void 0, function*() {
            return _rpcMethodWrappersJs.getBalance(this, address, blockNumber, returnFormat);
        });
    }
    /**
     * Get the storage at a specific position of an address.
     *
     * @param address The address to get the storage from.
     * @param storageSlot The index position of the storage.
     * @param blockNumber ({@link BlockNumberOrTag} defaults to {@link Web3Eth.defaultBlock}) Specifies what block to use as the current state for the storage query.
     * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.
     * @returns The value in storage at the given position.
     *
     * ```ts
     * web3.eth.getStorageAt("0x033456732123ffff2342342dd12342434324234234fd234fd23fd4f23d4234", 0).then(console.log);
     * > "0x033456732123ffff2342342dd12342434324234234fd234fd23fd4f23d4234"
     *
     * web3.eth.getStorageAt(
     *      "0x033456732123ffff2342342dd12342434324234234fd234fd23fd4f23d4234",
     *      0,
     *      undefined,
     *      { number: FMT_NUMBER.HEX , bytes: FMT_BYTES.UINT8ARRAY }
     * ).then(console.log);
     * > Uint8Array(31) [
     *       3, 52,  86, 115,  33,  35, 255, 255,
     *       35, 66,  52,  45, 209,  35,  66,  67,
     *       67, 36,  35,  66,  52, 253,  35,  79,
     *       210, 63, 212, 242,  61,  66,  52
     *    ]
     * ```
     */ getStorageAt(address, storageSlot, blockNumber = this.defaultBlock, returnFormat = (0, _web3Types.DEFAULT_RETURN_FORMAT)) {
        return __awaiter(this, void 0, void 0, function*() {
            return _rpcMethodWrappersJs.getStorageAt(this, address, storageSlot, blockNumber, returnFormat);
        });
    }
    /**
     * Get the code at a specific address.
     *
     * @param address The address to get the code from.
     * @param blockNumber ({@link BlockNumberOrTag} defaults to {@link Web3Eth.defaultBlock}) Specifies what block to use as the current state for the code query.
     * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.
     * @returns The [data](https://ethereum.org/en/developers/docs/transactions/#the-data-field) at the provided `address`.
     *
     * ```ts
     * web3.eth.getCode("0x033456732123ffff2342342dd12342434324234234fd234fd23fd4f23d4234").then(console.log);
     * > "0x600160008035811a818181146012578301005b601b6001356025565b8060005260206000f25b600060078202905091905056"
     *
     * web3.eth.getCode(
     *      "0x407d73d8a49eeb85d32cf465507dd71d507100c1",
     *      undefined,
     *      { number: FMT_NUMBER.HEX , bytes: FMT_BYTES.UINT8ARRAY }
     * ).then(console.log);
     * > Uint8Array(50) [
     *   96,  1,  96,   0, 128, 53, 129, 26, 129, 129, 129,
     *   20, 96,  18,  87, 131,  1,   0, 91,  96,  27,  96,
     *   1, 53,  96,  37,  86, 91, 128, 96,   0,  82,  96,
     *   32, 96,   0, 242,  91, 96,   0, 96,   7, 130,   2,
     *   144, 80, 145, 144,  80, 86
     * ]
     * ```
     */ getCode(address, blockNumber = this.defaultBlock, returnFormat = (0, _web3Types.DEFAULT_RETURN_FORMAT)) {
        return __awaiter(this, void 0, void 0, function*() {
            return _rpcMethodWrappersJs.getCode(this, address, blockNumber, returnFormat);
        });
    }
    /**
     * Retrieves a {@link Block} matching the provided block number, block hash or block tag.
     *
     * @param block The {@link BlockNumberOrTag} (defaults to {@link Web3Eth.defaultBlock}) or block hash of the desired block.
     * @param hydrated If specified `true`, the returned block will contain all transactions as objects. If `false` it will only contain transaction hashes.
     * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted (does not format transaction objects or hashes).
     * @returns A {@link Block} object matching the provided block number or block hash.
     *
     * ```ts
     * web3.eth.getBlock(0).then(console.log);
     * > {
     *    hash: '0x7dbfdc6a7a67a670cb9b0c3f81ca60c007762f1e4e598cb027a470678ff26d0d',
     *    parentHash: '0x0000000000000000000000000000000000000000000000000000000000000000',
     *    sha3Uncles: '0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347',
     *    miner: '0x0000000000000000000000000000000000000000',
     *    stateRoot: '0x5ed9882897d363c4632a6e67fba6203df61bd994813dcf048da59be442a9c6c4',
     *    transactionsRoot: '0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421',
     *    receiptsRoot: '0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421',
     *    logsBloom: '0x
     *    difficulty: 1n,
     *    number: 0n,
     *    gasLimit: 30000000n,
     *    gasUsed: 0n,
     *    timestamp: 1658281638n,
     *    extraData: '0x',
     *    mixHash: '0x0000000000000000000000000000000000000000000000000000000000000000',
     *    nonce: 0n,
     *    totalDifficulty: 1n,
     *    baseFeePerGas: 1000000000n,
     *    size: 514n,
     *    transactions: [],
     *    uncles: []
     *  }
     *
     * web3.eth.getBlock(
     *      "0x7dbfdc6a7a67a670cb9b0c3f81ca60c007762f1e4e598cb027a470678ff26d0d",
     *      false,
     *      { number: FMT_NUMBER.NUMBER , bytes: FMT_BYTES.HEX }
     * ).then(console.log);
     * > {
     *    hash: '0x7dbfdc6a7a67a670cb9b0c3f81ca60c007762f1e4e598cb027a470678ff26d0d',
     *    parentHash: '0x0000000000000000000000000000000000000000000000000000000000000000',
     *    sha3Uncles: '0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347',
     *    miner: '0x0000000000000000000000000000000000000000',
     *    stateRoot: '0x5ed9882897d363c4632a6e67fba6203df61bd994813dcf048da59be442a9c6c4',
     *    transactionsRoot: '0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421',
     *    receiptsRoot: '0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421',
     *    logsBloom: '0x
     *    difficulty: 1,
     *    number: 0,
     *    gasLimit: 30000000,
     *    gasUsed: 0,
     *    timestamp: 1658281638,
     *    extraData: '0x',
     *    mixHash: '0x0000000000000000000000000000000000000000000000000000000000000000',
     *    nonce: 0,
     *    totalDifficulty: 1,
     *    baseFeePerGas: 1000000000,
     *    size: 514,
     *    transactions: [],
     *    uncles: []
     *  }
     * ```
     */ getBlock(block = this.defaultBlock, hydrated = false, returnFormat = (0, _web3Types.DEFAULT_RETURN_FORMAT)) {
        return __awaiter(this, void 0, void 0, function*() {
            return _rpcMethodWrappersJs.getBlock(this, block, hydrated, returnFormat);
        });
    }
    /**
     * @param block The {@link BlockNumberOrTag} (defaults to {@link Web3Eth.defaultBlock}) or block hash of the desired block.
     * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.
     * @returns The number of transactions in the provided block.
     *
     * ```ts
     * web3.eth.getBlockTransactionCount("0x407d73d8a49eeb85d32cf465507dd71d507100c1").then(console.log);
     * > 1n
     *
     * web3.eth.getBlockTransactionCount(
     *     "0x407d73d8a49eeb85d32cf465507dd71d507100c1",
     *     { number: FMT_NUMBER.NUMBER , bytes: FMT_BYTES.HEX }
     * ).then(console.log);
     * > 1
     * ```
     */ getBlockTransactionCount(block = this.defaultBlock, returnFormat = (0, _web3Types.DEFAULT_RETURN_FORMAT)) {
        return __awaiter(this, void 0, void 0, function*() {
            return _rpcMethodWrappersJs.getBlockTransactionCount(this, block, returnFormat);
        });
    }
    /**
     * @param block The {@link BlockNumberOrTag} (defaults to {@link Web3Eth.defaultBlock}) or block hash of the desired block.
     * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.
     * @returns The number of [uncles](https://ethereum.org/en/glossary/#ommer) in the provided block.
     *
     * ```ts
     * web3.eth.getBlockUncleCount("0x407d73d8a49eeb85d32cf465507dd71d507100c1").then(console.log);
     * > 1n
     *
     * web3.eth.getBlockUncleCount(
     *     "0x407d73d8a49eeb85d32cf465507dd71d507100c1",
     *     { number: FMT_NUMBER.NUMBER , bytes: FMT_BYTES.HEX }
     * ).then(console.log);
     * > 1
     * ```
     */ getBlockUncleCount(block = this.defaultBlock, returnFormat = (0, _web3Types.DEFAULT_RETURN_FORMAT)) {
        return __awaiter(this, void 0, void 0, function*() {
            return _rpcMethodWrappersJs.getBlockUncleCount(this, block, returnFormat);
        });
    }
    /**
     *
     * @param block The {@link BlockNumberOrTag} (defaults to {@link Web3Eth.defaultBlock}) or block hash of the desired block.
     * @param uncleIndex The index position of the uncle.
     * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.
     * @returns A blocks [uncle](https://ethereum.org/en/glossary/#ommer) by a given uncle index position.
     *
     * ```ts
     * web3.eth.getUncle(0, 1).then(console.log);
     * > {
     *    hash: '0x7dbfdc6a7a67a670cb9b0c3f81ca60c007762f1e4e598cb027a470678ff26d0d',
     *    parentHash: '0x0000000000000000000000000000000000000000000000000000000000000000',
     *    sha3Uncles: '0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347',
     *    miner: '0x0000000000000000000000000000000000000000',
     *    stateRoot: '0x5ed9882897d363c4632a6e67fba6203df61bd994813dcf048da59be442a9c6c4',
     *    transactionsRoot: '0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421',
     *    receiptsRoot: '0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421',
     *    logsBloom: '0x
     *    difficulty: 1n,
     *    number: 0n,
     *    gasLimit: 30000000n,
     *    gasUsed: 0n,
     *    timestamp: 1658281638n,
     *    extraData: '0x',
     *    mixHash: '0x0000000000000000000000000000000000000000000000000000000000000000',
     *    nonce: 0n,
     *    totalDifficulty: 1n,
     *    baseFeePerGas: 1000000000n,
     *    size: 514n,
     *    transactions: [],
     *    uncles: []
     *  }
     *
     * web3.eth.getUncle(
     *      "0x7dbfdc6a7a67a670cb9b0c3f81ca60c007762f1e4e598cb027a470678ff26d0d",
     *      1,
     *      { number: FMT_NUMBER.NUMBER , bytes: FMT_BYTES.HEX }
     * ).then(console.log);
     * > {
     *    hash: '0x7dbfdc6a7a67a670cb9b0c3f81ca60c007762f1e4e598cb027a470678ff26d0d',
     *    parentHash: '0x0000000000000000000000000000000000000000000000000000000000000000',
     *    sha3Uncles: '0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347',
     *    miner: '0x0000000000000000000000000000000000000000',
     *    stateRoot: '0x5ed9882897d363c4632a6e67fba6203df61bd994813dcf048da59be442a9c6c4',
     *    transactionsRoot: '0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421',
     *    receiptsRoot: '0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421',
     *    logsBloom: '0x
     *    difficulty: 1,
     *    number: 0,
     *    gasLimit: 30000000,
     *    gasUsed: 0,
     *    timestamp: 1658281638,
     *    extraData: '0x',
     *    mixHash: '0x0000000000000000000000000000000000000000000000000000000000000000',
     *    nonce: 0,
     *    totalDifficulty: 1,
     *    baseFeePerGas: 1000000000,
     *    size: 514,
     *    transactions: [],
     *    uncles: []
     *  }
     * ```
     */ getUncle(block = this.defaultBlock, uncleIndex, returnFormat = (0, _web3Types.DEFAULT_RETURN_FORMAT)) {
        return __awaiter(this, void 0, void 0, function*() {
            return _rpcMethodWrappersJs.getUncle(this, block, uncleIndex, returnFormat);
        });
    }
    /**
     * @param transactionHash The hash of the desired transaction.
     * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.
     * @returns The desired transaction object.
     *
     * ```ts
     * web3.eth.getTransaction('0x73aea70e969941f23f9d24103e91aa1f55c7964eb13daf1c9360c308a72686dc').then(console.log);
     * {
     *    hash: '0x73aea70e969941f23f9d24103e91aa1f55c7964eb13daf1c9360c308a72686dc',
     *    type: 0n,
     *    nonce: 0n,
     *    blockHash: '0x43202bd16b6bd54bea1b310736bd78bdbe93a64ad940f7586739d9eb25ad8d00',
     *    blockNumber: 1n,
     *    transactionIndex: 0n,
     *    from: '0x6e599da0bff7a6598ac1224e4985430bf16458a4',
     *    to: '0x6f1df96865d09d21e8f3f9a7fba3b17a11c7c53c',
     *    value: 1n,
     *    gas: 90000n,
     *    gasPrice: 2000000000n,
     *    input: '0x',
     *    v: 2709n,
     *    r: '0x8b336c290f6d7b2af3ccb2c02203a8356cc7d5b150ab19cce549d55636a3a78c',
     *    s: '0x5a83c6f816befc5cd4b0c997a347224a8aa002e5799c4b082a3ec726d0e9531d'
     *  }
     *
     * web3.eth.getTransaction(
     *     web3.utils.hexToBytes("0x30755ed65396facf86c53e6217c52b4daebe72aa4941d89635409de4c9c7f9466d4e9aaec7977f05e923889b33c0d0dd27d7226b6e6f56ce737465c5cfd04be400"),
     *     { number: FMT_NUMBER.NUMBER , bytes: FMT_BYTES.HEX }
     * ).then(console.log);
     * {
     *    hash: '0x73aea70e969941f23f9d24103e91aa1f55c7964eb13daf1c9360c308a72686dc',
     *    type: 0,
     *    nonce: 0,
     *    blockHash: '0x43202bd16b6bd54bea1b310736bd78bdbe93a64ad940f7586739d9eb25ad8d00',
     *    blockNumber: 1,
     *    transactionIndex: 0,
     *    from: '0x6e599da0bff7a6598ac1224e4985430bf16458a4',
     *    to: '0x6f1df96865d09d21e8f3f9a7fba3b17a11c7c53c',
     *    value: 1,
     *    gas: 90000,
     *    gasPrice: 2000000000,
     *    input: '0x',
     *    v: 2709,
     *    r: '0x8b336c290f6d7b2af3ccb2c02203a8356cc7d5b150ab19cce549d55636a3a78c',
     *    s: '0x5a83c6f816befc5cd4b0c997a347224a8aa002e5799c4b082a3ec726d0e9531d'
     *  }
     * ```
     */ getTransaction(transactionHash, returnFormat = (0, _web3Types.DEFAULT_RETURN_FORMAT)) {
        return __awaiter(this, void 0, void 0, function*() {
            const response = yield _rpcMethodWrappersJs.getTransaction(this, transactionHash, returnFormat);
            if (!response) throw new (0, _web3Errors.TransactionNotFound)();
            return response;
        });
    }
    /**
     * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.
     * @returns A list of pending transactions.
     *
     * ```ts
     * web3.eth.getPendingTransactions().then(console.log);
     * > [
     *      {
     *          hash: '0x73aea70e969941f23f9d24103e91aa1f55c7964eb13daf1c9360c308a72686dc',
     *          type: 0n,
     *          nonce: 0n,
     *          blockHash: '0x0000000000000000000000000000000000000000000000000000000000000000',
     *          blockNumber: null,
     *          transactionIndex: 0n,
     *          from: '0x6e599da0bff7a6598ac1224e4985430bf16458a4',
     *          to: '0x6f1df96865d09d21e8f3f9a7fba3b17a11c7c53c',
     *          value: 1n,
     *          gas: 90000n,
     *          gasPrice: 2000000000n,
     *          input: '0x',
     *          v: 2709n,
     *          r: '0x8b336c290f6d7b2af3ccb2c02203a8356cc7d5b150ab19cce549d55636a3a78c',
     *          s: '0x5a83c6f816befc5cd4b0c997a347224a8aa002e5799c4b082a3ec726d0e9531d'
     *      },
     *      {
     *          hash: '0xdf7756865c2056ce34c4eabe4eff42ad251a9f920a1c620c00b4ea0988731d3f',
     *          type: 0n,
     *          nonce: 1n,
     *          blockHash: '0x0000000000000000000000000000000000000000000000000000000000000000',
     *          blockNumber: null,
     *          transactionIndex: 0n,
     *          from: '0x6e599da0bff7a6598ac1224e4985430bf16458a4',
     *          to: '0x6f1df96865d09d21e8f3f9a7fba3b17a11c7c53c',
     *          value: 1n,
     *          gas: 90000n,
     *          gasPrice: 2000000000n,
     *          input: '0x',
     *          v: 2710n,
     *          r: '0x55ac19fade21db035a1b7ea0a8d49e265e05dbb926e75f273f836ad67ce5c96a',
     *          s: '0x6550036a7c3fd426d5c3d35d96a7075cd673957620b7889846a980d2d017ec08'
     *      }
     *   ]
     *
     * * web3.eth.getPendingTransactions({ number: FMT_NUMBER.NUMBER , bytes: FMT_BYTES.HEX }).then(console.log);
     * > [
     *      {
     *          hash: '0x73aea70e969941f23f9d24103e91aa1f55c7964eb13daf1c9360c308a72686dc',
     *          type: 0,
     *          nonce: 0,
     *          blockHash: '0x0000000000000000000000000000000000000000000000000000000000000000',
     *          blockNumber: null,
     *          transactionIndex: 0,
     *          from: '0x6e599da0bff7a6598ac1224e4985430bf16458a4',
     *          to: '0x6f1df96865d09d21e8f3f9a7fba3b17a11c7c53c',
     *          value: 1,
     *          gas: 90000,
     *          gasPrice: 2000000000,
     *          input: '0x',
     *          v: 2709,
     *          r: '0x8b336c290f6d7b2af3ccb2c02203a8356cc7d5b150ab19cce549d55636a3a78c',
     *          s: '0x5a83c6f816befc5cd4b0c997a347224a8aa002e5799c4b082a3ec726d0e9531d'
     *      },
     *      {
     *          hash: '0xdf7756865c2056ce34c4eabe4eff42ad251a9f920a1c620c00b4ea0988731d3f',
     *          type: 0,
     *          nonce: 1,
     *          blockHash: '0x0000000000000000000000000000000000000000000000000000000000000000',
     *          blockNumber: null,
     *          transactionIndex: 0,
     *          from: '0x6e599da0bff7a6598ac1224e4985430bf16458a4',
     *          to: '0x6f1df96865d09d21e8f3f9a7fba3b17a11c7c53c',
     *          value: 1,
     *          gas: 90000,
     *          gasPrice: 2000000000,
     *          input: '0x',
     *          v: 2710,
     *          r: '0x55ac19fade21db035a1b7ea0a8d49e265e05dbb926e75f273f836ad67ce5c96a',
     *          s: '0x6550036a7c3fd426d5c3d35d96a7075cd673957620b7889846a980d2d017ec08'
     *      }
     *   ]
     * ```
     */ getPendingTransactions(returnFormat = (0, _web3Types.DEFAULT_RETURN_FORMAT)) {
        return __awaiter(this, void 0, void 0, function*() {
            return _rpcMethodWrappersJs.getPendingTransactions(this, returnFormat);
        });
    }
    /**
     * @param block The {@link BlockNumberOrTag} (defaults to {@link Web3Eth.defaultBlock}) or block hash of the desired block.
     * @param transactionIndex The index position of the transaction.
     * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.
     * @returns The desired transaction object.
     *
     * ```ts
     * web3.eth.getTransactionFromBlock('0x43202bd16b6bd54bea1b310736bd78bdbe93a64ad940f7586739d9eb25ad8d00', 0).then(console.log);
     * {
     *    hash: '0x73aea70e969941f23f9d24103e91aa1f55c7964eb13daf1c9360c308a72686dc',
     *    type: 0n,
     *    nonce: 0n,
     *    blockHash: '0x43202bd16b6bd54bea1b310736bd78bdbe93a64ad940f7586739d9eb25ad8d00',
     *    blockNumber: 1n,
     *    transactionIndex: 0n,
     *    from: '0x6e599da0bff7a6598ac1224e4985430bf16458a4',
     *    to: '0x6f1df96865d09d21e8f3f9a7fba3b17a11c7c53c',
     *    value: 1n,
     *    gas: 90000n,
     *    gasPrice: 2000000000n,
     *    input: '0x',
     *    v: 2709n,
     *    r: '0x8b336c290f6d7b2af3ccb2c02203a8356cc7d5b150ab19cce549d55636a3a78c',
     *    s: '0x5a83c6f816befc5cd4b0c997a347224a8aa002e5799c4b082a3ec726d0e9531d'
     *  }
     *
     * web3.eth.getTransactionFromBlock(
     *     hexToBytes("0x30755ed65396facf86c53e6217c52b4daebe72aa4941d89635409de4c9c7f9466d4e9aaec7977f05e923889b33c0d0dd27d7226b6e6f56ce737465c5cfd04be400"),
     *     0,
     *     { number: FMT_NUMBER.NUMBER , bytes: FMT_BYTES.HEX }
     * ).then(console.log);
     * {
     *    hash: '0x73aea70e969941f23f9d24103e91aa1f55c7964eb13daf1c9360c308a72686dc',
     *    type: 0,
     *    nonce: 0,
     *    blockHash: '0x43202bd16b6bd54bea1b310736bd78bdbe93a64ad940f7586739d9eb25ad8d00',
     *    blockNumber: 1,
     *    transactionIndex: 0,
     *    from: '0x6e599da0bff7a6598ac1224e4985430bf16458a4',
     *    to: '0x6f1df96865d09d21e8f3f9a7fba3b17a11c7c53c',
     *    value: 1,
     *    gas: 90000,
     *    gasPrice: 2000000000,
     *    input: '0x',
     *    v: 2709,
     *    r: '0x8b336c290f6d7b2af3ccb2c02203a8356cc7d5b150ab19cce549d55636a3a78c',
     *    s: '0x5a83c6f816befc5cd4b0c997a347224a8aa002e5799c4b082a3ec726d0e9531d'
     *  }
     * ```
     */ getTransactionFromBlock(block = this.defaultBlock, transactionIndex, returnFormat = (0, _web3Types.DEFAULT_RETURN_FORMAT)) {
        return __awaiter(this, void 0, void 0, function*() {
            return _rpcMethodWrappersJs.getTransactionFromBlock(this, block, transactionIndex, returnFormat);
        });
    }
    /**
     * @param transactionHash Hash of the transaction to retrieve the receipt for.
     * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.
     * @returns The desired {@link TransactionReceipt} object.
     *
     * ```ts
     * web3.eth.getTransactionReceipt("0xdf7756865c2056ce34c4eabe4eff42ad251a9f920a1c620c00b4ea0988731d3f").then(console.log);
     * > {
     *      transactionHash: '0xdf7756865c2056ce34c4eabe4eff42ad251a9f920a1c620c00b4ea0988731d3f',
     *      transactionIndex: 0n,
     *      blockNumber: 2n,
     *      blockHash: '0xeb1565a08b23429552dafa92e32409f42eb43944f7611963c63ce40e7243941a',
     *      from: '0x6e599da0bff7a6598ac1224e4985430bf16458a4',
     *      to: '0x6f1df96865d09d21e8f3f9a7fba3b17a11c7c53c',
     *      cumulativeGasUsed: 21000n,
     *      gasUsed: 21000n,
     *      logs: [],
     *      logsBloom: '0x
     *      status: 1n,
     *      effectiveGasPrice: 2000000000n,
     *      type: 0n
     *  }
     *
     * web3.eth.getTransactionReceipt(
     *      "0xdf7756865c2056ce34c4eabe4eff42ad251a9f920a1c620c00b4ea0988731d3f",
     *      { number: FMT_NUMBER.NUMBER , bytes: FMT_BYTES.HEX }
     * ).then(console.log);
     * > {
     *      transactionHash: '0xdf7756865c2056ce34c4eabe4eff42ad251a9f920a1c620c00b4ea0988731d3f',
     *      transactionIndex: 0,
     *      blockNumber: 2,
     *      blockHash: '0xeb1565a08b23429552dafa92e32409f42eb43944f7611963c63ce40e7243941a',
     *      from: '0x6e599da0bff7a6598ac1224e4985430bf16458a4',
     *      to: '0x6f1df96865d09d21e8f3f9a7fba3b17a11c7c53c',
     *      cumulativeGasUsed: 21000,
     *      gasUsed: 21000,
     *      logs: [],
     *      logsBloom: '0x
     *      status: 1,
     *      effectiveGasPrice: 2000000000,
     *      type: 0n
     *  }
     * ```
     */ getTransactionReceipt(transactionHash, returnFormat = (0, _web3Types.DEFAULT_RETURN_FORMAT)) {
        return __awaiter(this, void 0, void 0, function*() {
            const response = yield _rpcMethodWrappersJs.getTransactionReceipt(this, transactionHash, returnFormat);
            if (!response) throw new (0, _web3Errors.TransactionNotFound)();
            return response;
        });
    }
    /**
     * @param address The address to get the number of transactions for.
     * @param blockNumber ({@link BlockNumberOrTag} defaults to {@link Web3Eth.defaultBlock}) Specifies what block to use as the current state for the query.
     * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.
     * @returns The number of transactions sent from the provided address.
     *
     * ```ts
     * web3.eth.getTransactionCount("0x407d73d8a49eeb85d32cf465507dd71d507100c1").then(console.log);
     * > 1n
     *
     * web3.eth.getTransactionCount(
     *     "0x407d73d8a49eeb85d32cf465507dd71d507100c1",
     *     undefined,
     *     { number: FMT_NUMBER.NUMBER , bytes: FMT_BYTES.HEX }
     * ).then(console.log);
     * > 1
     * ```
     */ getTransactionCount(address, blockNumber = this.defaultBlock, returnFormat = (0, _web3Types.DEFAULT_RETURN_FORMAT)) {
        return __awaiter(this, void 0, void 0, function*() {
            return _rpcMethodWrappersJs.getTransactionCount(this, address, blockNumber, returnFormat);
        });
    }
    /**
     * @param transaction The {@link Transaction}, {@link TransactionWithFromLocalWalletIndex}, {@link TransactionWithToLocalWalletIndex} or {@link TransactionWithFromAndToLocalWalletIndex} to send. __Note:__ In the `to` and `from` fields when hex strings are used, it is assumed they are addresses, for any other form (number, string number, etc.) it is assumed they are wallet indexes.
     * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.
     * @param options A configuration object used to change the behavior of the `sendTransaction` method.
     * @returns If `await`ed or `.then`d (i.e. the promise resolves), the transaction hash is returned.
     * ```ts
     * const transaction = {
     *   from: '0x6E599DA0bfF7A6598AC1224E4985430Bf16458a4',
     *   to: '0x6f1DF96865D09d21e8f3f9a7fbA3b17A11c7C53C',
     *   value: '0x1'
     * }
     *
     * const transactionHash = await web3.eth.sendTransaction(transaction);
     * console.log(transactionHash);
     * > 0xdf7756865c2056ce34c4eabe4eff42ad251a9f920a1c620c00b4ea0988731d3f
     *
     * web3.eth.sendTransaction(transaction).then(console.log);
     * > 0xdf7756865c2056ce34c4eabe4eff42ad251a9f920a1c620c00b4ea0988731d3f
     *
     * web3.eth.sendTransaction(transaction).catch(console.log);
     * > <Some TransactionError>
     *
     * // Example using options.ignoreGasPricing = true
     * web3.eth.sendTransaction(transaction, undefined, { ignoreGasPricing: true }).then(console.log);
     * > 0xdf7756865c2056ce34c4eabe4eff42ad251a9f920a1c620c00b4ea0988731d3f
     * ```
     *
     *
     * Otherwise, a {@link Web3PromiEvent} is returned which has several events than can be listened to using the `.on` syntax, such as:
     * - `sending`
     * ```ts
     * web3.eth.sendTransaction(transaction).on('sending', transactionToBeSent => console.log(transactionToBeSent));
     * > {
     *    from: '0x6E599DA0bfF7A6598AC1224E4985430Bf16458a4',
     *    to: '0x6f1DF96865D09d21e8f3f9a7fbA3b17A11c7C53C',
     *    value: '0x1',
     *    gasPrice: '0x77359400',
     *    maxPriorityFeePerGas: undefined,
     *    maxFeePerGas: undefined
     * }
     * ```
     * - `sent`
     * ```ts
     * web3.eth.sendTransaction(transaction).on('sent', sentTransaction => console.log(sentTransaction));
     * > {
     *    from: '0x6E599DA0bfF7A6598AC1224E4985430Bf16458a4',
     *    to: '0x6f1DF96865D09d21e8f3f9a7fbA3b17A11c7C53C',
     *    value: '0x1',
     *    gasPrice: '0x77359400',
     *    maxPriorityFeePerGas: undefined,
     *    maxFeePerGas: undefined
     * }
     * ```
     * - `transactionHash`
     * ```ts
     * web3.eth.sendTransaction(transaction).on('transactionHash', transactionHash => console.log(transactionHash));
     * > 0xdf7756865c2056ce34c4eabe4eff42ad251a9f920a1c620c00b4ea0988731d3f
     * ```
     * - `receipt`
     * ```ts
     * web3.eth.sendTransaction(transaction).on('receipt', receipt => console.log(receipt));
     * > {
     *      transactionHash: '0xdf7756865c2056ce34c4eabe4eff42ad251a9f920a1c620c00b4ea0988731d3f',
     *      transactionIndex: 0n,
     *      blockNumber: 2n,
     *      blockHash: '0xeb1565a08b23429552dafa92e32409f42eb43944f7611963c63ce40e7243941a',
     *      from: '0x6e599da0bff7a6598ac1224e4985430bf16458a4',
     *      to: '0x6f1df96865d09d21e8f3f9a7fba3b17a11c7c53c',
     *      cumulativeGasUsed: 21000n,
     *      gasUsed: 21000n,
     *      logs: [],
     *      logsBloom: '0x
     *      status: 1n,
     *      effectiveGasPrice: 2000000000n,
     *      type: 0n
     * }
     * ```
     * - `confirmation`
     * ```ts
     * web3.eth.sendTransaction(transaction).on('confirmation', confirmation => console.log(confirmation));
     * > {
     *     confirmations: 1n,
     *     receipt: {
     *         transactionHash: '0xb4a3a35ae0f3e77ef0ff7be42010d948d011b21a4e341072ee18717b67e99ab8',
     *         transactionIndex: 0n,
     *         blockNumber: 5n,
     *         blockHash: '0xb57fbe6f145cefd86a305a9a024a4351d15d4d39607d7af53d69a319bc3b5548',
     *         from: '0x6e599da0bff7a6598ac1224e4985430bf16458a4',
     *         to: '0x6f1df96865d09d21e8f3f9a7fba3b17a11c7c53c',
     *         cumulativeGasUsed: 21000n,
     *         gasUsed: 21000n,
     *         logs: [],
     *         logsBloom: '0x
     *         status: 1n,
     *         effectiveGasPrice: 2000000000n,
     *         type: 0n
     *     },
     *     latestBlockHash: '0xb57fbe6f145cefd86a305a9a024a4351d15d4d39607d7af53d69a319bc3b5548'
     * }
     * ```
     * - `error`
     * ```ts
     * web3.eth.sendTransaction(transaction).on('error', error => console.log);
     * > <Some TransactionError>
     * ```
     */ sendTransaction(transaction, returnFormat = (0, _web3Types.DEFAULT_RETURN_FORMAT), options) {
        return _rpcMethodWrappersJs.sendTransaction(this, transaction, returnFormat, options);
    }
    /**
     * @param transaction Signed transaction in one of the valid {@link Bytes} format.
     * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.
     * @returns If `await`ed or `.then`d (i.e. the promise resolves), the transaction hash is returned.
     * ```ts
     * const signedTransaction = "0xf86580843b9aca0182520894e899f0130fd099c0b896b2ce4e5e15a25b23139a0180820a95a03a42d53ca5b71f845e1cd4c65359b05446a85d16881372d3bfaab8980935cb04a0711497bc8dd3b541152e2fed14fe650a647f1f0edab0d386ad9506f0e642410f"
     *
     * const transactionHash = await web3.eth.sendSignedTransaction(signedTransaction);
     * console.log(transactionHash);
     * > 0xed8c241ea44d57f4605dc22c63500de46254d6c7844fd65fa438b128c80cf700
     *
     * web3.eth.sendSignedTransaction(signedTransaction).then(console.log);
     * > 0xed8c241ea44d57f4605dc22c63500de46254d6c7844fd65fa438b128c80cf700
     *
     * web3.eth.sendSignedTransaction(signedTransaction).catch(console.log);
     * > <Some TransactionError>
     * ```
     *
     *
     * Otherwise, a {@link Web3PromiEvent} is returned which has several events than can be listened to using the `.on` syntax, such as:
     * - `sending`
     * ```ts
     * web3.eth.sendSignedTransaction(signedTransaction).on('sending', transactionToBeSent => console.log(transactionToBeSent));
     * > "0xf86580843b9aca0182520894e899f0130fd099c0b896b2ce4e5e15a25b23139a0180820a95a03a42d53ca5b71f845e1cd4c65359b05446a85d16881372d3bfaab8980935cb04a0711497bc8dd3b541152e2fed14fe650a647f1f0edab0d386ad9506f0e642410f"
     * ```
     * - `sent`
     * ```ts
     * web3.eth.sendSignedTransaction(signedTransaction).on('sent', sentTransaction => console.log(sentTransaction));
     * > "0xf86580843b9aca0182520894e899f0130fd099c0b896b2ce4e5e15a25b23139a0180820a95a03a42d53ca5b71f845e1cd4c65359b05446a85d16881372d3bfaab8980935cb04a0711497bc8dd3b541152e2fed14fe650a647f1f0edab0d386ad9506f0e642410f"
     * ```
     * - `transactionHash`
     * ```ts
     * web3.eth.sendSignedTransaction(signedTransaction).on('transactionHash', transactionHash => console.log(transactionHash));
     * > 0xed8c241ea44d57f4605dc22c63500de46254d6c7844fd65fa438b128c80cf700
     * ```
     * - `receipt`
     * ```ts
     * web3.eth.sendSignedTransaction(signedTransaction).on('receipt', receipt => console.log(receipt));
     * > {
     *      blockHash: '0xff2b1687995d81066361bc6affe4455746120a7d4bb75fc938211a2692a50081',
     *      blockNumber: 1n,
     *      cumulativeGasUsed: 21000n,
     *      effectiveGasPrice: 1000000001n,
     *      from: '0xe899f0130fd099c0b896b2ce4e5e15a25b23139a',
     *      gasUsed: 21000n,
     *      logs: [],
     *      logsBloom: '0x
     *      status: 1n,
     *      to: '0xe899f0130fd099c0b896b2ce4e5e15a25b23139a',
     *      transactionHash: '0xed8c241ea44d57f4605dc22c63500de46254d6c7844fd65fa438b128c80cf700',
     *      transactionIndex: 0n,
     *      type: 0n
     * }
     * ```
     * - `confirmation`
     * ```ts
     * web3.eth.sendSignedTransaction(signedTransaction).on('confirmation', confirmation => console.log(confirmation));
     * > {
     *     confirmations: 1n,
     *     receipt: {
     *          blockHash: '0xff2b1687995d81066361bc6affe4455746120a7d4bb75fc938211a2692a50081',
     *          blockNumber: 1n,
     *          cumulativeGasUsed: 21000n,
     *          effectiveGasPrice: 1000000001n,
     *          from: '0xe899f0130fd099c0b896b2ce4e5e15a25b23139a',
     *          gasUsed: 21000n,
     *          logs: [],
     *          logsBloom: '0x
     *          status: 1n,
     *          to: '0xe899f0130fd099c0b896b2ce4e5e15a25b23139a',
     *          transactionHash: '0xed8c241ea44d57f4605dc22c63500de46254d6c7844fd65fa438b128c80cf700',
     *          transactionIndex: 0n,
     *          type: 0n
     *     },
     *     latestBlockHash: '0xff2b1687995d81066361bc6affe4455746120a7d4bb75fc938211a2692a50081'
     * }
     * ```
     * - `error`
     * ```ts
     * web3.eth.sendSignedTransaction(signedTransaction).on('error', error => console.log(error));
     * > <Some TransactionError>
     * ```
     */ sendSignedTransaction(transaction, returnFormat = (0, _web3Types.DEFAULT_RETURN_FORMAT), options) {
        return _rpcMethodWrappersJs.sendSignedTransaction(this, transaction, returnFormat, options);
    }
    /**
     * @param message Data to sign in one of the valid {@link Bytes} format.
     * @param address Address to sign data with, can be an address or the index of a local wallet.
     * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.
     * @returns The signed `message`.
     *
     * ```ts
     * // Using an unlocked account managed by connected RPC client
     * web3.eth.sign("0x48656c6c6f20776f726c64", "0x11f4d0A3c12e86B4b5F39B213F7E19D048276DAe").then(console.log);
     * > "0x30755ed65396facf86c53e6217c52b4daebe72aa4941d89635409de4c9c7f9466d4e9aaec7977f05e923889b33c0d0dd27d7226b6e6f56ce737465c5cfd04be400"
     *
     * // Using an unlocked account managed by connected RPC client
     * web3.eth.sign("0x48656c6c6f20776f726c64", "0x11f4d0A3c12e86B4b5F39B213F7E19D048276DAe", { number: FMT_NUMBER.NUMBER , bytes: FMT_BYTES.UINT8ARRAY }).then(console.log);
     * > Uint8Array(65) [
     *    48, 117,  94, 214,  83, 150, 250, 207, 134, 197,  62,
     *    98,  23, 197,  43,  77, 174, 190, 114, 170,  73,  65,
     *   216, 150,  53,  64, 157, 228, 201, 199, 249,  70, 109,
     *    78, 154, 174, 199, 151, 127,   5, 233,  35, 136, 155,
     *    51, 192, 208, 221,  39, 215,  34, 107, 110, 111,  86,
     *   206, 115, 116, 101, 197, 207, 208,  75, 228,   0
     * ]
     * ```
     *
     * // Using an indexed account managed by local Web3 wallet
     * web3.eth.sign("0x48656c6c6f20776f726c64", 0).then(console.log);
     * > "0x30755ed65396facf86c53e6217c52b4daebe72aa4941d89635409de4c9c7f9466d4e9aaec7977f05e923889b33c0d0dd27d7226b6e6f56ce737465c5cfd04be400"
     */ sign(message, address, returnFormat = (0, _web3Types.DEFAULT_RETURN_FORMAT)) {
        return __awaiter(this, void 0, void 0, function*() {
            return _rpcMethodWrappersJs.sign(this, message, address, returnFormat);
        });
    }
    /**
     * @param transaction The transaction object to sign.
     * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.
     * @returns {@link SignedTransactionInfoAPI}, an object containing the [RLP](https://ethereum.org/en/developers/docs/data-structures-and-encoding/rlp/#top) encoded signed transaction (accessed via the `raw` property) and the signed transaction object (accessed via the `tx` property).
     *
     * ```ts
     * const transaction = {
     *      from: '0xe899f0130FD099c0b896B2cE4E5E15A25b23139a',
     *      to: '0xe899f0130FD099c0b896B2cE4E5E15A25b23139a',
     *      value: '0x1',
     *      gas: '21000',
     *      gasPrice: await web3Eth.getGasPrice(),
     *      nonce: '0x1',
     *      type: '0x0'
     * }
     *
     * web3.eth.signTransaction(transaction).then(console.log);
     * > {
     *   raw: '0xf86501843b9aca0182520894e899f0130fd099c0b896b2ce4e5e15a25b23139a0180820a96a0adb3468dbb4dce89fe1785ea9182e85fb56b399b378f82b93af7a8a12a4f9679a027d37d736e9bcf00121f78b2d10e4404fa5c45856d62b746574345f5cd278097',
     *   tx: {
     *      type: 0n,
     *      nonce: 1n,
     *      gasPrice: 1000000001n,
     *      gas: 21000n,
     *      value: 1n,
     *      v: 2710n,
     *      r: '0xadb3468dbb4dce89fe1785ea9182e85fb56b399b378f82b93af7a8a12a4f9679',
     *      s: '0x27d37d736e9bcf00121f78b2d10e4404fa5c45856d62b746574345f5cd278097',
     *      to: '0xe899f0130fd099c0b896b2ce4e5e15a25b23139a',
     *      data: '0x'
     *   }
     * }
     *
     * web3.eth.signTransaction(transaction, { number: FMT_NUMBER.NUMBER , bytes: FMT_BYTES.HEX }).then(console.log);
     * > {
     *   raw: '0xf86501843b9aca0182520894e899f0130fd099c0b896b2ce4e5e15a25b23139a0180820a96a0adb3468dbb4dce89fe1785ea9182e85fb56b399b378f82b93af7a8a12a4f9679a027d37d736e9bcf00121f78b2d10e4404fa5c45856d62b746574345f5cd278097',
     *   tx: {
     *      type: 0,
     *      nonce: 1,
     *      gasPrice: 1000000001,
     *      gas: 21000,
     *      value: 1,
     *      v: 2710,
     *      r: '0xadb3468dbb4dce89fe1785ea9182e85fb56b399b378f82b93af7a8a12a4f9679',
     *      s: '0x27d37d736e9bcf00121f78b2d10e4404fa5c45856d62b746574345f5cd278097',
     *      to: '0xe899f0130fd099c0b896b2ce4e5e15a25b23139a',
     *      data: '0x'
     *   }
     * }
     * ```
     */ signTransaction(transaction, returnFormat = (0, _web3Types.DEFAULT_RETURN_FORMAT)) {
        return __awaiter(this, void 0, void 0, function*() {
            return _rpcMethodWrappersJs.signTransaction(this, transaction, returnFormat);
        });
    }
    // TODO Decide what to do with transaction.to
    // https://github.com/ChainSafe/web3.js/pull/4525#issuecomment-982330076
    /**
     * Executes a message call within the EVM without creating a transaction.
     * It does not publish anything to the blockchain and does not consume any gas.
     *
     * @param transaction - A transaction object where all properties are optional except `to`, however it's recommended to include the `from` property or it may default to `0x0000000000000000000000000000000000000000` depending on your node or provider.
     * @param blockNumber ({@link BlockNumberOrTag} defaults to {@link Web3Eth.defaultBlock}) - Specifies what block to use as the current state of the blockchain while processing the transaction.
     * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) - Specifies how the return data from the call should be formatted.
     * @returns The returned data of the call, e.g. a smart contract function's return value.
     */ call(transaction, blockNumber = this.defaultBlock, returnFormat = (0, _web3Types.DEFAULT_RETURN_FORMAT)) {
        return __awaiter(this, void 0, void 0, function*() {
            return _rpcMethodWrappersJs.call(this, transaction, blockNumber, returnFormat);
        });
    }
    /**
     * Simulates the transaction within the EVM to estimate the amount of gas to be used by the transaction.
     * The transaction will not be added to the blockchain, and actual gas usage can vary when interacting
     * with a contract as a result of updating the contract's state.
     *
     * @param transaction The {@link Transaction} object to estimate the gas for.
     * @param blockNumber ({@link BlockNumberOrTag} defaults to {@link Web3Eth.defaultBlock}) - Specifies what block to use as the current state of the blockchain while processing the gas estimation.
     * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) - Specifies how the return data from the call should be formatted.
     * @returns The used gas for the simulated transaction execution.
     *
     * ```ts
     * const transaction = {
     *       from: '0xe899f0130FD099c0b896B2cE4E5E15A25b23139a',
     *       to: '0xe899f0130FD099c0b896B2cE4E5E15A25b23139a',
     *       value: '0x1',
     *       nonce: '0x1',
     *       type: '0x0'
     * }
     *
     * web3.eth.estimateGas(transaction).then(console.log);
     * > 21000n
     *
     * web3.eth.estimateGas(transaction, { number: FMT_NUMBER.NUMBER , bytes: FMT_BYTES.HEX }).then(console.log);
     * > 21000
     * ```
     */ estimateGas(transaction, blockNumber = this.defaultBlock, returnFormat = (0, _web3Types.DEFAULT_RETURN_FORMAT)) {
        return __awaiter(this, void 0, void 0, function*() {
            return _rpcMethodWrappersJs.estimateGas(this, transaction, blockNumber, returnFormat);
        });
    }
    /**
     * Gets past logs, matching the provided `filter`.
     *
     * @param filter A {@link Filter} object containing the properties for the desired logs.
     * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) - Specifies how the return data from the call should be formatted.
     * @returns {@link FilterResultsAPI}, an array of {@link Log} objects.
     *
     * ```ts
     * web3.eth.getPastLogs({
     *      address: "0x11f4d0A3c12e86B4b5F39B213F7E19D048276DAe",
     *      topics: ["0x033456732123ffff2342342dd12342434324234234fd234fd23fd4f23d4234"]
     *  }).then(console.log);
     * > [{
     *       data: '0x7f9fade1c0d57a7af66ab4ead79fade1c0d57a7af66ab4ead7c2c2eb7b11a91385',
     *       topics: ['0xfd43ade1c09fade1c0d57a7af66ab4ead7c2c2eb7b11a91ffdd57a7af66ab4ead7', '0x7f9fade1c0d57a7af66ab4ead79fade1c0d57a7af66ab4ead7c2c2eb7b11a91385']
     *       logIndex: 0n,
     *       transactionIndex: 0n,
     *       transactionHash: '0x7f9fade1c0d57a7af66ab4ead79fade1c0d57a7af66ab4ead7c2c2eb7b11a91385',
     *       blockHash: '0xfd43ade1c09fade1c0d57a7af66ab4ead7c2c2eb7b11a91ffdd57a7af66ab4ead7',
     *       blockNumber: 1234n,
     *       address: '0xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe'
     *   },
     *   {...}]
     *
     * web3.eth.getPastLogs(
     *     {
     *       address: "0x11f4d0A3c12e86B4b5F39B213F7E19D048276DAe",
     *       topics: ["0x033456732123ffff2342342dd12342434324234234fd234fd23fd4f23d4234"]
     *     },
     *     { number: FMT_NUMBER.NUMBER , bytes: FMT_BYTES.HEX }
     * ).then(console.log);
     * > [{
     *       data: '0x7f9fade1c0d57a7af66ab4ead79fade1c0d57a7af66ab4ead7c2c2eb7b11a91385',
     *       topics: ['0xfd43ade1c09fade1c0d57a7af66ab4ead7c2c2eb7b11a91ffdd57a7af66ab4ead7', '0x7f9fade1c0d57a7af66ab4ead79fade1c0d57a7af66ab4ead7c2c2eb7b11a91385']
     *       logIndex: 0,
     *       transactionIndex: 0,
     *       transactionHash: '0x7f9fade1c0d57a7af66ab4ead79fade1c0d57a7af66ab4ead7c2c2eb7b11a91385',
     *       blockHash: '0xfd43ade1c09fade1c0d57a7af66ab4ead7c2c2eb7b11a91ffdd57a7af66ab4ead7',
     *       blockNumber: 1234,
     *       address: '0xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe'
     *   },
     *   {...}]
     * ```
     */ getPastLogs(filter, returnFormat = (0, _web3Types.DEFAULT_RETURN_FORMAT)) {
        return __awaiter(this, void 0, void 0, function*() {
            return _rpcMethodWrappersJs.getLogs(this, filter, returnFormat);
        });
    }
    /**
     * Gets work for miners to mine on. Returns the hash of the current block, the seedHash, and the boundary condition to be met ('target').
     *
     * @returns The mining work as an array of strings with the following structure:
     *
     * String 32 Bytes - at index 0: current block header pow-hash
     * String 32 Bytes - at index 1: the seed hash used for the DAG.
     * String 32 Bytes - at index 2: the boundary condition ('target'), 2^256 / difficulty.
     *
     * ```ts
     * web3.eth.getWork().then(console.log);
     * > [
     *     "0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef",
     *     "0x5EED00000000000000000000000000005EED0000000000000000000000000000",
     *     "0xd1ff1c01710000000000000000000000d1ff1c01710000000000000000000000"
     * ]
     * ```
     */ getWork() {
        return __awaiter(this, void 0, void 0, function*() {
            return (0, _web3RpcMethods.ethRpcMethods).getWork(this.requestManager);
        });
    }
    /**
     * Used for submitting a proof-of-work solution.
     *
     * @param nonce The nonce found (8 bytes).
     * @param hash  The header’s pow-hash (32 bytes).
     * @param digest The mix digest (32 bytes).
     * @returns Returns `true` if the provided solution is valid, otherwise `false`.
     *
     * ```ts
     * web3.eth.submitWork([
     *     "0x0000000000000001",
     *     "0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef",
     *     "0xD1FE5700000000000000000000000000D1FE5700000000000000000000000000"
     * ]).then(console.log);
     * > true
     * ```
     */ submitWork(nonce, hash, digest) {
        return __awaiter(this, void 0, void 0, function*() {
            return (0, _web3RpcMethods.ethRpcMethods).submitWork(this.requestManager, nonce, hash, digest);
        });
    }
    // TODO - Format addresses
    /**
     * This method will request/enable the accounts from the current environment and for supporting [EIP 1102](https://eips.ethereum.org/EIPS/eip-1102)
     * This method will only work if you’re using the injected provider from a application like Metamask, Status or TrustWallet.
     * It doesn’t work if you’re connected to a node with a default Web3.js provider (WebsocketProvider, HttpProvider and IpcProvider).
     * For more information about the behavior of this method please read [EIP-1102](https://github.com/ethereum/EIPs/blob/master/EIPS/eip-1102.md): Opt-in account exposure.
     *
     * @returns An array of enabled accounts.
     *
     * ```ts
     * web3.eth.requestAccounts().then(console.log);
     * > ['0aae0B295369a9FD31d5F28D9Ec85E40f4cb692BAf', '0xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe']
     * ```
     */ requestAccounts() {
        return __awaiter(this, void 0, void 0, function*() {
            return (0, _web3RpcMethods.ethRpcMethods).requestAccounts(this.requestManager);
        });
    }
    /**
     * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) - Specifies how the return data from the call should be formatted.
     * @returns The chain ID of the current connected node as described in the [EIP-695](https://github.com/ethereum/EIPs/blob/master/EIPS/eip-695.md).
     *
     * ```ts
     * web3.eth.getChainId().then(console.log);
     * > 61n
     *
     * web3.eth.getChainId({ number: FMT_NUMBER.NUMBER , bytes: FMT_BYTES.HEX }).then(console.log);
     * > 61
     * ```
     */ getChainId(returnFormat = (0, _web3Types.DEFAULT_RETURN_FORMAT)) {
        return __awaiter(this, void 0, void 0, function*() {
            return _rpcMethodWrappersJs.getChainId(this, returnFormat);
        });
    }
    /**
     * @returns The current client version.
     *
     * ```ts
     * web3.eth.getNodeInfo().then(console.log);
     * > "Mist/v0.9.3/darwin/go1.4.1"
     * ```
     */ getNodeInfo() {
        return __awaiter(this, void 0, void 0, function*() {
            return (0, _web3RpcMethods.ethRpcMethods).getNodeInfo(this.requestManager);
        });
    }
    /**
     * @param address The Address of the account or contract.
     * @param storageKeys Array of storage-keys which should be proofed and included. See {@link web3.getStorageAt}.
     * @param blockNumber ({@link BlockNumberOrTag} defaults to {@link Web3Eth.defaultBlock}) - Specifies what block to use as the current state of the blockchain while processing the gas estimation.
     * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) - Specifies how the return data from the call should be formatted.
     * @returns The account and storage-values of the specified account including the Merkle-proof as described in [EIP-1186](https://github.com/ethereum/EIPs/blob/master/EIPS/eip-1186.md).
     *
     * ```ts
     * web3.eth.getProof(
     *     "0x1234567890123456789012345678901234567890",
     *     ["0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000001"],
     *     "latest"
     * ).then(console.log);
     * > {
     *     "address": "0x1234567890123456789012345678901234567890",
     *     "accountProof": [
     *         "0xf90211a090dcaf88c40c7bbc95a912cbdde67c175767b31173df9ee4b0d733bfdd511c43a0babe369f6b12092f49181ae04ca173fb68d1a5456f18d20fa32cba73954052bda0473ecf8a7e36a829e75039a3b055e51b8332cbf03324ab4af2066bbd6fbf0021a0bbda34753d7aa6c38e603f360244e8f59611921d9e1f128372fec0d586d4f9e0a04e44caecff45c9891f74f6a2156735886eedf6f1a733628ebc802ec79d844648a0a5f3f2f7542148c973977c8a1e154c4300fec92f755f7846f1b734d3ab1d90e7a0e823850f50bf72baae9d1733a36a444ab65d0a6faaba404f0583ce0ca4dad92da0f7a00cbe7d4b30b11faea3ae61b7f1f2b315b61d9f6bd68bfe587ad0eeceb721a07117ef9fc932f1a88e908eaead8565c19b5645dc9e5b1b6e841c5edbdfd71681a069eb2de283f32c11f859d7bcf93da23990d3e662935ed4d6b39ce3673ec84472a0203d26456312bbc4da5cd293b75b840fc5045e493d6f904d180823ec22bfed8ea09287b5c21f2254af4e64fca76acc5cd87399c7f1ede818db4326c98ce2dc2208a06fc2d754e304c48ce6a517753c62b1a9c1d5925b89707486d7fc08919e0a94eca07b1c54f15e299bd58bdfef9741538c7828b5d7d11a489f9c20d052b3471df475a051f9dd3739a927c89e357580a4c97b40234aa01ed3d5e0390dc982a7975880a0a089d613f26159af43616fd9455bb461f4869bfede26f2130835ed067a8b967bfb80",
     *         "0xf90211a0395d87a95873cd98c21cf1df9421af03f7247880a2554e20738eec2c7507a494a0bcf6546339a1e7e14eb8fb572a968d217d2a0d1f3bc4257b22ef5333e9e4433ca012ae12498af8b2752c99efce07f3feef8ec910493be749acd63822c3558e6671a0dbf51303afdc36fc0c2d68a9bb05dab4f4917e7531e4a37ab0a153472d1b86e2a0ae90b50f067d9a2244e3d975233c0a0558c39ee152969f6678790abf773a9621a01d65cd682cc1be7c5e38d8da5c942e0a73eeaef10f387340a40a106699d494c3a06163b53d956c55544390c13634ea9aa75309f4fd866f312586942daf0f60fb37a058a52c1e858b1382a8893eb9c1f111f266eb9e21e6137aff0dddea243a567000a037b4b100761e02de63ea5f1fcfcf43e81a372dafb4419d126342136d329b7a7ba032472415864b08f808ba4374092003c8d7c40a9f7f9fe9cc8291f62538e1cc14a074e238ff5ec96b810364515551344100138916594d6af966170ff326a092fab0a0d31ac4eef14a79845200a496662e92186ca8b55e29ed0f9f59dbc6b521b116fea090607784fe738458b63c1942bba7c0321ae77e18df4961b2bc66727ea996464ea078f757653c1b63f72aff3dcc3f2a2e4c8cb4a9d36d1117c742833c84e20de994a0f78407de07f4b4cb4f899dfb95eedeb4049aeb5fc1635d65cf2f2f4dfd25d1d7a0862037513ba9d45354dd3e36264aceb2b862ac79d2050f14c95657e43a51b85c80",
     *         "0xf90171a04ad705ea7bf04339fa36b124fa221379bd5a38ffe9a6112cb2d94be3a437b879a08e45b5f72e8149c01efcb71429841d6a8879d4bbe27335604a5bff8dfdf85dcea00313d9b2f7c03733d6549ea3b810e5262ed844ea12f70993d87d3e0f04e3979ea0b59e3cdd6750fa8b15164612a5cb6567cdfb386d4e0137fccee5f35ab55d0efda0fe6db56e42f2057a071c980a778d9a0b61038f269dd74a0e90155b3f40f14364a08538587f2378a0849f9608942cf481da4120c360f8391bbcc225d811823c6432a026eac94e755534e16f9552e73025d6d9c30d1d7682a4cb5bd7741ddabfd48c50a041557da9a74ca68da793e743e81e2029b2835e1cc16e9e25bd0c1e89d4ccad6980a041dda0a40a21ade3a20fcd1a4abb2a42b74e9a32b02424ff8db4ea708a5e0fb9a09aaf8326a51f613607a8685f57458329b41e938bb761131a5747e066b81a0a16808080a022e6cef138e16d2272ef58434ddf49260dc1de1f8ad6dfca3da5d2a92aaaadc58080",
     *         "0xf851808080a009833150c367df138f1538689984b8a84fc55692d3d41fe4d1e5720ff5483a6980808080808080808080a0a319c1c415b271afc0adcb664e67738d103ac168e0bc0b7bd2da7966165cb9518080"
     *     ],
     *     "balance": 0n,
     *     "codeHash": "0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
     *     "nonce": 0n,
     *     "storageHash": "0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421",
     *     "storageProof": [
     *         {
     *             "key": "0x0000000000000000000000000000000000000000000000000000000000000000",
     *             "value": 0n,
     *             "proof": []
     *         },
     *         {
     *             "key": "0x0000000000000000000000000000000000000000000000000000000000000001",
     *             "value": 0n,
     *             "proof": []
     *         }
     *     ]
     * }
     *
     * web3.eth.getProof(
     *     "0x1234567890123456789012345678901234567890",
     *     ["0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000001"],
     *     undefined,
     *     { number: FMT_NUMBER.NUMBER , bytes: FMT_BYTES.HEX }
     * ).then(console.log);
     * > {
     *     "address": "0x1234567890123456789012345678901234567890",
     *     "accountProof": [
     *         "0xf90211a090dcaf88c40c7bbc95a912cbdde67c175767b31173df9ee4b0d733bfdd511c43a0babe369f6b12092f49181ae04ca173fb68d1a5456f18d20fa32cba73954052bda0473ecf8a7e36a829e75039a3b055e51b8332cbf03324ab4af2066bbd6fbf0021a0bbda34753d7aa6c38e603f360244e8f59611921d9e1f128372fec0d586d4f9e0a04e44caecff45c9891f74f6a2156735886eedf6f1a733628ebc802ec79d844648a0a5f3f2f7542148c973977c8a1e154c4300fec92f755f7846f1b734d3ab1d90e7a0e823850f50bf72baae9d1733a36a444ab65d0a6faaba404f0583ce0ca4dad92da0f7a00cbe7d4b30b11faea3ae61b7f1f2b315b61d9f6bd68bfe587ad0eeceb721a07117ef9fc932f1a88e908eaead8565c19b5645dc9e5b1b6e841c5edbdfd71681a069eb2de283f32c11f859d7bcf93da23990d3e662935ed4d6b39ce3673ec84472a0203d26456312bbc4da5cd293b75b840fc5045e493d6f904d180823ec22bfed8ea09287b5c21f2254af4e64fca76acc5cd87399c7f1ede818db4326c98ce2dc2208a06fc2d754e304c48ce6a517753c62b1a9c1d5925b89707486d7fc08919e0a94eca07b1c54f15e299bd58bdfef9741538c7828b5d7d11a489f9c20d052b3471df475a051f9dd3739a927c89e357580a4c97b40234aa01ed3d5e0390dc982a7975880a0a089d613f26159af43616fd9455bb461f4869bfede26f2130835ed067a8b967bfb80",
     *         "0xf90211a0395d87a95873cd98c21cf1df9421af03f7247880a2554e20738eec2c7507a494a0bcf6546339a1e7e14eb8fb572a968d217d2a0d1f3bc4257b22ef5333e9e4433ca012ae12498af8b2752c99efce07f3feef8ec910493be749acd63822c3558e6671a0dbf51303afdc36fc0c2d68a9bb05dab4f4917e7531e4a37ab0a153472d1b86e2a0ae90b50f067d9a2244e3d975233c0a0558c39ee152969f6678790abf773a9621a01d65cd682cc1be7c5e38d8da5c942e0a73eeaef10f387340a40a106699d494c3a06163b53d956c55544390c13634ea9aa75309f4fd866f312586942daf0f60fb37a058a52c1e858b1382a8893eb9c1f111f266eb9e21e6137aff0dddea243a567000a037b4b100761e02de63ea5f1fcfcf43e81a372dafb4419d126342136d329b7a7ba032472415864b08f808ba4374092003c8d7c40a9f7f9fe9cc8291f62538e1cc14a074e238ff5ec96b810364515551344100138916594d6af966170ff326a092fab0a0d31ac4eef14a79845200a496662e92186ca8b55e29ed0f9f59dbc6b521b116fea090607784fe738458b63c1942bba7c0321ae77e18df4961b2bc66727ea996464ea078f757653c1b63f72aff3dcc3f2a2e4c8cb4a9d36d1117c742833c84e20de994a0f78407de07f4b4cb4f899dfb95eedeb4049aeb5fc1635d65cf2f2f4dfd25d1d7a0862037513ba9d45354dd3e36264aceb2b862ac79d2050f14c95657e43a51b85c80",
     *         "0xf90171a04ad705ea7bf04339fa36b124fa221379bd5a38ffe9a6112cb2d94be3a437b879a08e45b5f72e8149c01efcb71429841d6a8879d4bbe27335604a5bff8dfdf85dcea00313d9b2f7c03733d6549ea3b810e5262ed844ea12f70993d87d3e0f04e3979ea0b59e3cdd6750fa8b15164612a5cb6567cdfb386d4e0137fccee5f35ab55d0efda0fe6db56e42f2057a071c980a778d9a0b61038f269dd74a0e90155b3f40f14364a08538587f2378a0849f9608942cf481da4120c360f8391bbcc225d811823c6432a026eac94e755534e16f9552e73025d6d9c30d1d7682a4cb5bd7741ddabfd48c50a041557da9a74ca68da793e743e81e2029b2835e1cc16e9e25bd0c1e89d4ccad6980a041dda0a40a21ade3a20fcd1a4abb2a42b74e9a32b02424ff8db4ea708a5e0fb9a09aaf8326a51f613607a8685f57458329b41e938bb761131a5747e066b81a0a16808080a022e6cef138e16d2272ef58434ddf49260dc1de1f8ad6dfca3da5d2a92aaaadc58080",
     *         "0xf851808080a009833150c367df138f1538689984b8a84fc55692d3d41fe4d1e5720ff5483a6980808080808080808080a0a319c1c415b271afc0adcb664e67738d103ac168e0bc0b7bd2da7966165cb9518080"
     *     ],
     *     "balance": 0,
     *     "codeHash": "0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
     *     "nonce": 0,
     *     "storageHash": "0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421",
     *     "storageProof": [
     *         {
     *             "key": "0x0000000000000000000000000000000000000000000000000000000000000000",
     *             "value": 0,
     *             "proof": []
     *         },
     *         {
     *             "key": "0x0000000000000000000000000000000000000000000000000000000000000001",
     *             "value": 0,
     *             "proof": []
     *         }
     *     ]
     * }
     * ```
     */ getProof(address, storageKeys, blockNumber = this.defaultBlock, returnFormat = (0, _web3Types.DEFAULT_RETURN_FORMAT)) {
        return __awaiter(this, void 0, void 0, function*() {
            return _rpcMethodWrappersJs.getProof(this, address, storageKeys, blockNumber, returnFormat);
        });
    }
    // TODO Throwing an error with Geth, but not Infura
    // TODO gasUsedRatio and reward not formatting
    /**
     * @param blockCount Number of blocks in the requested range. Between `1` and `1024` blocks can be requested in a single query. Less than requested may be returned if not all blocks are available.
     * @param newestBlock Highest number block of the requested range.
     * @param rewardPercentiles A monotonically increasing list of percentile values to sample from each block’s effective priority fees per gas in ascending order, weighted by gas used. Example: `['0', '25', '50', '75', '100']` or `['0', '0.5', '1', '1.5', '3', '80']`
     * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) - Specifies how the return data from the call should be formatted.
     * @returns `baseFeePerGas` and transaction effective `priorityFeePerGas` history for the requested block range if available.
     * The range between `headBlock - 4` and `headBlock` is guaranteed to be available while retrieving data from the `pending` block and older history are optional to support.
     * For pre-EIP-1559 blocks the `gasPrice`s are returned as `rewards` and zeroes are returned for the `baseFeePerGas`.
     *
     * ```ts
     * web3.eth.getFeeHistory(4, 'pending', [0, 25, 75, 100]).then(console.log);
     * > {
     *     baseFeePerGas: [
     *         22983878621n,
     *         21417903463n,
     *         19989260230n,
     *         17770954829n,
     *         18850641304n
     *     ],
     *     gasUsedRatio: [
     *         0.22746546666666667,
     *         0.2331871,
     *         0.05610054885262125,
     *         0.7430227268212117
     *     ],
     *     oldestBlock: 15216343n,
     *     reward: [
     *         [ '0x3b9aca00', '0x53724e00', '0x77359400', '0x1d92c03423' ],
     *         [ '0x3b9aca00', '0x3b9aca00', '0x3b9aca00', '0xee6b2800' ],
     *         [ '0x3b9aca00', '0x4f86a721', '0x77d9743a', '0x9502f900' ],
     *         [ '0xcc8ff9e', '0x53724e00', '0x77359400', '0x1ec9771bb3' ]
     *     ]
     * }
     *
     * web3.eth.getFeeHistory(4, BlockTags.LATEST, [0, 25, 75, 100], { number: FMT_NUMBER.NUMBER , bytes: FMT_BYTES.HEX }).then(console.log);
     * > {
     *     baseFeePerGas: [
     *         22983878621,
     *         21417903463,
     *         19989260230,
     *         17770954829,
     *         18850641304
     *     ],
     *     gasUsedRatio: [
     *         0.22746546666666667,
     *         0.2331871,
     *         0.05610054885262125,
     *         0.7430227268212117
     *     ],
     *     oldestBlock: 15216343,
     *     reward: [
     *         [ '0x3b9aca00', '0x53724e00', '0x77359400', '0x1d92c03423' ],
     *         [ '0x3b9aca00', '0x3b9aca00', '0x3b9aca00', '0xee6b2800' ],
     *         [ '0x3b9aca00', '0x4f86a721', '0x77d9743a', '0x9502f900' ],
     *         [ '0xcc8ff9e', '0x53724e00', '0x77359400', '0x1ec9771bb3' ]
     *     ]
     * }
     * ```
     */ getFeeHistory(blockCount, newestBlock = this.defaultBlock, rewardPercentiles, returnFormat = (0, _web3Types.DEFAULT_RETURN_FORMAT)) {
        return __awaiter(this, void 0, void 0, function*() {
            return _rpcMethodWrappersJs.getFeeHistory(this, blockCount, newestBlock, rewardPercentiles, returnFormat);
        });
    }
    /**
     * This method generates an access list for a transaction.
     *
     * @param transaction - A transaction object where all properties are optional except `from`, however it's recommended to include the `to` property.
     * @param blockNumber ({@link BlockNumberOrTag} defaults to {@link Web3Eth.defaultBlock}) - Specifies what block to use as the current state of the blockchain while processing the transaction.
     * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) - Specifies how the return data from the createAccessList should be formatted.
     * @returns The returned data of the createAccessList,  e.g. The generated access list for transaction.
     * @example
     * ```ts
     * web3.eth.createAccessList({
     * from: '0xDe95305a63302C3aa4d3A9B42654659AeA72b694',
     * data: '0x9a67c8b100000000000000000000000000000000000000000000000000000000000004d0',
     * gasPrice: '0x3b9aca00',
     * gas: '0x3d0900',
     * to: '0x940b25304947ae863568B3804434EC77E2160b87'
     * })
     * .then(console.log);
     *
     * > {
     *  "accessList": [
     *     {
     *       "address": "0x15859bdf5aff2080a9968f6a410361e9598df62f",
     *       "storageKeys": [
     *         "0x0000000000000000000000000000000000000000000000000000000000000000"
     *       ]
     *     }
     *   ],
     *   "gasUsed": "0x7671"
     * }
     * ```
     */ createAccessList(transaction, blockNumber = this.defaultBlock, returnFormat = (0, _web3Types.DEFAULT_RETURN_FORMAT)) {
        return __awaiter(this, void 0, void 0, function*() {
            return _rpcMethodWrappersJs.createAccessList(this, transaction, blockNumber, returnFormat);
        });
    }
    /**
     * This method sends EIP-712 typed data to the RPC provider to be signed.
     *
     * @param address The address that corresponds with the private key used to sign the typed data.
     * @param typedData The EIP-712 typed data object.
     * @param useLegacy A boolean flag determining whether the RPC call uses the legacy method `eth_signTypedData` or the newer method `eth_signTypedData_v4`
     * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) - Specifies how the signed typed data should be formatted.
     * @returns The signed typed data.
     */ signTypedData(address, typedData, useLegacy = false, returnFormat = (0, _web3Types.DEFAULT_RETURN_FORMAT)) {
        return __awaiter(this, void 0, void 0, function*() {
            return _rpcMethodWrappersJs.signTypedData(this, address, typedData, useLegacy, returnFormat);
        });
    }
    /**
     * Lets you subscribe to specific events in the blockchain.
     *
     * @param name - The subscription you want to subscribe to.
     * @param args - Optional additional parameters, depending on the subscription type.
     * @returns A subscription object of type {@link RegisteredSubscription}. The object contains:
     *  - subscription.id: The subscription id, used to identify and unsubscribing the subscription.
     *  - subscription.subscribe(): Can be used to re-subscribe with the same parameters.
     *  - subscription.unsubscribe(): Unsubscribes the subscription and returns TRUE in the callback if successful.
     *  - subscription.args: The subscription arguments, used when re-subscribing.
     *
     *
     * You can use the subscription object to listen on:
     *
     * - on("data") - Fires on each incoming log with the log object as argument.
     * - on("changed") - Fires on each log which was removed from the blockchain. The log will have the additional property "removed: true".
     * - on("error") - Fires when an error in the subscription occurs.
     * - on("connected") - Fires once after the subscription successfully connected. Returns the subscription id.
     *
     * @example **Subscribe to Smart Contract events**
     * ```ts
     * // Subscribe to `logs`
     * const logSubscription = web3.eth.subscribe('logs', {
     *     address: '0x1234567890123456789012345678901234567890',
     *     topics: ['0x033456732123ffff2342342dd12342434324234234fd234fd23fd4f23d4234']
     * });
     * logSubscription.on('data', (data: any) => console.log(data));
     * logSubscription.on('error', (error: any) => console.log(error));
     *
     * ```
     *
     * @example **Subscribe to new block headers**
     * ```ts
     * // Subscribe to `newBlockHeaders`
     * const newBlocksSubscription = await web3.eth.subscribe('newBlockHeaders');
     *
     * newBlocksSubscription.on('data', async blockhead => {
     * 	console.log('New block header: ', blockhead);
     *
     * 	// You do not need the next line, if you like to keep notified for every new block
     * 	await newBlocksSubscription.unsubscribe();
     * 	console.log('Unsubscribed from new block headers.');
     * });
     * newBlocksSubscription.on('error', error =>
     * 	console.log('Error when subscribing to New block header: ', error),
     * );
     * ```
     */ subscribe(name, args, returnFormat = (0, _web3Types.DEFAULT_RETURN_FORMAT)) {
        var _a;
        return __awaiter(this, void 0, void 0, function*() {
            const subscription = yield (_a = this.subscriptionManager) === null || _a === void 0 ? void 0 : _a.subscribe(name, args, returnFormat);
            if (subscription instanceof (0, _web3SubscriptionsJs.LogsSubscription) && name === "logs" && typeof args === "object" && !(0, _web3Utils.isNullish)(args.fromBlock) && Number.isFinite(Number(args.fromBlock))) setImmediate(()=>{
                this.getPastLogs(args).then((logs)=>{
                    for (const log of logs)subscription._processSubscriptionResult(log);
                }).catch((e)=>{
                    subscription._processSubscriptionError(e);
                });
            });
            return subscription;
        });
    }
    static shouldClearSubscription({ sub }) {
        return !(sub instanceof (0, _web3SubscriptionsJs.SyncingSubscription));
    }
    /**
     * Resets subscriptions.
     *
     * @param notClearSyncing If `true` it keeps the `syncing` subscription.
     * @returns A promise to an array of subscription ids that were cleared.
     *
     * ```ts
     * web3.eth.clearSubscriptions().then(console.log);
     * > [...] An array of subscription ids that were cleared
     * ```
     */ clearSubscriptions(notClearSyncing = false) {
        var _a;
        return (_a = this.subscriptionManager) === null || _a === void 0 ? void 0 : _a.unsubscribe(// eslint-disable-next-line
        notClearSyncing ? Web3Eth.shouldClearSubscription : undefined);
    }
}

},{"web3-types":"g7Ztk","web3-core":"4Uu6H","web3-errors":"jDvsn","web3-utils":"8WsWI","web3-rpc-methods":"eT6LI","./rpc_method_wrappers.js":"44lYD","./web3_subscriptions.js":"8o1MX","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eT6LI":[function(require,module,exports) {
/*
This file is part of web3.js.

web3.js is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

web3.js is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ethRpcMethods", ()=>_ethRpcMethodsJs);
parcelHelpers.export(exports, "netRpcMethods", ()=>_netRpcMethodsJs);
parcelHelpers.export(exports, "personalRpcMethods", ()=>_personalRpcMethodsJs);
var _ethRpcMethodsJs = require("./eth_rpc_methods.js");
var _netRpcMethodsJs = require("./net_rpc_methods.js");
var _personalRpcMethodsJs = require("./personal_rpc_methods.js");

},{"./eth_rpc_methods.js":"dZwMx","./net_rpc_methods.js":"j3ang","./personal_rpc_methods.js":"aAg7h","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dZwMx":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getProtocolVersion", ()=>getProtocolVersion);
parcelHelpers.export(exports, "getSyncing", ()=>getSyncing);
parcelHelpers.export(exports, "getCoinbase", ()=>getCoinbase);
parcelHelpers.export(exports, "getMining", ()=>getMining);
parcelHelpers.export(exports, "getHashRate", ()=>getHashRate);
parcelHelpers.export(exports, "getGasPrice", ()=>getGasPrice);
parcelHelpers.export(exports, "getAccounts", ()=>getAccounts);
parcelHelpers.export(exports, "getBlockNumber", ()=>getBlockNumber);
parcelHelpers.export(exports, "getBalance", ()=>getBalance);
parcelHelpers.export(exports, "getStorageAt", ()=>getStorageAt);
parcelHelpers.export(exports, "getTransactionCount", ()=>getTransactionCount);
parcelHelpers.export(exports, "getBlockTransactionCountByHash", ()=>getBlockTransactionCountByHash);
parcelHelpers.export(exports, "getBlockTransactionCountByNumber", ()=>getBlockTransactionCountByNumber);
parcelHelpers.export(exports, "getUncleCountByBlockHash", ()=>getUncleCountByBlockHash);
parcelHelpers.export(exports, "getUncleCountByBlockNumber", ()=>getUncleCountByBlockNumber);
parcelHelpers.export(exports, "getCode", ()=>getCode);
parcelHelpers.export(exports, "sign", ()=>sign);
// TODO - Validation should be:
// isTransactionWithSender(transaction)
// ? validateTransactionWithSender(transaction)
// : validateTransactionWithSender(transaction, true) with true being a isPartial flag
parcelHelpers.export(exports, "signTransaction", ()=>signTransaction);
// TODO - Validation should be:
// isTransactionWithSender(transaction)
// ? validateTransactionWithSender(transaction)
// : validateTransactionWithSender(transaction, true) with true being a isPartial flag
parcelHelpers.export(exports, "sendTransaction", ()=>sendTransaction);
parcelHelpers.export(exports, "sendRawTransaction", ()=>sendRawTransaction);
// TODO - validate transaction
parcelHelpers.export(exports, "call", ()=>call);
// TODO Not sure how to best validate Partial<TransactionWithSender>
parcelHelpers.export(exports, "estimateGas", ()=>estimateGas);
parcelHelpers.export(exports, "getBlockByHash", ()=>getBlockByHash);
parcelHelpers.export(exports, "getBlockByNumber", ()=>getBlockByNumber);
parcelHelpers.export(exports, "getTransactionByHash", ()=>getTransactionByHash);
parcelHelpers.export(exports, "getTransactionByBlockHashAndIndex", ()=>getTransactionByBlockHashAndIndex);
parcelHelpers.export(exports, "getTransactionByBlockNumberAndIndex", ()=>getTransactionByBlockNumberAndIndex);
parcelHelpers.export(exports, "getTransactionReceipt", ()=>getTransactionReceipt);
parcelHelpers.export(exports, "getUncleByBlockHashAndIndex", ()=>getUncleByBlockHashAndIndex);
parcelHelpers.export(exports, "getUncleByBlockNumberAndIndex", ()=>getUncleByBlockNumberAndIndex);
parcelHelpers.export(exports, "getCompilers", ()=>getCompilers);
parcelHelpers.export(exports, "compileSolidity", ()=>compileSolidity);
parcelHelpers.export(exports, "compileLLL", ()=>compileLLL);
parcelHelpers.export(exports, "compileSerpent", ()=>compileSerpent);
parcelHelpers.export(exports, "newFilter", ()=>newFilter);
parcelHelpers.export(exports, "newBlockFilter", ()=>newBlockFilter);
parcelHelpers.export(exports, "newPendingTransactionFilter", ()=>newPendingTransactionFilter);
parcelHelpers.export(exports, "uninstallFilter", ()=>uninstallFilter);
parcelHelpers.export(exports, "getFilterChanges", ()=>getFilterChanges);
parcelHelpers.export(exports, "getFilterLogs", ()=>getFilterLogs);
parcelHelpers.export(exports, "getLogs", ()=>getLogs);
parcelHelpers.export(exports, "getWork", ()=>getWork);
parcelHelpers.export(exports, "submitWork", ()=>submitWork);
parcelHelpers.export(exports, "submitHashrate", ()=>submitHashrate);
parcelHelpers.export(exports, "getFeeHistory", ()=>getFeeHistory);
parcelHelpers.export(exports, "getPendingTransactions", ()=>getPendingTransactions);
parcelHelpers.export(exports, "requestAccounts", ()=>requestAccounts);
parcelHelpers.export(exports, "getChainId", ()=>getChainId);
parcelHelpers.export(exports, "getProof", ()=>getProof);
parcelHelpers.export(exports, "getNodeInfo", ()=>getNodeInfo);
parcelHelpers.export(exports, "createAccessList", ()=>createAccessList);
parcelHelpers.export(exports, "signTypedData", ()=>signTypedData);
var _web3Validator = require("web3-validator");
var __awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
function getProtocolVersion(requestManager) {
    return __awaiter(this, void 0, void 0, function*() {
        return requestManager.send({
            method: "eth_protocolVersion",
            params: []
        });
    });
}
function getSyncing(requestManager) {
    return __awaiter(this, void 0, void 0, function*() {
        return requestManager.send({
            method: "eth_syncing",
            params: []
        });
    });
}
function getCoinbase(requestManager) {
    return __awaiter(this, void 0, void 0, function*() {
        return requestManager.send({
            method: "eth_coinbase",
            params: []
        });
    });
}
function getMining(requestManager) {
    return __awaiter(this, void 0, void 0, function*() {
        return requestManager.send({
            method: "eth_mining",
            params: []
        });
    });
}
function getHashRate(requestManager) {
    return __awaiter(this, void 0, void 0, function*() {
        return requestManager.send({
            method: "eth_hashrate",
            params: []
        });
    });
}
function getGasPrice(requestManager) {
    return __awaiter(this, void 0, void 0, function*() {
        return requestManager.send({
            method: "eth_gasPrice",
            params: []
        });
    });
}
function getAccounts(requestManager) {
    return __awaiter(this, void 0, void 0, function*() {
        return requestManager.send({
            method: "eth_accounts",
            params: []
        });
    });
}
function getBlockNumber(requestManager) {
    return __awaiter(this, void 0, void 0, function*() {
        return requestManager.send({
            method: "eth_blockNumber",
            params: []
        });
    });
}
function getBalance(requestManager, address, blockNumber) {
    return __awaiter(this, void 0, void 0, function*() {
        (0, _web3Validator.validator).validate([
            "address",
            "blockNumberOrTag"
        ], [
            address,
            blockNumber
        ]);
        return requestManager.send({
            method: "eth_getBalance",
            params: [
                address,
                blockNumber
            ]
        });
    });
}
function getStorageAt(requestManager, address, storageSlot, blockNumber) {
    return __awaiter(this, void 0, void 0, function*() {
        (0, _web3Validator.validator).validate([
            "address",
            "hex",
            "blockNumberOrTag"
        ], [
            address,
            storageSlot,
            blockNumber
        ]);
        return requestManager.send({
            method: "eth_getStorageAt",
            params: [
                address,
                storageSlot,
                blockNumber
            ]
        });
    });
}
function getTransactionCount(requestManager, address, blockNumber) {
    return __awaiter(this, void 0, void 0, function*() {
        (0, _web3Validator.validator).validate([
            "address",
            "blockNumberOrTag"
        ], [
            address,
            blockNumber
        ]);
        return requestManager.send({
            method: "eth_getTransactionCount",
            params: [
                address,
                blockNumber
            ]
        });
    });
}
function getBlockTransactionCountByHash(requestManager, blockHash) {
    return __awaiter(this, void 0, void 0, function*() {
        (0, _web3Validator.validator).validate([
            "bytes32"
        ], [
            blockHash
        ]);
        return requestManager.send({
            method: "eth_getBlockTransactionCountByHash",
            params: [
                blockHash
            ]
        });
    });
}
function getBlockTransactionCountByNumber(requestManager, blockNumber) {
    return __awaiter(this, void 0, void 0, function*() {
        (0, _web3Validator.validator).validate([
            "blockNumberOrTag"
        ], [
            blockNumber
        ]);
        return requestManager.send({
            method: "eth_getBlockTransactionCountByNumber",
            params: [
                blockNumber
            ]
        });
    });
}
function getUncleCountByBlockHash(requestManager, blockHash) {
    return __awaiter(this, void 0, void 0, function*() {
        (0, _web3Validator.validator).validate([
            "bytes32"
        ], [
            blockHash
        ]);
        return requestManager.send({
            method: "eth_getUncleCountByBlockHash",
            params: [
                blockHash
            ]
        });
    });
}
function getUncleCountByBlockNumber(requestManager, blockNumber) {
    return __awaiter(this, void 0, void 0, function*() {
        (0, _web3Validator.validator).validate([
            "blockNumberOrTag"
        ], [
            blockNumber
        ]);
        return requestManager.send({
            method: "eth_getUncleCountByBlockNumber",
            params: [
                blockNumber
            ]
        });
    });
}
function getCode(requestManager, address, blockNumber) {
    return __awaiter(this, void 0, void 0, function*() {
        (0, _web3Validator.validator).validate([
            "address",
            "blockNumberOrTag"
        ], [
            address,
            blockNumber
        ]);
        return requestManager.send({
            method: "eth_getCode",
            params: [
                address,
                blockNumber
            ]
        });
    });
}
function sign(requestManager, address, message) {
    return __awaiter(this, void 0, void 0, function*() {
        (0, _web3Validator.validator).validate([
            "address",
            "hex"
        ], [
            address,
            message
        ]);
        return requestManager.send({
            method: "eth_sign",
            params: [
                address,
                message
            ]
        });
    });
}
function signTransaction(requestManager, transaction) {
    return __awaiter(this, void 0, void 0, function*() {
        return requestManager.send({
            method: "eth_signTransaction",
            params: [
                transaction
            ]
        });
    });
}
function sendTransaction(requestManager, transaction) {
    return __awaiter(this, void 0, void 0, function*() {
        return requestManager.send({
            method: "eth_sendTransaction",
            params: [
                transaction
            ]
        });
    });
}
function sendRawTransaction(requestManager, transaction) {
    return __awaiter(this, void 0, void 0, function*() {
        (0, _web3Validator.validator).validate([
            "hex"
        ], [
            transaction
        ]);
        return requestManager.send({
            method: "eth_sendRawTransaction",
            params: [
                transaction
            ]
        });
    });
}
function call(requestManager, transaction, blockNumber) {
    return __awaiter(this, void 0, void 0, function*() {
        // validateTransactionCall(transaction);
        (0, _web3Validator.validator).validate([
            "blockNumberOrTag"
        ], [
            blockNumber
        ]);
        return requestManager.send({
            method: "eth_call",
            params: [
                transaction,
                blockNumber
            ]
        });
    });
}
function estimateGas(requestManager, transaction, blockNumber) {
    return __awaiter(this, void 0, void 0, function*() {
        (0, _web3Validator.validator).validate([
            "blockNumberOrTag"
        ], [
            blockNumber
        ]);
        return requestManager.send({
            method: "eth_estimateGas",
            params: [
                transaction,
                blockNumber
            ]
        });
    });
}
function getBlockByHash(requestManager, blockHash, hydrated) {
    return __awaiter(this, void 0, void 0, function*() {
        (0, _web3Validator.validator).validate([
            "bytes32",
            "bool"
        ], [
            blockHash,
            hydrated
        ]);
        return requestManager.send({
            method: "eth_getBlockByHash",
            params: [
                blockHash,
                hydrated
            ]
        });
    });
}
function getBlockByNumber(requestManager, blockNumber, hydrated) {
    return __awaiter(this, void 0, void 0, function*() {
        (0, _web3Validator.validator).validate([
            "blockNumberOrTag",
            "bool"
        ], [
            blockNumber,
            hydrated
        ]);
        return requestManager.send({
            method: "eth_getBlockByNumber",
            params: [
                blockNumber,
                hydrated
            ]
        });
    });
}
function getTransactionByHash(requestManager, transactionHash) {
    return __awaiter(this, void 0, void 0, function*() {
        (0, _web3Validator.validator).validate([
            "bytes32"
        ], [
            transactionHash
        ]);
        return requestManager.send({
            method: "eth_getTransactionByHash",
            params: [
                transactionHash
            ]
        });
    });
}
function getTransactionByBlockHashAndIndex(requestManager, blockHash, transactionIndex) {
    return __awaiter(this, void 0, void 0, function*() {
        (0, _web3Validator.validator).validate([
            "bytes32",
            "hex"
        ], [
            blockHash,
            transactionIndex
        ]);
        return requestManager.send({
            method: "eth_getTransactionByBlockHashAndIndex",
            params: [
                blockHash,
                transactionIndex
            ]
        });
    });
}
function getTransactionByBlockNumberAndIndex(requestManager, blockNumber, transactionIndex) {
    return __awaiter(this, void 0, void 0, function*() {
        (0, _web3Validator.validator).validate([
            "blockNumberOrTag",
            "hex"
        ], [
            blockNumber,
            transactionIndex
        ]);
        return requestManager.send({
            method: "eth_getTransactionByBlockNumberAndIndex",
            params: [
                blockNumber,
                transactionIndex
            ]
        });
    });
}
function getTransactionReceipt(requestManager, transactionHash) {
    return __awaiter(this, void 0, void 0, function*() {
        (0, _web3Validator.validator).validate([
            "bytes32"
        ], [
            transactionHash
        ]);
        return requestManager.send({
            method: "eth_getTransactionReceipt",
            params: [
                transactionHash
            ]
        });
    });
}
function getUncleByBlockHashAndIndex(requestManager, blockHash, uncleIndex) {
    return __awaiter(this, void 0, void 0, function*() {
        (0, _web3Validator.validator).validate([
            "bytes32",
            "hex"
        ], [
            blockHash,
            uncleIndex
        ]);
        return requestManager.send({
            method: "eth_getUncleByBlockHashAndIndex",
            params: [
                blockHash,
                uncleIndex
            ]
        });
    });
}
function getUncleByBlockNumberAndIndex(requestManager, blockNumber, uncleIndex) {
    return __awaiter(this, void 0, void 0, function*() {
        (0, _web3Validator.validator).validate([
            "blockNumberOrTag",
            "hex"
        ], [
            blockNumber,
            uncleIndex
        ]);
        return requestManager.send({
            method: "eth_getUncleByBlockNumberAndIndex",
            params: [
                blockNumber,
                uncleIndex
            ]
        });
    });
}
function getCompilers(requestManager) {
    return __awaiter(this, void 0, void 0, function*() {
        return requestManager.send({
            method: "eth_getCompilers",
            params: []
        });
    });
}
function compileSolidity(requestManager, code) {
    return __awaiter(this, void 0, void 0, function*() {
        (0, _web3Validator.validator).validate([
            "string"
        ], [
            code
        ]);
        return requestManager.send({
            method: "eth_compileSolidity",
            params: [
                code
            ]
        });
    });
}
function compileLLL(requestManager, code) {
    return __awaiter(this, void 0, void 0, function*() {
        (0, _web3Validator.validator).validate([
            "string"
        ], [
            code
        ]);
        return requestManager.send({
            method: "eth_compileLLL",
            params: [
                code
            ]
        });
    });
}
function compileSerpent(requestManager, code) {
    return __awaiter(this, void 0, void 0, function*() {
        (0, _web3Validator.validator).validate([
            "string"
        ], [
            code
        ]);
        return requestManager.send({
            method: "eth_compileSerpent",
            params: [
                code
            ]
        });
    });
}
function newFilter(requestManager, filter) {
    return __awaiter(this, void 0, void 0, function*() {
        (0, _web3Validator.validator).validate([
            "filter"
        ], [
            filter
        ]);
        return requestManager.send({
            method: "eth_newFilter",
            params: [
                filter
            ]
        });
    });
}
function newBlockFilter(requestManager) {
    return __awaiter(this, void 0, void 0, function*() {
        return requestManager.send({
            method: "eth_newBlockFilter",
            params: []
        });
    });
}
function newPendingTransactionFilter(requestManager) {
    return __awaiter(this, void 0, void 0, function*() {
        return requestManager.send({
            method: "eth_newPendingTransactionFilter",
            params: []
        });
    });
}
function uninstallFilter(requestManager, filterIdentifier) {
    return __awaiter(this, void 0, void 0, function*() {
        (0, _web3Validator.validator).validate([
            "hex"
        ], [
            filterIdentifier
        ]);
        return requestManager.send({
            method: "eth_uninstallFilter",
            params: [
                filterIdentifier
            ]
        });
    });
}
function getFilterChanges(requestManager, filterIdentifier) {
    return __awaiter(this, void 0, void 0, function*() {
        (0, _web3Validator.validator).validate([
            "hex"
        ], [
            filterIdentifier
        ]);
        return requestManager.send({
            method: "eth_getFilterChanges",
            params: [
                filterIdentifier
            ]
        });
    });
}
function getFilterLogs(requestManager, filterIdentifier) {
    return __awaiter(this, void 0, void 0, function*() {
        (0, _web3Validator.validator).validate([
            "hex"
        ], [
            filterIdentifier
        ]);
        return requestManager.send({
            method: "eth_getFilterLogs",
            params: [
                filterIdentifier
            ]
        });
    });
}
function getLogs(requestManager, filter) {
    return __awaiter(this, void 0, void 0, function*() {
        (0, _web3Validator.validator).validate([
            "filter"
        ], [
            filter
        ]);
        return requestManager.send({
            method: "eth_getLogs",
            params: [
                filter
            ]
        });
    });
}
function getWork(requestManager) {
    return __awaiter(this, void 0, void 0, function*() {
        return requestManager.send({
            method: "eth_getWork",
            params: []
        });
    });
}
function submitWork(requestManager, nonce, hash, digest) {
    return __awaiter(this, void 0, void 0, function*() {
        (0, _web3Validator.validator).validate([
            "bytes8",
            "bytes32",
            "bytes32"
        ], [
            nonce,
            hash,
            digest
        ]);
        return requestManager.send({
            method: "eth_submitWork",
            params: [
                nonce,
                hash,
                digest
            ]
        });
    });
}
function submitHashrate(requestManager, hashRate, id) {
    return __awaiter(this, void 0, void 0, function*() {
        (0, _web3Validator.validator).validate([
            "bytes32",
            "bytes32"
        ], [
            hashRate,
            id
        ]);
        return requestManager.send({
            method: "eth_submitHashrate",
            params: [
                hashRate,
                id
            ]
        });
    });
}
function getFeeHistory(requestManager, blockCount, newestBlock, rewardPercentiles) {
    return __awaiter(this, void 0, void 0, function*() {
        (0, _web3Validator.validator).validate([
            "hex",
            "blockNumberOrTag"
        ], [
            blockCount,
            newestBlock
        ]);
        for (const rewardPercentile of rewardPercentiles)(0, _web3Validator.validator).validate([
            "number"
        ], [
            rewardPercentile
        ]);
        return requestManager.send({
            method: "eth_feeHistory",
            params: [
                blockCount,
                newestBlock,
                rewardPercentiles
            ]
        });
    });
}
function getPendingTransactions(requestManager) {
    return __awaiter(this, void 0, void 0, function*() {
        return requestManager.send({
            method: "eth_pendingTransactions",
            params: []
        });
    });
}
function requestAccounts(requestManager) {
    return __awaiter(this, void 0, void 0, function*() {
        return requestManager.send({
            method: "eth_requestAccounts",
            params: []
        });
    });
}
function getChainId(requestManager) {
    return __awaiter(this, void 0, void 0, function*() {
        return requestManager.send({
            method: "eth_chainId",
            params: []
        });
    });
}
function getProof(requestManager, address, storageKeys, blockNumber) {
    return __awaiter(this, void 0, void 0, function*() {
        (0, _web3Validator.validator).validate([
            "address",
            "bytes32[]",
            "blockNumberOrTag"
        ], [
            address,
            storageKeys,
            blockNumber
        ]);
        return requestManager.send({
            method: "eth_getProof",
            params: [
                address,
                storageKeys,
                blockNumber
            ]
        });
    });
}
function getNodeInfo(requestManager) {
    return __awaiter(this, void 0, void 0, function*() {
        return requestManager.send({
            method: "web3_clientVersion",
            params: []
        });
    });
}
function createAccessList(requestManager, transaction, blockNumber) {
    return __awaiter(this, void 0, void 0, function*() {
        (0, _web3Validator.validator).validate([
            "blockNumberOrTag"
        ], [
            blockNumber
        ]);
        return requestManager.send({
            method: "eth_createAccessList",
            params: [
                transaction,
                blockNumber
            ]
        });
    });
}
function signTypedData(requestManager, address, typedData, useLegacy = false) {
    return __awaiter(this, void 0, void 0, function*() {
        // TODO Add validation for typedData
        (0, _web3Validator.validator).validate([
            "address"
        ], [
            address
        ]);
        return requestManager.send({
            method: `eth_signTypedData${useLegacy ? "" : "_v4"}`,
            params: [
                address,
                typedData
            ]
        });
    });
}

},{"web3-validator":"6HK71","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"j3ang":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getId", ()=>getId);
parcelHelpers.export(exports, "getPeerCount", ()=>getPeerCount);
parcelHelpers.export(exports, "isListening", ()=>isListening);
var __awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
function getId(requestManager) {
    return __awaiter(this, void 0, void 0, function*() {
        return requestManager.send({
            method: "net_version",
            params: []
        });
    });
}
function getPeerCount(requestManager) {
    return __awaiter(this, void 0, void 0, function*() {
        return requestManager.send({
            method: "net_peerCount",
            params: []
        });
    });
}
function isListening(requestManager) {
    return __awaiter(this, void 0, void 0, function*() {
        return requestManager.send({
            method: "net_listening",
            params: []
        });
    });
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aAg7h":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getAccounts", ()=>getAccounts);
parcelHelpers.export(exports, "newAccount", ()=>newAccount);
parcelHelpers.export(exports, "unlockAccount", ()=>unlockAccount);
parcelHelpers.export(exports, "lockAccount", ()=>lockAccount);
parcelHelpers.export(exports, "importRawKey", ()=>importRawKey);
parcelHelpers.export(exports, "sendTransaction", ()=>sendTransaction);
parcelHelpers.export(exports, "signTransaction", ()=>signTransaction);
parcelHelpers.export(exports, "sign", ()=>sign);
parcelHelpers.export(exports, "ecRecover", ()=>ecRecover);
var __awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
const getAccounts = (requestManager)=>__awaiter(void 0, void 0, void 0, function*() {
        return requestManager.send({
            method: "personal_listAccounts",
            params: []
        });
    });
const newAccount = (requestManager, password)=>__awaiter(void 0, void 0, void 0, function*() {
        return requestManager.send({
            method: "personal_newAccount",
            params: [
                password
            ]
        });
    });
const unlockAccount = (requestManager, address, password, unlockDuration)=>__awaiter(void 0, void 0, void 0, function*() {
        return requestManager.send({
            method: "personal_unlockAccount",
            params: [
                address,
                password,
                unlockDuration
            ]
        });
    });
const lockAccount = (requestManager, address)=>__awaiter(void 0, void 0, void 0, function*() {
        return requestManager.send({
            method: "personal_lockAccount",
            params: [
                address
            ]
        });
    });
const importRawKey = (requestManager, keyData, passphrase)=>__awaiter(void 0, void 0, void 0, function*() {
        return requestManager.send({
            method: "personal_importRawKey",
            params: [
                keyData,
                passphrase
            ]
        });
    });
const sendTransaction = (requestManager, tx, passphrase)=>__awaiter(void 0, void 0, void 0, function*() {
        return requestManager.send({
            method: "personal_sendTransaction",
            params: [
                tx,
                passphrase
            ]
        });
    });
const signTransaction = (requestManager, tx, passphrase)=>__awaiter(void 0, void 0, void 0, function*() {
        return requestManager.send({
            method: "personal_signTransaction",
            params: [
                tx,
                passphrase
            ]
        });
    });
const sign = (requestManager, data, address, passphrase)=>__awaiter(void 0, void 0, void 0, function*() {
        return requestManager.send({
            method: "personal_sign",
            params: [
                data,
                address,
                passphrase
            ]
        });
    });
const ecRecover = (requestManager, signedData, signature)=>__awaiter(void 0, void 0, void 0, function*() {
        return requestManager.send({
            method: "personal_ecRecover",
            params: [
                signedData,
                signature
            ]
        });
    });

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"44lYD":[function(require,module,exports) {
/*
This file is part of web3.js.

web3.js is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

web3.js is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getProtocolVersion", ()=>getProtocolVersion);
parcelHelpers.export(exports, "isSyncing", ()=>isSyncing);
parcelHelpers.export(exports, "getCoinbase", ()=>getCoinbase);
parcelHelpers.export(exports, "isMining", ()=>isMining);
/**
 * View additional documentations here: {@link Web3Eth.getHashRate}
 * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.
 */ parcelHelpers.export(exports, "getHashRate", ()=>getHashRate);
/**
 * View additional documentations here: {@link Web3Eth.getGasPrice}
 * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.
 */ parcelHelpers.export(exports, "getGasPrice", ()=>getGasPrice);
/**
 * View additional documentations here: {@link Web3Eth.getBlockNumber}
 * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.
 */ parcelHelpers.export(exports, "getBlockNumber", ()=>getBlockNumber);
/**
 * View additional documentations here: {@link Web3Eth.getBalance}
 * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.
 */ parcelHelpers.export(exports, "getBalance", ()=>getBalance);
/**
 * View additional documentations here: {@link Web3Eth.getStorageAt}
 * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.
 */ parcelHelpers.export(exports, "getStorageAt", ()=>getStorageAt);
/**
 * View additional documentations here: {@link Web3Eth.getCode}
 * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.
 */ parcelHelpers.export(exports, "getCode", ()=>getCode);
/**
 * View additional documentations here: {@link Web3Eth.getBlock}
 * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.
 */ parcelHelpers.export(exports, "getBlock", ()=>getBlock);
/**
 * View additional documentations here: {@link Web3Eth.getBlockTransactionCount}
 * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.
 */ parcelHelpers.export(exports, "getBlockTransactionCount", ()=>getBlockTransactionCount);
/**
 * View additional documentations here: {@link Web3Eth.getBlockUncleCount}
 * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.
 */ parcelHelpers.export(exports, "getBlockUncleCount", ()=>getBlockUncleCount);
/**
 * View additional documentations here: {@link Web3Eth.getUncle}
 * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.
 */ parcelHelpers.export(exports, "getUncle", ()=>getUncle);
/**
 * View additional documentations here: {@link Web3Eth.getTransaction}
 * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.
 */ parcelHelpers.export(exports, "getTransaction", ()=>getTransaction);
/**
 * View additional documentations here: {@link Web3Eth.getPendingTransactions}
 * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.
 */ parcelHelpers.export(exports, "getPendingTransactions", ()=>getPendingTransactions);
/**
 * View additional documentations here: {@link Web3Eth.getTransactionFromBlock}
 * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.
 */ parcelHelpers.export(exports, "getTransactionFromBlock", ()=>getTransactionFromBlock);
/**
 * View additional documentations here: {@link Web3Eth.getTransactionReceipt}
 * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.
 */ parcelHelpers.export(exports, "getTransactionReceipt", ()=>getTransactionReceipt);
/**
 * View additional documentations here: {@link Web3Eth.getTransactionCount}
 * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.
 */ parcelHelpers.export(exports, "getTransactionCount", ()=>getTransactionCount);
/**
 * View additional documentations here: {@link Web3Eth.sendTransaction}
 * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.
 */ parcelHelpers.export(exports, "sendTransaction", ()=>sendTransaction);
/**
 * View additional documentations here: {@link Web3Eth.sendSignedTransaction}
 * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.
 */ parcelHelpers.export(exports, "sendSignedTransaction", ()=>sendSignedTransaction);
/**
 * View additional documentations here: {@link Web3Eth.sign}
 * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.
 */ parcelHelpers.export(exports, "sign", ()=>sign);
/**
 * View additional documentations here: {@link Web3Eth.signTransaction}
 * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.
 */ parcelHelpers.export(exports, "signTransaction", ()=>signTransaction);
// TODO Decide what to do with transaction.to
// https://github.com/ChainSafe/web3.js/pull/4525#issuecomment-982330076
/**
 * View additional documentations here: {@link Web3Eth.call}
 * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.
 */ parcelHelpers.export(exports, "call", ()=>call);
// TODO - Investigate whether response is padded as 1.x docs suggest
/**
 * View additional documentations here: {@link Web3Eth.estimateGas}
 * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.
 */ parcelHelpers.export(exports, "estimateGas", ()=>estimateGas);
// TODO - Add input formatting to filter
/**
 * View additional documentations here: {@link Web3Eth.getPastLogs}
 * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.
 */ parcelHelpers.export(exports, "getLogs", ()=>getLogs);
/**
 * View additional documentations here: {@link Web3Eth.getChainId}
 * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.
 */ parcelHelpers.export(exports, "getChainId", ()=>getChainId);
/**
 * View additional documentations here: {@link Web3Eth.getProof}
 * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.
 */ parcelHelpers.export(exports, "getProof", ()=>getProof);
// TODO Throwing an error with Geth, but not Infura
// TODO gasUsedRatio and reward not formatting
/**
 * View additional documentations here: {@link Web3Eth.getFeeHistory}
 * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.
 */ parcelHelpers.export(exports, "getFeeHistory", ()=>getFeeHistory);
/**
 * View additional documentations here: {@link Web3Eth.createAccessList}
 * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.
 */ parcelHelpers.export(exports, "createAccessList", ()=>createAccessList);
/**
 * View additional documentations here: {@link Web3Eth.signTypedData}
 * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.
 */ parcelHelpers.export(exports, "signTypedData", ()=>signTypedData);
// Disabling because returnTypes must be last param to match 1.x params
/* eslint-disable default-param-last */ var _web3Types = require("web3-types");
var _web3Core = require("web3-core");
var _web3Utils = require("web3-utils");
var _web3EthAccounts = require("web3-eth-accounts");
var _web3Validator = require("web3-validator");
var _web3Errors = require("web3-errors");
var _web3RpcMethods = require("web3-rpc-methods");
var _decodeSignedTransactionJs = require("./utils/decode_signed_transaction.js");
var _schemasJs = require("./schemas.js");
// eslint-disable-next-line import/no-cycle
var _transactionBuilderJs = require("./utils/transaction_builder.js");
var _formatTransactionJs = require("./utils/format_transaction.js");
// eslint-disable-next-line import/no-cycle
var _trySendTransactionJs = require("./utils/try_send_transaction.js");
// eslint-disable-next-line import/no-cycle
var _waitForTransactionReceiptJs = require("./utils/wait_for_transaction_receipt.js");
var _constantsJs = require("./constants.js");
// eslint-disable-next-line import/no-cycle
var _sendTxHelperJs = require("./utils/send_tx_helper.js");
var __awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __rest = undefined && undefined.__rest || function(s, e) {
    var t = {};
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") {
        for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
};
const getProtocolVersion = (web3Context)=>__awaiter(void 0, void 0, void 0, function*() {
        return (0, _web3RpcMethods.ethRpcMethods).getProtocolVersion(web3Context.requestManager);
    });
const isSyncing = (web3Context)=>__awaiter(void 0, void 0, void 0, function*() {
        return (0, _web3RpcMethods.ethRpcMethods).getSyncing(web3Context.requestManager);
    });
const getCoinbase = (web3Context)=>__awaiter(void 0, void 0, void 0, function*() {
        return (0, _web3RpcMethods.ethRpcMethods).getCoinbase(web3Context.requestManager);
    });
const isMining = (web3Context)=>__awaiter(void 0, void 0, void 0, function*() {
        return (0, _web3RpcMethods.ethRpcMethods).getMining(web3Context.requestManager);
    });
function getHashRate(web3Context, returnFormat) {
    return __awaiter(this, void 0, void 0, function*() {
        const response = yield (0, _web3RpcMethods.ethRpcMethods).getHashRate(web3Context.requestManager);
        return (0, _web3Utils.format)({
            format: "uint"
        }, response, returnFormat);
    });
}
function getGasPrice(web3Context, returnFormat) {
    return __awaiter(this, void 0, void 0, function*() {
        const response = yield (0, _web3RpcMethods.ethRpcMethods).getGasPrice(web3Context.requestManager);
        return (0, _web3Utils.format)({
            format: "uint"
        }, response, returnFormat);
    });
}
function getBlockNumber(web3Context, returnFormat) {
    return __awaiter(this, void 0, void 0, function*() {
        const response = yield (0, _web3RpcMethods.ethRpcMethods).getBlockNumber(web3Context.requestManager);
        return (0, _web3Utils.format)({
            format: "uint"
        }, response, returnFormat);
    });
}
function getBalance(web3Context, address, blockNumber = web3Context.defaultBlock, returnFormat) {
    return __awaiter(this, void 0, void 0, function*() {
        const blockNumberFormatted = (0, _web3Validator.isBlockTag)(blockNumber) ? blockNumber : (0, _web3Utils.format)({
            format: "uint"
        }, blockNumber, (0, _web3Types.ETH_DATA_FORMAT));
        const response = yield (0, _web3RpcMethods.ethRpcMethods).getBalance(web3Context.requestManager, address, blockNumberFormatted);
        return (0, _web3Utils.format)({
            format: "uint"
        }, response, returnFormat);
    });
}
function getStorageAt(web3Context, address, storageSlot, blockNumber = web3Context.defaultBlock, returnFormat) {
    return __awaiter(this, void 0, void 0, function*() {
        const storageSlotFormatted = (0, _web3Utils.format)({
            format: "uint"
        }, storageSlot, (0, _web3Types.ETH_DATA_FORMAT));
        const blockNumberFormatted = (0, _web3Validator.isBlockTag)(blockNumber) ? blockNumber : (0, _web3Utils.format)({
            format: "uint"
        }, blockNumber, (0, _web3Types.ETH_DATA_FORMAT));
        const response = yield (0, _web3RpcMethods.ethRpcMethods).getStorageAt(web3Context.requestManager, address, storageSlotFormatted, blockNumberFormatted);
        return (0, _web3Utils.format)({
            format: "bytes"
        }, response, returnFormat);
    });
}
function getCode(web3Context, address, blockNumber = web3Context.defaultBlock, returnFormat) {
    return __awaiter(this, void 0, void 0, function*() {
        const blockNumberFormatted = (0, _web3Validator.isBlockTag)(blockNumber) ? blockNumber : (0, _web3Utils.format)({
            format: "uint"
        }, blockNumber, (0, _web3Types.ETH_DATA_FORMAT));
        const response = yield (0, _web3RpcMethods.ethRpcMethods).getCode(web3Context.requestManager, address, blockNumberFormatted);
        return (0, _web3Utils.format)({
            format: "bytes"
        }, response, returnFormat);
    });
}
function getBlock(web3Context, block = web3Context.defaultBlock, hydrated = false, returnFormat) {
    return __awaiter(this, void 0, void 0, function*() {
        let response;
        if ((0, _web3Validator.isBytes)(block)) {
            const blockHashFormatted = (0, _web3Utils.format)({
                format: "bytes32"
            }, block, (0, _web3Types.ETH_DATA_FORMAT));
            response = yield (0, _web3RpcMethods.ethRpcMethods).getBlockByHash(web3Context.requestManager, blockHashFormatted, hydrated);
        } else {
            const blockNumberFormatted = (0, _web3Validator.isBlockTag)(block) ? block : (0, _web3Utils.format)({
                format: "uint"
            }, block, (0, _web3Types.ETH_DATA_FORMAT));
            response = yield (0, _web3RpcMethods.ethRpcMethods).getBlockByNumber(web3Context.requestManager, blockNumberFormatted, hydrated);
        }
        return (0, _web3Utils.format)((0, _schemasJs.blockSchema), response, returnFormat);
    });
}
function getBlockTransactionCount(web3Context, block = web3Context.defaultBlock, returnFormat) {
    return __awaiter(this, void 0, void 0, function*() {
        let response;
        if ((0, _web3Validator.isBytes)(block)) {
            const blockHashFormatted = (0, _web3Utils.format)({
                format: "bytes32"
            }, block, (0, _web3Types.ETH_DATA_FORMAT));
            response = yield (0, _web3RpcMethods.ethRpcMethods).getBlockTransactionCountByHash(web3Context.requestManager, blockHashFormatted);
        } else {
            const blockNumberFormatted = (0, _web3Validator.isBlockTag)(block) ? block : (0, _web3Utils.format)({
                format: "uint"
            }, block, (0, _web3Types.ETH_DATA_FORMAT));
            response = yield (0, _web3RpcMethods.ethRpcMethods).getBlockTransactionCountByNumber(web3Context.requestManager, blockNumberFormatted);
        }
        return (0, _web3Utils.format)({
            format: "uint"
        }, response, returnFormat);
    });
}
function getBlockUncleCount(web3Context, block = web3Context.defaultBlock, returnFormat) {
    return __awaiter(this, void 0, void 0, function*() {
        let response;
        if ((0, _web3Validator.isBytes)(block)) {
            const blockHashFormatted = (0, _web3Utils.format)({
                format: "bytes32"
            }, block, (0, _web3Types.ETH_DATA_FORMAT));
            response = yield (0, _web3RpcMethods.ethRpcMethods).getUncleCountByBlockHash(web3Context.requestManager, blockHashFormatted);
        } else {
            const blockNumberFormatted = (0, _web3Validator.isBlockTag)(block) ? block : (0, _web3Utils.format)({
                format: "uint"
            }, block, (0, _web3Types.ETH_DATA_FORMAT));
            response = yield (0, _web3RpcMethods.ethRpcMethods).getUncleCountByBlockNumber(web3Context.requestManager, blockNumberFormatted);
        }
        return (0, _web3Utils.format)({
            format: "uint"
        }, response, returnFormat);
    });
}
function getUncle(web3Context, block = web3Context.defaultBlock, uncleIndex, returnFormat) {
    return __awaiter(this, void 0, void 0, function*() {
        const uncleIndexFormatted = (0, _web3Utils.format)({
            format: "uint"
        }, uncleIndex, (0, _web3Types.ETH_DATA_FORMAT));
        let response;
        if ((0, _web3Validator.isBytes)(block)) {
            const blockHashFormatted = (0, _web3Utils.format)({
                format: "bytes32"
            }, block, (0, _web3Types.ETH_DATA_FORMAT));
            response = yield (0, _web3RpcMethods.ethRpcMethods).getUncleByBlockHashAndIndex(web3Context.requestManager, blockHashFormatted, uncleIndexFormatted);
        } else {
            const blockNumberFormatted = (0, _web3Validator.isBlockTag)(block) ? block : (0, _web3Utils.format)({
                format: "uint"
            }, block, (0, _web3Types.ETH_DATA_FORMAT));
            response = yield (0, _web3RpcMethods.ethRpcMethods).getUncleByBlockNumberAndIndex(web3Context.requestManager, blockNumberFormatted, uncleIndexFormatted);
        }
        return (0, _web3Utils.format)((0, _schemasJs.blockSchema), response, returnFormat);
    });
}
function getTransaction(web3Context, transactionHash, returnFormat) {
    return __awaiter(this, void 0, void 0, function*() {
        const transactionHashFormatted = (0, _web3Utils.format)({
            format: "bytes32"
        }, transactionHash, (0, _web3Types.DEFAULT_RETURN_FORMAT));
        const response = yield (0, _web3RpcMethods.ethRpcMethods).getTransactionByHash(web3Context.requestManager, transactionHashFormatted);
        return (0, _web3Validator.isNullish)(response) ? response : (0, _formatTransactionJs.formatTransaction)(response, returnFormat, {
            fillInputAndData: true
        });
    });
}
function getPendingTransactions(web3Context, returnFormat) {
    return __awaiter(this, void 0, void 0, function*() {
        const response = yield (0, _web3RpcMethods.ethRpcMethods).getPendingTransactions(web3Context.requestManager);
        return response.map((transaction)=>(0, _formatTransactionJs.formatTransaction)(transaction, returnFormat, {
                fillInputAndData: true
            }));
    });
}
function getTransactionFromBlock(web3Context, block = web3Context.defaultBlock, transactionIndex, returnFormat) {
    return __awaiter(this, void 0, void 0, function*() {
        const transactionIndexFormatted = (0, _web3Utils.format)({
            format: "uint"
        }, transactionIndex, (0, _web3Types.ETH_DATA_FORMAT));
        let response;
        if ((0, _web3Validator.isBytes)(block)) {
            const blockHashFormatted = (0, _web3Utils.format)({
                format: "bytes32"
            }, block, (0, _web3Types.ETH_DATA_FORMAT));
            response = yield (0, _web3RpcMethods.ethRpcMethods).getTransactionByBlockHashAndIndex(web3Context.requestManager, blockHashFormatted, transactionIndexFormatted);
        } else {
            const blockNumberFormatted = (0, _web3Validator.isBlockTag)(block) ? block : (0, _web3Utils.format)({
                format: "uint"
            }, block, (0, _web3Types.ETH_DATA_FORMAT));
            response = yield (0, _web3RpcMethods.ethRpcMethods).getTransactionByBlockNumberAndIndex(web3Context.requestManager, blockNumberFormatted, transactionIndexFormatted);
        }
        return (0, _web3Validator.isNullish)(response) ? response : (0, _formatTransactionJs.formatTransaction)(response, returnFormat, {
            fillInputAndData: true
        });
    });
}
function getTransactionReceipt(web3Context, transactionHash, returnFormat) {
    return __awaiter(this, void 0, void 0, function*() {
        const transactionHashFormatted = (0, _web3Utils.format)({
            format: "bytes32"
        }, transactionHash, (0, _web3Types.DEFAULT_RETURN_FORMAT));
        const response = yield (0, _web3RpcMethods.ethRpcMethods).getTransactionReceipt(web3Context.requestManager, transactionHashFormatted);
        return (0, _web3Validator.isNullish)(response) ? response : (0, _web3Utils.format)((0, _schemasJs.transactionReceiptSchema), response, returnFormat);
    });
}
function getTransactionCount(web3Context, address, blockNumber = web3Context.defaultBlock, returnFormat) {
    return __awaiter(this, void 0, void 0, function*() {
        const blockNumberFormatted = (0, _web3Validator.isBlockTag)(blockNumber) ? blockNumber : (0, _web3Utils.format)({
            format: "uint"
        }, blockNumber, (0, _web3Types.ETH_DATA_FORMAT));
        const response = yield (0, _web3RpcMethods.ethRpcMethods).getTransactionCount(web3Context.requestManager, address, blockNumberFormatted);
        return (0, _web3Utils.format)({
            format: "uint"
        }, response, returnFormat);
    });
}
function sendTransaction(web3Context, transaction, returnFormat, options = {
    checkRevertBeforeSending: true
}) {
    const promiEvent = new (0, _web3Core.Web3PromiEvent)((resolve, reject)=>{
        setImmediate(()=>{
            (()=>__awaiter(this, void 0, void 0, function*() {
                    const sendTxHelper = new (0, _sendTxHelperJs.SendTxHelper)({
                        web3Context,
                        promiEvent,
                        options,
                        returnFormat
                    });
                    let transactionFormatted = (0, _formatTransactionJs.formatTransaction)(Object.assign(Object.assign({}, transaction), {
                        from: (0, _transactionBuilderJs.getTransactionFromOrToAttr)("from", web3Context, transaction),
                        to: (0, _transactionBuilderJs.getTransactionFromOrToAttr)("to", web3Context, transaction)
                    }), (0, _web3Types.ETH_DATA_FORMAT));
                    try {
                        transactionFormatted = yield sendTxHelper.populateGasPrice({
                            transaction,
                            transactionFormatted
                        });
                        yield sendTxHelper.checkRevertBeforeSending(transactionFormatted);
                        sendTxHelper.emitSending(transactionFormatted);
                        let wallet;
                        if (web3Context.wallet && !(0, _web3Validator.isNullish)(transactionFormatted.from)) wallet = web3Context.wallet.get(transactionFormatted.from);
                        const transactionHash = yield sendTxHelper.signAndSend({
                            wallet,
                            tx: transactionFormatted
                        });
                        const transactionHashFormatted = (0, _web3Utils.format)({
                            format: "bytes32"
                        }, transactionHash, returnFormat);
                        sendTxHelper.emitSent(transactionFormatted);
                        sendTxHelper.emitTransactionHash(transactionHashFormatted);
                        const transactionReceipt = yield (0, _waitForTransactionReceiptJs.waitForTransactionReceipt)(web3Context, transactionHash, returnFormat);
                        const transactionReceiptFormatted = sendTxHelper.getReceiptWithEvents((0, _web3Utils.format)((0, _schemasJs.transactionReceiptSchema), transactionReceipt, returnFormat));
                        sendTxHelper.emitReceipt(transactionReceiptFormatted);
                        resolve((yield sendTxHelper.handleResolve({
                            receipt: transactionReceiptFormatted,
                            tx: transactionFormatted
                        })));
                        sendTxHelper.emitConfirmation({
                            receipt: transactionReceiptFormatted,
                            transactionHash
                        });
                    } catch (error) {
                        reject((yield sendTxHelper.handleError({
                            error,
                            tx: transactionFormatted
                        })));
                    }
                }))();
        });
    });
    return promiEvent;
}
function sendSignedTransaction(web3Context, signedTransaction, returnFormat, options = {
    checkRevertBeforeSending: true
}) {
    // TODO - Promise returned in function argument where a void return was expected
    // eslint-disable-next-line @typescript-eslint/no-misused-promises
    const promiEvent = new (0, _web3Core.Web3PromiEvent)((resolve, reject)=>{
        setImmediate(()=>{
            (()=>__awaiter(this, void 0, void 0, function*() {
                    const sendTxHelper = new (0, _sendTxHelperJs.SendTxHelper)({
                        web3Context,
                        promiEvent,
                        options,
                        returnFormat
                    });
                    // Formatting signedTransaction to be send to RPC endpoint
                    const signedTransactionFormattedHex = (0, _web3Utils.format)({
                        format: "bytes"
                    }, signedTransaction, (0, _web3Types.ETH_DATA_FORMAT));
                    const unSerializedTransaction = (0, _web3EthAccounts.TransactionFactory).fromSerializedData((0, _web3Utils.bytesToUint8Array)((0, _web3Utils.hexToBytes)(signedTransactionFormattedHex)));
                    const unSerializedTransactionWithFrom = Object.assign(Object.assign({}, unSerializedTransaction.toJSON()), {
                        // Some providers will default `from` to address(0) causing the error
                        // reported from `eth_call` to not be the reason the user's tx failed
                        // e.g. `eth_call` will return an Out of Gas error for a failed
                        // smart contract execution contract, because the sender, address(0),
                        // has no balance to pay for the gas of the transaction execution
                        from: unSerializedTransaction.getSenderAddress().toString()
                    });
                    try {
                        const { v, r, s } = unSerializedTransactionWithFrom, txWithoutSigParams = __rest(unSerializedTransactionWithFrom, [
                            "v",
                            "r",
                            "s"
                        ]);
                        yield sendTxHelper.checkRevertBeforeSending(txWithoutSigParams);
                        sendTxHelper.emitSending(signedTransactionFormattedHex);
                        const transactionHash = yield (0, _trySendTransactionJs.trySendTransaction)(web3Context, ()=>__awaiter(this, void 0, void 0, function*() {
                                return (0, _web3RpcMethods.ethRpcMethods).sendRawTransaction(web3Context.requestManager, signedTransactionFormattedHex);
                            }));
                        sendTxHelper.emitSent(signedTransactionFormattedHex);
                        const transactionHashFormatted = (0, _web3Utils.format)({
                            format: "bytes32"
                        }, transactionHash, returnFormat);
                        sendTxHelper.emitTransactionHash(transactionHashFormatted);
                        const transactionReceipt = yield (0, _waitForTransactionReceiptJs.waitForTransactionReceipt)(web3Context, transactionHash, returnFormat);
                        const transactionReceiptFormatted = sendTxHelper.getReceiptWithEvents((0, _web3Utils.format)((0, _schemasJs.transactionReceiptSchema), transactionReceipt, returnFormat));
                        sendTxHelper.emitReceipt(transactionReceiptFormatted);
                        resolve((yield sendTxHelper.handleResolve({
                            receipt: transactionReceiptFormatted,
                            tx: unSerializedTransactionWithFrom
                        })));
                        sendTxHelper.emitConfirmation({
                            receipt: transactionReceiptFormatted,
                            transactionHash
                        });
                    } catch (error) {
                        reject((yield sendTxHelper.handleError({
                            error,
                            tx: unSerializedTransactionWithFrom
                        })));
                    }
                }))();
        });
    });
    return promiEvent;
}
function sign(web3Context, message, addressOrIndex, returnFormat) {
    var _a;
    return __awaiter(this, void 0, void 0, function*() {
        const messageFormatted = (0, _web3Utils.format)({
            format: "bytes"
        }, message, (0, _web3Types.DEFAULT_RETURN_FORMAT));
        if ((_a = web3Context.wallet) === null || _a === void 0 ? void 0 : _a.get(addressOrIndex)) {
            const wallet = web3Context.wallet.get(addressOrIndex);
            const signed = wallet.sign(messageFormatted);
            return (0, _web3Utils.format)((0, _schemasJs.SignatureObjectSchema), signed, returnFormat);
        }
        if (typeof addressOrIndex === "number") throw new (0, _web3Errors.SignatureError)(message, 'RPC method "eth_sign" does not support index signatures');
        const response = yield (0, _web3RpcMethods.ethRpcMethods).sign(web3Context.requestManager, addressOrIndex, messageFormatted);
        return (0, _web3Utils.format)({
            format: "bytes"
        }, response, returnFormat);
    });
}
function signTransaction(web3Context, transaction, returnFormat) {
    return __awaiter(this, void 0, void 0, function*() {
        const response = yield (0, _web3RpcMethods.ethRpcMethods).signTransaction(web3Context.requestManager, (0, _formatTransactionJs.formatTransaction)(transaction, (0, _web3Types.ETH_DATA_FORMAT)));
        // Some clients only return the encoded signed transaction (e.g. Ganache)
        // while clients such as Geth return the desired SignedTransactionInfoAPI object
        return (0, _web3Validator.isString)(response) ? (0, _decodeSignedTransactionJs.decodeSignedTransaction)(response, returnFormat, {
            fillInputAndData: true
        }) : {
            raw: (0, _web3Utils.format)({
                format: "bytes"
            }, response.raw, returnFormat),
            tx: (0, _formatTransactionJs.formatTransaction)(response.tx, returnFormat, {
                fillInputAndData: true
            })
        };
    });
}
function call(web3Context, transaction, blockNumber = web3Context.defaultBlock, returnFormat) {
    return __awaiter(this, void 0, void 0, function*() {
        const blockNumberFormatted = (0, _web3Validator.isBlockTag)(blockNumber) ? blockNumber : (0, _web3Utils.format)({
            format: "uint"
        }, blockNumber, (0, _web3Types.ETH_DATA_FORMAT));
        const response = yield (0, _web3RpcMethods.ethRpcMethods).call(web3Context.requestManager, (0, _formatTransactionJs.formatTransaction)(transaction, (0, _web3Types.ETH_DATA_FORMAT)), blockNumberFormatted);
        return (0, _web3Utils.format)({
            format: "bytes"
        }, response, returnFormat);
    });
}
function estimateGas(web3Context, transaction, blockNumber = web3Context.defaultBlock, returnFormat) {
    return __awaiter(this, void 0, void 0, function*() {
        const transactionFormatted = (0, _formatTransactionJs.formatTransaction)(transaction, (0, _web3Types.ETH_DATA_FORMAT));
        const blockNumberFormatted = (0, _web3Validator.isBlockTag)(blockNumber) ? blockNumber : (0, _web3Utils.format)({
            format: "uint"
        }, blockNumber, (0, _web3Types.ETH_DATA_FORMAT));
        const response = yield (0, _web3RpcMethods.ethRpcMethods).estimateGas(web3Context.requestManager, transactionFormatted, blockNumberFormatted);
        return (0, _web3Utils.format)({
            format: "uint"
        }, response, returnFormat);
    });
}
function getLogs(web3Context, filter, returnFormat) {
    return __awaiter(this, void 0, void 0, function*() {
        // format type bigint or number toBlock and fromBlock to hexstring.
        let { toBlock, fromBlock } = filter;
        if (!(0, _web3Validator.isNullish)(toBlock)) {
            if (typeof toBlock === "number" || typeof toBlock === "bigint") toBlock = (0, _web3Utils.numberToHex)(toBlock);
        }
        if (!(0, _web3Validator.isNullish)(fromBlock)) {
            if (typeof fromBlock === "number" || typeof fromBlock === "bigint") fromBlock = (0, _web3Utils.numberToHex)(fromBlock);
        }
        const formattedFilter = Object.assign(Object.assign({}, filter), {
            fromBlock,
            toBlock
        });
        const response = yield (0, _web3RpcMethods.ethRpcMethods).getLogs(web3Context.requestManager, formattedFilter);
        const result = response.map((res)=>{
            if (typeof res === "string") return res;
            return (0, _web3Utils.format)((0, _schemasJs.logSchema), res, returnFormat);
        });
        return result;
    });
}
function getChainId(web3Context, returnFormat) {
    return __awaiter(this, void 0, void 0, function*() {
        const response = yield (0, _web3RpcMethods.ethRpcMethods).getChainId(web3Context.requestManager);
        return (0, _web3Utils.format)({
            format: "uint"
        }, // Response is number in hex formatted string
        response, returnFormat);
    });
}
function getProof(web3Context, address, storageKeys, blockNumber = web3Context.defaultBlock, returnFormat) {
    return __awaiter(this, void 0, void 0, function*() {
        const storageKeysFormatted = storageKeys.map((storageKey)=>(0, _web3Utils.format)({
                format: "bytes"
            }, storageKey, (0, _web3Types.ETH_DATA_FORMAT)));
        const blockNumberFormatted = (0, _web3Validator.isBlockTag)(blockNumber) ? blockNumber : (0, _web3Utils.format)({
            format: "uint"
        }, blockNumber, (0, _web3Types.ETH_DATA_FORMAT));
        const response = yield (0, _web3RpcMethods.ethRpcMethods).getProof(web3Context.requestManager, address, storageKeysFormatted, blockNumberFormatted);
        return (0, _web3Utils.format)((0, _schemasJs.accountSchema), response, returnFormat);
    });
}
function getFeeHistory(web3Context, blockCount, newestBlock = web3Context.defaultBlock, rewardPercentiles, returnFormat) {
    return __awaiter(this, void 0, void 0, function*() {
        const blockCountFormatted = (0, _web3Utils.format)({
            format: "uint"
        }, blockCount, (0, _web3Types.ETH_DATA_FORMAT));
        const newestBlockFormatted = (0, _web3Validator.isBlockTag)(newestBlock) ? newestBlock : (0, _web3Utils.format)({
            format: "uint"
        }, newestBlock, (0, _web3Types.ETH_DATA_FORMAT));
        const rewardPercentilesFormatted = (0, _web3Utils.format)({
            type: "array",
            items: {
                format: "uint"
            }
        }, rewardPercentiles, (0, _constantsJs.NUMBER_DATA_FORMAT));
        const response = yield (0, _web3RpcMethods.ethRpcMethods).getFeeHistory(web3Context.requestManager, blockCountFormatted, newestBlockFormatted, rewardPercentilesFormatted);
        return (0, _web3Utils.format)((0, _schemasJs.feeHistorySchema), response, returnFormat);
    });
}
function createAccessList(web3Context, transaction, blockNumber = web3Context.defaultBlock, returnFormat) {
    return __awaiter(this, void 0, void 0, function*() {
        const blockNumberFormatted = (0, _web3Validator.isBlockTag)(blockNumber) ? blockNumber : (0, _web3Utils.format)({
            format: "uint"
        }, blockNumber, (0, _web3Types.ETH_DATA_FORMAT));
        const response = yield (0, _web3RpcMethods.ethRpcMethods).createAccessList(web3Context.requestManager, (0, _formatTransactionJs.formatTransaction)(transaction, (0, _web3Types.ETH_DATA_FORMAT)), blockNumberFormatted);
        return (0, _web3Utils.format)((0, _schemasJs.accessListResultSchema), response, returnFormat);
    });
}
function signTypedData(web3Context, address, typedData, useLegacy, returnFormat) {
    return __awaiter(this, void 0, void 0, function*() {
        const response = yield (0, _web3RpcMethods.ethRpcMethods).signTypedData(web3Context.requestManager, address, typedData, useLegacy);
        return (0, _web3Utils.format)({
            format: "bytes"
        }, response, returnFormat);
    });
}

},{"web3-types":"g7Ztk","web3-core":"4Uu6H","web3-utils":"8WsWI","web3-eth-accounts":"4gQAz","web3-validator":"6HK71","web3-errors":"jDvsn","web3-rpc-methods":"eT6LI","./utils/decode_signed_transaction.js":"gss6u","./schemas.js":"bf11F","./utils/transaction_builder.js":"brU2r","./utils/format_transaction.js":"eLHOr","./utils/try_send_transaction.js":"d8UUe","./utils/wait_for_transaction_receipt.js":"hZf29","./constants.js":"453pI","./utils/send_tx_helper.js":"7HE9a","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gss6u":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Decodes an [RLP](https://ethereum.org/en/developers/docs/data-structures-and-encoding/rlp/#top) encoded transaction.
 *
 * @param encodedSignedTransaction The RLP encoded transaction.
 * @param returnFormat ({@link DataFormat} Specifies how the return data should be formatted.
 * @returns {@link SignedTransactionInfoAPI}, an object containing the RLP encoded signed transaction (accessed via the `raw` property) and the signed transaction object (accessed via the `tx` property).
 */ parcelHelpers.export(exports, "decodeSignedTransaction", ()=>decodeSignedTransaction);
var _web3Utils = require("web3-utils");
var _web3EthAccounts = require("web3-eth-accounts");
var _detectTransactionTypeJs = require("./detect_transaction_type.js");
var _formatTransactionJs = require("./format_transaction.js");
function decodeSignedTransaction(encodedSignedTransaction, returnFormat, options = {
    fillInputAndData: false
}) {
    return {
        raw: (0, _web3Utils.format)({
            format: "bytes"
        }, encodedSignedTransaction, returnFormat),
        tx: (0, _formatTransactionJs.formatTransaction)(Object.assign(Object.assign({}, (0, _web3EthAccounts.TransactionFactory).fromSerializedData((0, _web3Utils.hexToBytes)(encodedSignedTransaction)).toJSON()), {
            hash: (0, _web3Utils.bytesToHex)((0, _web3Utils.keccak256)((0, _web3Utils.hexToBytes)(encodedSignedTransaction))),
            type: (0, _detectTransactionTypeJs.detectRawTransactionType)((0, _web3Utils.hexToBytes)(encodedSignedTransaction))
        }), returnFormat, {
            fillInputAndData: options.fillInputAndData
        })
    };
}

},{"web3-utils":"8WsWI","web3-eth-accounts":"4gQAz","./detect_transaction_type.js":"fmmhe","./format_transaction.js":"eLHOr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fmmhe":[function(require,module,exports) {
/*
This file is part of web3.js.

web3.js is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

web3.js is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "defaultTransactionTypeParser", ()=>defaultTransactionTypeParser);
parcelHelpers.export(exports, "detectTransactionType", ()=>detectTransactionType);
parcelHelpers.export(exports, "detectRawTransactionType", ()=>detectRawTransactionType);
var _web3Utils = require("web3-utils");
var _web3Types = require("web3-types");
var _web3Validator = require("web3-validator");
var _web3Errors = require("web3-errors");
// undefined is treated as null for JSON schema validator
const transactionType0x0Schema = {
    type: "object",
    properties: {
        accessList: {
            type: "null"
        },
        maxFeePerGas: {
            type: "null"
        },
        maxPriorityFeePerGas: {
            type: "null"
        }
    }
};
const transactionType0x1Schema = {
    type: "object",
    properties: {
        maxFeePerGas: {
            type: "null"
        },
        maxPriorityFeePerGas: {
            type: "null"
        }
    }
};
const transactionType0x2Schema = {
    type: "object",
    properties: {
        gasPrice: {
            type: "null"
        }
    }
};
const validateTxTypeAndHandleErrors = (txSchema, tx, txType)=>{
    try {
        (0, _web3Validator.validator).validateJSONSchema(txSchema, tx);
    } catch (error) {
        if (error instanceof (0, _web3Validator.Web3ValidatorError)) // Erroneously reported error
        // eslint-disable-next-line @typescript-eslint/no-unsafe-call
        throw new (0, _web3Errors.InvalidPropertiesForTransactionTypeError)(error.errors, txType);
        throw error;
    }
};
const defaultTransactionTypeParser = (transaction)=>{
    var _a, _b;
    const tx = transaction;
    if (!(0, _web3Validator.isNullish)(tx.type)) {
        let txSchema;
        switch(tx.type){
            case "0x0":
                txSchema = transactionType0x0Schema;
                break;
            case "0x1":
                txSchema = transactionType0x1Schema;
                break;
            case "0x2":
                txSchema = transactionType0x2Schema;
                break;
            default:
                return (0, _web3Utils.format)({
                    format: "uint"
                }, tx.type, (0, _web3Types.ETH_DATA_FORMAT));
        }
        validateTxTypeAndHandleErrors(txSchema, tx, tx.type);
        return (0, _web3Utils.format)({
            format: "uint"
        }, tx.type, (0, _web3Types.ETH_DATA_FORMAT));
    }
    if (!(0, _web3Validator.isNullish)(tx.maxFeePerGas) || !(0, _web3Validator.isNullish)(tx.maxPriorityFeePerGas)) {
        validateTxTypeAndHandleErrors(transactionType0x2Schema, tx, "0x2");
        return "0x2";
    }
    if (!(0, _web3Validator.isNullish)(tx.accessList)) {
        validateTxTypeAndHandleErrors(transactionType0x1Schema, tx, "0x1");
        return "0x1";
    }
    const givenHardfork = (_a = tx.hardfork) !== null && _a !== void 0 ? _a : (_b = tx.common) === null || _b === void 0 ? void 0 : _b.hardfork;
    if (!(0, _web3Validator.isNullish)(givenHardfork)) {
        const hardforkIndex = Object.keys((0, _web3Types.HardforksOrdered)).indexOf(givenHardfork);
        // givenHardfork is London or later, so EIP-2718 is supported
        if (hardforkIndex >= Object.keys((0, _web3Types.HardforksOrdered)).indexOf("london")) return !(0, _web3Validator.isNullish)(tx.gasPrice) ? "0x0" : "0x2";
        // givenHardfork is Berlin, tx.accessList is undefined, assume type is 0x0
        if (hardforkIndex === Object.keys((0, _web3Types.HardforksOrdered)).indexOf("berlin")) return "0x0";
    }
    // gasprice is defined
    if (!(0, _web3Validator.isNullish)(tx.gasPrice)) {
        validateTxTypeAndHandleErrors(transactionType0x0Schema, tx, "0x0");
        return "0x0";
    }
    // no transaction type can be inferred from properties, use default transaction type
    return undefined;
};
const detectTransactionType = (transaction, web3Context)=>{
    var _a;
    return ((_a = web3Context === null || web3Context === void 0 ? void 0 : web3Context.transactionTypeParser) !== null && _a !== void 0 ? _a : defaultTransactionTypeParser)(transaction);
};
const detectRawTransactionType = (transaction)=>transaction[0] > 0x7f ? "0x0" : (0, _web3Utils.toHex)(transaction[0]);

},{"web3-utils":"8WsWI","web3-types":"g7Ztk","web3-validator":"6HK71","web3-errors":"jDvsn","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eLHOr":[function(require,module,exports) {
/*
This file is part of web3.js.

web3.js is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

web3.js is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "formatTransaction", ()=>formatTransaction);
var _web3Types = require("web3-types");
var _web3Validator = require("web3-validator");
var _web3Utils = require("web3-utils");
var _web3Errors = require("web3-errors");
var _schemasJs = require("../schemas.js");
function formatTransaction(transaction, returnFormat = (0, _web3Types.DEFAULT_RETURN_FORMAT), options = {
    transactionSchema: (0, _schemasJs.transactionInfoSchema),
    fillInputAndData: false
}) {
    var _a, _b;
    let formattedTransaction = (0, _web3Utils.mergeDeep)({}, transaction);
    if (!(0, _web3Validator.isNullish)(transaction === null || transaction === void 0 ? void 0 : transaction.common)) {
        formattedTransaction.common = Object.assign({}, transaction.common);
        if (!(0, _web3Validator.isNullish)((_a = transaction.common) === null || _a === void 0 ? void 0 : _a.customChain)) formattedTransaction.common.customChain = Object.assign({}, transaction.common.customChain);
    }
    formattedTransaction = (0, _web3Utils.format)((_b = options.transactionSchema) !== null && _b !== void 0 ? _b : (0, _schemasJs.transactionInfoSchema), formattedTransaction, returnFormat);
    if (!(0, _web3Validator.isNullish)(formattedTransaction.data) && !(0, _web3Validator.isNullish)(formattedTransaction.input) && // Converting toHex is accounting for data and input being Uint8Arrays
    // since comparing Uint8Array is not as straightforward as comparing strings
    (0, _web3Utils.toHex)(formattedTransaction.data) !== (0, _web3Utils.toHex)(formattedTransaction.input)) throw new (0, _web3Errors.TransactionDataAndInputError)({
        data: (0, _web3Utils.bytesToHex)(formattedTransaction.data),
        input: (0, _web3Utils.bytesToHex)(formattedTransaction.input)
    });
    if (options.fillInputAndData) {
        if (!(0, _web3Validator.isNullish)(formattedTransaction.data)) formattedTransaction.input = formattedTransaction.data;
        else if (!(0, _web3Validator.isNullish)(formattedTransaction.input)) formattedTransaction.data = formattedTransaction.input;
    }
    if (!(0, _web3Validator.isNullish)(formattedTransaction.gasLimit)) {
        formattedTransaction.gas = formattedTransaction.gasLimit;
        delete formattedTransaction.gasLimit;
    }
    return formattedTransaction;
}

},{"web3-types":"g7Ztk","web3-validator":"6HK71","web3-utils":"8WsWI","web3-errors":"jDvsn","../schemas.js":"bf11F","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bf11F":[function(require,module,exports) {
/*
This file is part of web3.js.

web3.js is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

web3.js is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "accessListItemSchema", ()=>accessListItemSchema);
parcelHelpers.export(exports, "accessListSchema", ()=>accessListSchema);
parcelHelpers.export(exports, "accessListResultSchema", ()=>accessListResultSchema);
parcelHelpers.export(exports, "chainSchema", ()=>chainSchema);
parcelHelpers.export(exports, "hardforkSchema", ()=>hardforkSchema);
parcelHelpers.export(exports, "customChainSchema", ()=>customChainSchema);
parcelHelpers.export(exports, "transactionSchema", ()=>transactionSchema);
parcelHelpers.export(exports, "transactionInfoSchema", ()=>transactionInfoSchema);
parcelHelpers.export(exports, "blockSchema", ()=>blockSchema);
parcelHelpers.export(exports, "withdrawalsSchema", ()=>withdrawalsSchema);
parcelHelpers.export(exports, "blockHeaderSchema", ()=>blockHeaderSchema);
parcelHelpers.export(exports, "logSchema", ()=>logSchema);
parcelHelpers.export(exports, "syncSchema", ()=>syncSchema);
parcelHelpers.export(exports, "transactionReceiptSchema", ()=>transactionReceiptSchema);
parcelHelpers.export(exports, "SignatureObjectSchema", ()=>SignatureObjectSchema);
parcelHelpers.export(exports, "feeHistorySchema", ()=>feeHistorySchema);
parcelHelpers.export(exports, "storageProofSchema", ()=>storageProofSchema);
parcelHelpers.export(exports, "accountSchema", ()=>accountSchema);
const accessListItemSchema = {
    type: "object",
    properties: {
        address: {
            format: "address"
        },
        storageKeys: {
            type: "array",
            items: {
                format: "bytes32"
            }
        }
    }
};
const accessListSchema = {
    type: "array",
    items: Object.assign({}, accessListItemSchema)
};
const accessListResultSchema = {
    type: "object",
    properties: {
        accessList: Object.assign({}, accessListSchema),
        gasUsed: {
            type: "string"
        }
    }
};
const chainSchema = {
    type: "string",
    enum: [
        "goerli",
        "kovan",
        "mainnet",
        "rinkeby",
        "ropsten",
        "sepolia"
    ]
};
const hardforkSchema = {
    type: "string",
    enum: [
        "arrowGlacier",
        "berlin",
        "byzantium",
        "chainstart",
        "constantinople",
        "dao",
        "homestead",
        "istanbul",
        "london",
        "merge",
        "muirGlacier",
        "petersburg",
        "shanghai",
        "spuriousDragon",
        "tangerineWhistle"
    ]
};
const customChainSchema = {
    type: "object",
    properties: {
        name: {
            format: "string"
        },
        networkId: {
            format: "uint"
        },
        chainId: {
            format: "uint"
        }
    }
};
const transactionSchema = {
    type: "object",
    properties: {
        from: {
            format: "address"
        },
        to: {
            oneOf: [
                {
                    format: "address"
                },
                {
                    type: "null"
                }
            ]
        },
        value: {
            format: "uint"
        },
        gas: {
            format: "uint"
        },
        gasPrice: {
            format: "uint"
        },
        effectiveGasPrice: {
            format: "uint"
        },
        type: {
            format: "uint"
        },
        maxFeePerGas: {
            format: "uint"
        },
        maxPriorityFeePerGas: {
            format: "uint"
        },
        accessList: Object.assign({}, accessListSchema),
        data: {
            format: "bytes"
        },
        input: {
            format: "bytes"
        },
        nonce: {
            format: "uint"
        },
        chain: Object.assign({}, chainSchema),
        hardfork: Object.assign({}, hardforkSchema),
        chainId: {
            format: "uint"
        },
        networkId: {
            format: "uint"
        },
        common: {
            type: "object",
            properties: {
                customChain: Object.assign({}, customChainSchema),
                baseChain: Object.assign({}, chainSchema),
                hardfork: Object.assign({}, hardforkSchema)
            }
        },
        gasLimit: {
            format: "uint"
        },
        v: {
            format: "uint"
        },
        r: {
            format: "bytes32"
        },
        s: {
            format: "bytes32"
        }
    }
};
const transactionInfoSchema = {
    type: "object",
    properties: Object.assign(Object.assign({}, transactionSchema.properties), {
        blockHash: {
            format: "bytes32"
        },
        blockNumber: {
            format: "uint"
        },
        hash: {
            format: "bytes32"
        },
        transactionIndex: {
            format: "uint"
        },
        from: {
            format: "address"
        },
        to: {
            oneOf: [
                {
                    format: "address"
                },
                {
                    type: "null"
                }
            ]
        },
        value: {
            format: "uint"
        },
        gas: {
            format: "uint"
        },
        gasPrice: {
            format: "uint"
        },
        effectiveGasPrice: {
            format: "uint"
        },
        type: {
            format: "uint"
        },
        maxFeePerGas: {
            format: "uint"
        },
        maxPriorityFeePerGas: {
            format: "uint"
        },
        accessList: Object.assign({}, accessListSchema),
        data: {
            format: "bytes"
        },
        input: {
            format: "bytes"
        },
        nonce: {
            format: "uint"
        },
        gasLimit: {
            format: "uint"
        },
        v: {
            format: "uint"
        },
        r: {
            format: "bytes32"
        },
        s: {
            format: "bytes32"
        }
    })
};
const blockSchema = {
    type: "object",
    properties: {
        parentHash: {
            format: "bytes32"
        },
        sha3Uncles: {
            format: "bytes32"
        },
        miner: {
            format: "bytes"
        },
        stateRoot: {
            format: "bytes32"
        },
        transactionsRoot: {
            format: "bytes32"
        },
        receiptsRoot: {
            format: "bytes32"
        },
        logsBloom: {
            format: "bytes256"
        },
        difficulty: {
            format: "uint"
        },
        number: {
            format: "uint"
        },
        gasLimit: {
            format: "uint"
        },
        gasUsed: {
            format: "uint"
        },
        timestamp: {
            format: "uint"
        },
        extraData: {
            format: "bytes"
        },
        mixHash: {
            format: "bytes32"
        },
        nonce: {
            format: "uint"
        },
        totalDifficulty: {
            format: "uint"
        },
        baseFeePerGas: {
            format: "uint"
        },
        size: {
            format: "uint"
        },
        transactions: {
            oneOf: [
                {
                    type: "array",
                    items: Object.assign({}, transactionInfoSchema)
                },
                {
                    type: "array",
                    items: {
                        format: "bytes32"
                    }
                }
            ]
        },
        uncles: {
            type: "array",
            items: {
                format: "bytes32"
            }
        },
        hash: {
            format: "bytes32"
        }
    }
};
const withdrawalsSchema = {
    type: "object",
    properties: {
        index: {
            format: "uint"
        },
        validatorIndex: {
            format: "uint"
        },
        address: {
            format: "address"
        },
        amount: {
            format: "uint"
        }
    }
};
const blockHeaderSchema = {
    type: "object",
    properties: {
        author: {
            format: "bytes32"
        },
        hash: {
            format: "bytes32"
        },
        parentHash: {
            format: "bytes32"
        },
        receiptsRoot: {
            format: "bytes32"
        },
        miner: {
            format: "bytes"
        },
        stateRoot: {
            format: "bytes32"
        },
        transactionsRoot: {
            format: "bytes32"
        },
        withdrawalsRoot: {
            format: "bytes32"
        },
        logsBloom: {
            format: "bytes256"
        },
        difficulty: {
            format: "uint"
        },
        totalDifficulty: {
            format: "uint"
        },
        number: {
            format: "uint"
        },
        gasLimit: {
            format: "uint"
        },
        gasUsed: {
            format: "uint"
        },
        timestamp: {
            format: "uint"
        },
        extraData: {
            format: "bytes"
        },
        nonce: {
            format: "uint"
        },
        sha3Uncles: {
            format: "bytes32"
        },
        size: {
            format: "uint"
        },
        baseFeePerGas: {
            format: "uint"
        },
        excessDataGas: {
            format: "uint"
        },
        mixHash: {
            format: "bytes32"
        },
        transactions: {
            type: "array",
            items: {
                format: "bytes32"
            }
        },
        uncles: {
            type: "array",
            items: {
                format: "bytes32"
            }
        },
        withdrawals: {
            type: "array",
            items: Object.assign({}, withdrawalsSchema)
        }
    }
};
const logSchema = {
    type: "object",
    properties: {
        removed: {
            format: "bool"
        },
        logIndex: {
            format: "uint"
        },
        transactionIndex: {
            format: "uint"
        },
        transactionHash: {
            format: "bytes32"
        },
        blockHash: {
            format: "bytes32"
        },
        blockNumber: {
            format: "uint"
        },
        address: {
            format: "address"
        },
        data: {
            format: "bytes"
        },
        topics: {
            type: "array",
            items: {
                format: "bytes32"
            }
        }
    }
};
const syncSchema = {
    type: "object",
    properties: {
        startingBlock: {
            format: "string"
        },
        currentBlock: {
            format: "string"
        },
        highestBlock: {
            format: "string"
        },
        knownStates: {
            format: "string"
        },
        pulledStates: {
            format: "string"
        }
    }
};
const transactionReceiptSchema = {
    type: "object",
    properties: {
        transactionHash: {
            format: "bytes32"
        },
        transactionIndex: {
            format: "uint"
        },
        blockHash: {
            format: "bytes32"
        },
        blockNumber: {
            format: "uint"
        },
        from: {
            format: "address"
        },
        to: {
            format: "address"
        },
        cumulativeGasUsed: {
            format: "uint"
        },
        gasUsed: {
            format: "uint"
        },
        effectiveGasPrice: {
            format: "uint"
        },
        contractAddress: {
            format: "address"
        },
        logs: {
            type: "array",
            items: Object.assign({}, logSchema)
        },
        logsBloom: {
            format: "bytes"
        },
        root: {
            format: "bytes"
        },
        status: {
            format: "uint"
        },
        type: {
            format: "uint"
        }
    }
};
const SignatureObjectSchema = {
    type: "object",
    properties: {
        messageHash: {
            format: "bytes"
        },
        r: {
            format: "bytes32"
        },
        s: {
            format: "bytes32"
        },
        v: {
            format: "bytes"
        },
        message: {
            format: "bytes"
        },
        signature: {
            format: "bytes"
        }
    }
};
const feeHistorySchema = {
    type: "object",
    properties: {
        oldestBlock: {
            format: "uint"
        },
        baseFeePerGas: {
            type: "array",
            items: {
                format: "uint"
            }
        },
        reward: {
            type: "array",
            items: {
                type: "array",
                items: {
                    format: "uint"
                }
            }
        },
        gasUsedRatio: {
            type: "array",
            items: {
                type: "number"
            }
        }
    }
};
const storageProofSchema = {
    type: "object",
    properties: {
        key: {
            format: "bytes32"
        },
        value: {
            format: "uint"
        },
        proof: {
            type: "array",
            items: {
                format: "bytes32"
            }
        }
    }
};
const accountSchema = {
    type: "object",
    properties: {
        balance: {
            format: "uint"
        },
        codeHash: {
            format: "bytes32"
        },
        nonce: {
            format: "uint"
        },
        storageHash: {
            format: "bytes32"
        },
        accountProof: {
            type: "array",
            items: {
                format: "bytes32"
            }
        },
        storageProof: {
            type: "array",
            items: Object.assign({}, storageProofSchema)
        }
    }
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"brU2r":[function(require,module,exports) {
/*
This file is part of web3.js.

web3.js is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

web3.js is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getTransactionFromOrToAttr", ()=>getTransactionFromOrToAttr);
parcelHelpers.export(exports, "getTransactionNonce", ()=>getTransactionNonce);
parcelHelpers.export(exports, "getTransactionType", ()=>getTransactionType);
// Keep in mind that the order the properties of populateTransaction get populated matters
// as some of the properties are dependent on others
parcelHelpers.export(exports, "defaultTransactionBuilder", ()=>defaultTransactionBuilder);
parcelHelpers.export(exports, "transactionBuilder", ()=>transactionBuilder);
var _web3Types = require("web3-types");
var _web3EthAccounts = require("web3-eth-accounts");
var _web3Net = require("web3-net");
var _web3Validator = require("web3-validator");
var _web3Errors = require("web3-errors");
var _web3Utils = require("web3-utils");
var _constantsJs = require("../constants.js");
// eslint-disable-next-line import/no-cycle
var _rpcMethodWrappersJs = require("../rpc_method_wrappers.js");
var _detectTransactionTypeJs = require("./detect_transaction_type.js");
var _schemasJs = require("../schemas.js");
// eslint-disable-next-line import/no-cycle
var _getTransactionGasPricingJs = require("./get_transaction_gas_pricing.js");
var __awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
const getTransactionFromOrToAttr = (attr, web3Context, transaction, privateKey)=>{
    if (transaction !== undefined && attr in transaction && transaction[attr] !== undefined) {
        if (typeof transaction[attr] === "string" && (0, _web3Validator.isAddress)(transaction[attr])) return transaction[attr];
        if (!(0, _web3Validator.isHexStrict)(transaction[attr]) && (0, _web3Validator.isNumber)(transaction[attr])) {
            if (web3Context.wallet) {
                const account = web3Context.wallet.get((0, _web3Utils.format)({
                    format: "uint"
                }, transaction[attr], (0, _constantsJs.NUMBER_DATA_FORMAT)));
                if (!(0, _web3Validator.isNullish)(account)) return account.address;
                throw new (0, _web3Errors.LocalWalletNotAvailableError)();
            }
            throw new (0, _web3Errors.LocalWalletNotAvailableError)();
        } else throw attr === "from" ? new (0, _web3Errors.InvalidTransactionWithSender)(transaction.from) : new (0, _web3Errors.InvalidTransactionWithReceiver)(transaction.to);
    }
    if (attr === "from") {
        if (!(0, _web3Validator.isNullish)(privateKey)) return (0, _web3EthAccounts.privateKeyToAddress)(privateKey);
        if (!(0, _web3Validator.isNullish)(web3Context.defaultAccount)) return web3Context.defaultAccount;
    }
    return undefined;
};
const getTransactionNonce = (web3Context, address, returnFormat = (0, _web3Types.DEFAULT_RETURN_FORMAT))=>__awaiter(void 0, void 0, void 0, function*() {
        if ((0, _web3Validator.isNullish)(address)) // TODO if (web3.eth.accounts.wallet) use address from local wallet
        throw new (0, _web3Errors.UnableToPopulateNonceError)();
        return (0, _rpcMethodWrappersJs.getTransactionCount)(web3Context, address, web3Context.defaultBlock, returnFormat);
    });
const getTransactionType = (transaction, web3Context)=>{
    const inferredType = (0, _detectTransactionTypeJs.detectTransactionType)(transaction, web3Context);
    if (!(0, _web3Validator.isNullish)(inferredType)) return inferredType;
    if (!(0, _web3Validator.isNullish)(web3Context.defaultTransactionType)) return (0, _web3Utils.format)({
        format: "uint"
    }, web3Context.defaultTransactionType, (0, _web3Types.ETH_DATA_FORMAT));
    return undefined;
};
function defaultTransactionBuilder(options) {
    var _a, _b;
    return __awaiter(this, void 0, void 0, function*() {
        let populatedTransaction = (0, _web3Utils.format)((0, _schemasJs.transactionSchema), options.transaction, (0, _web3Types.DEFAULT_RETURN_FORMAT));
        if ((0, _web3Validator.isNullish)(populatedTransaction.from)) populatedTransaction.from = getTransactionFromOrToAttr("from", options.web3Context, undefined, options.privateKey);
        // TODO: Debug why need to typecase getTransactionNonce
        if ((0, _web3Validator.isNullish)(populatedTransaction.nonce)) populatedTransaction.nonce = yield getTransactionNonce(options.web3Context, populatedTransaction.from, (0, _web3Types.ETH_DATA_FORMAT));
        if ((0, _web3Validator.isNullish)(populatedTransaction.value)) populatedTransaction.value = "0x0";
        if (!(0, _web3Validator.isNullish)(populatedTransaction.data)) {
            if (!(0, _web3Validator.isNullish)(populatedTransaction.input) && populatedTransaction.data !== populatedTransaction.input) throw new (0, _web3Errors.TransactionDataAndInputError)({
                data: (0, _web3Utils.bytesToHex)(populatedTransaction.data),
                input: (0, _web3Utils.bytesToHex)(populatedTransaction.input)
            });
            if (!populatedTransaction.data.startsWith("0x")) populatedTransaction.data = `0x${populatedTransaction.data}`;
        } else if (!(0, _web3Validator.isNullish)(populatedTransaction.input)) {
            if (!populatedTransaction.input.startsWith("0x")) populatedTransaction.input = `0x${populatedTransaction.input}`;
        } else populatedTransaction.input = "0x";
        if ((0, _web3Validator.isNullish)(populatedTransaction.common)) {
            if (options.web3Context.defaultCommon) {
                const common = options.web3Context.defaultCommon;
                const chainId = common.customChain.chainId;
                const networkId = common.customChain.networkId;
                const name = common.customChain.name;
                populatedTransaction.common = Object.assign(Object.assign({}, common), {
                    customChain: {
                        chainId,
                        networkId,
                        name
                    }
                });
            }
            if ((0, _web3Validator.isNullish)(populatedTransaction.chain)) populatedTransaction.chain = options.web3Context.defaultChain;
            if ((0, _web3Validator.isNullish)(populatedTransaction.hardfork)) populatedTransaction.hardfork = options.web3Context.defaultHardfork;
        }
        if ((0, _web3Validator.isNullish)(populatedTransaction.chainId) && (0, _web3Validator.isNullish)((_a = populatedTransaction.common) === null || _a === void 0 ? void 0 : _a.customChain.chainId)) populatedTransaction.chainId = yield (0, _rpcMethodWrappersJs.getChainId)(options.web3Context, (0, _web3Types.ETH_DATA_FORMAT));
        if ((0, _web3Validator.isNullish)(populatedTransaction.networkId)) populatedTransaction.networkId = (_b = options.web3Context.defaultNetworkId) !== null && _b !== void 0 ? _b : yield (0, _web3Net.getId)(options.web3Context, (0, _web3Types.ETH_DATA_FORMAT));
        if ((0, _web3Validator.isNullish)(populatedTransaction.gasLimit) && !(0, _web3Validator.isNullish)(populatedTransaction.gas)) populatedTransaction.gasLimit = populatedTransaction.gas;
        populatedTransaction.type = getTransactionType(populatedTransaction, options.web3Context);
        if ((0, _web3Validator.isNullish)(populatedTransaction.accessList) && (populatedTransaction.type === "0x1" || populatedTransaction.type === "0x2")) populatedTransaction.accessList = [];
        if (options.fillGasPrice) populatedTransaction = Object.assign(Object.assign({}, populatedTransaction), (yield (0, _getTransactionGasPricingJs.getTransactionGasPricing)(populatedTransaction, options.web3Context, (0, _web3Types.ETH_DATA_FORMAT))));
        if ((0, _web3Validator.isNullish)(populatedTransaction.gas) && (0, _web3Validator.isNullish)(populatedTransaction.gasLimit) && options.fillGasLimit) {
            const fillGasLimit = yield (0, _rpcMethodWrappersJs.estimateGas)(options.web3Context, populatedTransaction, "latest", (0, _web3Types.ETH_DATA_FORMAT));
            populatedTransaction = Object.assign(Object.assign({}, populatedTransaction), {
                gas: (0, _web3Utils.format)({
                    format: "uint"
                }, fillGasLimit, (0, _web3Types.ETH_DATA_FORMAT))
            });
        }
        return populatedTransaction;
    });
}
const transactionBuilder = (options)=>__awaiter(void 0, void 0, void 0, function*() {
        var _a;
        return ((_a = options.web3Context.transactionBuilder) !== null && _a !== void 0 ? _a : defaultTransactionBuilder)(Object.assign(Object.assign({}, options), {
            transaction: options.transaction
        }));
    });

},{"web3-types":"g7Ztk","web3-eth-accounts":"4gQAz","web3-net":"3i7EA","web3-validator":"6HK71","web3-errors":"jDvsn","web3-utils":"8WsWI","../constants.js":"453pI","../rpc_method_wrappers.js":"44lYD","./detect_transaction_type.js":"fmmhe","../schemas.js":"bf11F","./get_transaction_gas_pricing.js":"krJTv","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3i7EA":[function(require,module,exports) {
/*
This file is part of web3.js.

web3.js is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

web3.js is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/ /**
 * The web3-net package allows you to interact with an Ethereum node’s network properties.
 *
 * ```ts
 * import Net from 'web3-net';
 *
 * const net = new Net(Net.givenProvider || 'ws://some.local-or-remote.node:8546');
 * // or using the web3 umbrella package
 * import Web3 from 'web3';
 * const web3 = new Web3(Web3.givenProvider || 'ws://some.local-or-remote.node:8546');
 *
 * // -> web3.eth.net
 *
 * // get the ID of the network
 * await web3.eth.net.getId();
 * > 5777n
 *
 * // get the peer count
 * await web3.eth.net.getPeerCount();
 * > 0n
 *
 * // Check if the node is listening for peers
 * await web3.eth.net.isListening();
 * > true
 * ```
 */ /**
 *
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _netJs = require("./net.js");
parcelHelpers.exportAll(_netJs, exports);
var _rpcMethodWrappersJs = require("./rpc_method_wrappers.js");
parcelHelpers.exportAll(_rpcMethodWrappersJs, exports);
exports.default = (0, _netJs.Net);

},{"./net.js":"gxij8","./rpc_method_wrappers.js":"hX6bL","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gxij8":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Net", ()=>Net);
/*
This file is part of web3.js.

web3.js is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

web3.js is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/ var _web3Core = require("web3-core");
var _web3Types = require("web3-types");
var _rpcMethodWrappersJs = require("./rpc_method_wrappers.js");
var __awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
class Net extends (0, _web3Core.Web3Context) {
    /**
     * Gets the current network ID
     *
     * @param returnFormat - Return format
     * @returns A Promise of the network ID.
     * @example
     * ```ts
     * const net = new Net(Net.givenProvider || 'ws://some.local-or-remote.node:8546');
     * await net.getId();
     * > 1
     * ```
     */ getId(returnFormat = (0, _web3Types.DEFAULT_RETURN_FORMAT)) {
        return __awaiter(this, void 0, void 0, function*() {
            return _rpcMethodWrappersJs.getId(this, returnFormat);
        });
    }
    /**
     * Get the number of peers connected to.
     *
     * @param returnFormat - Return format
     * @returns A promise of the number of the peers connected to.
     * @example
     * ```ts
     * const net = new Net(Net.givenProvider || 'ws://some.local-or-remote.node:8546');
     * await net.getPeerCount();
     * > 0
     * ```
     */ getPeerCount(returnFormat = (0, _web3Types.DEFAULT_RETURN_FORMAT)) {
        return __awaiter(this, void 0, void 0, function*() {
            return _rpcMethodWrappersJs.getPeerCount(this, returnFormat);
        });
    }
    /**
     * Check if the node is listening for peers
     *
     * @returns A promise of a boolean if the node is listening to peers
     * @example
     * ```ts
     * const net = new Net(Net.givenProvider || 'ws://some.local-or-remote.node:8546');
     * await net.isListening();
     * > true
     * ```
     */ isListening() {
        return __awaiter(this, void 0, void 0, function*() {
            return _rpcMethodWrappersJs.isListening(this);
        });
    }
}

},{"web3-core":"4Uu6H","web3-types":"g7Ztk","./rpc_method_wrappers.js":"hX6bL","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hX6bL":[function(require,module,exports) {
/*
This file is part of web3.js.

web3.js is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

web3.js is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getId", ()=>getId);
parcelHelpers.export(exports, "getPeerCount", ()=>getPeerCount);
parcelHelpers.export(exports, "isListening", ()=>isListening);
var _web3Utils = require("web3-utils");
var _web3RpcMethods = require("web3-rpc-methods");
var __awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
function getId(web3Context, returnFormat) {
    return __awaiter(this, void 0, void 0, function*() {
        const response = yield (0, _web3RpcMethods.netRpcMethods).getId(web3Context.requestManager);
        return (0, _web3Utils.format)({
            format: "uint"
        }, response, returnFormat);
    });
}
function getPeerCount(web3Context, returnFormat) {
    return __awaiter(this, void 0, void 0, function*() {
        const response = yield (0, _web3RpcMethods.netRpcMethods).getPeerCount(web3Context.requestManager);
        // Data returned is number in hex format
        return (0, _web3Utils.format)({
            format: "uint"
        }, response, returnFormat);
    });
}
const isListening = (web3Context)=>__awaiter(void 0, void 0, void 0, function*() {
        return (0, _web3RpcMethods.netRpcMethods).isListening(web3Context.requestManager);
    });

},{"web3-utils":"8WsWI","web3-rpc-methods":"eT6LI","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"453pI":[function(require,module,exports) {
/*
This file is part of web3.js.

web3.js is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

web3.js is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ALL_EVENTS", ()=>ALL_EVENTS);
parcelHelpers.export(exports, "ALL_EVENTS_ABI", ()=>ALL_EVENTS_ABI);
parcelHelpers.export(exports, "NUMBER_DATA_FORMAT", ()=>NUMBER_DATA_FORMAT);
var _web3Types = require("web3-types");
const ALL_EVENTS = "ALLEVENTS";
const ALL_EVENTS_ABI = {
    name: ALL_EVENTS,
    signature: "",
    type: "event",
    inputs: []
};
const NUMBER_DATA_FORMAT = {
    bytes: (0, _web3Types.FMT_BYTES).HEX,
    number: (0, _web3Types.FMT_NUMBER).NUMBER
};

},{"web3-types":"g7Ztk","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"krJTv":[function(require,module,exports) {
/*
This file is part of web3.js.

web3.js is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

web3.js is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getTransactionGasPricing", ()=>getTransactionGasPricing);
var _web3Validator = require("web3-validator");
var _web3Errors = require("web3-errors");
var _web3Utils = require("web3-utils");
// eslint-disable-next-line import/no-cycle
var _rpcMethodWrappersJs = require("../rpc_method_wrappers.js");
// eslint-disable-next-line import/no-cycle
var _transactionBuilderJs = require("./transaction_builder.js");
var __awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
function getEip1559GasPricing(transaction, web3Context, returnFormat) {
    var _a, _b, _c;
    return __awaiter(this, void 0, void 0, function*() {
        const block = yield (0, _rpcMethodWrappersJs.getBlock)(web3Context, web3Context.defaultBlock, false, returnFormat);
        if ((0, _web3Validator.isNullish)(block.baseFeePerGas)) throw new (0, _web3Errors.Eip1559NotSupportedError)();
        if (!(0, _web3Validator.isNullish)(transaction.gasPrice)) {
            const convertedTransactionGasPrice = (0, _web3Utils.format)({
                format: "uint"
            }, transaction.gasPrice, returnFormat);
            return {
                maxPriorityFeePerGas: convertedTransactionGasPrice,
                maxFeePerGas: convertedTransactionGasPrice
            };
        }
        return {
            maxPriorityFeePerGas: (0, _web3Utils.format)({
                format: "uint"
            }, (_a = transaction.maxPriorityFeePerGas) !== null && _a !== void 0 ? _a : web3Context.defaultMaxPriorityFeePerGas, returnFormat),
            maxFeePerGas: (0, _web3Utils.format)({
                format: "uint"
            }, (_b = transaction.maxFeePerGas) !== null && _b !== void 0 ? _b : BigInt(block.baseFeePerGas) * BigInt(2) + BigInt((_c = transaction.maxPriorityFeePerGas) !== null && _c !== void 0 ? _c : web3Context.defaultMaxPriorityFeePerGas), returnFormat)
        };
    });
}
function getTransactionGasPricing(transaction, web3Context, returnFormat) {
    return __awaiter(this, void 0, void 0, function*() {
        const transactionType = (0, _transactionBuilderJs.getTransactionType)(transaction, web3Context);
        if (!(0, _web3Validator.isNullish)(transactionType)) {
            if (transactionType.startsWith("-")) throw new (0, _web3Errors.UnsupportedTransactionTypeError)(transactionType);
            // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-2718.md#transactions
            if (Number(transactionType) < 0 || Number(transactionType) > 127) throw new (0, _web3Errors.UnsupportedTransactionTypeError)(transactionType);
            if ((0, _web3Validator.isNullish)(transaction.gasPrice) && (transactionType === "0x0" || transactionType === "0x1")) return {
                gasPrice: yield (0, _rpcMethodWrappersJs.getGasPrice)(web3Context, returnFormat),
                maxPriorityFeePerGas: undefined,
                maxFeePerGas: undefined
            };
            if (transactionType === "0x2") return Object.assign({
                gasPrice: undefined
            }, (yield getEip1559GasPricing(transaction, web3Context, returnFormat)));
        }
        return undefined;
    });
}

},{"web3-validator":"6HK71","web3-errors":"jDvsn","web3-utils":"8WsWI","../rpc_method_wrappers.js":"44lYD","./transaction_builder.js":"brU2r","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"d8UUe":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * An internal function to send a transaction or throws if sending did not finish during the timeout during the blocks-timeout.
 * @param web3Context - the context to read the configurations from
 * @param sendTransactionFunc - the function that will send the transaction (could be sendTransaction or sendRawTransaction)
 * @param transactionHash - to be used inside the exception message if there will be any exceptions.
 * @returns the Promise<string> returned by the `sendTransactionFunc`.
 */ parcelHelpers.export(exports, "trySendTransaction", ()=>trySendTransaction);
var _web3Utils = require("web3-utils");
var _web3Errors = require("web3-errors");
// eslint-disable-next-line import/no-cycle
var _rejectIfBlockTimeoutJs = require("./reject_if_block_timeout.js");
var __awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
function trySendTransaction(web3Context, sendTransactionFunc, transactionHash) {
    return __awaiter(this, void 0, void 0, function*() {
        const [timeoutId, rejectOnTimeout] = (0, _web3Utils.rejectIfTimeout)(web3Context.transactionSendTimeout, new (0, _web3Errors.TransactionSendTimeoutError)({
            numberOfSeconds: web3Context.transactionSendTimeout / 1000,
            transactionHash
        }));
        const [rejectOnBlockTimeout, blockTimeoutResourceCleaner] = yield (0, _rejectIfBlockTimeoutJs.rejectIfBlockTimeout)(web3Context, transactionHash);
        try {
            // If an error happened here, do not catch it, just clear the resources before raising it to the caller function.
            return yield Promise.race([
                sendTransactionFunc(),
                rejectOnTimeout,
                rejectOnBlockTimeout
            ]);
        } finally{
            clearTimeout(timeoutId);
            blockTimeoutResourceCleaner.clean();
        }
    });
}

},{"web3-utils":"8WsWI","web3-errors":"jDvsn","./reject_if_block_timeout.js":"iGU0D","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"iGU0D":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/* TODO: After merge, there will be constant block mining time (exactly 12 second each block, except slot missed that currently happens in <1% of slots. ) so we can optimize following function
for POS NWs, we can skip checking getBlockNumber(); after interval and calculate only based on time  that certain num of blocked are mined after that for internal double check, can do one getBlockNumber() call and timeout.
*/ parcelHelpers.export(exports, "rejectIfBlockTimeout", ()=>rejectIfBlockTimeout);
var _web3Utils = require("web3-utils");
var _web3Errors = require("web3-errors");
var _constantsJs = require("../constants.js");
// eslint-disable-next-line import/no-cycle
var _rpcMethodWrappersJs = require("../rpc_method_wrappers.js");
var __awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
function resolveByPolling(web3Context, starterBlockNumber, transactionHash) {
    const pollingInterval = web3Context.transactionPollingInterval;
    const [intervalId, promiseToError] = (0, _web3Utils.rejectIfConditionAtInterval)(()=>__awaiter(this, void 0, void 0, function*() {
            let lastBlockNumber;
            try {
                lastBlockNumber = yield (0, _rpcMethodWrappersJs.getBlockNumber)(web3Context, (0, _constantsJs.NUMBER_DATA_FORMAT));
            } catch (error) {
                console.warn("An error happen while trying to get the block number", error);
                return undefined;
            }
            const numberOfBlocks = lastBlockNumber - starterBlockNumber;
            if (numberOfBlocks >= web3Context.transactionBlockTimeout) return new (0, _web3Errors.TransactionBlockTimeoutError)({
                starterBlockNumber,
                numberOfBlocks,
                transactionHash
            });
            return undefined;
        }), pollingInterval);
    const clean = ()=>{
        clearInterval(intervalId);
    };
    return [
        promiseToError,
        {
            clean
        }
    ];
}
function resolveBySubscription(web3Context, starterBlockNumber, transactionHash) {
    var _a;
    return __awaiter(this, void 0, void 0, function*() {
        // The following variable will stay true except if the data arrived,
        //	or if watching started after an error had occurred.
        let needToWatchLater = true;
        let subscription;
        let resourceCleaner;
        // internal helper function
        function revertToPolling(reject, previousError) {
            if (previousError) console.warn("error happened at subscription. So revert to polling...", previousError);
            resourceCleaner.clean();
            needToWatchLater = false;
            const [promiseToError, newResourceCleaner] = resolveByPolling(web3Context, starterBlockNumber, transactionHash);
            resourceCleaner.clean = newResourceCleaner.clean;
            promiseToError.catch((error)=>reject(error));
        }
        try {
            subscription = yield (_a = web3Context.subscriptionManager) === null || _a === void 0 ? void 0 : _a.subscribe("newHeads");
            resourceCleaner = {
                clean: ()=>{
                    var _a;
                    // Remove the subscription, if it was not removed somewhere
                    // 	else by calling, for example, subscriptionManager.clear()
                    if (subscription.id) (_a = web3Context.subscriptionManager) === null || _a === void 0 || _a.removeSubscription(subscription).then(()=>{
                    // Subscription ended successfully
                    }).catch(()=>{
                    // An error happened while ending subscription. But no need to take any action.
                    });
                }
            };
        } catch (error) {
            return resolveByPolling(web3Context, starterBlockNumber, transactionHash);
        }
        const promiseToError = new Promise((_, reject)=>{
            try {
                subscription.on("data", (lastBlockHeader)=>{
                    needToWatchLater = false;
                    if (!(lastBlockHeader === null || lastBlockHeader === void 0 ? void 0 : lastBlockHeader.number)) return;
                    const numberOfBlocks = Number(BigInt(lastBlockHeader.number) - BigInt(starterBlockNumber));
                    if (numberOfBlocks >= web3Context.transactionBlockTimeout) // Transaction Block Timeout is known to be reached by subscribing to new heads
                    reject(new (0, _web3Errors.TransactionBlockTimeoutError)({
                        starterBlockNumber,
                        numberOfBlocks,
                        transactionHash
                    }));
                });
                subscription.on("error", (error)=>{
                    revertToPolling(reject, error);
                });
            } catch (error) {
                revertToPolling(reject, error);
            }
            // Fallback to polling if tx receipt didn't arrived in "blockHeaderTimeout" [10 seconds]
            setTimeout(()=>{
                if (needToWatchLater) revertToPolling(reject);
            }, web3Context.blockHeaderTimeout * 1000);
        });
        return [
            promiseToError,
            resourceCleaner
        ];
    });
}
function rejectIfBlockTimeout(web3Context, transactionHash) {
    var _a, _b;
    return __awaiter(this, void 0, void 0, function*() {
        const { provider } = web3Context.requestManager;
        let callingRes;
        const starterBlockNumber = yield (0, _rpcMethodWrappersJs.getBlockNumber)(web3Context, (0, _constantsJs.NUMBER_DATA_FORMAT));
        // TODO: once https://github.com/web3/web3.js/issues/5521 is implemented, remove checking for `enableExperimentalFeatures.useSubscriptionWhenCheckingBlockTimeout`
        if (((_b = (_a = provider).supportsSubscriptions) === null || _b === void 0 ? void 0 : _b.call(_a)) && web3Context.enableExperimentalFeatures.useSubscriptionWhenCheckingBlockTimeout) callingRes = yield resolveBySubscription(web3Context, starterBlockNumber, transactionHash);
        else callingRes = resolveByPolling(web3Context, starterBlockNumber, transactionHash);
        return callingRes;
    });
}

},{"web3-utils":"8WsWI","web3-errors":"jDvsn","../constants.js":"453pI","../rpc_method_wrappers.js":"44lYD","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hZf29":[function(require,module,exports) {
/*
This file is part of web3.js.

web3.js is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

web3.js is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "waitForTransactionReceipt", ()=>waitForTransactionReceipt);
var _web3Errors = require("web3-errors");
// eslint-disable-next-line import/no-cycle
var _web3Utils = require("web3-utils");
// eslint-disable-next-line import/no-cycle
var _rejectIfBlockTimeoutJs = require("./reject_if_block_timeout.js");
// eslint-disable-next-line import/no-cycle
var _rpcMethodWrappersJs = require("../rpc_method_wrappers.js");
var __awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
function waitForTransactionReceipt(web3Context, transactionHash, returnFormat) {
    var _a;
    return __awaiter(this, void 0, void 0, function*() {
        const pollingInterval = (_a = web3Context.transactionReceiptPollingInterval) !== null && _a !== void 0 ? _a : web3Context.transactionPollingInterval;
        const [awaitableTransactionReceipt, IntervalId] = (0, _web3Utils.pollTillDefinedAndReturnIntervalId)(()=>__awaiter(this, void 0, void 0, function*() {
                try {
                    return (0, _rpcMethodWrappersJs.getTransactionReceipt)(web3Context, transactionHash, returnFormat);
                } catch (error) {
                    console.warn("An error happen while trying to get the transaction receipt", error);
                    return undefined;
                }
            }), pollingInterval);
        const [timeoutId, rejectOnTimeout] = (0, _web3Utils.rejectIfTimeout)(web3Context.transactionPollingTimeout, new (0, _web3Errors.TransactionPollingTimeoutError)({
            numberOfSeconds: web3Context.transactionPollingTimeout / 1000,
            transactionHash
        }));
        const [rejectOnBlockTimeout, blockTimeoutResourceCleaner] = yield (0, _rejectIfBlockTimeoutJs.rejectIfBlockTimeout)(web3Context, transactionHash);
        try {
            // If an error happened here, do not catch it, just clear the resources before raising it to the caller function.
            return yield Promise.race([
                awaitableTransactionReceipt,
                rejectOnTimeout,
                rejectOnBlockTimeout
            ]);
        } finally{
            if (timeoutId) clearTimeout(timeoutId);
            if (IntervalId) clearInterval(IntervalId);
            blockTimeoutResourceCleaner.clean();
        }
    });
}

},{"web3-errors":"jDvsn","web3-utils":"8WsWI","./reject_if_block_timeout.js":"iGU0D","../rpc_method_wrappers.js":"44lYD","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7HE9a":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "SendTxHelper", ()=>SendTxHelper);
/*
This file is part of web3.js.

web3.js is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

web3.js is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/ var _web3Types = require("web3-types");
var _web3Validator = require("web3-validator");
var _web3Errors = require("web3-errors");
var _web3RpcMethods = require("web3-rpc-methods");
// eslint-disable-next-line import/no-cycle
var _getTransactionGasPricingJs = require("./get_transaction_gas_pricing.js");
// eslint-disable-next-line import/no-cycle
var _trySendTransactionJs = require("./try_send_transaction.js");
// eslint-disable-next-line import/no-cycle
var _watchTransactionForConfirmationsJs = require("./watch_transaction_for_confirmations.js");
var _constantsJs = require("../constants.js");
// eslint-disable-next-line import/no-cycle
var _getTransactionErrorJs = require("./get_transaction_error.js");
// eslint-disable-next-line import/no-cycle
var _getRevertReasonJs = require("./get_revert_reason.js");
var _decodingJs = require("./decoding.js");
var __awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
class SendTxHelper {
    constructor({ options, web3Context, promiEvent, returnFormat }){
        this.options = {
            checkRevertBeforeSending: true
        };
        this.options = options;
        this.web3Context = web3Context;
        this.promiEvent = promiEvent;
        this.returnFormat = returnFormat;
    }
    getReceiptWithEvents(data) {
        var _a, _b;
        const result = Object.assign({}, data !== null && data !== void 0 ? data : {});
        if (((_a = this.options) === null || _a === void 0 ? void 0 : _a.contractAbi) && result.logs && result.logs.length > 0) {
            result.events = {};
            for (const log of result.logs){
                const event = (0, _decodingJs.decodeEventABI)((0, _constantsJs.ALL_EVENTS_ABI), log, (_b = this.options) === null || _b === void 0 ? void 0 : _b.contractAbi, this.returnFormat);
                if (event.event) result.events[event.event] = event;
            }
        }
        return result;
    }
    checkRevertBeforeSending(tx) {
        return __awaiter(this, void 0, void 0, function*() {
            if (this.options.checkRevertBeforeSending !== false) {
                const reason = yield (0, _getRevertReasonJs.getRevertReason)(this.web3Context, tx, this.options.contractAbi);
                if (reason !== undefined) throw yield (0, _getTransactionErrorJs.getTransactionError)(this.web3Context, tx, undefined, undefined, this.options.contractAbi, reason);
            }
        });
    }
    emitSending(tx) {
        if (this.promiEvent.listenerCount("sending") > 0) this.promiEvent.emit("sending", tx);
    }
    populateGasPrice({ transactionFormatted, transaction }) {
        var _a;
        return __awaiter(this, void 0, void 0, function*() {
            let result = transactionFormatted;
            if (!((_a = this.options) === null || _a === void 0 ? void 0 : _a.ignoreGasPricing) && (0, _web3Validator.isNullish)(transactionFormatted.gasPrice) && ((0, _web3Validator.isNullish)(transaction.maxPriorityFeePerGas) || (0, _web3Validator.isNullish)(transaction.maxFeePerGas))) result = Object.assign(Object.assign({}, transactionFormatted), (yield (0, _getTransactionGasPricingJs.getTransactionGasPricing)(transactionFormatted, this.web3Context, (0, _web3Types.ETH_DATA_FORMAT))));
            return result;
        });
    }
    signAndSend({ wallet, tx }) {
        return __awaiter(this, void 0, void 0, function*() {
            if (wallet) {
                const signedTransaction = yield wallet.signTransaction(tx);
                return (0, _trySendTransactionJs.trySendTransaction)(this.web3Context, ()=>__awaiter(this, void 0, void 0, function*() {
                        return (0, _web3RpcMethods.ethRpcMethods).sendRawTransaction(this.web3Context.requestManager, signedTransaction.rawTransaction);
                    }), signedTransaction.transactionHash);
            }
            return (0, _trySendTransactionJs.trySendTransaction)(this.web3Context, ()=>__awaiter(this, void 0, void 0, function*() {
                    return (0, _web3RpcMethods.ethRpcMethods).sendTransaction(this.web3Context.requestManager, tx);
                }));
        });
    }
    emitSent(tx) {
        if (this.promiEvent.listenerCount("sent") > 0) this.promiEvent.emit("sent", tx);
    }
    emitTransactionHash(hash) {
        if (this.promiEvent.listenerCount("transactionHash") > 0) this.promiEvent.emit("transactionHash", hash);
    }
    emitReceipt(receipt) {
        if (this.promiEvent.listenerCount("receipt") > 0) this.promiEvent.emit("receipt", // @ts-expect-error unknown type fix
        receipt);
    }
    handleError({ error, tx }) {
        var _a;
        return __awaiter(this, void 0, void 0, function*() {
            let _error = error;
            if (_error instanceof (0, _web3Errors.ContractExecutionError) && this.web3Context.handleRevert) _error = yield (0, _getTransactionErrorJs.getTransactionError)(this.web3Context, tx, undefined, undefined, (_a = this.options) === null || _a === void 0 ? void 0 : _a.contractAbi);
            if ((_error instanceof (0, _web3Errors.InvalidResponseError) || _error instanceof (0, _web3Errors.ContractExecutionError) || _error instanceof (0, _web3Errors.TransactionRevertWithCustomError) || _error instanceof (0, _web3Errors.TransactionRevertedWithoutReasonError) || _error instanceof (0, _web3Errors.TransactionRevertInstructionError)) && this.promiEvent.listenerCount("error") > 0) this.promiEvent.emit("error", _error);
            return _error;
        });
    }
    emitConfirmation({ receipt, transactionHash }) {
        if (this.promiEvent.listenerCount("confirmation") > 0) (0, _watchTransactionForConfirmationsJs.watchTransactionForConfirmations)(this.web3Context, this.promiEvent, receipt, transactionHash, this.returnFormat);
    }
    handleResolve({ receipt, tx }) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function*() {
            if ((_a = this.options) === null || _a === void 0 ? void 0 : _a.transactionResolver) return (_b = this.options) === null || _b === void 0 ? void 0 : _b.transactionResolver(receipt);
            if (receipt.status === BigInt(0)) {
                const error = yield (0, _getTransactionErrorJs.getTransactionError)(this.web3Context, tx, // @ts-expect-error unknown type fix
                receipt, undefined, (_c = this.options) === null || _c === void 0 ? void 0 : _c.contractAbi);
                if (this.promiEvent.listenerCount("error") > 0) this.promiEvent.emit("error", error);
                throw error;
            } else return receipt;
        });
    }
}

},{"web3-types":"g7Ztk","web3-validator":"6HK71","web3-errors":"jDvsn","web3-rpc-methods":"eT6LI","./get_transaction_gas_pricing.js":"krJTv","./try_send_transaction.js":"d8UUe","./watch_transaction_for_confirmations.js":"5XDpO","../constants.js":"453pI","./get_transaction_error.js":"6DlV6","./get_revert_reason.js":"cnloD","./decoding.js":"gikUP","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5XDpO":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "watchTransactionForConfirmations", ()=>watchTransactionForConfirmations);
var _web3Utils = require("web3-utils");
var _web3Validator = require("web3-validator");
var _web3Errors = require("web3-errors");
var _schemasJs = require("../schemas.js");
var _watchTransactionByPoolingJs = require("./watch_transaction_by_pooling.js");
var _watchTransactionBySubscriptionJs = require("./watch_transaction_by_subscription.js");
function watchTransactionForConfirmations(web3Context, transactionPromiEvent, transactionReceipt, transactionHash, returnFormat) {
    if ((0, _web3Validator.isNullish)(transactionReceipt) || (0, _web3Validator.isNullish)(transactionReceipt.blockHash)) throw new (0, _web3Errors.TransactionMissingReceiptOrBlockHashError)({
        receipt: transactionReceipt,
        blockHash: (0, _web3Utils.format)({
            format: "bytes32"
        }, transactionReceipt === null || transactionReceipt === void 0 ? void 0 : transactionReceipt.blockHash, returnFormat),
        transactionHash: (0, _web3Utils.format)({
            format: "bytes32"
        }, transactionHash, returnFormat)
    });
    if (!transactionReceipt.blockNumber) throw new (0, _web3Errors.TransactionReceiptMissingBlockNumberError)({
        receipt: transactionReceipt
    });
    // As we have the receipt, it's the first confirmation that tx is accepted.
    transactionPromiEvent.emit("confirmation", {
        confirmations: (0, _web3Utils.format)({
            format: "uint"
        }, 1, returnFormat),
        receipt: (0, _web3Utils.format)((0, _schemasJs.transactionReceiptSchema), transactionReceipt, returnFormat),
        latestBlockHash: (0, _web3Utils.format)({
            format: "bytes32"
        }, transactionReceipt.blockHash, returnFormat)
    });
    // so a subscription for newBlockHeaders can be made instead of polling
    const provider = web3Context.requestManager.provider;
    if (provider && "supportsSubscriptions" in provider && provider.supportsSubscriptions()) (0, _watchTransactionBySubscriptionJs.watchTransactionBySubscription)({
        web3Context,
        transactionReceipt,
        transactionPromiEvent,
        returnFormat
    });
    else (0, _watchTransactionByPoolingJs.watchTransactionByPolling)({
        web3Context,
        transactionReceipt,
        transactionPromiEvent,
        returnFormat
    });
}

},{"web3-utils":"8WsWI","web3-validator":"6HK71","web3-errors":"jDvsn","../schemas.js":"bf11F","./watch_transaction_by_pooling.js":"jZGMZ","./watch_transaction_by_subscription.js":"6gkSR","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jZGMZ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "watchTransactionByPolling", ()=>watchTransactionByPolling);
var _web3Utils = require("web3-utils");
var _web3RpcMethods = require("web3-rpc-methods");
var _schemasJs = require("../schemas.js");
var __awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
const watchTransactionByPolling = ({ web3Context, transactionReceipt, transactionPromiEvent, returnFormat })=>{
    var _a;
    // Having a transactionReceipt means that the transaction has already been included
    // in at least one block, so we start with 1
    let confirmations = 1;
    const intervalId = setInterval(()=>{
        (()=>__awaiter(void 0, void 0, void 0, function*() {
                if (confirmations >= web3Context.transactionConfirmationBlocks) clearInterval(intervalId);
                const nextBlock = yield (0, _web3RpcMethods.ethRpcMethods).getBlockByNumber(web3Context.requestManager, (0, _web3Utils.numberToHex)(BigInt(transactionReceipt.blockNumber) + BigInt(confirmations)), false);
                if (nextBlock === null || nextBlock === void 0 ? void 0 : nextBlock.hash) {
                    confirmations += 1;
                    transactionPromiEvent.emit("confirmation", {
                        confirmations: (0, _web3Utils.format)({
                            format: "uint"
                        }, confirmations, returnFormat),
                        receipt: (0, _web3Utils.format)((0, _schemasJs.transactionReceiptSchema), transactionReceipt, returnFormat),
                        latestBlockHash: (0, _web3Utils.format)({
                            format: "bytes32"
                        }, nextBlock.hash, returnFormat)
                    });
                }
            }))();
    }, (_a = web3Context.transactionReceiptPollingInterval) !== null && _a !== void 0 ? _a : web3Context.transactionPollingInterval);
};

},{"web3-utils":"8WsWI","web3-rpc-methods":"eT6LI","../schemas.js":"bf11F","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6gkSR":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "watchTransactionBySubscription", ()=>watchTransactionBySubscription);
var _web3Utils = require("web3-utils");
var _schemasJs = require("../schemas.js");
var _watchTransactionByPoolingJs = require("./watch_transaction_by_pooling.js");
var __awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
const watchTransactionBySubscription = ({ web3Context, transactionReceipt, transactionPromiEvent, returnFormat })=>{
    // The following variable will stay true except if the data arrived,
    //	or if watching started after an error had occurred.
    let needToWatchLater = true;
    let lastCaughtBlockHash;
    setImmediate(()=>{
        var _a;
        (_a = web3Context.subscriptionManager) === null || _a === void 0 || _a.subscribe("newHeads").then((subscription)=>{
            subscription.on("data", (newBlockHeader)=>__awaiter(void 0, void 0, void 0, function*() {
                    var _a;
                    needToWatchLater = false;
                    if (!(newBlockHeader === null || newBlockHeader === void 0 ? void 0 : newBlockHeader.number) || // For some cases, the on-data event is fired couple times for the same block!
                    // This needs investigation but seems to be because of multiple `subscription.on('data'...)` even this should not cause that.
                    lastCaughtBlockHash === (newBlockHeader === null || newBlockHeader === void 0 ? void 0 : newBlockHeader.parentHash)) return;
                    lastCaughtBlockHash = newBlockHeader === null || newBlockHeader === void 0 ? void 0 : newBlockHeader.parentHash;
                    const confirmations = BigInt(newBlockHeader.number) - BigInt(transactionReceipt.blockNumber) + BigInt(1);
                    transactionPromiEvent.emit("confirmation", {
                        confirmations: (0, _web3Utils.format)({
                            format: "uint"
                        }, confirmations, returnFormat),
                        receipt: (0, _web3Utils.format)((0, _schemasJs.transactionReceiptSchema), transactionReceipt, returnFormat),
                        latestBlockHash: (0, _web3Utils.format)({
                            format: "bytes32"
                        }, newBlockHeader.parentHash, returnFormat)
                    });
                    if (confirmations >= web3Context.transactionConfirmationBlocks) yield (_a = web3Context.subscriptionManager) === null || _a === void 0 ? void 0 : _a.removeSubscription(subscription);
                }));
            subscription.on("error", ()=>__awaiter(void 0, void 0, void 0, function*() {
                    var _b;
                    yield (_b = web3Context.subscriptionManager) === null || _b === void 0 ? void 0 : _b.removeSubscription(subscription);
                    needToWatchLater = false;
                    (0, _watchTransactionByPoolingJs.watchTransactionByPolling)({
                        web3Context,
                        transactionReceipt,
                        transactionPromiEvent,
                        returnFormat
                    });
                }));
        }).catch(()=>{
            needToWatchLater = false;
            (0, _watchTransactionByPoolingJs.watchTransactionByPolling)({
                web3Context,
                transactionReceipt,
                transactionPromiEvent,
                returnFormat
            });
        });
    });
    // Fallback to polling if tx receipt didn't arrived in "blockHeaderTimeout" [10 seconds]
    setTimeout(()=>{
        if (needToWatchLater) (0, _watchTransactionByPoolingJs.watchTransactionByPolling)({
            web3Context,
            transactionReceipt,
            transactionPromiEvent,
            returnFormat
        });
    }, web3Context.blockHeaderTimeout * 1000);
};

},{"web3-utils":"8WsWI","../schemas.js":"bf11F","./watch_transaction_by_pooling.js":"jZGMZ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6DlV6":[function(require,module,exports) {
/*
This file is part of web3.js.

web3.js is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

web3.js is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getTransactionError", ()=>getTransactionError);
var _web3Errors = require("web3-errors");
// eslint-disable-next-line import/no-cycle
var _getRevertReasonJs = require("./get_revert_reason.js");
var __awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
function getTransactionError(web3Context, transactionFormatted, transactionReceiptFormatted, receivedError, contractAbi, knownReason) {
    return __awaiter(this, void 0, void 0, function*() {
        let _reason = knownReason;
        if (_reason === undefined) {
            if (receivedError !== undefined) _reason = (0, _getRevertReasonJs.parseTransactionError)(receivedError);
            else if (web3Context.handleRevert && transactionFormatted !== undefined) _reason = yield (0, _getRevertReasonJs.getRevertReason)(web3Context, transactionFormatted, contractAbi);
        }
        let error;
        if (_reason === undefined) error = new (0, _web3Errors.TransactionRevertedWithoutReasonError)(transactionReceiptFormatted);
        else if (typeof _reason === "string") error = new (0, _web3Errors.TransactionRevertInstructionError)(_reason, undefined, transactionReceiptFormatted);
        else if (_reason.customErrorName !== undefined && _reason.customErrorDecodedSignature !== undefined && _reason.customErrorArguments !== undefined) {
            const reasonWithCustomError = _reason;
            error = new (0, _web3Errors.TransactionRevertWithCustomError)(reasonWithCustomError.reason, reasonWithCustomError.customErrorName, reasonWithCustomError.customErrorDecodedSignature, reasonWithCustomError.customErrorArguments, reasonWithCustomError.signature, transactionReceiptFormatted, reasonWithCustomError.data);
        } else error = new (0, _web3Errors.TransactionRevertInstructionError)(_reason.reason, _reason.signature, transactionReceiptFormatted, _reason.data);
        return error;
    });
}

},{"web3-errors":"jDvsn","./get_revert_reason.js":"cnloD","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cnloD":[function(require,module,exports) {
/*
This file is part of web3.js.

web3.js is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

web3.js is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "parseTransactionError", ()=>parseTransactionError);
/**
 *	Returns the revert reason generated by the EVM if the transaction were to be executed.
 *
 * @param web3Context - ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.
 * @param transaction - A transaction object where all properties are optional except `to`, however it's recommended to include the `from` property or it may default to `0x0000000000000000000000000000000000000000` depending on your node or provider.
 * @returns `undefined` if no revert reason was given, a revert reason object, a revert reason string, or an `unknown` error
 */ parcelHelpers.export(exports, "getRevertReason", ()=>getRevertReason);
var _web3Errors = require("web3-errors");
var _web3EthAbi = require("web3-eth-abi");
var _web3Types = require("web3-types");
// eslint-disable-next-line import/no-cycle
var _rpcMethodWrappersJs = require("../rpc_method_wrappers.js");
var __awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
const parseTransactionError = (error, contractAbi)=>{
    var _a, _b, _c, _d;
    if (error instanceof (0, _web3Errors.ContractExecutionError) && error.innerError instanceof (0, _web3Errors.Eip838ExecutionError)) {
        if (contractAbi !== undefined) {
            const errorsAbi = contractAbi.filter((abi)=>(0, _web3EthAbi.isAbiErrorFragment)(abi));
            (0, _web3EthAbi.decodeContractErrorData)(errorsAbi, error.innerError);
            return {
                reason: error.innerError.message,
                signature: (_a = error.innerError.data) === null || _a === void 0 ? void 0 : _a.slice(0, 10),
                data: (_b = error.innerError.data) === null || _b === void 0 ? void 0 : _b.substring(10),
                customErrorName: error.innerError.errorName,
                customErrorDecodedSignature: error.innerError.errorSignature,
                customErrorArguments: error.innerError.errorArgs
            };
        }
        return {
            reason: error.innerError.message,
            signature: (_c = error.innerError.data) === null || _c === void 0 ? void 0 : _c.slice(0, 10),
            data: (_d = error.innerError.data) === null || _d === void 0 ? void 0 : _d.substring(10)
        };
    }
    if (error instanceof (0, _web3Errors.InvalidResponseError) && !Array.isArray(error.innerError) && error.innerError !== undefined) return error.innerError.message;
    throw error;
};
function getRevertReason(web3Context, transaction, contractAbi, returnFormat = (0, _web3Types.DEFAULT_RETURN_FORMAT)) {
    return __awaiter(this, void 0, void 0, function*() {
        try {
            yield (0, _rpcMethodWrappersJs.call)(web3Context, transaction, web3Context.defaultBlock, returnFormat);
            return undefined;
        } catch (error) {
            return parseTransactionError(error, contractAbi);
        }
    });
}

},{"web3-errors":"jDvsn","web3-eth-abi":"bZbSL","web3-types":"g7Ztk","../rpc_method_wrappers.js":"44lYD","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bZbSL":[function(require,module,exports) {
/*
This file is part of web3.js.

web3.js is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

web3.js is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/ /**
 * The web3.eth.abi functions let you encode and decode parameters to ABI (Application Binary Interface) for function calls to the EVM (Ethereum Virtual Machine).
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getEncodedEip712Data", ()=>(0, _eip712Js.getMessage));
var _errorsApiJs = require("./api/errors_api.js");
parcelHelpers.exportAll(_errorsApiJs, exports);
var _eventsApiJs = require("./api/events_api.js");
parcelHelpers.exportAll(_eventsApiJs, exports);
var _functionsApiJs = require("./api/functions_api.js");
parcelHelpers.exportAll(_functionsApiJs, exports);
var _logsApiJs = require("./api/logs_api.js");
parcelHelpers.exportAll(_logsApiJs, exports);
var _parametersApiJs = require("./api/parameters_api.js");
parcelHelpers.exportAll(_parametersApiJs, exports);
var _utilsJs = require("./utils.js");
parcelHelpers.exportAll(_utilsJs, exports);
var _decodeContractErrorDataJs = require("./decode_contract_error_data.js");
parcelHelpers.exportAll(_decodeContractErrorDataJs, exports);
var _eip712Js = require("./eip_712.js");

},{"./api/errors_api.js":"85OOa","./api/events_api.js":"2Qxfx","./api/functions_api.js":"bTfIi","./api/logs_api.js":"70lOU","./api/parameters_api.js":"6GljU","./utils.js":"6pmIn","./decode_contract_error_data.js":"8gY9E","./eip_712.js":"6PkXx","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"85OOa":[function(require,module,exports) {
/*
This file is part of web3.js.

web3.js is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

web3.js is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "encodeErrorSignature", ()=>encodeErrorSignature);
var _web3Utils = require("web3-utils");
var _web3Errors = require("web3-errors");
var _utilsJs = require("../utils.js");
const encodeErrorSignature = (functionName)=>{
    if (typeof functionName !== "string" && !(0, _utilsJs.isAbiErrorFragment)(functionName)) throw new (0, _web3Errors.AbiError)("Invalid parameter value in encodeErrorSignature");
    let name;
    if (functionName && (typeof functionName === "function" || typeof functionName === "object")) name = (0, _utilsJs.jsonInterfaceMethodToString)(functionName);
    else name = functionName;
    return (0, _web3Utils.sha3Raw)(name);
};

},{"web3-utils":"8WsWI","web3-errors":"jDvsn","../utils.js":"6pmIn","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6pmIn":[function(require,module,exports) {
/*
This file is part of web3.js.

web3.js is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

web3.js is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isAbiFragment", ()=>isAbiFragment);
parcelHelpers.export(exports, "isAbiErrorFragment", ()=>isAbiErrorFragment);
parcelHelpers.export(exports, "isAbiEventFragment", ()=>isAbiEventFragment);
parcelHelpers.export(exports, "isAbiFunctionFragment", ()=>isAbiFunctionFragment);
parcelHelpers.export(exports, "isAbiConstructorFragment", ()=>isAbiConstructorFragment);
parcelHelpers.export(exports, "isSimplifiedStructFormat", ()=>isSimplifiedStructFormat);
parcelHelpers.export(exports, "mapStructNameAndType", ()=>mapStructNameAndType);
parcelHelpers.export(exports, "mapStructToCoderFormat", ()=>mapStructToCoderFormat);
parcelHelpers.export(exports, "mapTypes", ()=>mapTypes);
parcelHelpers.export(exports, "isOddHexstring", ()=>isOddHexstring);
parcelHelpers.export(exports, "formatOddHexstrings", ()=>formatOddHexstrings);
parcelHelpers.export(exports, "formatParam", ()=>formatParam);
parcelHelpers.export(exports, "flattenTypes", ()=>flattenTypes);
parcelHelpers.export(exports, "jsonInterfaceMethodToString", ()=>jsonInterfaceMethodToString);
var _web3Errors = require("web3-errors");
var _web3Utils = require("web3-utils");
const isAbiFragment = (item)=>!(0, _web3Utils.isNullish)(item) && typeof item === "object" && !(0, _web3Utils.isNullish)(item.type) && [
        "function",
        "event",
        "constructor",
        "error"
    ].includes(item.type);
const isAbiErrorFragment = (item)=>!(0, _web3Utils.isNullish)(item) && typeof item === "object" && !(0, _web3Utils.isNullish)(item.type) && item.type === "error";
const isAbiEventFragment = (item)=>!(0, _web3Utils.isNullish)(item) && typeof item === "object" && !(0, _web3Utils.isNullish)(item.type) && item.type === "event";
const isAbiFunctionFragment = (item)=>!(0, _web3Utils.isNullish)(item) && typeof item === "object" && !(0, _web3Utils.isNullish)(item.type) && item.type === "function";
const isAbiConstructorFragment = (item)=>!(0, _web3Utils.isNullish)(item) && typeof item === "object" && !(0, _web3Utils.isNullish)(item.type) && item.type === "constructor";
const isSimplifiedStructFormat = (type)=>typeof type === "object" && typeof type.components === "undefined" && typeof type.name === "undefined";
const mapStructNameAndType = (structName)=>structName.includes("[]") ? {
        type: "tuple[]",
        name: structName.slice(0, -2)
    } : {
        type: "tuple",
        name: structName
    };
const mapStructToCoderFormat = (struct)=>{
    const components = [];
    for (const key of Object.keys(struct)){
        const item = struct[key];
        if (typeof item === "object") components.push(Object.assign(Object.assign({}, mapStructNameAndType(key)), {
            components: mapStructToCoderFormat(item)
        }));
        else components.push({
            name: key,
            type: struct[key]
        });
    }
    return components;
};
const mapTypes = (types)=>{
    const mappedTypes = [];
    for (const type of types){
        let modifiedType = type;
        // Clone object
        if (typeof type === "object") modifiedType = Object.assign({}, type);
        // Remap `function` type params to bytes24 since Ethers does not
        // recognize former type. Solidity docs say `Function` is a bytes24
        // encoding the contract address followed by the function selector hash.
        if (typeof type === "object" && type.type === "function") modifiedType = Object.assign(Object.assign({}, type), {
            type: "bytes24"
        });
        if (isSimplifiedStructFormat(modifiedType)) {
            const structName = Object.keys(modifiedType)[0];
            mappedTypes.push(Object.assign(Object.assign({}, mapStructNameAndType(structName)), {
                components: mapStructToCoderFormat(modifiedType[structName])
            }));
        } else mappedTypes.push(modifiedType);
    }
    return mappedTypes;
};
const isOddHexstring = (param)=>typeof param === "string" && /^(-)?0x[0-9a-f]*$/i.test(param) && param.length % 2 === 1;
const formatOddHexstrings = (param)=>isOddHexstring(param) ? `0x0${param.substring(2)}` : param;
const formatParam = (type, _param)=>{
    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
    var _a;
    // clone if _param is an object
    const param = typeof _param === "object" && !Array.isArray(_param) ? Object.assign({}, _param) : _param;
    const paramTypeBytes = /^bytes([0-9]*)$/;
    const paramTypeBytesArray = /^bytes([0-9]*)\[\]$/;
    const paramTypeNumber = /^(u?int)([0-9]*)$/;
    const paramTypeNumberArray = /^(u?int)([0-9]*)\[\]$/;
    // Format BN to string
    if (param instanceof BigInt) return param.toString(10);
    if (paramTypeBytesArray.exec(type) || paramTypeNumberArray.exec(type)) {
        // eslint-disable-next-line @typescript-eslint/no-unsafe-return
        const paramClone = [
            ...param
        ];
        return paramClone.map((p)=>formatParam(type.replace("[]", ""), p));
    }
    // Format correct width for u?int[0-9]*
    let match = paramTypeNumber.exec(type);
    if (match) {
        const size = parseInt((_a = match[2]) !== null && _a !== void 0 ? _a : "256", 10);
        if (size / 8 < param.length) // pad to correct bit width
        return (0, _web3Utils.leftPad)(param, size);
    }
    // Format correct length for bytes[0-9]+
    match = paramTypeBytes.exec(type);
    if (match) {
        const hexParam = param instanceof Uint8Array ? (0, _web3Utils.toHex)(param) : param;
        // format to correct length
        const size = parseInt(match[1], 10);
        if (size) {
            let maxSize = size * 2;
            if (param.startsWith("0x")) maxSize += 2;
            // pad to correct length
            const paddedParam = hexParam.length < maxSize ? (0, _web3Utils.rightPad)(param, size * 2) : hexParam;
            return formatOddHexstrings(paddedParam);
        }
        return formatOddHexstrings(hexParam);
    }
    return param;
};
const flattenTypes = (includeTuple, puts)=>{
    const types = [];
    puts.forEach((param)=>{
        if (typeof param.components === "object") {
            if (!param.type.startsWith("tuple")) throw new (0, _web3Errors.AbiError)(`Invalid value given "${param.type}". Error: components found but type is not tuple.`);
            const arrayBracket = param.type.indexOf("[");
            const suffix = arrayBracket >= 0 ? param.type.substring(arrayBracket) : "";
            const result = flattenTypes(includeTuple, param.components);
            if (Array.isArray(result) && includeTuple) types.push(`tuple(${result.join(",")})${suffix}`);
            else if (!includeTuple) types.push(`(${result.join(",")})${suffix}`);
            else types.push(`(${result.join()})`);
        } else types.push(param.type);
    });
    return types;
};
const jsonInterfaceMethodToString = (json)=>{
    var _a, _b, _c, _d;
    if (isAbiErrorFragment(json) || isAbiEventFragment(json) || isAbiFunctionFragment(json)) {
        if ((_a = json.name) === null || _a === void 0 ? void 0 : _a.includes("(")) return json.name;
        return `${(_b = json.name) !== null && _b !== void 0 ? _b : ""}(${flattenTypes(false, (_c = json.inputs) !== null && _c !== void 0 ? _c : []).join(",")})`;
    }
    // Constructor fragment
    return `(${flattenTypes(false, (_d = json.inputs) !== null && _d !== void 0 ? _d : []).join(",")})`;
};

},{"web3-errors":"jDvsn","web3-utils":"8WsWI","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2Qxfx":[function(require,module,exports) {
/*
This file is part of web3.js.

web3.js is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

web3.js is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "encodeEventSignature", ()=>encodeEventSignature);
var _web3Utils = require("web3-utils");
var _web3Errors = require("web3-errors");
var _utilsJs = require("../utils.js");
const encodeEventSignature = (functionName)=>{
    if (typeof functionName !== "string" && !(0, _utilsJs.isAbiEventFragment)(functionName)) throw new (0, _web3Errors.AbiError)("Invalid parameter value in encodeEventSignature");
    let name;
    if (functionName && (typeof functionName === "function" || typeof functionName === "object")) name = (0, _utilsJs.jsonInterfaceMethodToString)(functionName);
    else name = functionName;
    return (0, _web3Utils.sha3Raw)(name);
};

},{"web3-utils":"8WsWI","web3-errors":"jDvsn","../utils.js":"6pmIn","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bTfIi":[function(require,module,exports) {
/*
This file is part of web3.js.

web3.js is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

web3.js is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "encodeFunctionSignature", ()=>encodeFunctionSignature);
parcelHelpers.export(exports, "encodeFunctionCall", ()=>encodeFunctionCall);
var _web3Errors = require("web3-errors");
var _web3Utils = require("web3-utils");
var _utilsJs = require("../utils.js");
var _parametersApiJs = require("./parameters_api.js");
const encodeFunctionSignature = (functionName)=>{
    if (typeof functionName !== "string" && !(0, _utilsJs.isAbiFunctionFragment)(functionName)) throw new (0, _web3Errors.AbiError)("Invalid parameter value in encodeFunctionSignature");
    let name;
    if (functionName && (typeof functionName === "function" || typeof functionName === "object")) name = (0, _utilsJs.jsonInterfaceMethodToString)(functionName);
    else name = functionName;
    return (0, _web3Utils.sha3Raw)(name).slice(0, 10);
};
const encodeFunctionCall = (jsonInterface, params)=>{
    var _a;
    if (!(0, _utilsJs.isAbiFunctionFragment)(jsonInterface)) throw new (0, _web3Errors.AbiError)("Invalid parameter value in encodeFunctionCall");
    return `${encodeFunctionSignature(jsonInterface)}${(0, _parametersApiJs.encodeParameters)((_a = jsonInterface.inputs) !== null && _a !== void 0 ? _a : [], params !== null && params !== void 0 ? params : []).replace("0x", "")}`;
};

},{"web3-errors":"jDvsn","web3-utils":"8WsWI","../utils.js":"6pmIn","./parameters_api.js":"6GljU","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6GljU":[function(require,module,exports) {
/*
This file is part of web3.js.

web3.js is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

web3.js is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "encodeParameters", ()=>encodeParameters);
parcelHelpers.export(exports, "encodeParameter", ()=>encodeParameter);
parcelHelpers.export(exports, "decodeParametersWith", ()=>decodeParametersWith);
parcelHelpers.export(exports, "decodeParameters", ()=>decodeParameters);
parcelHelpers.export(exports, "decodeParameter", ()=>decodeParameter);
var _web3Errors = require("web3-errors");
var _decodeJs = require("../coders/decode.js");
var _encodeJs = require("../coders/encode.js");
const encodeParameters = (abi, params)=>(0, _encodeJs.encodeParameters)(abi, params);
const encodeParameter = (abi, param)=>encodeParameters([
        abi
    ], [
        param
    ]);
const decodeParametersWith = (abis, bytes, loose)=>{
    try {
        if (abis.length > 0 && (!bytes || bytes === "0x" || bytes === "0X")) throw new (0, _web3Errors.AbiError)("Returned values aren't valid, did it run Out of Gas? You might also see this error if you are not using the correct ABI for the contract you are retrieving data from, requesting data from a block number that does not exist, or querying a node which is not fully synced.");
        return (0, _decodeJs.decodeParameters)(abis, `0x${bytes.replace(/0x/i, "")}`, loose);
    } catch (err) {
        throw new (0, _web3Errors.AbiError)(`Parameter decoding error: ${err.message}`, {
            internalErr: err
        });
    }
};
const decodeParameters = (abi, bytes)=>decodeParametersWith(abi, bytes, false);
const decodeParameter = (abi, bytes)=>decodeParameters([
        abi
    ], bytes)["0"];

},{"web3-errors":"jDvsn","../coders/decode.js":"aPul5","../coders/encode.js":"ig6Nj","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aPul5":[function(require,module,exports) {
/*
This file is part of web3.js.

web3.js is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

web3.js is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "decodeParameters", ()=>decodeParameters);
var _web3Validator = require("web3-validator");
var _tupleJs = require("./base/tuple.js");
var _utilsJs = require("./utils.js");
function decodeParameters(abis, bytes, _loose) {
    const abiParams = (0, _utilsJs.toAbiParams)(abis);
    const bytesArray = (0, _web3Validator.utils).hexToUint8Array(bytes);
    return (0, _tupleJs.decodeTuple)({
        type: "tuple",
        name: "",
        components: abiParams
    }, bytesArray).result;
}

},{"web3-validator":"6HK71","./base/tuple.js":"lIszj","./utils.js":"creNw","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lIszj":[function(require,module,exports) {
/*
This file is part of web3.js.

web3.js is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

web3.js is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "encodeTuple", ()=>encodeTuple);
parcelHelpers.export(exports, "decodeTuple", ()=>decodeTuple);
var _web3Errors = require("web3-errors");
var _web3Utils = require("web3-utils");
// eslint-disable-next-line import/no-cycle
var _indexJs = require("./index.js");
var _utilsJs = require("./utils.js");
var _utilsJs1 = require("../utils.js");
var _numberJs = require("./number.js");
function encodeTuple(param, input) {
    var _a, _b, _c;
    let dynamic = false;
    if (!Array.isArray(input) && typeof input !== "object") throw new (0, _web3Errors.AbiError)("param must be either Array or Object", {
        param,
        input
    });
    const narrowedInput = input;
    const encoded = [];
    for(let i = 0; i < ((_b = (_a = param.components) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0); i += 1){
        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
        const paramComponent = param.components[i];
        let result;
        if (Array.isArray(narrowedInput)) {
            if (i >= narrowedInput.length) throw new (0, _web3Errors.AbiError)("input param length missmatch", {
                param,
                input
            });
            result = (0, _indexJs.encodeParamFromAbiParameter)(paramComponent, narrowedInput[i]);
        } else {
            const paramInput = narrowedInput[(_c = paramComponent.name) !== null && _c !== void 0 ? _c : ""];
            // eslint-disable-next-line no-null/no-null
            if (paramInput === undefined || paramInput === null) throw new (0, _web3Errors.AbiError)("missing input defined in abi", {
                param,
                input,
                paramName: paramComponent.name
            });
            result = (0, _indexJs.encodeParamFromAbiParameter)(paramComponent, paramInput);
        }
        if (result.dynamic) dynamic = true;
        encoded.push(result);
    }
    if (dynamic) return {
        dynamic: true,
        encoded: (0, _utilsJs.encodeDynamicParams)(encoded)
    };
    return {
        dynamic: false,
        encoded: (0, _web3Utils.uint8ArrayConcat)(...encoded.map((e)=>e.encoded))
    };
}
function decodeTuple(param, bytes) {
    const result = {
        __length__: 0
    };
    // tracks how much static params consumed bytes
    let consumed = 0;
    if (!param.components) return {
        result,
        encoded: bytes,
        consumed
    };
    // track how much dynamic params consumed bytes
    let dynamicConsumed = 0;
    for (const [index, childParam] of param.components.entries()){
        let decodedResult;
        if ((0, _utilsJs1.isDynamic)(childParam)) {
            // if dynamic, we will have offset encoded
            const offsetResult = (0, _numberJs.decodeNumber)({
                type: "uint32",
                name: ""
            }, bytes.subarray(consumed));
            // offset counts from start of original byte sequence
            decodedResult = (0, _indexJs.decodeParamFromAbiParameter)(childParam, bytes.subarray(Number(offsetResult.result)));
            consumed += offsetResult.consumed;
            dynamicConsumed += decodedResult.consumed;
        } else {
            // static param, just decode
            decodedResult = (0, _indexJs.decodeParamFromAbiParameter)(childParam, bytes.subarray(consumed));
            consumed += decodedResult.consumed;
        }
        result.__length__ += 1;
        result[index] = decodedResult.result;
        if (childParam.name && childParam.name !== "") result[childParam.name] = decodedResult.result;
    }
    return {
        encoded: bytes.subarray(consumed + dynamicConsumed),
        result,
        consumed: consumed + dynamicConsumed
    };
}

},{"web3-errors":"jDvsn","web3-utils":"8WsWI","./index.js":"cZ6pb","./utils.js":"bBQmH","../utils.js":"creNw","./number.js":"3i985","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cZ6pb":[function(require,module,exports) {
/*
This file is part of web3.js.

web3.js is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

web3.js is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "encodeAddress", ()=>(0, _addressJs.encodeAddress));
parcelHelpers.export(exports, "decodeAddress", ()=>(0, _addressJs.decodeAddress));
parcelHelpers.export(exports, "encodeBoolean", ()=>(0, _boolJs.encodeBoolean));
parcelHelpers.export(exports, "decodeBool", ()=>(0, _boolJs.decodeBool));
parcelHelpers.export(exports, "encodeBytes", ()=>(0, _bytesJs.encodeBytes));
parcelHelpers.export(exports, "decodeBytes", ()=>(0, _bytesJs.decodeBytes));
parcelHelpers.export(exports, "encodeNumber", ()=>(0, _numberJs.encodeNumber));
parcelHelpers.export(exports, "decodeNumber", ()=>(0, _numberJs.decodeNumber));
parcelHelpers.export(exports, "encodeString", ()=>(0, _stringJs.encodeString));
parcelHelpers.export(exports, "decodeString", ()=>(0, _stringJs.decodeString));
// eslint-disable-next-line import/no-cycle
parcelHelpers.export(exports, "encodeTuple", ()=>(0, _tupleJs.encodeTuple));
parcelHelpers.export(exports, "decodeTuple", ()=>(0, _tupleJs.decodeTuple));
// eslint-disable-next-line import/no-cycle
parcelHelpers.export(exports, "encodeArray", ()=>(0, _arrayJs.encodeArray));
parcelHelpers.export(exports, "decodeArray", ()=>(0, _arrayJs.decodeArray));
parcelHelpers.export(exports, "encodeParamFromAbiParameter", ()=>encodeParamFromAbiParameter);
parcelHelpers.export(exports, "decodeParamFromAbiParameter", ()=>decodeParamFromAbiParameter);
var _addressJs = require("./address.js");
var _boolJs = require("./bool.js");
var _bytesJs = require("./bytes.js");
var _numberJs = require("./number.js");
var _stringJs = require("./string.js");
// eslint-disable-next-line import/no-cycle
var _tupleJs = require("./tuple.js");
// eslint-disable-next-line import/no-cycle
var _arrayJs = require("./array.js");
function encodeParamFromAbiParameter(param, value) {
    if (param.type === "string") return (0, _stringJs.encodeString)(param, value);
    if (param.type === "bool") return (0, _boolJs.encodeBoolean)(param, value);
    if (param.type === "address") return (0, _addressJs.encodeAddress)(param, value);
    if (param.type === "tuple") return (0, _tupleJs.encodeTuple)(param, value);
    if (param.type.endsWith("]")) return (0, _arrayJs.encodeArray)(param, value);
    if (param.type.startsWith("bytes")) return (0, _bytesJs.encodeBytes)(param, value);
    if (param.type.startsWith("uint") || param.type.startsWith("int")) return (0, _numberJs.encodeNumber)(param, value);
    throw new Error("Unsupported");
}
function decodeParamFromAbiParameter(param, bytes) {
    if (param.type === "string") return (0, _stringJs.decodeString)(param, bytes);
    if (param.type === "bool") return (0, _boolJs.decodeBool)(param, bytes);
    if (param.type === "address") return (0, _addressJs.decodeAddress)(param, bytes);
    if (param.type === "tuple") return (0, _tupleJs.decodeTuple)(param, bytes);
    if (param.type.endsWith("]")) return (0, _arrayJs.decodeArray)(param, bytes);
    if (param.type.startsWith("bytes")) return (0, _bytesJs.decodeBytes)(param, bytes);
    if (param.type.startsWith("uint") || param.type.startsWith("int")) return (0, _numberJs.decodeNumber)(param, bytes);
    throw new Error("Unsupported");
}

},{"./address.js":"kC6Ha","./bool.js":"kbvKa","./bytes.js":"8pkAW","./number.js":"3i985","./string.js":"9cdRO","./tuple.js":"lIszj","./array.js":"7TYjY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kC6Ha":[function(require,module,exports) {
/*
This file is part of web3.js.

web3.js is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

web3.js is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "encodeAddress", ()=>encodeAddress);
parcelHelpers.export(exports, "decodeAddress", ()=>decodeAddress);
var _web3Errors = require("web3-errors");
var _web3Utils = require("web3-utils");
var _web3Validator = require("web3-validator");
var _utilsJs = require("../utils.js");
const ADDRESS_BYTES_COUNT = 20;
const ADDRESS_OFFSET = (0, _utilsJs.WORD_SIZE) - ADDRESS_BYTES_COUNT;
function encodeAddress(param, input) {
    if (typeof input !== "string") throw new (0, _web3Errors.AbiError)("address type expects string as input type", {
        value: input,
        name: param.name,
        type: param.type
    });
    let address = input.toLowerCase();
    if (!address.startsWith("0x")) address = `0x${address}`;
    if (!(0, _web3Validator.isAddress)(address)) throw new (0, _web3Errors.AbiError)("provided input is not valid address", {
        value: input,
        name: param.name,
        type: param.type
    });
    // for better performance, we could convert hex to destination bytes directly (encoded var)
    const addressBytes = (0, _web3Validator.utils).hexToUint8Array(address);
    // expand address to WORD_SIZE
    const encoded = (0, _utilsJs.alloc)((0, _utilsJs.WORD_SIZE));
    encoded.set(addressBytes, ADDRESS_OFFSET);
    return {
        dynamic: false,
        encoded
    };
}
function decodeAddress(_param, bytes) {
    const addressBytes = bytes.subarray(ADDRESS_OFFSET, (0, _utilsJs.WORD_SIZE));
    if (addressBytes.length !== ADDRESS_BYTES_COUNT) throw new (0, _web3Errors.AbiError)("Invalid decoding input, not enough bytes to decode address", {
        bytes
    });
    const result = (0, _web3Validator.utils).uint8ArrayToHexString(addressBytes);
    // should we check is decoded value is valid address?
    // if(!isAddress(result)) {
    //     throw new AbiError("encoded data is not valid address", {
    //         address: result,
    //     });
    // }
    return {
        result: (0, _web3Utils.toChecksumAddress)(result),
        encoded: bytes.subarray((0, _utilsJs.WORD_SIZE)),
        consumed: (0, _utilsJs.WORD_SIZE)
    };
}

},{"web3-errors":"jDvsn","web3-utils":"8WsWI","web3-validator":"6HK71","../utils.js":"creNw","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"creNw":[function(require,module,exports) {
/*
This file is part of web3.js.

web3.js is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

web3.js is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "WORD_SIZE", ()=>WORD_SIZE);
parcelHelpers.export(exports, "alloc", ()=>alloc);
/**
 * Where possible returns a Uint8Array of the requested size that references
 * uninitialized memory. Only use if you are certain you will immediately
 * overwrite every value in the returned `Uint8Array`.
 */ parcelHelpers.export(exports, "allocUnsafe", ()=>allocUnsafe);
parcelHelpers.export(exports, "convertExternalAbiParameter", ()=>convertExternalAbiParameter);
parcelHelpers.export(exports, "isAbiParameter", ()=>isAbiParameter);
parcelHelpers.export(exports, "toAbiParams", ()=>toAbiParams);
parcelHelpers.export(exports, "extractArrayType", ()=>extractArrayType);
/**
 * Param is dynamic if it's dynamic base type or if some of his children (components, array items)
 * is of dynamic type
 * @param param
 */ parcelHelpers.export(exports, "isDynamic", ()=>isDynamic);
var _abitype = require("abitype");
var _web3Errors = require("web3-errors");
var _web3Utils = require("web3-utils");
var _utilsJs = require("../utils.js");
const WORD_SIZE = 32;
function alloc(size = 0) {
    var _a;
    if (((_a = globalThis.Buffer) === null || _a === void 0 ? void 0 : _a.alloc) !== undefined) {
        const buf = globalThis.Buffer.alloc(size);
        return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength);
    }
    return new Uint8Array(size);
}
function allocUnsafe(size = 0) {
    var _a;
    if (((_a = globalThis.Buffer) === null || _a === void 0 ? void 0 : _a.allocUnsafe) !== undefined) {
        const buf = globalThis.Buffer.allocUnsafe(size);
        return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength);
    }
    return new Uint8Array(size);
}
function convertExternalAbiParameter(abiParam) {
    var _a, _b;
    return Object.assign(Object.assign({}, abiParam), {
        name: (_a = abiParam.name) !== null && _a !== void 0 ? _a : "",
        components: (_b = abiParam.components) === null || _b === void 0 ? void 0 : _b.map((c)=>convertExternalAbiParameter(c))
    });
}
function isAbiParameter(param) {
    return !(0, _web3Utils.isNullish)(param) && typeof param === "object" && !(0, _web3Utils.isNullish)(param.type) && typeof param.type === "string";
}
function toAbiParams(abi) {
    return abi.map((input)=>{
        var _a;
        if (isAbiParameter(input)) return input;
        if (typeof input === "string") return convertExternalAbiParameter((0, _abitype.parseAbiParameter)(input.replace(/tuple/, "")));
        if ((0, _utilsJs.isSimplifiedStructFormat)(input)) {
            const structName = Object.keys(input)[0];
            const structInfo = (0, _utilsJs.mapStructNameAndType)(structName);
            structInfo.name = (_a = structInfo.name) !== null && _a !== void 0 ? _a : "";
            return Object.assign(Object.assign({}, structInfo), {
                components: (0, _utilsJs.mapStructToCoderFormat)(input[structName])
            });
        }
        throw new (0, _web3Errors.AbiError)("Invalid abi");
    });
}
function extractArrayType(param) {
    const arrayParenthesisStart = param.type.lastIndexOf("[");
    const arrayParamType = param.type.substring(0, arrayParenthesisStart);
    const sizeString = param.type.substring(arrayParenthesisStart);
    let size = -1;
    if (sizeString !== "[]") {
        size = Number(sizeString.slice(1, -1));
        // eslint-disable-next-line no-restricted-globals
        if (isNaN(size)) throw new (0, _web3Errors.AbiError)("Invalid fixed array size", {
            size: sizeString
        });
    }
    return {
        param: {
            type: arrayParamType,
            name: "",
            components: param.components
        },
        size
    };
}
function isDynamic(param) {
    var _a, _b;
    if (param.type === "string" || param.type === "bytes" || param.type.endsWith("[]")) return true;
    if (param.type === "tuple") return (_b = (_a = param.components) === null || _a === void 0 ? void 0 : _a.some(isDynamic)) !== null && _b !== void 0 ? _b : false;
    if (param.type.endsWith("]")) return isDynamic(extractArrayType(param).param);
    return false;
}

},{"abitype":"1SHnv","web3-errors":"jDvsn","web3-utils":"8WsWI","../utils.js":"6pmIn","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1SHnv":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "BaseError", ()=>BaseError);
parcelHelpers.export(exports, "narrow", ()=>narrow);
parcelHelpers.export(exports, "parseAbi", ()=>parseAbi);
parcelHelpers.export(exports, "parseAbiItem", ()=>parseAbiItem);
parcelHelpers.export(exports, "parseAbiParameter", ()=>parseAbiParameter2);
parcelHelpers.export(exports, "parseAbiParameters", ()=>parseAbiParameters);
var _chunkWP7KDV47Mjs = require("./chunk-WP7KDV47.mjs");
var _chunkNHABU752Mjs = require("./chunk-NHABU752.mjs");
// package.json
var name = "abitype";
var version = "0.7.1";
// src/errors.ts
var BaseError = class extends Error {
    constructor(shortMessage, args = {}){
        const details = args.cause instanceof BaseError ? args.cause.details : args.cause?.message ? args.cause.message : args.details;
        const docsPath = args.cause instanceof BaseError ? args.cause.docsPath || args.docsPath : args.docsPath;
        const message = [
            shortMessage || "An error occurred.",
            "",
            ...args.metaMessages ? [
                ...args.metaMessages,
                ""
            ] : [],
            ...docsPath ? [
                `Docs: https://abitype.dev${docsPath}`
            ] : [],
            ...details ? [
                `Details: ${details}`
            ] : [],
            `Version: ${name}@${version}`
        ].join("\n");
        super(message);
        (0, _chunkNHABU752Mjs.__publicField)(this, "details");
        (0, _chunkNHABU752Mjs.__publicField)(this, "docsPath");
        (0, _chunkNHABU752Mjs.__publicField)(this, "metaMessages");
        (0, _chunkNHABU752Mjs.__publicField)(this, "shortMessage");
        (0, _chunkNHABU752Mjs.__publicField)(this, "name", "AbiTypeError");
        if (args.cause) this.cause = args.cause;
        this.details = details;
        this.docsPath = docsPath;
        this.metaMessages = args.metaMessages;
        this.shortMessage = shortMessage;
    }
};
// src/narrow.ts
function narrow(value) {
    return value;
}
// src/human-readable/runtime/signatures.ts
var errorSignatureRegex = /^error (?<name>[a-zA-Z0-9_]+)\((?<parameters>.*?)\)$/;
function isErrorSignature(signature) {
    return errorSignatureRegex.test(signature);
}
function execErrorSignature(signature) {
    return (0, _chunkWP7KDV47Mjs.execTyped)(errorSignatureRegex, signature);
}
var eventSignatureRegex = /^event (?<name>[a-zA-Z0-9_]+)\((?<parameters>.*?)\)$/;
function isEventSignature(signature) {
    return eventSignatureRegex.test(signature);
}
function execEventSignature(signature) {
    return (0, _chunkWP7KDV47Mjs.execTyped)(eventSignatureRegex, signature);
}
var functionSignatureRegex = /^function (?<name>[a-zA-Z0-9_]+)\((?<parameters>.*?)\)(?: (?<scope>external|public{1}))?(?: (?<stateMutability>pure|view|nonpayable|payable{1}))?(?: returns \((?<returns>.*?)\))?$/;
function isFunctionSignature(signature) {
    return functionSignatureRegex.test(signature);
}
function execFunctionSignature(signature) {
    return (0, _chunkWP7KDV47Mjs.execTyped)(functionSignatureRegex, signature);
}
var structSignatureRegex = /^struct (?<name>[a-zA-Z0-9_]+) \{(?<properties>.*?)\}$/;
function isStructSignature(signature) {
    return structSignatureRegex.test(signature);
}
function execStructSignature(signature) {
    return (0, _chunkWP7KDV47Mjs.execTyped)(structSignatureRegex, signature);
}
var constructorSignatureRegex = /^constructor\((?<parameters>.*?)\)(?:\s(?<stateMutability>payable{1}))?$/;
function isConstructorSignature(signature) {
    return constructorSignatureRegex.test(signature);
}
function execConstructorSignature(signature) {
    return (0, _chunkWP7KDV47Mjs.execTyped)(constructorSignatureRegex, signature);
}
var fallbackSignatureRegex = /^fallback\(\)$/;
function isFallbackSignature(signature) {
    return fallbackSignatureRegex.test(signature);
}
var receiveSignatureRegex = /^receive\(\) external payable$/;
function isReceiveSignature(signature) {
    return receiveSignatureRegex.test(signature);
}
var modifiers = /* @__PURE__ */ new Set([
    "memory",
    "indexed",
    "storage",
    "calldata"
]);
var eventModifiers = /* @__PURE__ */ new Set([
    "indexed"
]);
var functionModifiers = /* @__PURE__ */ new Set([
    "calldata",
    "memory",
    "storage"
]);
// src/human-readable/runtime/cache.ts
function getParameterCacheKey(param, type) {
    if (type) return `${type}:${param}`;
    return param;
}
var parameterCache = /* @__PURE__ */ new Map([
    // Unnamed
    [
        "address",
        {
            type: "address"
        }
    ],
    [
        "bool",
        {
            type: "bool"
        }
    ],
    [
        "bytes",
        {
            type: "bytes"
        }
    ],
    [
        "bytes32",
        {
            type: "bytes32"
        }
    ],
    [
        "int",
        {
            type: "int256"
        }
    ],
    [
        "int256",
        {
            type: "int256"
        }
    ],
    [
        "string",
        {
            type: "string"
        }
    ],
    [
        "uint",
        {
            type: "uint256"
        }
    ],
    [
        "uint8",
        {
            type: "uint8"
        }
    ],
    [
        "uint16",
        {
            type: "uint16"
        }
    ],
    [
        "uint24",
        {
            type: "uint24"
        }
    ],
    [
        "uint32",
        {
            type: "uint32"
        }
    ],
    [
        "uint64",
        {
            type: "uint64"
        }
    ],
    [
        "uint96",
        {
            type: "uint96"
        }
    ],
    [
        "uint112",
        {
            type: "uint112"
        }
    ],
    [
        "uint160",
        {
            type: "uint160"
        }
    ],
    [
        "uint192",
        {
            type: "uint192"
        }
    ],
    [
        "uint256",
        {
            type: "uint256"
        }
    ],
    // Named
    [
        "address owner",
        {
            type: "address",
            name: "owner"
        }
    ],
    [
        "address to",
        {
            type: "address",
            name: "to"
        }
    ],
    [
        "bool approved",
        {
            type: "bool",
            name: "approved"
        }
    ],
    [
        "bytes _data",
        {
            type: "bytes",
            name: "_data"
        }
    ],
    [
        "bytes data",
        {
            type: "bytes",
            name: "data"
        }
    ],
    [
        "bytes signature",
        {
            type: "bytes",
            name: "signature"
        }
    ],
    [
        "bytes32 hash",
        {
            type: "bytes32",
            name: "hash"
        }
    ],
    [
        "bytes32 r",
        {
            type: "bytes32",
            name: "r"
        }
    ],
    [
        "bytes32 root",
        {
            type: "bytes32",
            name: "root"
        }
    ],
    [
        "bytes32 s",
        {
            type: "bytes32",
            name: "s"
        }
    ],
    [
        "string name",
        {
            type: "string",
            name: "name"
        }
    ],
    [
        "string symbol",
        {
            type: "string",
            name: "symbol"
        }
    ],
    [
        "string tokenURI",
        {
            type: "string",
            name: "tokenURI"
        }
    ],
    [
        "uint tokenId",
        {
            type: "uint256",
            name: "tokenId"
        }
    ],
    [
        "uint8 v",
        {
            type: "uint8",
            name: "v"
        }
    ],
    [
        "uint256 balance",
        {
            type: "uint256",
            name: "balance"
        }
    ],
    [
        "uint256 tokenId",
        {
            type: "uint256",
            name: "tokenId"
        }
    ],
    [
        "uint256 value",
        {
            type: "uint256",
            name: "value"
        }
    ],
    // Indexed
    [
        "event:address indexed from",
        {
            type: "address",
            name: "from",
            indexed: true
        }
    ],
    [
        "event:address indexed to",
        {
            type: "address",
            name: "to",
            indexed: true
        }
    ],
    [
        "event:uint indexed tokenId",
        {
            type: "uint256",
            name: "tokenId",
            indexed: true
        }
    ],
    [
        "event:uint256 indexed tokenId",
        {
            type: "uint256",
            name: "tokenId",
            indexed: true
        }
    ]
]);
// src/human-readable/runtime/utils.ts
function parseSignature(signature, structs = {}) {
    if (isFunctionSignature(signature)) {
        const match = execFunctionSignature(signature);
        if (!match) throw new BaseError("Invalid function signature.", {
            details: signature
        });
        const inputParams = splitParameters(match.parameters);
        const inputs = [];
        const inputLength = inputParams.length;
        for(let i = 0; i < inputLength; i++)inputs.push(parseAbiParameter(inputParams[i], {
            modifiers: functionModifiers,
            structs,
            type: "function"
        }));
        const outputs = [];
        if (match.returns) {
            const outputParams = splitParameters(match.returns);
            const outputLength = outputParams.length;
            for(let i = 0; i < outputLength; i++)outputs.push(parseAbiParameter(outputParams[i], {
                modifiers: functionModifiers,
                structs,
                type: "function"
            }));
        }
        return {
            name: match.name,
            type: "function",
            stateMutability: match.stateMutability ?? "nonpayable",
            inputs,
            outputs
        };
    }
    if (isEventSignature(signature)) {
        const match = execEventSignature(signature);
        if (!match) throw new BaseError("Invalid event signature.", {
            details: signature
        });
        const params = splitParameters(match.parameters);
        const abiParameters = [];
        const length = params.length;
        for(let i = 0; i < length; i++)abiParameters.push(parseAbiParameter(params[i], {
            modifiers: eventModifiers,
            structs,
            type: "event"
        }));
        return {
            name: match.name,
            type: "event",
            inputs: abiParameters
        };
    }
    if (isErrorSignature(signature)) {
        const match = execErrorSignature(signature);
        if (!match) throw new BaseError("Invalid error signature.", {
            details: signature
        });
        const params = splitParameters(match.parameters);
        const abiParameters = [];
        const length = params.length;
        for(let i = 0; i < length; i++)abiParameters.push(parseAbiParameter(params[i], {
            structs,
            type: "error"
        }));
        return {
            name: match.name,
            type: "error",
            inputs: abiParameters
        };
    }
    if (isConstructorSignature(signature)) {
        const match = execConstructorSignature(signature);
        if (!match) throw new BaseError("Invalid constructor signature.", {
            details: signature
        });
        const params = splitParameters(match.parameters);
        const abiParameters = [];
        const length = params.length;
        for(let i = 0; i < length; i++)abiParameters.push(parseAbiParameter(params[i], {
            structs,
            type: "constructor"
        }));
        return {
            type: "constructor",
            stateMutability: match.stateMutability ?? "nonpayable",
            inputs: abiParameters
        };
    }
    if (isFallbackSignature(signature)) return {
        type: "fallback"
    };
    if (isReceiveSignature(signature)) return {
        type: "receive",
        stateMutability: "payable"
    };
    throw new BaseError("Unknown signature.", {
        details: signature
    });
}
var abiParameterWithoutTupleRegex = /^(?<type>[a-zA-Z0-9_]+?)(?<array>(?:\[\d*?\])+?)?(?:\s(?<modifier>calldata|indexed|memory|storage{1}))?(?:\s(?<name>[a-zA-Z0-9_]+))?$/;
var abiParameterWithTupleRegex = /^\((?<type>.+?)\)(?<array>(?:\[\d*?\])+?)?(?:\s(?<modifier>calldata|indexed|memory|storage{1}))?(?:\s(?<name>[a-zA-Z0-9_]+))?$/;
var dynamicIntegerRegex = /^u?int$/;
function parseAbiParameter(param, options) {
    const parameterCacheKey = getParameterCacheKey(param, options?.type);
    if (parameterCache.has(parameterCacheKey)) return parameterCache.get(parameterCacheKey);
    const isTuple = (0, _chunkWP7KDV47Mjs.isTupleRegex).test(param);
    const match = (0, _chunkWP7KDV47Mjs.execTyped)(isTuple ? abiParameterWithTupleRegex : abiParameterWithoutTupleRegex, param);
    if (!match) throw new BaseError("Invalid ABI parameter.", {
        details: param
    });
    if (match.name && isSolidityKeyword(match.name)) throw new BaseError("Invalid ABI parameter.", {
        details: param,
        metaMessages: [
            `"${match.name}" is a protected Solidity keyword. More info: https://docs.soliditylang.org/en/latest/cheatsheet.html`
        ]
    });
    const name2 = match.name ? {
        name: match.name
    } : {};
    const indexed = match.modifier === "indexed" ? {
        indexed: true
    } : {};
    const structs = options?.structs ?? {};
    let type;
    let components = {};
    if (isTuple) {
        type = "tuple";
        const params = splitParameters(match.type);
        const components_ = [];
        const length = params.length;
        for(let i = 0; i < length; i++)components_.push(parseAbiParameter(params[i], {
            structs
        }));
        components = {
            components: components_
        };
    } else if (match.type in structs) {
        type = "tuple";
        components = {
            components: structs[match.type]
        };
    } else if (dynamicIntegerRegex.test(match.type)) type = `${match.type}256`;
    else {
        type = match.type;
        if (!(options?.type === "struct") && !isSolidityType(type)) throw new BaseError("Unknown type.", {
            metaMessages: [
                `Type "${type}" is not a valid ABI type.`
            ]
        });
    }
    if (match.modifier) {
        if (!options?.modifiers?.has?.(match.modifier)) throw new BaseError("Invalid ABI parameter.", {
            details: param,
            metaMessages: [
                `Modifier "${match.modifier}" not allowed${options?.type ? ` in "${options.type}" type` : ""}.`
            ]
        });
        if (functionModifiers.has(match.modifier) && !isValidDataLocation(type, !!match.array)) throw new BaseError("Invalid ABI parameter.", {
            details: param,
            metaMessages: [
                `Modifier "${match.modifier}" not allowed${options?.type ? ` in "${options.type}" type` : ""}.`,
                `Data location can only be specified for array, struct, or mapping types, but "${match.modifier}" was given.`
            ]
        });
    }
    const abiParameter = {
        type: `${type}${match.array ?? ""}`,
        ...name2,
        ...indexed,
        ...components
    };
    parameterCache.set(parameterCacheKey, abiParameter);
    return abiParameter;
}
function splitParameters(params, result = [], current = "", depth = 0) {
    if (params === "") {
        if (current === "") return result;
        if (depth !== 0) throw new BaseError("Unbalanced parentheses.", {
            metaMessages: [
                `"${current.trim()}" has too many ${depth > 0 ? "opening" : "closing"} parentheses.`
            ],
            details: `Depth "${depth}"`
        });
        return [
            ...result,
            current.trim()
        ];
    }
    const length = params.length;
    for(let i = 0; i < length; i++){
        const char = params[i];
        const tail = params.slice(i + 1);
        switch(char){
            case ",":
                return depth === 0 ? splitParameters(tail, [
                    ...result,
                    current.trim()
                ]) : splitParameters(tail, result, `${current}${char}`, depth);
            case "(":
                return splitParameters(tail, result, `${current}${char}`, depth + 1);
            case ")":
                return splitParameters(tail, result, `${current}${char}`, depth - 1);
            default:
                return splitParameters(tail, result, `${current}${char}`, depth);
        }
    }
    return [];
}
function isSolidityType(type) {
    return type === "address" || type === "bool" || type === "function" || type === "string" || (0, _chunkWP7KDV47Mjs.bytesRegex).test(type) || (0, _chunkWP7KDV47Mjs.integerRegex).test(type);
}
var protectedKeywordsRegex = /^(?:after|alias|anonymous|apply|auto|byte|calldata|case|catch|constant|copyof|default|defined|error|event|external|false|final|function|immutable|implements|in|indexed|inline|internal|let|mapping|match|memory|mutable|null|of|override|partial|private|promise|public|pure|reference|relocatable|return|returns|sizeof|static|storage|struct|super|supports|switch|this|true|try|typedef|typeof|var|view|virtual)$/;
function isSolidityKeyword(name2) {
    return name2 === "address" || name2 === "bool" || name2 === "function" || name2 === "string" || name2 === "tuple" || (0, _chunkWP7KDV47Mjs.bytesRegex).test(name2) || (0, _chunkWP7KDV47Mjs.integerRegex).test(name2) || protectedKeywordsRegex.test(name2);
}
function isValidDataLocation(type, isArray) {
    return isArray || type === "bytes" || type === "string" || type === "tuple";
}
// src/human-readable/runtime/structs.ts
function parseStructs(signatures) {
    const shallowStructs = {};
    const signaturesLength = signatures.length;
    for(let i = 0; i < signaturesLength; i++){
        const signature = signatures[i];
        if (!isStructSignature(signature)) continue;
        const match = execStructSignature(signature);
        if (!match) throw new BaseError("Invalid struct signature.", {
            details: signature
        });
        const properties = match.properties.split(";");
        const components = [];
        const propertiesLength = properties.length;
        for(let k = 0; k < propertiesLength; k++){
            const property = properties[k];
            const trimmed = property.trim();
            if (!trimmed) continue;
            const abiParameter = parseAbiParameter(trimmed, {
                type: "struct"
            });
            components.push(abiParameter);
        }
        if (!components.length) throw new BaseError("Invalid struct signature.", {
            details: signature,
            metaMessages: [
                "No properties exist."
            ]
        });
        shallowStructs[match.name] = components;
    }
    const resolvedStructs = {};
    const entries = Object.entries(shallowStructs);
    const entriesLength = entries.length;
    for(let i = 0; i < entriesLength; i++){
        const [name2, parameters] = entries[i];
        resolvedStructs[name2] = resolveStructs(parameters, shallowStructs);
    }
    return resolvedStructs;
}
var typeWithoutTupleRegex = /^(?<type>[a-zA-Z0-9_]+?)(?<array>(?:\[\d*?\])+?)?$/;
function resolveStructs(abiParameters, structs, ancestors = /* @__PURE__ */ new Set()) {
    const components = [];
    const length = abiParameters.length;
    for(let i = 0; i < length; i++){
        const abiParameter = abiParameters[i];
        const isTuple = (0, _chunkWP7KDV47Mjs.isTupleRegex).test(abiParameter.type);
        if (isTuple) components.push(abiParameter);
        else {
            const match = (0, _chunkWP7KDV47Mjs.execTyped)(typeWithoutTupleRegex, abiParameter.type);
            if (!match?.type) throw new BaseError("Invalid ABI parameter.", {
                details: JSON.stringify(abiParameter, null, 2),
                metaMessages: [
                    "ABI parameter type is invalid."
                ]
            });
            const { array, type } = match;
            if (type in structs) {
                if (ancestors.has(type)) throw new BaseError("Circular reference detected.", {
                    metaMessages: [
                        `Struct "${type}" is a circular reference.`
                    ]
                });
                components.push({
                    ...abiParameter,
                    type: `tuple${array ?? ""}`,
                    components: resolveStructs(structs[type] ?? [], structs, /* @__PURE__ */ new Set([
                        ...ancestors,
                        type
                    ]))
                });
            } else {
                if (isSolidityType(type)) components.push(abiParameter);
                else throw new BaseError("Unknown type.", {
                    metaMessages: [
                        `Type "${type}" is not a valid ABI type. Perhaps you forgot to include a struct signature?`
                    ]
                });
            }
        }
    }
    return components;
}
// src/human-readable/parseAbi.ts
function parseAbi(signatures) {
    const structs = parseStructs(signatures);
    const abi = [];
    const length = signatures.length;
    for(let i = 0; i < length; i++){
        const signature = signatures[i];
        if (isStructSignature(signature)) continue;
        abi.push(parseSignature(signature, structs));
    }
    return abi;
}
// src/human-readable/parseAbiItem.ts
function parseAbiItem(signature) {
    let abiItem;
    if (typeof signature === "string") abiItem = parseSignature(signature);
    else {
        const structs = parseStructs(signature);
        const length = signature.length;
        for(let i = 0; i < length; i++){
            const signature_ = signature[i];
            if (isStructSignature(signature_)) continue;
            abiItem = parseSignature(signature_, structs);
            break;
        }
    }
    if (!abiItem) throw new BaseError("Failed to parse ABI item.", {
        details: `parseAbiItem(${JSON.stringify(signature, null, 2)})`,
        docsPath: "/api/human.html#parseabiitem-1"
    });
    return abiItem;
}
// src/human-readable/parseAbiParameter.ts
function parseAbiParameter2(param) {
    let abiParameter;
    if (typeof param === "string") abiParameter = parseAbiParameter(param, {
        modifiers
    });
    else {
        const structs = parseStructs(param);
        const length = param.length;
        for(let i = 0; i < length; i++){
            const signature = param[i];
            if (isStructSignature(signature)) continue;
            abiParameter = parseAbiParameter(signature, {
                modifiers,
                structs
            });
            break;
        }
    }
    if (!abiParameter) throw new BaseError("Failed to parse ABI parameter.", {
        details: `parseAbiParameter(${JSON.stringify(param, null, 2)})`,
        docsPath: "/api/human.html#parseabiparameter-1"
    });
    return abiParameter;
}
// src/human-readable/parseAbiParameters.ts
function parseAbiParameters(params) {
    const abiParameters = [];
    if (typeof params === "string") {
        const parameters = splitParameters(params);
        const length = parameters.length;
        for(let i = 0; i < length; i++)abiParameters.push(parseAbiParameter(parameters[i], {
            modifiers
        }));
    } else {
        const structs = parseStructs(params);
        const length = params.length;
        for(let i = 0; i < length; i++){
            const signature = params[i];
            if (isStructSignature(signature)) continue;
            const parameters = splitParameters(signature);
            const length2 = parameters.length;
            for(let k = 0; k < length2; k++)abiParameters.push(parseAbiParameter(parameters[k], {
                modifiers,
                structs
            }));
        }
    }
    if (abiParameters.length === 0) throw new BaseError("Failed to parse ABI parameters.", {
        details: `parseAbiParameters(${JSON.stringify(params, null, 2)})`,
        docsPath: "/api/human.html#parseabiparameters-1"
    });
    return abiParameters;
}

},{"./chunk-WP7KDV47.mjs":"6fU3j","./chunk-NHABU752.mjs":"27FJY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6fU3j":[function(require,module,exports) {
// src/regex.ts
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "execTyped", ()=>execTyped);
parcelHelpers.export(exports, "bytesRegex", ()=>bytesRegex);
parcelHelpers.export(exports, "integerRegex", ()=>integerRegex);
parcelHelpers.export(exports, "isTupleRegex", ()=>isTupleRegex);
function execTyped(regex, string) {
    const match = regex.exec(string);
    return match?.groups;
}
var bytesRegex = /^bytes([1-9]|1[0-9]|2[0-9]|3[0-2])?$/;
var integerRegex = /^u?int(8|16|24|32|40|48|56|64|72|80|88|96|104|112|120|128|136|144|152|160|168|176|184|192|200|208|216|224|232|240|248|256)?$/;
var isTupleRegex = /^\(.+?\).*?$/;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"27FJY":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "__publicField", ()=>__publicField);
var __defProp = Object.defineProperty;
var __defNormalProp = (obj, key, value)=>key in obj ? __defProp(obj, key, {
        enumerable: true,
        configurable: true,
        writable: true,
        value
    }) : obj[key] = value;
var __publicField = (obj, key, value)=>{
    __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
    return value;
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kbvKa":[function(require,module,exports) {
/*
This file is part of web3.js.

web3.js is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

web3.js is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "encodeBoolean", ()=>encodeBoolean);
parcelHelpers.export(exports, "decodeBool", ()=>decodeBool);
var _web3Errors = require("web3-errors");
var _web3Utils = require("web3-utils");
var _utilsJs = require("../utils.js");
var _numberJs = require("./number.js");
function encodeBoolean(param, input) {
    let value;
    try {
        value = (0, _web3Utils.toBool)(input);
    } catch (e) {
        if (e instanceof (0, _web3Errors.InvalidBooleanError)) throw new (0, _web3Errors.AbiError)("provided input is not valid boolean value", {
            type: param.type,
            value: input,
            name: param.name
        });
    }
    return (0, _numberJs.encodeNumber)({
        type: "uint8",
        name: ""
    }, Number(value));
}
function decodeBool(_param, bytes) {
    const numberResult = (0, _numberJs.decodeNumber)({
        type: "uint8",
        name: ""
    }, bytes);
    if (numberResult.result > 1 || numberResult.result < 0) throw new (0, _web3Errors.AbiError)("Invalid boolean value encoded", {
        boolBytes: bytes.subarray(0, (0, _utilsJs.WORD_SIZE)),
        numberResult
    });
    return {
        result: numberResult.result === BigInt(1),
        encoded: numberResult.encoded,
        consumed: (0, _utilsJs.WORD_SIZE)
    };
}

},{"web3-errors":"jDvsn","web3-utils":"8WsWI","../utils.js":"creNw","./number.js":"3i985","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3i985":[function(require,module,exports) {
/*
This file is part of web3.js.

web3.js is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

web3.js is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "encodeNumber", ()=>encodeNumber);
parcelHelpers.export(exports, "decodeNumber", ()=>decodeNumber);
var _web3Errors = require("web3-errors");
var _web3Utils = require("web3-utils");
var _web3Validator = require("web3-validator");
var _utilsJs = require("../utils.js");
var _numbersLimitsJs = require("./numbersLimits.js");
// eslint-disable-next-line no-bitwise
const mask = BigInt(1) << BigInt(256);
function bigIntToUint8Array(value, byteLength = (0, _utilsJs.WORD_SIZE)) {
    let hexValue;
    if (value < 0) hexValue = (mask + value).toString(16);
    else hexValue = value.toString(16);
    hexValue = (0, _web3Utils.padLeft)(hexValue, byteLength * 2);
    return (0, _web3Validator.utils).hexToUint8Array(hexValue);
}
function uint8ArrayToBigInt(value, max) {
    const hexValue = (0, _web3Validator.utils).uint8ArrayToHexString(value);
    const result = BigInt(hexValue);
    if (result <= max) return result;
    return result - mask;
}
function encodeNumber(param, input) {
    let value;
    try {
        value = (0, _web3Utils.toBigInt)(input);
    } catch (e) {
        throw new (0, _web3Errors.AbiError)("provided input is not number value", {
            type: param.type,
            value: input,
            name: param.name
        });
    }
    const limit = (0, _numbersLimitsJs.numberLimits).get(param.type);
    if (!limit) throw new (0, _web3Errors.AbiError)("provided abi contains invalid number datatype", {
        type: param.type
    });
    if (value < limit.min) throw new (0, _web3Errors.AbiError)("provided input is less then minimum for given type", {
        type: param.type,
        value: input,
        name: param.name,
        minimum: limit.min.toString()
    });
    if (value > limit.max) throw new (0, _web3Errors.AbiError)("provided input is greater then maximum for given type", {
        type: param.type,
        value: input,
        name: param.name,
        maximum: limit.max.toString()
    });
    return {
        dynamic: false,
        encoded: bigIntToUint8Array(value)
    };
}
function decodeNumber(param, bytes) {
    if (bytes.length < (0, _utilsJs.WORD_SIZE)) throw new (0, _web3Errors.AbiError)("Not enough bytes left to decode", {
        param,
        bytesLeft: bytes.length
    });
    const boolBytes = bytes.subarray(0, (0, _utilsJs.WORD_SIZE));
    const limit = (0, _numbersLimitsJs.numberLimits).get(param.type);
    if (!limit) throw new (0, _web3Errors.AbiError)("provided abi contains invalid number datatype", {
        type: param.type
    });
    const numberResult = uint8ArrayToBigInt(boolBytes, limit.max);
    if (numberResult < limit.min) throw new (0, _web3Errors.AbiError)("decoded value is less then minimum for given type", {
        type: param.type,
        value: numberResult,
        name: param.name,
        minimum: limit.min.toString()
    });
    if (numberResult > limit.max) throw new (0, _web3Errors.AbiError)("decoded value is greater then maximum for given type", {
        type: param.type,
        value: numberResult,
        name: param.name,
        maximum: limit.max.toString()
    });
    return {
        result: numberResult,
        encoded: bytes.subarray((0, _utilsJs.WORD_SIZE)),
        consumed: (0, _utilsJs.WORD_SIZE)
    };
}

},{"web3-errors":"jDvsn","web3-utils":"8WsWI","web3-validator":"6HK71","../utils.js":"creNw","./numbersLimits.js":"cgqb1","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cgqb1":[function(require,module,exports) {
/*
This file is part of web3.js.

web3.js is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

web3.js is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/ /*
 * this variable contains the precalculated limits for all the numbers for uint and int types
*/ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "numberLimits", ()=>numberLimits);
const numberLimits = new Map();
let base = BigInt(256); // 2 ^ 8 = 256
for(let i = 8; i <= 256; i += 8){
    numberLimits.set(`uint${i}`, {
        min: BigInt(0),
        max: base - BigInt(1)
    });
    numberLimits.set(`int${i}`, {
        min: -base / BigInt(2),
        max: base / BigInt(2) - BigInt(1)
    });
    base *= BigInt(256);
}
// eslint-disable-next-line @typescript-eslint/no-non-null-assertion
numberLimits.set(`int`, numberLimits.get("int256"));
// eslint-disable-next-line @typescript-eslint/no-non-null-assertion
numberLimits.set(`uint`, numberLimits.get("uint256"));

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8pkAW":[function(require,module,exports) {
/*
This file is part of web3.js.

web3.js is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

web3.js is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "encodeBytes", ()=>encodeBytes);
parcelHelpers.export(exports, "decodeBytes", ()=>decodeBytes);
var _web3Errors = require("web3-errors");
var _web3Utils = require("web3-utils");
var _web3Validator = require("web3-validator");
var _utilsJs = require("../utils.js");
var _numberJs = require("./number.js");
const MAX_STATIC_BYTES_COUNT = 32;
function encodeBytes(param, input) {
    // hack for odd length hex strings
    if (typeof input === "string" && input.length % 2 !== 0) // eslint-disable-next-line no-param-reassign
    input += "0";
    if (!(0, _web3Validator.isBytes)(input)) throw new (0, _web3Errors.AbiError)("provided input is not valid bytes value", {
        type: param.type,
        value: input,
        name: param.name
    });
    const bytes = (0, _web3Utils.bytesToUint8Array)(input);
    const [, size] = param.type.split("bytes");
    // fixed size
    if (size) {
        if (Number(size) > MAX_STATIC_BYTES_COUNT || Number(size) < 1) throw new (0, _web3Errors.AbiError)("invalid bytes type. Static byte type can have between 1 and 32 bytes", {
            type: param.type
        });
        if (Number(size) < bytes.length) throw new (0, _web3Errors.AbiError)("provided input size is different than type size", {
            type: param.type,
            value: input,
            name: param.name
        });
        const encoded = (0, _utilsJs.alloc)((0, _utilsJs.WORD_SIZE));
        encoded.set(bytes);
        return {
            dynamic: false,
            encoded
        };
    }
    const partsLength = Math.ceil(bytes.length / (0, _utilsJs.WORD_SIZE));
    // one word for length of data + WORD for each part of actual data
    const encoded = (0, _utilsJs.alloc)((0, _utilsJs.WORD_SIZE) + partsLength * (0, _utilsJs.WORD_SIZE));
    encoded.set((0, _numberJs.encodeNumber)({
        type: "uint32",
        name: ""
    }, bytes.length).encoded);
    encoded.set(bytes, (0, _utilsJs.WORD_SIZE));
    return {
        dynamic: true,
        encoded
    };
}
function decodeBytes(param, bytes) {
    const [, sizeString] = param.type.split("bytes");
    let size = Number(sizeString);
    let remainingBytes = bytes;
    let partsCount = 1;
    let consumed = 0;
    if (!size) {
        // dynamic bytes
        const result = (0, _numberJs.decodeNumber)({
            type: "uint32",
            name: ""
        }, remainingBytes);
        size = Number(result.result);
        consumed += result.consumed;
        remainingBytes = result.encoded;
        partsCount = Math.ceil(size / (0, _utilsJs.WORD_SIZE));
    }
    if (size > bytes.length) throw new (0, _web3Errors.AbiError)("there is not enough data to decode", {
        type: param.type,
        encoded: bytes,
        size
    });
    return {
        result: (0, _web3Utils.bytesToHex)(remainingBytes.subarray(0, size)),
        encoded: remainingBytes.subarray(partsCount * (0, _utilsJs.WORD_SIZE)),
        consumed: consumed + partsCount * (0, _utilsJs.WORD_SIZE)
    };
}

},{"web3-errors":"jDvsn","web3-utils":"8WsWI","web3-validator":"6HK71","../utils.js":"creNw","./number.js":"3i985","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9cdRO":[function(require,module,exports) {
/*
This file is part of web3.js.

web3.js is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

web3.js is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "encodeString", ()=>encodeString);
parcelHelpers.export(exports, "decodeString", ()=>decodeString);
var _web3Errors = require("web3-errors");
var _web3Utils = require("web3-utils");
var _bytesJs = require("./bytes.js");
function encodeString(_param, input) {
    if (typeof input !== "string") throw new (0, _web3Errors.AbiError)("invalid input, should be string", {
        input
    });
    const bytes = (0, _web3Utils.utf8ToBytes)(input);
    return (0, _bytesJs.encodeBytes)({
        type: "bytes",
        name: ""
    }, bytes);
}
function decodeString(_param, bytes) {
    const r = (0, _bytesJs.decodeBytes)({
        type: "bytes",
        name: ""
    }, bytes);
    return {
        result: (0, _web3Utils.hexToUtf8)(r.result),
        encoded: r.encoded,
        consumed: r.consumed
    };
}

},{"web3-errors":"jDvsn","web3-utils":"8WsWI","./bytes.js":"8pkAW","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7TYjY":[function(require,module,exports) {
/*
This file is part of web3.js.

web3.js is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

web3.js is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "encodeArray", ()=>encodeArray);
parcelHelpers.export(exports, "decodeArray", ()=>decodeArray);
var _web3Errors = require("web3-errors");
var _web3Utils = require("web3-utils");
// eslint-disable-next-line import/no-cycle
var _indexJs = require("./index.js");
var _utilsJs = require("../utils.js");
var _numberJs = require("./number.js");
var _utilsJs1 = require("./utils.js");
function encodeArray(param, values) {
    if (!Array.isArray(values)) throw new (0, _web3Errors.AbiError)("Expected value to be array", {
        abi: param,
        values
    });
    const { size, param: arrayItemParam } = (0, _utilsJs.extractArrayType)(param);
    const encodedParams = values.map((v)=>(0, _indexJs.encodeParamFromAbiParameter)(arrayItemParam, v));
    const dynamic = size === -1;
    const dynamicItems = encodedParams.length > 0 && encodedParams[0].dynamic;
    if (!dynamic && values.length !== size) throw new (0, _web3Errors.AbiError)("Given arguments count doesn't match array length", {
        arrayLength: size,
        argumentsLength: values.length
    });
    if (dynamic || dynamicItems) {
        const encodingResult = (0, _utilsJs1.encodeDynamicParams)(encodedParams);
        if (dynamic) {
            const encodedLength = (0, _indexJs.encodeNumber)({
                type: "uint256",
                name: ""
            }, encodedParams.length).encoded;
            return {
                dynamic: true,
                encoded: encodedParams.length > 0 ? (0, _web3Utils.uint8ArrayConcat)(encodedLength, encodingResult) : encodedLength
            };
        }
        return {
            dynamic: true,
            encoded: encodingResult
        };
    }
    return {
        dynamic: false,
        encoded: (0, _web3Utils.uint8ArrayConcat)(...encodedParams.map((p)=>p.encoded))
    };
}
function decodeArray(param, bytes) {
    // eslint-disable-next-line prefer-const
    let { size, param: arrayItemParam } = (0, _utilsJs.extractArrayType)(param);
    const dynamic = size === -1;
    let consumed = 0;
    const result = [];
    let remaining = bytes;
    // dynamic array, we need to decode length
    if (dynamic) {
        const lengthResult = (0, _numberJs.decodeNumber)({
            type: "uint32",
            name: ""
        }, bytes);
        size = Number(lengthResult.result);
        consumed = lengthResult.consumed;
        remaining = lengthResult.encoded;
    }
    const hasDynamicChild = (0, _utilsJs.isDynamic)(arrayItemParam);
    if (hasDynamicChild) {
        // known length but dynamic child, each child is actually head element with encoded offset
        for(let i = 0; i < size; i += 1){
            const offsetResult = (0, _numberJs.decodeNumber)({
                type: "uint32",
                name: ""
            }, remaining.subarray(i * (0, _utilsJs.WORD_SIZE)));
            consumed += offsetResult.consumed;
            const decodedChildResult = (0, _indexJs.decodeParamFromAbiParameter)(arrayItemParam, remaining.subarray(Number(offsetResult.result)));
            consumed += decodedChildResult.consumed;
            result.push(decodedChildResult.result);
        }
        return {
            result,
            encoded: remaining.subarray(consumed),
            consumed
        };
    }
    for(let i = 0; i < size; i += 1){
        // decode static params
        const decodedChildResult = (0, _indexJs.decodeParamFromAbiParameter)(arrayItemParam, bytes.subarray(consumed));
        consumed += decodedChildResult.consumed;
        result.push(decodedChildResult.result);
    }
    return {
        result,
        encoded: bytes.subarray(consumed),
        consumed
    };
}

},{"web3-errors":"jDvsn","web3-utils":"8WsWI","./index.js":"cZ6pb","../utils.js":"creNw","./number.js":"3i985","./utils.js":"bBQmH","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bBQmH":[function(require,module,exports) {
/*
This file is part of web3.js.

web3.js is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

web3.js is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "encodeDynamicParams", ()=>encodeDynamicParams);
var _web3Utils = require("web3-utils");
var _utilsJs = require("../utils.js");
var _numberJs = require("./number.js");
function encodeDynamicParams(encodedParams) {
    let staticSize = 0;
    let dynamicSize = 0;
    const staticParams = [];
    const dynamicParams = [];
    // figure out static size
    for (const encodedParam of encodedParams)if (encodedParam.dynamic) staticSize += (0, _utilsJs.WORD_SIZE);
    else staticSize += encodedParam.encoded.length;
    for (const encodedParam of encodedParams)if (encodedParam.dynamic) {
        staticParams.push((0, _numberJs.encodeNumber)({
            type: "uint256",
            name: ""
        }, staticSize + dynamicSize));
        dynamicParams.push(encodedParam);
        dynamicSize += encodedParam.encoded.length;
    } else staticParams.push(encodedParam);
    return (0, _web3Utils.uint8ArrayConcat)(...staticParams.map((p)=>p.encoded), ...dynamicParams.map((p)=>p.encoded));
}

},{"web3-utils":"8WsWI","../utils.js":"creNw","./number.js":"3i985","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ig6Nj":[function(require,module,exports) {
/*
This file is part of web3.js.

web3.js is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

web3.js is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "encodeParameters", ()=>encodeParameters);
var _web3Errors = require("web3-errors");
var _web3Validator = require("web3-validator");
var _indexJs = require("./base/index.js");
var _utilsJs = require("./utils.js");
function encodeParameters(abi, params) {
    if (abi.length !== params.length) throw new (0, _web3Errors.AbiError)("Invalid number of values received for given ABI", {
        expected: abi.length,
        received: params.length
    });
    const abiParams = (0, _utilsJs.toAbiParams)(abi);
    return (0, _web3Validator.utils).uint8ArrayToHexString((0, _indexJs.encodeTuple)({
        type: "tuple",
        name: "",
        components: abiParams
    }, params).encoded);
}

},{"web3-errors":"jDvsn","web3-validator":"6HK71","./base/index.js":"cZ6pb","./utils.js":"creNw","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"70lOU":[function(require,module,exports) {
/*
This file is part of web3.js.

web3.js is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

web3.js is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "decodeLog", ()=>decodeLog);
var _parametersApiJs = require("./parameters_api.js");
const STATIC_TYPES = [
    "bool",
    "string",
    "int",
    "uint",
    "address",
    "fixed",
    "ufixed"
];
const _decodeParameter = (inputType, clonedTopic)=>inputType === "string" ? clonedTopic : (0, _parametersApiJs.decodeParameter)(inputType, clonedTopic);
const decodeLog = (inputs, data, topics)=>{
    const clonedTopics = Array.isArray(topics) ? topics : [
        topics
    ];
    const indexedInputs = {};
    const nonIndexedInputs = {};
    for (const [i, input] of inputs.entries())if (input.indexed) indexedInputs[i] = input;
    else nonIndexedInputs[i] = input;
    const decodedNonIndexedInputs = data ? (0, _parametersApiJs.decodeParametersWith)(Object.values(nonIndexedInputs), data, true) : {
        __length__: 0
    };
    // If topics are more than indexed inputs, that means first topic is the event signature
    const offset = clonedTopics.length - Object.keys(indexedInputs).length;
    const decodedIndexedInputs = Object.values(indexedInputs).map((input, index)=>STATIC_TYPES.some((s)=>input.type.startsWith(s)) ? _decodeParameter(input.type, clonedTopics[index + offset]) : clonedTopics[index + offset]);
    const returnValues = {
        __length__: 0
    };
    let indexedCounter = 0;
    let nonIndexedCounter = 0;
    for (const [i, res] of inputs.entries()){
        returnValues[i] = res.type === "string" ? "" : undefined;
        if (indexedInputs[i]) {
            returnValues[i] = decodedIndexedInputs[indexedCounter];
            indexedCounter += 1;
        }
        if (nonIndexedInputs[i]) {
            returnValues[i] = decodedNonIndexedInputs[String(nonIndexedCounter)];
            nonIndexedCounter += 1;
        }
        if (res.name) returnValues[res.name] = returnValues[i];
        returnValues.__length__ += 1;
    }
    return returnValues;
};

},{"./parameters_api.js":"6GljU","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8gY9E":[function(require,module,exports) {
/*
This file is part of web3.js.

web3.js is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

web3.js is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "decodeContractErrorData", ()=>decodeContractErrorData);
var _errorsApiJs = require("./api/errors_api.js");
var _parametersApiJs = require("./api/parameters_api.js");
var _utilsJs = require("./utils.js");
const decodeContractErrorData = (errorsAbi, error)=>{
    if (error === null || error === void 0 ? void 0 : error.data) {
        let errorName;
        let errorSignature;
        let errorArgs;
        try {
            const errorSha = error.data.slice(0, 10);
            const errorAbi = errorsAbi.find((abi)=>(0, _errorsApiJs.encodeErrorSignature)(abi).startsWith(errorSha));
            if (errorAbi === null || errorAbi === void 0 ? void 0 : errorAbi.inputs) {
                errorName = errorAbi.name;
                errorSignature = (0, _utilsJs.jsonInterfaceMethodToString)(errorAbi);
                // decode abi.inputs according to EIP-838
                errorArgs = (0, _parametersApiJs.decodeParameters)([
                    ...errorAbi.inputs
                ], error.data.substring(10));
            }
        } catch (err) {
            console.error(err);
        }
        if (errorName) error.setDecodedProperties(errorName, errorSignature, errorArgs);
    }
};

},{"./api/errors_api.js":"85OOa","./api/parameters_api.js":"6GljU","./utils.js":"6pmIn","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6PkXx":[function(require,module,exports) {
/*
This file is part of web3.js.

web3.js is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

web3.js is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getMessage", ()=>getMessage);
var _web3Utils = require("web3-utils");
var _encodeJs = require("./coders/encode.js");
const TYPE_REGEX = /^\w+/;
const ARRAY_REGEX = /^(.*)\[([0-9]*?)]$/;
/**
 * Get the dependencies of a struct type. If a struct has the same dependency multiple times, it's only included once
 * in the resulting array.
 */ const getDependencies = (typedData, type, dependencies = [])=>{
    const match = type.match(TYPE_REGEX);
    const actualType = match[0];
    if (dependencies.includes(actualType)) return dependencies;
    if (!typedData.types[actualType]) return dependencies;
    return [
        actualType,
        ...typedData.types[actualType].reduce((previous, _type)=>[
                ...previous,
                ...getDependencies(typedData, _type.type, previous).filter((dependency)=>!previous.includes(dependency))
            ], [])
    ];
};
/**
 * Encode a type to a string. All dependant types are alphabetically sorted.
 *
 * @param {TypedData} typedData
 * @param {string} type
 * @param {Options} [options]
 * @return {string}
 */ const encodeType = (typedData, type)=>{
    const [primary, ...dependencies] = getDependencies(typedData, type);
    // eslint-disable-next-line @typescript-eslint/require-array-sort-compare
    const types = [
        primary,
        ...dependencies.sort()
    ];
    return types.map((dependency)=>// eslint-disable-next-line @typescript-eslint/restrict-template-expressions
        `${dependency}(${typedData.types[dependency].map((_type)=>`${_type.type} ${_type.name}`)})`).join("");
};
/**
 * Get a type string as hash.
 */ const getTypeHash = (typedData, type)=>(0, _web3Utils.keccak256)(encodeType(typedData, type));
/**
 * Get encoded data as a hash. The data should be a key -> value object with all the required values. All dependant
 * types are automatically encoded.
 */ const getStructHash = (typedData, type, data)=>(0, _web3Utils.keccak256)(encodeData(typedData, type, data));
const getMessage = (typedData, hash)=>{
    const EIP_191_PREFIX = "1901";
    const message = `0x${EIP_191_PREFIX}${getStructHash(typedData, "EIP712Domain", typedData.domain).substring(2)}${getStructHash(typedData, typedData.primaryType, typedData.message).substring(2)}`;
    if (hash) return (0, _web3Utils.keccak256)(message);
    return message;
};
/**
 * Encodes a single value to an ABI serialisable string, number or Buffer. Returns the data as tuple, which consists of
 * an array of ABI compatible types, and an array of corresponding values.
 */ const encodeValue = (typedData, type, data)=>{
    const match = type.match(ARRAY_REGEX);
    // Checks for array types
    if (match) {
        const arrayType = match[1];
        const length = Number(match[2]) || undefined;
        if (!Array.isArray(data)) throw new Error("Cannot encode data: value is not of array type");
        if (length && data.length !== length) throw new Error(`Cannot encode data: expected length of ${length}, but got ${data.length}`);
        const encodedData = data.map((item)=>encodeValue(typedData, arrayType, item));
        const types = encodedData.map((item)=>item[0]);
        const values = encodedData.map((item)=>item[1]);
        return [
            "bytes32",
            (0, _web3Utils.keccak256)((0, _encodeJs.encodeParameters)(types, values))
        ];
    }
    if (typedData.types[type]) return [
        "bytes32",
        getStructHash(typedData, type, data)
    ];
    // Strings and arbitrary byte arrays are hashed to bytes32
    if (type === "string") return [
        "bytes32",
        (0, _web3Utils.keccak256)(data)
    ];
    if (type === "bytes") return [
        "bytes32",
        (0, _web3Utils.keccak256)(data)
    ];
    return [
        type,
        data
    ];
};
/**
 * Encode the data to an ABI encoded Buffer. The data should be a key -> value object with all the required values. All
 * dependant types are automatically encoded.
 */ const encodeData = (typedData, type, data)=>{
    const [types, values] = typedData.types[type].reduce(([_types, _values], field)=>{
        if ((0, _web3Utils.isNullish)(data[field.name]) || (0, _web3Utils.isNullish)(data[field.name])) throw new Error(`Cannot encode data: missing data for '${field.name}'`);
        const value = data[field.name];
        const [_type, encodedValue] = encodeValue(typedData, field.type, value);
        return [
            [
                ..._types,
                _type
            ],
            [
                ..._values,
                encodedValue
            ]
        ];
    }, [
        [
            "bytes32"
        ],
        [
            getTypeHash(typedData, type)
        ]
    ]);
    return (0, _encodeJs.encodeParameters)(types, values);
};

},{"web3-utils":"8WsWI","./coders/encode.js":"ig6Nj","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gikUP":[function(require,module,exports) {
/*
This file is part of web3.js.

web3.js is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

web3.js is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "decodeEventABI", ()=>decodeEventABI);
var _web3Utils = require("web3-utils");
var _web3Types = require("web3-types");
var _web3EthAbi = require("web3-eth-abi");
var _schemasJs = require("../schemas.js");
var _constantsJs = require("../constants.js");
const decodeEventABI = (event, data, jsonInterface, returnFormat = (0, _web3Types.DEFAULT_RETURN_FORMAT))=>{
    var _a, _b, _c, _d, _e;
    let modifiedEvent = Object.assign({}, event);
    const result = (0, _web3Utils.format)((0, _schemasJs.logSchema), data, returnFormat);
    // if allEvents get the right event
    if ([
        (0, _constantsJs.ALL_EVENTS),
        "allEvents"
    ].includes(modifiedEvent.name)) {
        const matchedEvent = jsonInterface.find((j)=>j.signature === data.topics[0]);
        if (matchedEvent) modifiedEvent = matchedEvent;
        else modifiedEvent = {
            anonymous: true
        };
    }
    // create empty inputs if none are present (e.g. anonymous events on allEvents)
    modifiedEvent.inputs = (_b = (_a = modifiedEvent.inputs) !== null && _a !== void 0 ? _a : event.inputs) !== null && _b !== void 0 ? _b : [];
    // Handle case where an event signature shadows the current ABI with non-identical
    // arg indexing. If # of topics doesn't match, event is anon.
    if (!modifiedEvent.anonymous) {
        let indexedInputs = 0;
        ((_c = modifiedEvent.inputs) !== null && _c !== void 0 ? _c : []).forEach((input)=>{
            if (input.indexed) indexedInputs += 1;
        });
        if (indexedInputs > 0 && (data === null || data === void 0 ? void 0 : data.topics) && (data === null || data === void 0 ? void 0 : data.topics.length) !== indexedInputs + 1) // checks if event is anonymous
        modifiedEvent = Object.assign(Object.assign({}, modifiedEvent), {
            anonymous: true,
            inputs: []
        });
    }
    const argTopics = modifiedEvent.anonymous ? data.topics : ((_d = data.topics) !== null && _d !== void 0 ? _d : []).slice(1);
    return Object.assign(Object.assign({}, result), {
        returnValues: (0, _web3EthAbi.decodeLog)([
            ...(_e = modifiedEvent.inputs) !== null && _e !== void 0 ? _e : []
        ], data.data, argTopics),
        event: modifiedEvent.name,
        signature: modifiedEvent.anonymous || !data.topics || data.topics.length === 0 || !data.topics[0] ? undefined : data.topics[0],
        raw: {
            data: data.data,
            topics: data.topics
        }
    });
};

},{"web3-utils":"8WsWI","web3-types":"g7Ztk","web3-eth-abi":"bZbSL","../schemas.js":"bf11F","../constants.js":"453pI","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8o1MX":[function(require,module,exports) {
/*
This file is part of web3.js.

web3.js is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

web3.js is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/ /* eslint-disable-next-line max-classes-per-file */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * ## subscribe('logs')
 * Subscribes to incoming logs, filtered by the given options. If a valid numerical fromBlock options property is set, web3.js will retrieve logs beginning from this point, backfilling the response as necessary.
 *
 * You can subscribe to logs matching a given filter object, which can take the following parameters:
 * - `fromBlock`: (optional, default: 'latest') Integer block number, or `'latest'` for the last mined block or `'pending'`, `'earliest'` for not yet mined transactions.
 * - `address`: (optional) Contract address or a list of addresses from which logs should originate.
 * - `topics`: (optional) Array of 32 Bytes DATA topics. Topics are order-dependent. Each topic can also be an array of DATA with `or` options.
 *
 */ parcelHelpers.export(exports, "LogsSubscription", ()=>LogsSubscription);
/**
 * ## subscribe('pendingTransactions')
 * Subscribes to incoming pending transactions.
 *
 * You can subscribe to pending transactions by calling web3.eth.subscribe('pendingTransactions').
 * @example
 * ```ts
 * (await web3.eth.subscribe('pendingTransactions')).on('data', console.log);
 * ```
 */ parcelHelpers.export(exports, "NewPendingTransactionsSubscription", ()=>NewPendingTransactionsSubscription);
/**
 * ## subscribe('newHeads') ( same as subscribe('newBlockHeaders'))
 *
 * Subscribes to incoming block headers. This can be used as timer to check for changes on the blockchain.
 *
 * The structure of a returned block header is {@link BlockHeaderOutput}:
 * @example
 * ```ts
 * (await web3.eth.subscribe('newHeads')).on( // 'newBlockHeaders' would work as well
 *  'data',
 * console.log
 * );
 * >{
 * parentHash: '0x9e746a1d906b299def98c75b06f714d62dacadd567c7515d76eeaa8c8074c738',
 * sha3Uncles: '0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347',
 * miner: '0x0000000000000000000000000000000000000000',
 * stateRoot: '0xe0f04b04861ecfa95e82a9310d6a7ef7aef8d7417f5209c182582bfb98a8e307',
 * transactionsRoot: '0x31ab4ea571a9e10d3a19aaed07d190595b1dfa34e03960c04293fec565dea536',
 * logsBloom: '0x
 * difficulty: 2n,
 * number: 21n,
 * gasLimit: 11738125n,
 * gasUsed: 830006n,
 * timestamp: 1678797237n,
 * extraData: '0xd883010b02846765746888676f312e32302e31856c696e757800000000000000e0a6e93cf40e2e71a72e493272210c3f43738ccc7e7d7b14ffd51833797d896c09117e8dc4fbcbc969bd21b42e5af3e276a911524038c001b2109b63b8e0352601',
 * nonce: 0n
 * }
 * ```
 */ parcelHelpers.export(exports, "NewHeadsSubscription", ()=>NewHeadsSubscription);
/**
 * ## subscribe('syncing')
 *
 * Subscribe to syncing events. This will return `true` when the node is syncing and when it’s finished syncing will return `false`, for the `changed` event.
 * @example
 * ```ts
 * (await web3.eth.subscribe('syncing')).on('changed', console.log);
 * > `true` // when syncing
 *
 * (await web3.eth.subscribe('syncing')).on('data', console.log);
 * > {
 *      startingBlock: 0,
 *      currentBlock: 0,
 *      highestBlock: 0,
 *      pulledStates: 0,
 *      knownStates: 0
 *   }
 * ```
 */ parcelHelpers.export(exports, "SyncingSubscription", ()=>SyncingSubscription);
var _web3Utils = require("web3-utils");
var _web3Core = require("web3-core");
var _schemasJs = require("./schemas.js");
class LogsSubscription extends (0, _web3Core.Web3Subscription) {
    _buildSubscriptionParams() {
        return [
            "logs",
            this.args
        ];
    }
    formatSubscriptionResult(data) {
        return (0, _web3Utils.format)((0, _schemasJs.logSchema), data, super.returnFormat);
    }
}
class NewPendingTransactionsSubscription extends (0, _web3Core.Web3Subscription) {
    // eslint-disable-next-line
    _buildSubscriptionParams() {
        return [
            "newPendingTransactions"
        ];
    }
    formatSubscriptionResult(data) {
        return (0, _web3Utils.format)({
            format: "string"
        }, data, super.returnFormat);
    }
}
class NewHeadsSubscription extends (0, _web3Core.Web3Subscription) {
    // eslint-disable-next-line
    _buildSubscriptionParams() {
        return [
            "newHeads"
        ];
    }
    formatSubscriptionResult(data) {
        return (0, _web3Utils.format)((0, _schemasJs.blockHeaderSchema), data, super.returnFormat);
    }
}
class SyncingSubscription extends (0, _web3Core.Web3Subscription) {
    // eslint-disable-next-line
    _buildSubscriptionParams() {
        return [
            "syncing"
        ];
    }
    _processSubscriptionResult(data) {
        if (typeof data === "boolean") this.emit("changed", data);
        else {
            const mappedData = Object.fromEntries(Object.entries(data.status).map(([key, value])=>[
                    key.charAt(0).toLowerCase() + key.substring(1),
                    value
                ]));
            this.emit("changed", data.syncing);
            this.emit("data", (0, _web3Utils.format)((0, _schemasJs.syncSchema), mappedData, super.returnFormat));
        }
    }
}

},{"web3-utils":"8WsWI","web3-core":"4Uu6H","./schemas.js":"bf11F","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dSSq0":[function(require,module,exports) {
/*
This file is part of web3.js.

web3.js is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

web3.js is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bjQPv":[function(require,module,exports) {
/*
This file is part of web3.js.

web3.js is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

web3.js is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isBaseTransaction", ()=>isBaseTransaction);
parcelHelpers.export(exports, "isAccessListEntry", ()=>isAccessListEntry);
parcelHelpers.export(exports, "isAccessList", ()=>isAccessList);
parcelHelpers.export(exports, "isTransaction1559Unsigned", ()=>isTransaction1559Unsigned);
parcelHelpers.export(exports, "isTransaction2930Unsigned", ()=>isTransaction2930Unsigned);
parcelHelpers.export(exports, "isTransactionLegacyUnsigned", ()=>isTransactionLegacyUnsigned);
parcelHelpers.export(exports, "isTransactionWithSender", ()=>isTransactionWithSender);
parcelHelpers.export(exports, "validateTransactionWithSender", ()=>validateTransactionWithSender);
parcelHelpers.export(exports, "isTransactionCall", ()=>isTransactionCall);
parcelHelpers.export(exports, "validateTransactionCall", ()=>validateTransactionCall);
parcelHelpers.export(exports, "validateCustomChainInfo", ()=>validateCustomChainInfo);
parcelHelpers.export(exports, "validateChainInfo", ()=>validateChainInfo);
parcelHelpers.export(exports, "validateBaseChain", ()=>validateBaseChain);
parcelHelpers.export(exports, "validateHardfork", ()=>validateHardfork);
parcelHelpers.export(exports, "validateLegacyGas", ()=>validateLegacyGas);
parcelHelpers.export(exports, "validateFeeMarketGas", ()=>validateFeeMarketGas);
parcelHelpers.export(exports, "validateGas", ()=>validateGas);
parcelHelpers.export(exports, "validateTransactionForSigning", ()=>validateTransactionForSigning);
var _web3Types = require("web3-types");
var _web3Validator = require("web3-validator");
var _web3Errors = require("web3-errors");
var _formatTransactionJs = require("./utils/format_transaction.js");
function isBaseTransaction(value) {
    if (!(0, _web3Validator.isNullish)(value.to) && !(0, _web3Validator.isAddress)(value.to)) return false;
    if (!(0, _web3Validator.isHexStrict)(value.type) && !(0, _web3Validator.isNullish)(value.type) && value.type.length !== 2) return false;
    if (!(0, _web3Validator.isHexStrict)(value.nonce)) return false;
    if (!(0, _web3Validator.isHexStrict)(value.gas)) return false;
    if (!(0, _web3Validator.isHexStrict)(value.value)) return false;
    if (!(0, _web3Validator.isHexStrict)(value.input)) return false;
    if (value.chainId && !(0, _web3Validator.isHexStrict)(value.chainId)) return false;
    return true;
}
function isAccessListEntry(value) {
    if (!(0, _web3Validator.isNullish)(value.address) && !(0, _web3Validator.isAddress)(value.address)) return false;
    if (!(0, _web3Validator.isNullish)(value.storageKeys) && !value.storageKeys.every((storageKey)=>(0, _web3Validator.isHexString32Bytes)(storageKey))) return false;
    return true;
}
function isAccessList(value) {
    if (!Array.isArray(value) || !value.every((accessListEntry)=>isAccessListEntry(accessListEntry))) return false;
    return true;
}
function isTransaction1559Unsigned(value) {
    if (!isBaseTransaction(value)) return false;
    if (!(0, _web3Validator.isHexStrict)(value.maxFeePerGas)) return false;
    if (!(0, _web3Validator.isHexStrict)(value.maxPriorityFeePerGas)) return false;
    if (!isAccessList(value.accessList)) return false;
    return true;
}
function isTransaction2930Unsigned(value) {
    if (!isBaseTransaction(value)) return false;
    if (!(0, _web3Validator.isHexStrict)(value.gasPrice)) return false;
    if (!isAccessList(value.accessList)) return false;
    return true;
}
function isTransactionLegacyUnsigned(value) {
    if (!isBaseTransaction(value)) return false;
    if (!(0, _web3Validator.isHexStrict)(value.gasPrice)) return false;
    return true;
}
function isTransactionWithSender(value) {
    if (!(0, _web3Validator.isAddress)(value.from)) return false;
    if (!isBaseTransaction(value)) return false;
    if (!isTransaction1559Unsigned(value) && !isTransaction2930Unsigned(value) && !isTransactionLegacyUnsigned(value)) return false;
    return true;
}
function validateTransactionWithSender(value) {
    if (!isTransactionWithSender(value)) throw new (0, _web3Errors.InvalidTransactionWithSender)(value);
}
function isTransactionCall(value) {
    if (!(0, _web3Validator.isNullish)(value.from) && !(0, _web3Validator.isAddress)(value.from)) return false;
    if (!(0, _web3Validator.isAddress)(value.to)) return false;
    if (!(0, _web3Validator.isNullish)(value.gas) && !(0, _web3Validator.isHexStrict)(value.gas)) return false;
    if (!(0, _web3Validator.isNullish)(value.gasPrice) && !(0, _web3Validator.isHexStrict)(value.gasPrice)) return false;
    if (!(0, _web3Validator.isNullish)(value.value) && !(0, _web3Validator.isHexStrict)(value.value)) return false;
    if (!(0, _web3Validator.isNullish)(value.data) && !(0, _web3Validator.isHexStrict)(value.data)) return false;
    if (!(0, _web3Validator.isNullish)(value.input) && !(0, _web3Validator.isHexStrict)(value.input)) return false;
    if (!(0, _web3Validator.isNullish)(value.type)) return false;
    if (isTransaction1559Unsigned(value)) return false;
    if (isTransaction2930Unsigned(value)) return false;
    return true;
}
function validateTransactionCall(value) {
    if (!isTransactionCall(value)) throw new (0, _web3Errors.InvalidTransactionCall)(value);
}
const validateCustomChainInfo = (transaction)=>{
    if (!(0, _web3Validator.isNullish)(transaction.common)) {
        if ((0, _web3Validator.isNullish)(transaction.common.customChain)) throw new (0, _web3Errors.MissingCustomChainError)();
        if ((0, _web3Validator.isNullish)(transaction.common.customChain.chainId)) throw new (0, _web3Errors.MissingCustomChainIdError)();
        if (!(0, _web3Validator.isNullish)(transaction.chainId) && transaction.chainId !== transaction.common.customChain.chainId) throw new (0, _web3Errors.ChainIdMismatchError)({
            txChainId: transaction.chainId,
            customChainId: transaction.common.customChain.chainId
        });
    }
};
const validateChainInfo = (transaction)=>{
    if (!(0, _web3Validator.isNullish)(transaction.common) && !(0, _web3Validator.isNullish)(transaction.chain) && !(0, _web3Validator.isNullish)(transaction.hardfork)) throw new (0, _web3Errors.CommonOrChainAndHardforkError)();
    if (!(0, _web3Validator.isNullish)(transaction.chain) && (0, _web3Validator.isNullish)(transaction.hardfork) || !(0, _web3Validator.isNullish)(transaction.hardfork) && (0, _web3Validator.isNullish)(transaction.chain)) throw new (0, _web3Errors.MissingChainOrHardforkError)({
        chain: transaction.chain,
        hardfork: transaction.hardfork
    });
};
const validateBaseChain = (transaction)=>{
    if (!(0, _web3Validator.isNullish)(transaction.common)) {
        if (!(0, _web3Validator.isNullish)(transaction.common.baseChain)) {
            if (!(0, _web3Validator.isNullish)(transaction.chain) && transaction.chain !== transaction.common.baseChain) throw new (0, _web3Errors.ChainMismatchError)({
                txChain: transaction.chain,
                baseChain: transaction.common.baseChain
            });
        }
    }
};
const validateHardfork = (transaction)=>{
    if (!(0, _web3Validator.isNullish)(transaction.common)) {
        if (!(0, _web3Validator.isNullish)(transaction.common.hardfork)) {
            if (!(0, _web3Validator.isNullish)(transaction.hardfork) && transaction.hardfork !== transaction.common.hardfork) throw new (0, _web3Errors.HardforkMismatchError)({
                txHardfork: transaction.hardfork,
                commonHardfork: transaction.common.hardfork
            });
        }
    }
};
const validateLegacyGas = (transaction)=>{
    if (// This check is verifying gas and gasPrice aren't less than 0.
    (0, _web3Validator.isNullish)(transaction.gas) || !(0, _web3Validator.isUInt)(transaction.gas) || (0, _web3Validator.isNullish)(transaction.gasPrice) || !(0, _web3Validator.isUInt)(transaction.gasPrice)) throw new (0, _web3Errors.InvalidGasOrGasPrice)({
        gas: transaction.gas,
        gasPrice: transaction.gasPrice
    });
    if (!(0, _web3Validator.isNullish)(transaction.maxFeePerGas) || !(0, _web3Validator.isNullish)(transaction.maxPriorityFeePerGas)) throw new (0, _web3Errors.UnsupportedFeeMarketError)({
        maxFeePerGas: transaction.maxFeePerGas,
        maxPriorityFeePerGas: transaction.maxPriorityFeePerGas
    });
};
const validateFeeMarketGas = (transaction)=>{
    // These errors come from 1.x, so they must be checked before
    // InvalidMaxPriorityFeePerGasOrMaxFeePerGas to throw the same error
    // for the same code executing in 1.x
    if (!(0, _web3Validator.isNullish)(transaction.gasPrice) && transaction.type === "0x2") throw new (0, _web3Errors.Eip1559GasPriceError)(transaction.gasPrice);
    if (transaction.type === "0x0" || transaction.type === "0x1") throw new (0, _web3Errors.UnsupportedFeeMarketError)({
        maxFeePerGas: transaction.maxFeePerGas,
        maxPriorityFeePerGas: transaction.maxPriorityFeePerGas
    });
    if ((0, _web3Validator.isNullish)(transaction.maxFeePerGas) || !(0, _web3Validator.isUInt)(transaction.maxFeePerGas) || (0, _web3Validator.isNullish)(transaction.maxPriorityFeePerGas) || !(0, _web3Validator.isUInt)(transaction.maxPriorityFeePerGas)) throw new (0, _web3Errors.InvalidMaxPriorityFeePerGasOrMaxFeePerGas)({
        maxPriorityFeePerGas: transaction.maxPriorityFeePerGas,
        maxFeePerGas: transaction.maxFeePerGas
    });
};
const validateGas = (transaction)=>{
    const gasPresent = !(0, _web3Validator.isNullish)(transaction.gas) || !(0, _web3Validator.isNullish)(transaction.gasLimit);
    const legacyGasPresent = gasPresent && !(0, _web3Validator.isNullish)(transaction.gasPrice);
    const feeMarketGasPresent = gasPresent && !(0, _web3Validator.isNullish)(transaction.maxPriorityFeePerGas) && !(0, _web3Validator.isNullish)(transaction.maxFeePerGas);
    if (!legacyGasPresent && !feeMarketGasPresent) throw new (0, _web3Errors.MissingGasError)({
        gas: transaction.gas,
        gasPrice: transaction.gasPrice,
        maxPriorityFeePerGas: transaction.maxPriorityFeePerGas,
        maxFeePerGas: transaction.maxFeePerGas
    });
    if (legacyGasPresent && feeMarketGasPresent) throw new (0, _web3Errors.TransactionGasMismatchError)({
        gas: transaction.gas,
        gasPrice: transaction.gasPrice,
        maxPriorityFeePerGas: transaction.maxPriorityFeePerGas,
        maxFeePerGas: transaction.maxFeePerGas
    });
    (legacyGasPresent ? validateLegacyGas : validateFeeMarketGas)(transaction);
    (!(0, _web3Validator.isNullish)(transaction.type) && transaction.type > "0x1" ? validateFeeMarketGas : validateLegacyGas)(transaction);
};
const validateTransactionForSigning = (transaction, overrideMethod)=>{
    if (!(0, _web3Validator.isNullish)(overrideMethod)) {
        overrideMethod(transaction);
        return;
    }
    if (typeof transaction !== "object" || (0, _web3Validator.isNullish)(transaction)) throw new (0, _web3Errors.InvalidTransactionObjectError)(transaction);
    validateCustomChainInfo(transaction);
    validateChainInfo(transaction);
    validateBaseChain(transaction);
    validateHardfork(transaction);
    const formattedTransaction = (0, _formatTransactionJs.formatTransaction)(transaction, (0, _web3Types.ETH_DATA_FORMAT));
    validateGas(formattedTransaction);
    if ((0, _web3Validator.isNullish)(formattedTransaction.nonce) || (0, _web3Validator.isNullish)(formattedTransaction.chainId) || formattedTransaction.nonce.startsWith("-") || formattedTransaction.chainId.startsWith("-")) throw new (0, _web3Errors.InvalidNonceOrChainIdError)({
        nonce: transaction.nonce,
        chainId: transaction.chainId
    });
};

},{"web3-types":"g7Ztk","web3-validator":"6HK71","web3-errors":"jDvsn","./utils/format_transaction.js":"eLHOr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"Jsj6O":[function(require,module,exports) {
/*
This file is part of web3.js.

web3.js is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

web3.js is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "prepareTransactionForSigning", ()=>prepareTransactionForSigning);
var _web3Types = require("web3-types");
var _web3Utils = require("web3-utils");
var _web3EthAccounts = require("web3-eth-accounts");
var _web3Validator = require("web3-validator");
var _validationJs = require("../validation.js");
var _formatTransactionJs = require("./format_transaction.js");
var _transactionBuilderJs = require("./transaction_builder.js");
var __awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
const getEthereumjsTxDataFromTransaction = (transaction)=>{
    var _a, _b;
    return {
        nonce: transaction.nonce,
        gasPrice: transaction.gasPrice,
        gasLimit: (_a = transaction.gasLimit) !== null && _a !== void 0 ? _a : transaction.gas,
        to: transaction.to,
        value: transaction.value,
        data: (_b = transaction.data) !== null && _b !== void 0 ? _b : transaction.input,
        type: transaction.type,
        chainId: transaction.chainId,
        accessList: transaction.accessList,
        maxPriorityFeePerGas: transaction.maxPriorityFeePerGas,
        maxFeePerGas: transaction.maxFeePerGas
    };
};
const getEthereumjsTransactionOptions = (transaction, web3Context)=>{
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t;
    const hasTransactionSigningOptions = !(0, _web3Validator.isNullish)(transaction.chain) && !(0, _web3Validator.isNullish)(transaction.hardfork) || !(0, _web3Validator.isNullish)(transaction.common);
    let common;
    if (!hasTransactionSigningOptions) {
        // if defaultcommon is specified, use that.
        if (web3Context.defaultCommon) {
            common = web3Context.defaultCommon;
            if ((0, _web3Validator.isNullish)(common.hardfork)) common.hardfork = (_a = transaction.hardfork) !== null && _a !== void 0 ? _a : web3Context.defaultHardfork;
            if ((0, _web3Validator.isNullish)(common.baseChain)) common.baseChain = web3Context.defaultChain;
        } else common = (0, _web3EthAccounts.Common).custom({
            name: "custom-network",
            chainId: (0, _web3Utils.toNumber)(transaction.chainId),
            networkId: !(0, _web3Validator.isNullish)(transaction.networkId) ? (0, _web3Utils.toNumber)(transaction.networkId) : undefined,
            defaultHardfork: (_b = transaction.hardfork) !== null && _b !== void 0 ? _b : web3Context.defaultHardfork
        }, {
            baseChain: web3Context.defaultChain
        });
    } else {
        const name = (_f = (_e = (_d = (_c = transaction === null || transaction === void 0 ? void 0 : transaction.common) === null || _c === void 0 ? void 0 : _c.customChain) === null || _d === void 0 ? void 0 : _d.name) !== null && _e !== void 0 ? _e : transaction.chain) !== null && _f !== void 0 ? _f : "custom-network";
        const chainId = (0, _web3Utils.toNumber)((_j = (_h = (_g = transaction === null || transaction === void 0 ? void 0 : transaction.common) === null || _g === void 0 ? void 0 : _g.customChain) === null || _h === void 0 ? void 0 : _h.chainId) !== null && _j !== void 0 ? _j : transaction === null || transaction === void 0 ? void 0 : transaction.chainId);
        const networkId = (0, _web3Utils.toNumber)((_m = (_l = (_k = transaction === null || transaction === void 0 ? void 0 : transaction.common) === null || _k === void 0 ? void 0 : _k.customChain) === null || _l === void 0 ? void 0 : _l.networkId) !== null && _m !== void 0 ? _m : transaction === null || transaction === void 0 ? void 0 : transaction.networkId);
        const defaultHardfork = (_q = (_p = (_o = transaction === null || transaction === void 0 ? void 0 : transaction.common) === null || _o === void 0 ? void 0 : _o.hardfork) !== null && _p !== void 0 ? _p : transaction === null || transaction === void 0 ? void 0 : transaction.hardfork) !== null && _q !== void 0 ? _q : web3Context.defaultHardfork;
        const baseChain = (_t = (_s = (_r = transaction.common) === null || _r === void 0 ? void 0 : _r.baseChain) !== null && _s !== void 0 ? _s : transaction.chain) !== null && _t !== void 0 ? _t : web3Context.defaultChain;
        if (chainId && networkId && name) common = (0, _web3EthAccounts.Common).custom({
            name,
            chainId,
            networkId,
            defaultHardfork
        }, {
            baseChain
        });
    }
    return {
        common
    };
};
const prepareTransactionForSigning = (transaction, web3Context, privateKey, fillGasPrice = false, fillGasLimit = true)=>__awaiter(void 0, void 0, void 0, function*() {
        const populatedTransaction = yield (0, _transactionBuilderJs.transactionBuilder)({
            transaction,
            web3Context,
            privateKey,
            fillGasPrice,
            fillGasLimit
        });
        const formattedTransaction = (0, _formatTransactionJs.formatTransaction)(populatedTransaction, (0, _web3Types.ETH_DATA_FORMAT));
        (0, _validationJs.validateTransactionForSigning)(formattedTransaction);
        return (0, _web3EthAccounts.TransactionFactory).fromTxData(getEthereumjsTxDataFromTransaction(formattedTransaction), getEthereumjsTransactionOptions(formattedTransaction, web3Context));
    });

},{"web3-types":"g7Ztk","web3-utils":"8WsWI","web3-eth-accounts":"4gQAz","web3-validator":"6HK71","../validation.js":"bjQPv","./format_transaction.js":"eLHOr","./transaction_builder.js":"brU2r","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"arHxy":[function(require,module,exports) {
/*
This file is part of web3.js.

web3.js is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

web3.js is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/ /**
 * The `web3.eth.Contract` object makes it easy to interact with smart contracts on the Ethereum blockchain.
 * When you create a new contract object you give it the JSON interface of the respective smart contract and
 * web3 will auto convert all calls into low level ABI calls over RPC for you.
 * This allows you to interact with smart contracts as if they were JavaScript objects.
 *
 * To use it standalone:
 *
 * ```ts
 * const Contract = require('web3-eth-contract');
 *
 * // set provider for all later instances to use
 * Contract.setProvider('ws://localhost:8546');
 *
 * const contract = new Contract(jsonInterface, address);
 *
 * contract.methods.somFunc().send({from: ....})
 * .on('receipt', function(){
 *    ...
 * });
 * ```
 */ /**
 * This comment _supports3_ [Markdown](https://marked.js.org/)
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _contractJs = require("./contract.js");
var _encodingJs = require("./encoding.js");
parcelHelpers.exportAll(_encodingJs, exports);
parcelHelpers.exportAll(_contractJs, exports);
var _logSubscriptionJs = require("./log_subscription.js");
parcelHelpers.exportAll(_logSubscriptionJs, exports);
var _typesJs = require("./types.js");
parcelHelpers.exportAll(_typesJs, exports);
exports.default = (0, _contractJs.Contract);

},{"./contract.js":"3XKIU","./encoding.js":"adwpM","./log_subscription.js":"4FHBZ","./types.js":"7t6z9","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3XKIU":[function(require,module,exports) {
/*
This file is part of web3.js.

web3.js is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

web3.js is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * The class designed to interact with smart contracts on the Ethereum blockchain.
 */ parcelHelpers.export(exports, "Contract", ()=>Contract);
var _web3Core = require("web3-core");
var _web3Errors = require("web3-errors");
var _web3Eth = require("web3-eth");
var _web3EthAbi = require("web3-eth-abi");
var _web3Types = require("web3-types");
var _web3Utils = require("web3-utils");
var _web3Validator = require("web3-validator");
var _encodingJs = require("./encoding.js");
var _logSubscriptionJs = require("./log_subscription.js");
var _utilsJs = require("./utils.js");
var __awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
const contractSubscriptions = {
    logs: (0, _logSubscriptionJs.LogsSubscription),
    newHeads: (0, _web3Eth.NewHeadsSubscription),
    newBlockHeaders: (0, _web3Eth.NewHeadsSubscription)
};
class Contract extends (0, _web3Core.Web3Context) {
    constructor(jsonInterface, addressOrOptionsOrContext, optionsOrContextOrReturnFormat, contextOrReturnFormat, returnFormat){
        var _a, _b, _c;
        // eslint-disable-next-line no-nested-ternary
        const options = (0, _utilsJs.isContractInitOptions)(addressOrOptionsOrContext) ? addressOrOptionsOrContext : (0, _utilsJs.isContractInitOptions)(optionsOrContextOrReturnFormat) ? optionsOrContextOrReturnFormat : undefined;
        let contractContext;
        if ((0, _utilsJs.isWeb3ContractContext)(addressOrOptionsOrContext)) contractContext = addressOrOptionsOrContext;
        else if ((0, _utilsJs.isWeb3ContractContext)(optionsOrContextOrReturnFormat)) contractContext = optionsOrContextOrReturnFormat;
        else contractContext = contextOrReturnFormat;
        let provider;
        if (typeof addressOrOptionsOrContext === "object" && "provider" in addressOrOptionsOrContext) provider = addressOrOptionsOrContext.provider;
        else if (typeof optionsOrContextOrReturnFormat === "object" && "provider" in optionsOrContextOrReturnFormat) provider = optionsOrContextOrReturnFormat.provider;
        else if (typeof contextOrReturnFormat === "object" && "provider" in contextOrReturnFormat) provider = contextOrReturnFormat.provider;
        else provider = Contract.givenProvider;
        super(Object.assign(Object.assign({}, contractContext), {
            provider,
            registeredSubscriptions: contractSubscriptions
        }));
        /**
         * Set to true if you want contracts' defaults to sync with global defaults.
         */ this.syncWithContext = false;
        this._functions = {};
        if (!(0, _web3Validator.isNullish)(options) && !(0, _web3Validator.isNullish)(options.data) && !(0, _web3Validator.isNullish)(options.input) && this.config.contractDataInputFill !== "both") throw new (0, _web3Errors.ContractTransactionDataAndInputError)({
            data: options.data,
            input: options.input
        });
        this._overloadedMethodAbis = new Map();
        // eslint-disable-next-line no-nested-ternary
        const returnDataFormat = (0, _web3Utils.isDataFormat)(contextOrReturnFormat) ? contextOrReturnFormat : (0, _web3Utils.isDataFormat)(optionsOrContextOrReturnFormat) ? optionsOrContextOrReturnFormat : returnFormat !== null && returnFormat !== void 0 ? returnFormat : (0, _web3Types.DEFAULT_RETURN_FORMAT);
        const address = typeof addressOrOptionsOrContext === "string" ? addressOrOptionsOrContext : undefined;
        this.config.contractDataInputFill = (_a = options === null || options === void 0 ? void 0 : options.dataInputFill) !== null && _a !== void 0 ? _a : this.config.contractDataInputFill;
        this._parseAndSetJsonInterface(jsonInterface, returnDataFormat);
        if (!(0, _web3Validator.isNullish)(address)) this._parseAndSetAddress(address, returnDataFormat);
        this.options = {
            address,
            jsonInterface: this._jsonInterface,
            gas: (_b = options === null || options === void 0 ? void 0 : options.gas) !== null && _b !== void 0 ? _b : options === null || options === void 0 ? void 0 : options.gasLimit,
            gasPrice: options === null || options === void 0 ? void 0 : options.gasPrice,
            from: options === null || options === void 0 ? void 0 : options.from,
            input: options === null || options === void 0 ? void 0 : options.input,
            data: options === null || options === void 0 ? void 0 : options.data
        };
        this.syncWithContext = (_c = options === null || options === void 0 ? void 0 : options.syncWithContext) !== null && _c !== void 0 ? _c : false;
        if (contractContext instanceof (0, _web3Core.Web3Context)) this.subscribeToContextEvents(contractContext);
        Object.defineProperty(this.options, "address", {
            set: (value)=>this._parseAndSetAddress(value, returnDataFormat),
            get: ()=>this._address
        });
        Object.defineProperty(this.options, "jsonInterface", {
            set: (value)=>this._parseAndSetJsonInterface(value, returnDataFormat),
            get: ()=>this._jsonInterface
        });
        if (contractContext instanceof (0, _web3Core.Web3Context)) contractContext.on((0, _web3Core.Web3ConfigEvent).CONFIG_CHANGE, (event)=>{
            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
            this.setConfig({
                [event.name]: event.newValue
            });
        });
    }
    /**
     * Subscribe to an event.
     *
     * ```ts
     * await myContract.events.MyEvent([options])
     * ```
     *
     * There is a special event `allEvents` that can be used to subscribe all events.
     *
     * ```ts
     * await myContract.events.allEvents([options])
     * ```
     *
     * @returns - When individual event is accessed will returns {@link ContractBoundEvent} object
     */ get events() {
        return this._events;
    }
    /**
     * Creates a transaction object for that method, which then can be `called`, `send`, `estimated`, `createAccessList` , or `ABI encoded`.
     *
     * The methods of this smart contract are available through:
     *
     * The name: `myContract.methods.myMethod(123)`
     * The name with parameters: `myContract.methods['myMethod(uint256)'](123)`
     * The signature `myContract.methods['0x58cf5f10'](123)`
     *
     * This allows calling functions with same name but different parameters from the JavaScript contract object.
     *
     * \> The method signature does not provide a type safe interface, so we recommend to use method `name` instead.
     *
     * ```ts
     * // calling a method
     * const result = await myContract.methods.myMethod(123).call({from: '0xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe'});
     *
     * // or sending and using a promise
     * const receipt = await myContract.methods.myMethod(123).send({from: '0xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe'});
     *
     * // or sending and using the events
     * const sendObject = myContract.methods.myMethod(123).send({from: '0xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe'});
     * sendObject.on('transactionHash', function(hash){
     *   ...
     * });
     * sendObject.on('receipt', function(receipt){
     *   ...
     * });
     * sendObject.on('confirmation', function(confirmationNumber, receipt){
     *   ...
     * });
     * sendObject.on('error', function(error, receipt) {
     *   ...
     * });
     * ```
     *
     * @returns - Either returns {@link PayableMethodObject} or {@link NonPayableMethodObject} based on the definitions of the ABI of that contract.
     */ get methods() {
        return this._methods;
    }
    /**
     * Clones the current contract instance. This doesn't deploy contract on blockchain and only creates a local clone.
     *
     * @returns - The new contract instance.
     *
     * ```ts
     * const contract1 = new eth.Contract(abi, address, {gasPrice: '12345678', from: fromAddress});
     *
     * const contract2 = contract1.clone();
     * contract2.options.address = address2;
     *
     * (contract1.options.address !== contract2.options.address);
     * > true
     * ```
     */ clone() {
        let newContract;
        if (this.options.address) newContract = new Contract([
            ...this._jsonInterface,
            ...this._errorsInterface
        ], this.options.address, {
            gas: this.options.gas,
            gasPrice: this.options.gasPrice,
            from: this.options.from,
            input: this.options.input,
            data: this.options.data,
            provider: this.currentProvider,
            syncWithContext: this.syncWithContext,
            dataInputFill: this.config.contractDataInputFill
        }, this.getContextObject());
        else newContract = new Contract([
            ...this._jsonInterface,
            ...this._errorsInterface
        ], {
            gas: this.options.gas,
            gasPrice: this.options.gasPrice,
            from: this.options.from,
            input: this.options.input,
            data: this.options.data,
            provider: this.currentProvider,
            syncWithContext: this.syncWithContext,
            dataInputFill: this.config.contractDataInputFill
        }, this.getContextObject());
        if (this.context) newContract.subscribeToContextEvents(this.context);
        return newContract;
    }
    /**
     * Call this function to deploy the contract to the blockchain. After successful deployment the promise will resolve with a new contract instance.
     *
     * ```ts
     * myContract.deploy({
     *   input: '0x12345...', // data keyword can be used, too. If input is used, data will be ignored.
     *   arguments: [123, 'My String']
     * })
     * .send({
     *   from: '0x1234567890123456789012345678901234567891',
     *   gas: 1500000,
     *   gasPrice: '30000000000000'
     * }, function(error, transactionHash){ ... })
     * .on('error', function(error){ ... })
     * .on('transactionHash', function(transactionHash){ ... })
     * .on('receipt', function(receipt){
     *  console.log(receipt.contractAddress) // contains the new contract address
     * })
     * .on('confirmation', function(confirmationNumber, receipt){ ... })
     * .then(function(newContractInstance){
     *   console.log(newContractInstance.options.address) // instance with the new contract address
     * });
     *
     *
     * // When the data is already set as an option to the contract itself
     * myContract.options.data = '0x12345...';
     *
     * myContract.deploy({
     *   arguments: [123, 'My String']
     * })
     * .send({
     *   from: '0x1234567890123456789012345678901234567891',
     *   gas: 1500000,
     *   gasPrice: '30000000000000'
     * })
     * .then(function(newContractInstance){
     *   console.log(newContractInstance.options.address) // instance with the new contract address
     * });
     *
     *
     * // Simply encoding
     * myContract.deploy({
     *   input: '0x12345...',
     *   arguments: [123, 'My String']
     * })
     * .encodeABI();
     * > '0x12345...0000012345678765432'
     *
     *
     * // Gas estimation
     * myContract.deploy({
     *   input: '0x12345...',
     *   arguments: [123, 'My String']
     * })
     * .estimateGas(function(err, gas){
     *   console.log(gas);
     * });
     * ```
     *
     * @returns - The transaction object
     */ deploy(deployOptions) {
        var _a, _b, _c;
        let abi = this._jsonInterface.find((j)=>j.type === "constructor");
        if (!abi) abi = {
            type: "constructor",
            inputs: [],
            stateMutability: ""
        };
        const _input = (0, _web3Utils.format)({
            format: "bytes"
        }, (_a = deployOptions === null || deployOptions === void 0 ? void 0 : deployOptions.input) !== null && _a !== void 0 ? _a : this.options.input, (0, _web3Types.DEFAULT_RETURN_FORMAT));
        const _data = (0, _web3Utils.format)({
            format: "bytes"
        }, (_b = deployOptions === null || deployOptions === void 0 ? void 0 : deployOptions.data) !== null && _b !== void 0 ? _b : this.options.data, (0, _web3Types.DEFAULT_RETURN_FORMAT));
        if ((!_input || _input.trim() === "0x") && (!_data || _data.trim() === "0x")) throw new (0, _web3Errors.Web3ContractError)("contract creation without any data provided.");
        const args = (_c = deployOptions === null || deployOptions === void 0 ? void 0 : deployOptions.arguments) !== null && _c !== void 0 ? _c : [];
        const contractOptions = Object.assign(Object.assign({}, this.options), {
            input: _input,
            data: _data
        });
        const deployData = _input !== null && _input !== void 0 ? _input : _data;
        return {
            arguments: args,
            send: (options)=>{
                const modifiedOptions = Object.assign({}, options);
                // eslint-disable-next-line @typescript-eslint/no-unsafe-return
                return this._contractMethodDeploySend(abi, args, modifiedOptions, contractOptions);
            },
            estimateGas: (options, returnFormat = (0, _web3Types.DEFAULT_RETURN_FORMAT))=>__awaiter(this, void 0, void 0, function*() {
                    const modifiedOptions = Object.assign({}, options);
                    return this._contractMethodEstimateGas({
                        abi: abi,
                        params: args,
                        returnFormat,
                        options: modifiedOptions,
                        contractOptions
                    });
                }),
            encodeABI: ()=>(0, _encodingJs.encodeMethodABI)(abi, args, (0, _web3Utils.format)({
                    format: "bytes"
                }, deployData, (0, _web3Types.DEFAULT_RETURN_FORMAT)))
        };
    }
    getPastEvents(param1, param2, param3) {
        var _a;
        return __awaiter(this, void 0, void 0, function*() {
            const eventName = typeof param1 === "string" ? param1 : (0, _web3Eth.ALL_EVENTS);
            const options = // eslint-disable-next-line no-nested-ternary
            typeof param1 !== "string" && !(0, _web3Utils.isDataFormat)(param1) ? param1 : !(0, _web3Utils.isDataFormat)(param2) ? param2 : {};
            // eslint-disable-next-line no-nested-ternary
            const returnFormat = (0, _web3Utils.isDataFormat)(param1) ? param1 : (0, _web3Utils.isDataFormat)(param2) ? param2 : param3 !== null && param3 !== void 0 ? param3 : (0, _web3Types.DEFAULT_RETURN_FORMAT);
            const abi = eventName === "allEvents" || eventName === (0, _web3Eth.ALL_EVENTS) ? (0, _web3Eth.ALL_EVENTS_ABI) : this._jsonInterface.find((j)=>"name" in j && j.name === eventName);
            if (!abi) throw new (0, _web3Errors.Web3ContractError)(`Event ${eventName} not found.`);
            const { fromBlock, toBlock, topics, address } = (0, _encodingJs.encodeEventABI)(this.options, abi, options !== null && options !== void 0 ? options : {});
            const logs = yield (0, _web3Eth.getLogs)(this, {
                fromBlock,
                toBlock,
                topics,
                address
            }, returnFormat);
            const decodedLogs = logs.map((log)=>typeof log === "string" ? log : (0, _web3Eth.decodeEventABI)(abi, log, this._jsonInterface, returnFormat));
            const filter = (_a = options === null || options === void 0 ? void 0 : options.filter) !== null && _a !== void 0 ? _a : {};
            const filterKeys = Object.keys(filter);
            if (filterKeys.length > 0) return decodedLogs.filter((log)=>{
                if (typeof log === "string") return true;
                return filterKeys.every((key)=>{
                    var _a;
                    if (Array.isArray(filter[key])) return filter[key].some((v)=>String(log.returnValues[key]).toUpperCase() === String(v).toUpperCase());
                    const inputAbi = (_a = abi.inputs) === null || _a === void 0 ? void 0 : _a.filter((input)=>input.name === key)[0];
                    if ((inputAbi === null || inputAbi === void 0 ? void 0 : inputAbi.indexed) && inputAbi.type === "string") {
                        const hashedIndexedString = (0, _web3Utils.keccak256)(filter[key]);
                        if (hashedIndexedString === String(log.returnValues[key])) return true;
                    }
                    return String(log.returnValues[key]).toUpperCase() === String(filter[key]).toUpperCase();
                });
            });
            return decodedLogs;
        });
    }
    _parseAndSetAddress(value, returnFormat = (0, _web3Types.DEFAULT_RETURN_FORMAT)) {
        this._address = value ? (0, _web3Utils.toChecksumAddress)((0, _web3Utils.format)({
            format: "address"
        }, value, returnFormat)) : value;
    }
    _parseAndSetJsonInterface(abis, returnFormat = (0, _web3Types.DEFAULT_RETURN_FORMAT)) {
        var _a, _b, _c, _d, _e;
        this._functions = {};
        this._methods = {};
        this._events = {};
        let result = [];
        const functionsAbi = abis.filter((abi)=>abi.type !== "error");
        const errorsAbi = abis.filter((abi)=>(0, _web3EthAbi.isAbiErrorFragment)(abi));
        for (const a of functionsAbi){
            const abi = Object.assign(Object.assign({}, a), {
                signature: ""
            });
            if ((0, _web3EthAbi.isAbiFunctionFragment)(abi)) {
                const methodName = (0, _web3EthAbi.jsonInterfaceMethodToString)(abi);
                const methodSignature = (0, _web3EthAbi.encodeFunctionSignature)(methodName);
                abi.signature = methodSignature;
                // make constant and payable backwards compatible
                abi.constant = (_b = (_a = abi.stateMutability === "view", _a !== void 0) ? _a : abi.stateMutability === "pure") !== null && _b !== void 0 ? _b : abi.constant;
                abi.payable = (_c = abi.stateMutability === "payable", _c !== void 0) ? _c : abi.payable;
                this._overloadedMethodAbis.set(abi.name, [
                    ...(_d = this._overloadedMethodAbis.get(abi.name)) !== null && _d !== void 0 ? _d : [],
                    abi
                ]);
                const abiFragment = (_e = this._overloadedMethodAbis.get(abi.name)) !== null && _e !== void 0 ? _e : [];
                const contractMethod = this._createContractMethod(abiFragment, errorsAbi);
                this._functions[methodName] = {
                    signature: methodSignature,
                    method: contractMethod
                };
                // We don't know a particular type of the Abi method so can't type check
                this._methods[abi.name] = this._functions[methodName].method;
                // We don't know a particular type of the Abi method so can't type check
                this._methods[methodName] = this._functions[methodName].method;
                // We don't know a particular type of the Abi method so can't type check
                this._methods[methodSignature] = this._functions[methodName].method;
            } else if ((0, _web3EthAbi.isAbiEventFragment)(abi)) {
                const eventName = (0, _web3EthAbi.jsonInterfaceMethodToString)(abi);
                const eventSignature = (0, _web3EthAbi.encodeEventSignature)(eventName);
                const event = this._createContractEvent(abi, returnFormat);
                abi.signature = eventSignature;
                if (!(eventName in this._events) || abi.name === "bound") // It's a private type and we don't want to expose it and no need to check
                this._events[eventName] = event;
                // It's a private type and we don't want to expose it and no need to check
                this._events[abi.name] = event;
                // It's a private type and we don't want to expose it and no need to check
                this._events[eventSignature] = event;
            }
            result = [
                ...result,
                abi
            ];
        }
        this._events.allEvents = this._createContractEvent((0, _web3Eth.ALL_EVENTS_ABI), returnFormat);
        this._jsonInterface = [
            ...result
        ];
        this._errorsInterface = errorsAbi;
    }
    // eslint-disable-next-line class-methods-use-this
    _getAbiParams(abi, params) {
        var _a;
        try {
            return (0, _web3Validator.utils).transformJsonDataToAbiFormat((_a = abi.inputs) !== null && _a !== void 0 ? _a : [], params);
        } catch (error) {
            throw new (0, _web3Errors.Web3ContractError)(`Invalid parameters for method ${abi.name}: ${error.message}`);
        }
    }
    _createContractMethod(abiArr, errorsAbis) {
        const abi = abiArr[abiArr.length - 1];
        return (...params)=>{
            var _a, _b;
            let abiParams;
            const abis = (_a = this._overloadedMethodAbis.get(abi.name)) !== null && _a !== void 0 ? _a : [];
            let methodAbi = abis[0];
            const internalErrorsAbis = errorsAbis;
            const arrayOfAbis = abis.filter((_abi)=>{
                var _a;
                return ((_a = _abi.inputs) !== null && _a !== void 0 ? _a : []).length === params.length;
            });
            if (abis.length === 1 || arrayOfAbis.length === 0) {
                abiParams = this._getAbiParams(methodAbi, params);
                (0, _web3Validator.validator).validate((_b = abi.inputs) !== null && _b !== void 0 ? _b : [], abiParams);
            } else {
                const errors = [];
                for (const _abi of arrayOfAbis)try {
                    abiParams = this._getAbiParams(_abi, params);
                    (0, _web3Validator.validator).validate(_abi.inputs, abiParams);
                    methodAbi = _abi;
                    break;
                } catch (e) {
                    errors.push(e);
                }
                if (errors.length === arrayOfAbis.length) throw new (0, _web3Validator.Web3ValidatorError)(errors);
            }
            const methods = {
                arguments: abiParams,
                call: (options, block)=>__awaiter(this, void 0, void 0, function*() {
                        return this._contractMethodCall(methodAbi, abiParams, internalErrorsAbis, options, block);
                    }),
                send: (options)=>this._contractMethodSend(methodAbi, abiParams, internalErrorsAbis, options),
                estimateGas: (options, returnFormat = (0, _web3Types.DEFAULT_RETURN_FORMAT))=>__awaiter(this, void 0, void 0, function*() {
                        return this._contractMethodEstimateGas({
                            abi: methodAbi,
                            params: abiParams,
                            returnFormat,
                            options
                        });
                    }),
                encodeABI: ()=>(0, _encodingJs.encodeMethodABI)(methodAbi, abiParams),
                createAccessList: (options, block)=>__awaiter(this, void 0, void 0, function*() {
                        return this._contractMethodCreateAccessList(methodAbi, abiParams, internalErrorsAbis, options, block);
                    })
            };
            if (methodAbi.stateMutability === "payable") return methods;
            return methods;
        };
    }
    _contractMethodCall(abi, params, errorsAbi, options, block) {
        var _a;
        return __awaiter(this, void 0, void 0, function*() {
            const tx = (0, _utilsJs.getEthTxCallParams)({
                abi,
                params,
                options: Object.assign(Object.assign({}, options), {
                    dataInputFill: this.config.contractDataInputFill
                }),
                contractOptions: Object.assign(Object.assign({}, this.options), {
                    from: (_a = this.options.from) !== null && _a !== void 0 ? _a : this.config.defaultAccount
                })
            });
            try {
                const result = yield (0, _web3Eth.call)(this, tx, block, (0, _web3Types.DEFAULT_RETURN_FORMAT));
                return (0, _encodingJs.decodeMethodReturn)(abi, result);
            } catch (error) {
                if (error instanceof (0, _web3Errors.ContractExecutionError)) // this will parse the error data by trying to decode the ABI error inputs according to EIP-838
                (0, _web3EthAbi.decodeContractErrorData)(errorsAbi, error.innerError);
                throw error;
            }
        });
    }
    _contractMethodCreateAccessList(abi, params, errorsAbi, options, block) {
        var _a;
        return __awaiter(this, void 0, void 0, function*() {
            const tx = (0, _utilsJs.getCreateAccessListParams)({
                abi,
                params,
                options: Object.assign(Object.assign({}, options), {
                    dataInputFill: this.config.contractDataInputFill
                }),
                contractOptions: Object.assign(Object.assign({}, this.options), {
                    from: (_a = this.options.from) !== null && _a !== void 0 ? _a : this.config.defaultAccount
                })
            });
            try {
                return (0, _web3Eth.createAccessList)(this, tx, block, (0, _web3Types.DEFAULT_RETURN_FORMAT));
            } catch (error) {
                if (error instanceof (0, _web3Errors.ContractExecutionError)) // this will parse the error data by trying to decode the ABI error inputs according to EIP-838
                (0, _web3EthAbi.decodeContractErrorData)(errorsAbi, error.innerError);
                throw error;
            }
        });
    }
    _contractMethodSend(abi, params, errorsAbi, options, contractOptions) {
        var _a, _b;
        let modifiedContractOptions = contractOptions !== null && contractOptions !== void 0 ? contractOptions : this.options;
        modifiedContractOptions = Object.assign(Object.assign({}, modifiedContractOptions), {
            input: undefined,
            from: (_b = (_a = modifiedContractOptions.from) !== null && _a !== void 0 ? _a : this.defaultAccount) !== null && _b !== void 0 ? _b : undefined
        });
        const tx = (0, _utilsJs.getSendTxParams)({
            abi,
            params,
            options: Object.assign(Object.assign({}, options), {
                dataInputFill: this.config.contractDataInputFill
            }),
            contractOptions: modifiedContractOptions
        });
        const transactionToSend = (0, _web3Eth.sendTransaction)(this, tx, (0, _web3Types.DEFAULT_RETURN_FORMAT), {
            // TODO Should make this configurable by the user
            checkRevertBeforeSending: false,
            contractAbi: this._jsonInterface
        });
        // eslint-disable-next-line no-void
        transactionToSend.on("error", (error)=>{
            if (error instanceof (0, _web3Errors.ContractExecutionError)) // this will parse the error data by trying to decode the ABI error inputs according to EIP-838
            (0, _web3EthAbi.decodeContractErrorData)(errorsAbi, error.innerError);
        });
        return transactionToSend;
    }
    _contractMethodDeploySend(abi, params, options, contractOptions) {
        var _a, _b;
        let modifiedContractOptions = contractOptions !== null && contractOptions !== void 0 ? contractOptions : this.options;
        modifiedContractOptions = Object.assign(Object.assign({}, modifiedContractOptions), {
            from: (_b = (_a = modifiedContractOptions.from) !== null && _a !== void 0 ? _a : this.defaultAccount) !== null && _b !== void 0 ? _b : undefined
        });
        const tx = (0, _utilsJs.getSendTxParams)({
            abi,
            params,
            options: Object.assign(Object.assign({}, options), {
                dataInputFill: this.config.contractDataInputFill
            }),
            contractOptions: modifiedContractOptions
        });
        return (0, _web3Eth.sendTransaction)(this, tx, (0, _web3Types.DEFAULT_RETURN_FORMAT), {
            transactionResolver: (receipt)=>{
                if (receipt.status === BigInt(0)) throw new (0, _web3Errors.Web3ContractError)("code couldn't be stored", receipt);
                const newContract = this.clone();
                // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
                newContract.options.address = receipt.contractAddress;
                return newContract;
            },
            contractAbi: this._jsonInterface,
            // TODO Should make this configurable by the user
            checkRevertBeforeSending: false
        });
    }
    _contractMethodEstimateGas({ abi, params, returnFormat, options, contractOptions }) {
        return __awaiter(this, void 0, void 0, function*() {
            const tx = (0, _utilsJs.getEstimateGasParams)({
                abi,
                params,
                options: Object.assign(Object.assign({}, options), {
                    dataInputFill: this.config.contractDataInputFill
                }),
                contractOptions: contractOptions !== null && contractOptions !== void 0 ? contractOptions : this.options
            });
            return (0, _web3Eth.estimateGas)(this, tx, (0, _web3Types.BlockTags).LATEST, returnFormat);
        });
    }
    // eslint-disable-next-line class-methods-use-this
    _createContractEvent(abi, returnFormat = (0, _web3Types.DEFAULT_RETURN_FORMAT)) {
        return (...params)=>{
            var _a;
            const { topics, fromBlock } = (0, _encodingJs.encodeEventABI)(this.options, abi, params[0]);
            const sub = new (0, _logSubscriptionJs.LogsSubscription)({
                address: this.options.address,
                topics,
                abi,
                jsonInterface: this._jsonInterface
            }, {
                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
                subscriptionManager: this.subscriptionManager,
                returnFormat
            });
            if (!(0, _web3Validator.isNullish)(fromBlock)) // emit past events when fromBlock is defined
            this.getPastEvents(abi.name, {
                fromBlock,
                topics
            }, returnFormat).then((logs)=>{
                logs.forEach((log)=>sub.emit("data", log));
            }).catch((error)=>{
                sub.emit("error", new (0, _web3Errors.SubscriptionError)("Failed to get past events.", error));
            });
            (_a = this.subscriptionManager) === null || _a === void 0 || _a.addSubscription(sub).catch((error)=>{
                sub.emit("error", new (0, _web3Errors.SubscriptionError)("Failed to subscribe.", error));
            });
            return sub;
        };
    }
    subscribeToContextEvents(context) {
        // eslint-disable-next-line @typescript-eslint/no-this-alias
        const contractThis = this;
        this.context = context;
        if (contractThis.syncWithContext) context.on((0, _web3Core.Web3ConfigEvent).CONFIG_CHANGE, (event)=>{
            contractThis.setConfig({
                [event.name]: event.newValue
            });
        });
    }
}

},{"web3-core":"4Uu6H","web3-errors":"jDvsn","web3-eth":"k52UE","web3-eth-abi":"bZbSL","web3-types":"g7Ztk","web3-utils":"8WsWI","web3-validator":"6HK71","./encoding.js":"adwpM","./log_subscription.js":"4FHBZ","./utils.js":"efdIL","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"adwpM":[function(require,module,exports) {
/*
This file is part of web3.js.

web3.js is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

web3.js is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "decodeEventABI", ()=>(0, _web3Eth.decodeEventABI));
parcelHelpers.export(exports, "encodeEventABI", ()=>encodeEventABI);
parcelHelpers.export(exports, "encodeMethodABI", ()=>encodeMethodABI);
parcelHelpers.export(exports, "decodeMethodReturn", ()=>decodeMethodReturn);
var _web3Utils = require("web3-utils");
var _web3Types = require("web3-types");
var _web3EthAbi = require("web3-eth-abi");
var _web3Eth = require("web3-eth");
var _web3Errors = require("web3-errors");
const encodeEventABI = ({ address }, event, options)=>{
    var _a, _b;
    const topics = options === null || options === void 0 ? void 0 : options.topics;
    const filter = (_a = options === null || options === void 0 ? void 0 : options.filter) !== null && _a !== void 0 ? _a : {};
    const opts = {};
    if (!(0, _web3Utils.isNullish)(options === null || options === void 0 ? void 0 : options.fromBlock)) opts.fromBlock = (0, _web3Utils.format)((0, _web3Eth.blockSchema).properties.number, options === null || options === void 0 ? void 0 : options.fromBlock, {
        number: (0, _web3Types.FMT_NUMBER).HEX,
        bytes: (0, _web3Types.FMT_BYTES).HEX
    });
    if (!(0, _web3Utils.isNullish)(options === null || options === void 0 ? void 0 : options.toBlock)) opts.toBlock = (0, _web3Utils.format)((0, _web3Eth.blockSchema).properties.number, options === null || options === void 0 ? void 0 : options.toBlock, {
        number: (0, _web3Types.FMT_NUMBER).HEX,
        bytes: (0, _web3Types.FMT_BYTES).HEX
    });
    if (topics && Array.isArray(topics)) opts.topics = [
        ...topics
    ];
    else {
        opts.topics = [];
        // add event signature
        if (event && !event.anonymous && ![
            (0, _web3Eth.ALL_EVENTS),
            "allEvents"
        ].includes(event.name)) opts.topics.push((_b = event.signature) !== null && _b !== void 0 ? _b : (0, _web3EthAbi.encodeEventSignature)((0, _web3EthAbi.jsonInterfaceMethodToString)(event)));
        // add event topics (indexed arguments)
        if (![
            (0, _web3Eth.ALL_EVENTS),
            "allEvents"
        ].includes(event.name) && event.inputs) for (const input of event.inputs){
            if (!input.indexed) continue;
            const value = filter[input.name];
            if (!value) {
                // eslint-disable-next-line no-null/no-null
                opts.topics.push(null);
                continue;
            }
            // TODO: https://github.com/ethereum/web3.js/issues/344
            // TODO: deal properly with components
            if (Array.isArray(value)) opts.topics.push(value.map((v)=>(0, _web3EthAbi.encodeParameter)(input.type, v)));
            else if (input.type === "string") opts.topics.push((0, _web3Utils.keccak256)(value));
            else opts.topics.push((0, _web3EthAbi.encodeParameter)(input.type, value));
        }
    }
    if (!opts.topics.length) delete opts.topics;
    if (address) opts.address = address.toLowerCase();
    return opts;
};
const encodeMethodABI = (abi, args, deployData)=>{
    const inputLength = Array.isArray(abi.inputs) ? abi.inputs.length : 0;
    if (inputLength !== args.length) throw new (0, _web3Errors.Web3ContractError)(`The number of arguments is not matching the methods required number. You need to pass ${inputLength} arguments.`);
    const params = (0, _web3EthAbi.encodeParameters)(Array.isArray(abi.inputs) ? abi.inputs : [], args).replace("0x", "");
    if ((0, _web3EthAbi.isAbiConstructorFragment)(abi)) {
        if (!deployData) throw new (0, _web3Errors.Web3ContractError)("The contract has no contract data option set. This is necessary to append the constructor parameters.");
        if (!deployData.startsWith("0x")) return `0x${deployData}${params}`;
        return `${deployData}${params}`;
    }
    return `${(0, _web3EthAbi.encodeFunctionSignature)(abi)}${params}`;
};
const decodeMethodReturn = (abi, returnValues)=>{
    // If it was constructor then we need to return contract address
    if (abi.type === "constructor") return returnValues;
    if (!returnValues) // Using "null" value intentionally to match legacy behavior
    // eslint-disable-next-line no-null/no-null
    return null;
    const value = returnValues.length >= 2 ? returnValues.slice(2) : returnValues;
    if (!abi.outputs) // eslint-disable-next-line no-null/no-null
    return null;
    const result = (0, _web3EthAbi.decodeParameters)([
        ...abi.outputs
    ], value);
    if (result.__length__ === 1) return result[0];
    return result;
};

},{"web3-utils":"8WsWI","web3-types":"g7Ztk","web3-eth-abi":"bZbSL","web3-eth":"k52UE","web3-errors":"jDvsn","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4FHBZ":[function(require,module,exports) {
/*
This file is part of web3.js.

web3.js is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

web3.js is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * LogSubscription to be used to subscribe to events logs.
 *
 * Following events are supported and can be accessed with either {@link LogsSubscription.once} or ${@link LogsSubscription.on} methods.
 *
 * - **connected**: Emitted when the subscription is connected.
 * - **data**: Fires on each incoming event with the event object as argument.
 * - **changed**: Fires on each event which was removed from the blockchain. The event will have the additional property `removed: true`.
 * - **error**: Fires on each error.
 *
 * ```ts
 * const subscription = await myContract.events.MyEvent({
 *   filter: {myIndexedParam: [20,23], myOtherIndexedParam: '0x123456789...'}, // Using an array means OR: e.g. 20 or 23
 *   fromBlock: 0
 * });
 *
 * subscription.on("connected", function(subscriptionId){
 *   console.log(subscriptionId);
 * });
 *
 * subscription.on('data', function(event){
 *   console.log(event); // same results as the optional callback above
 * });
 *
 * subscription.on('changed', function(event){
 *   // remove event from local database
 * })
 *
 * subscription.on('error', function(error, receipt) { // If the transaction was rejected by the network with a receipt, the second parameter will be the receipt.
 *   ...
 * });
 *
 * // event output example
 * > {
 *   returnValues: {
 *       myIndexedParam: 20,
 *       myOtherIndexedParam: '0x123456789...',
 *       myNonIndexParam: 'My String'
 *   },
 *   raw: {
 *       data: '0x7f9fade1c0d57a7af66ab4ead79fade1c0d57a7af66ab4ead7c2c2eb7b11a91385',
 *       topics: ['0xfd43ade1c09fade1c0d57a7af66ab4ead7c2c2eb7b11a91ffdd57a7af66ab4ead7', '0x7f9fade1c0d57a7af66ab4ead79fade1c0d57a7af66ab4ead7c2c2eb7b11a91385']
 *   },
 *   event: 'MyEvent',
 *   signature: '0xfd43ade1c09fade1c0d57a7af66ab4ead7c2c2eb7b11a91ffdd57a7af66ab4ead7',
 *   logIndex: 0,
 *   transactionIndex: 0,
 *   transactionHash: '0x7f9fade1c0d57a7af66ab4ead79fade1c0d57a7af66ab4ead7c2c2eb7b11a91385',
 *   blockHash: '0xfd43ade1c09fade1c0d57a7af66ab4ead7c2c2eb7b11a91ffdd57a7af66ab4ead7',
 *   blockNumber: 1234,
 *   address: '0xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe'
 * }
 * ```
 */ parcelHelpers.export(exports, "LogsSubscription", ()=>LogsSubscription);
var _web3Core = require("web3-core");
var _web3Eth = require("web3-eth");
class LogsSubscription extends (0, _web3Core.Web3Subscription) {
    constructor(args, options){
        // eslint-disable-next-line @typescript-eslint/no-unsafe-argument
        super(args, options);
        this.address = args.address;
        this.topics = args.topics;
        this.abi = args.abi;
        this.jsonInterface = args.jsonInterface;
    }
    _buildSubscriptionParams() {
        return [
            "logs",
            {
                address: this.address,
                topics: this.topics
            }
        ];
    }
    formatSubscriptionResult(data) {
        return (0, _web3Eth.decodeEventABI)(this.abi, data, this.jsonInterface, super.returnFormat);
    }
}

},{"web3-core":"4Uu6H","web3-eth":"k52UE","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"efdIL":[function(require,module,exports) {
/*
This file is part of web3.js.

web3.js is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

web3.js is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isContractInitOptions", ()=>(0, _web3Utils.isContractInitOptions));
parcelHelpers.export(exports, "getSendTxParams", ()=>getSendTxParams);
parcelHelpers.export(exports, "getEthTxCallParams", ()=>getEthTxCallParams);
parcelHelpers.export(exports, "getEstimateGasParams", ()=>getEstimateGasParams);
parcelHelpers.export(exports, "isWeb3ContractContext", ()=>isWeb3ContractContext);
parcelHelpers.export(exports, "getCreateAccessListParams", ()=>getCreateAccessListParams);
var _web3Errors = require("web3-errors");
var _web3Utils = require("web3-utils");
var _encodingJs = require("./encoding.js");
const dataInputEncodeMethodHelper = (txParams, abi, params, dataInputFill)=>{
    var _a, _b;
    const tx = {};
    if (!(0, _web3Utils.isNullish)(txParams.data) || dataInputFill === "both") tx.data = (0, _encodingJs.encodeMethodABI)(abi, params, (_a = txParams.data) !== null && _a !== void 0 ? _a : txParams.input);
    if (!(0, _web3Utils.isNullish)(txParams.input) || dataInputFill === "both") tx.input = (0, _encodingJs.encodeMethodABI)(abi, params, (_b = txParams.input) !== null && _b !== void 0 ? _b : txParams.data);
    // if input and data is empty, use web3config default
    if ((0, _web3Utils.isNullish)(tx.input) && (0, _web3Utils.isNullish)(tx.data)) tx[dataInputFill] = (0, _encodingJs.encodeMethodABI)(abi, params);
    return {
        data: tx.data,
        input: tx.input
    };
};
const getSendTxParams = ({ abi, params, options, contractOptions })=>{
    var _a, _b, _c;
    const deploymentCall = (_c = (_b = (_a = options === null || options === void 0 ? void 0 : options.input) !== null && _a !== void 0 ? _a : options === null || options === void 0 ? void 0 : options.data) !== null && _b !== void 0 ? _b : contractOptions.input) !== null && _c !== void 0 ? _c : contractOptions.data;
    if (!deploymentCall && !(options === null || options === void 0 ? void 0 : options.to) && !contractOptions.address) throw new (0, _web3Errors.Web3ContractError)("Contract address not specified");
    if (!(options === null || options === void 0 ? void 0 : options.from) && !contractOptions.from) throw new (0, _web3Errors.Web3ContractError)('Contract "from" address not specified');
    let txParams = (0, _web3Utils.mergeDeep)({
        to: contractOptions.address,
        gas: contractOptions.gas,
        gasPrice: contractOptions.gasPrice,
        from: contractOptions.from,
        input: contractOptions.input,
        maxPriorityFeePerGas: contractOptions.maxPriorityFeePerGas,
        maxFeePerGas: contractOptions.maxFeePerGas,
        data: contractOptions.data
    }, options);
    const dataInput = dataInputEncodeMethodHelper(txParams, abi, params, options === null || options === void 0 ? void 0 : options.dataInputFill);
    txParams = Object.assign(Object.assign({}, txParams), {
        data: dataInput.data,
        input: dataInput.input
    });
    return txParams;
};
const getEthTxCallParams = ({ abi, params, options, contractOptions })=>{
    if (!(options === null || options === void 0 ? void 0 : options.to) && !contractOptions.address) throw new (0, _web3Errors.Web3ContractError)("Contract address not specified");
    let txParams = (0, _web3Utils.mergeDeep)({
        to: contractOptions.address,
        gas: contractOptions.gas,
        gasPrice: contractOptions.gasPrice,
        from: contractOptions.from,
        input: contractOptions.input,
        maxPriorityFeePerGas: contractOptions.maxPriorityFeePerGas,
        maxFeePerGas: contractOptions.maxFeePerGas,
        data: contractOptions.data
    }, options);
    const dataInput = dataInputEncodeMethodHelper(txParams, abi, params, options === null || options === void 0 ? void 0 : options.dataInputFill);
    txParams = Object.assign(Object.assign({}, txParams), {
        data: dataInput.data,
        input: dataInput.input
    });
    return txParams;
};
const getEstimateGasParams = ({ abi, params, options, contractOptions })=>{
    let txParams = (0, _web3Utils.mergeDeep)({
        to: contractOptions.address,
        gas: contractOptions.gas,
        gasPrice: contractOptions.gasPrice,
        from: contractOptions.from,
        input: contractOptions.input,
        data: contractOptions.data
    }, options);
    const dataInput = dataInputEncodeMethodHelper(txParams, abi, params, options === null || options === void 0 ? void 0 : options.dataInputFill);
    txParams = Object.assign(Object.assign({}, txParams), {
        data: dataInput.data,
        input: dataInput.input
    });
    return txParams;
};
const isWeb3ContractContext = (options)=>typeof options === "object" && !(0, _web3Utils.isNullish)(options) && Object.keys(options).length !== 0 && !(0, _web3Utils.isContractInitOptions)(options);
const getCreateAccessListParams = ({ abi, params, options, contractOptions })=>{
    if (!(options === null || options === void 0 ? void 0 : options.to) && !contractOptions.address) throw new (0, _web3Errors.Web3ContractError)("Contract address not specified");
    if (!(options === null || options === void 0 ? void 0 : options.from) && !contractOptions.from) throw new (0, _web3Errors.Web3ContractError)('Contract "from" address not specified');
    let txParams = (0, _web3Utils.mergeDeep)({
        to: contractOptions.address,
        gas: contractOptions.gas,
        gasPrice: contractOptions.gasPrice,
        from: contractOptions.from,
        input: contractOptions.input,
        maxPriorityFeePerGas: contractOptions.maxPriorityFeePerGas,
        maxFeePerGas: contractOptions.maxFeePerGas,
        data: contractOptions.data
    }, options);
    const dataInput = dataInputEncodeMethodHelper(txParams, abi, params, options === null || options === void 0 ? void 0 : options.dataInputFill);
    txParams = Object.assign(Object.assign({}, txParams), {
        data: dataInput.data,
        input: dataInput.input
    });
    return txParams;
};

},{"web3-errors":"jDvsn","web3-utils":"8WsWI","./encoding.js":"adwpM","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7t6z9":[function(require,module,exports) {
/*
This file is part of web3.js.

web3.js is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

web3.js is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hsBVO":[function(require,module,exports) {
/*
This file is part of web3.js.

web3.js is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

web3.js is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/ /**
 * The `web3.eth.ens` functions let you interact with ENS. We recommend reading the [ENS documentation](https://docs.ens.domains/) to get deeper insights about the internals of the name service.
 *
 * ## Breaking Changes
 *
 * -   All the API level interfaces returning or accepting `null` in 1.x, use `undefined` in 4.x.
 * -   Functions don't accept a callback anymore.
 * -   Functions that accepted an optional `TransactionConfig` as the last argument, now accept an optional `NonPayableCallOptions`. See `web3-eth-contract` package for more details.
 * -   Removed all non-read methods. If you need modifing resolver or registry, please use https://www.npmjs.com/package/@ensdomains/ensjs
 */ /**
 * This comment _supports3_ [Markdown](https://marked.js.org/)
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "registryAddresses", ()=>(0, _configJs.registryAddresses));
var _configJs = require("./config.js");
var _ensJs = require("./ens.js");
parcelHelpers.exportAll(_ensJs, exports);

},{"./config.js":"aV3WN","./ens.js":"3kaxB","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aV3WN":[function(require,module,exports) {
/*
This file is part of web3.js.

web3.js is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

web3.js is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/ //
/**
 * An object holding the interface Ids of the ENS resolver contracts. Please see [how to write a resolver](https://docs.ens.domains/contract-developer-guide/writing-a-resolver).
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "interfaceIds", ()=>interfaceIds);
parcelHelpers.export(exports, "methodsInInterface", ()=>methodsInInterface);
parcelHelpers.export(exports, "registryAddresses", ()=>registryAddresses);
parcelHelpers.export(exports, "networkIds", ()=>networkIds);
const interfaceIds = {
    addr: "0x3b3b57de",
    name: "0x691f3431",
    abi: "0x2203ab56",
    pubkey: "0xc8690233",
    text: "0x59d1d43c",
    contenthash: "0xbc1c58d1"
};
const methodsInInterface = {
    setAddr: "addr",
    addr: "addr",
    setPubkey: "pubkey",
    pubkey: "pubkey",
    setContenthash: "contenthash",
    contenthash: "contenthash"
};
const registryAddresses = {
    main: "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",
    goerli: "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e"
};
const networkIds = {
    "0x1": "main",
    "0x5": "goerli"
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3kaxB":[function(require,module,exports) {
/*
This file is part of web3.js.

web3.js is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

web3.js is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * This class is designed to interact with the ENS system on the Ethereum blockchain.
 *
 */ parcelHelpers.export(exports, "ENS", ()=>ENS);
var _web3Core = require("web3-core");
var _web3Errors = require("web3-errors");
var _web3Eth = require("web3-eth");
var _web3Net = require("web3-net");
var _web3Types = require("web3-types");
var _configJs = require("./config.js");
var _registryJs = require("./registry.js");
var _resolverJs = require("./resolver.js");
var __awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
class ENS extends (0, _web3Core.Web3Context) {
    /**
     * Use to create an instance of ENS
     * @param registryAddr - (Optional) The address of the ENS registry (default: mainnet registry address)
     * @param provider - (Optional) The provider to use for the ENS instance
     * @example
     * ```ts
     * const ens = new ENS(
     * 	"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",
     * 	"http://localhost:8545"
     * );
     *
     * console.log( ens.defaultChain);
     * > mainnet
     * ```
     */ constructor(registryAddr, provider){
        super(provider !== null && provider !== void 0 ? provider : "");
        this.registryAddress = registryAddr !== null && registryAddr !== void 0 ? registryAddr : (0, _configJs.registryAddresses).main; // will default to main registry address
        this._registry = new (0, _registryJs.Registry)(this.getContextObject(), registryAddr);
        this._resolver = new (0, _resolverJs.Resolver)(this._registry);
    }
    /**
     * Returns the Resolver by the given address
     * @param name - The name of the ENS domain
     * @returns - An contract instance of the resolver
     *
     * @example
     * ```ts
     * const resolver = await ens.getResolver('resolver');
     *
     * console.log(resolver.options.address);
     * > '0x1234567890123456789012345678901234567890'
     * ```
     */ getResolver(name) {
        return __awaiter(this, void 0, void 0, function*() {
            return this._registry.getResolver(name);
        });
    }
    /**
     * Returns true if the record exists
     * @param name - The ENS name
     * @returns - Returns `true` if node exists in this ENS registry. This will return `false` for records that are in the legacy ENS registry but have not yet been migrated to the new one.
     * @example
     * ```ts
     * const exists = await web3.eth.ens.recordExists('ethereum.eth');
     * ```
     */ recordExists(name) {
        return __awaiter(this, void 0, void 0, function*() {
            return this._registry.recordExists(name);
        });
    }
    /**
     * Returns the caching TTL (time-to-live) of an ENS name.
     * @param name - The ENS name
     * @returns - Returns the caching TTL (time-to-live) of a name.
     * @example
     * ```ts
     * const owner = await web3.eth.ens.getTTL('ethereum.eth');
     * ```
     */ getTTL(name) {
        return __awaiter(this, void 0, void 0, function*() {
            return this._registry.getTTL(name);
        });
    }
    /**
     * Returns the owner by the given name and current configured or detected Registry
     * @param name - The ENS name
     * @returns - Returns the address of the owner of the name.
     * @example
     * ```ts
     * const owner = await web3.eth.ens.getOwner('ethereum.eth');
     * ```
     */ getOwner(name) {
        return __awaiter(this, void 0, void 0, function*() {
            return this._registry.getOwner(name);
        });
    }
    /**
     * Resolves an ENS name to an Ethereum address.
     * @param ENSName - The ENS name to resolve
     * @param coinType - (Optional) The coin type, defaults to 60 (ETH)
     * @returns - The Ethereum address of the given name
     * ```ts
     * const address = await web3.eth.ens.getAddress('ethereum.eth');
     * console.log(address);
     * > '0xfB6916095ca1df60bB79Ce92cE3Ea74c37c5d359'
     * ```
     */ getAddress(ENSName, coinType = 60) {
        return __awaiter(this, void 0, void 0, function*() {
            return this._resolver.getAddress(ENSName, coinType);
        });
    }
    /**
     * Returns the X and Y coordinates of the curve point for the public key.
     * @param ENSName - The ENS name
     * @returns - The X and Y coordinates of the curve point for the public key
     * @example
     * ```ts
     * const key = await web3.eth.ens.getPubkey('ethereum.eth');
     * console.log(key);
     * > {
     * "0": "0x0000000000000000000000000000000000000000000000000000000000000000",
     * "1": "0x0000000000000000000000000000000000000000000000000000000000000000",
     * "x": "0x0000000000000000000000000000000000000000000000000000000000000000",
     * "y": "0x0000000000000000000000000000000000000000000000000000000000000000"
     * }
     * ```
     */ getPubkey(ENSName) {
        return __awaiter(this, void 0, void 0, function*() {
            return this._resolver.getPubkey(ENSName);
        });
    }
    /**
     * Returns the content hash object associated with an ENS node.
     * @param ENSName - The ENS name
     * @returns - The content hash object associated with an ENS node
     * @example
     * ```ts
     * const hash = await web3.eth.ens.getContenthash('ethereum.eth');
     * console.log(hash);
     * > 'QmaEBknbGT4bTQiQoe2VNgBJbRfygQGktnaW5TbuKixjYL'
     * ```
     */ getContenthash(ENSName) {
        return __awaiter(this, void 0, void 0, function*() {
            return this._resolver.getContenthash(ENSName);
        });
    }
    /**
     * Checks if the current used network is synced and looks for ENS support there.
     * Throws an error if not.
     * @returns - The address of the ENS registry if the network has been detected successfully
     * @example
     * ```ts
     * console.log(await web3.eth.ens.checkNetwork());
     * > '0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e'
     * ```
     */ checkNetwork() {
        return __awaiter(this, void 0, void 0, function*() {
            const now = Date.now() / 1000;
            if (!this._lastSyncCheck || now - this._lastSyncCheck > 3600) {
                const syncInfo = yield (0, _web3Eth.isSyncing)(this);
                if (!(typeof syncInfo === "boolean" && !syncInfo)) throw new (0, _web3Errors.ENSNetworkNotSyncedError)();
                this._lastSyncCheck = now;
            }
            if (this._detectedAddress) return this._detectedAddress;
            const networkType = yield (0, _web3Net.getId)(this, Object.assign(Object.assign({}, (0, _web3Types.DEFAULT_RETURN_FORMAT)), {
                number: (0, _web3Types.FMT_NUMBER).HEX
            })); // get the network from provider
            const addr = (0, _configJs.registryAddresses)[(0, _configJs.networkIds)[networkType]];
            if (typeof addr === "undefined") throw new (0, _web3Errors.ENSUnsupportedNetworkError)(networkType);
            this._detectedAddress = addr;
            return this._detectedAddress;
        });
    }
    /**
     * Returns true if the related Resolver does support the given signature or interfaceId.
     * @param ENSName - The ENS name
     * @param interfaceId - The signature of the function or the interfaceId as described in the ENS documentation
     * @returns - `true` if the related Resolver does support the given signature or interfaceId.
     * @example
     * ```ts
     * const supports = await web3.eth.ens.supportsInterface('ethereum.eth', 'addr(bytes32');
     * console.log(supports);
     * > true
     * ```
     */ supportsInterface(ENSName, interfaceId) {
        return __awaiter(this, void 0, void 0, function*() {
            return this._resolver.supportsInterface(ENSName, interfaceId);
        });
    }
    /**
     * @returns - Returns all events that can be emitted by the ENS registry.
     */ get events() {
        return this._registry.events;
    }
}

},{"web3-core":"4Uu6H","web3-errors":"jDvsn","web3-eth":"k52UE","web3-net":"3i7EA","web3-types":"g7Ztk","./config.js":"aV3WN","./registry.js":"3ETFs","./resolver.js":"4npMl","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3ETFs":[function(require,module,exports) {
/*
This file is part of web3.js.

web3.js is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

web3.js is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Registry", ()=>Registry);
var _web3EthContract = require("web3-eth-contract");
var _ensregistryJs = require("./abi/ens/ENSRegistry.js");
var _publicResolverJs = require("./abi/ens/PublicResolver.js");
var _configJs = require("./config.js");
var _utilsJs = require("./utils.js");
var __awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
class Registry {
    constructor(context, customRegistryAddress){
        this.contract = new (0, _web3EthContract.Contract)((0, _ensregistryJs.ENSRegistryAbi), customRegistryAddress !== null && customRegistryAddress !== void 0 ? customRegistryAddress : (0, _configJs.registryAddresses).main, context);
        this.context = context;
    }
    getOwner(name) {
        return __awaiter(this, void 0, void 0, function*() {
            try {
                const result = this.contract.methods.owner((0, _utilsJs.namehash)(name)).call();
                return result;
            } catch (error) {
                throw new Error(); // TODO: TransactionRevertInstructionError Needs to be added after web3-eth call method is implemented
            }
        });
    }
    getTTL(name) {
        return __awaiter(this, void 0, void 0, function*() {
            try {
                return this.contract.methods.ttl((0, _utilsJs.namehash)(name)).call();
            } catch (error) {
                throw new Error(); // TODO: TransactionRevertInstructionError Needs to be added after web3-eth call method is implemented
            }
        });
    }
    recordExists(name) {
        return __awaiter(this, void 0, void 0, function*() {
            try {
                const promise = this.contract.methods.recordExists((0, _utilsJs.namehash)(name)).call();
                return promise;
            } catch (error) {
                throw new Error(); // TODO: TransactionRevertInstructionError Needs to be added after web3-eth call method is implemented
            }
        });
    }
    getResolver(name) {
        return __awaiter(this, void 0, void 0, function*() {
            try {
                return this.contract.methods.resolver((0, _utilsJs.namehash)(name)).call().then((address)=>{
                    // address type is unknown, not sure why
                    if (typeof address === "string") {
                        const contract = new (0, _web3EthContract.Contract)((0, _publicResolverJs.PublicResolverAbi), address, this.context);
                        // TODO: set contract provider needs to be added when ens current provider
                        return contract;
                    }
                    throw new Error();
                });
            } catch (error) {
                throw new Error(); // TODO: TransactionRevertInstructionError Needs to be added after web3-eth call method is implemented
            }
        });
    }
    get events() {
        return this.contract.events;
    }
}

},{"web3-eth-contract":"arHxy","./abi/ens/ENSRegistry.js":"1TDbe","./abi/ens/PublicResolver.js":"eRc7q","./config.js":"aV3WN","./utils.js":"gUh3S","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1TDbe":[function(require,module,exports) {
/*
This file is part of web3.js.

web3.js is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

web3.js is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/ // https://github.com/ensdomains/ens-contracts/blob/master/contracts/registry/ENSRegistry.sol
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ENSRegistryAbi", ()=>ENSRegistryAbi);
const ENSRegistryAbi = [
    {
        anonymous: false,
        inputs: [
            {
                indexed: true,
                internalType: "bytes32",
                name: "node",
                type: "bytes32"
            },
            {
                indexed: true,
                internalType: "bytes32",
                name: "label",
                type: "bytes32"
            },
            {
                indexed: false,
                internalType: "address",
                name: "owner",
                type: "address"
            }
        ],
        name: "NewOwner",
        type: "event"
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: true,
                internalType: "bytes32",
                name: "node",
                type: "bytes32"
            },
            {
                indexed: false,
                internalType: "address",
                name: "resolver",
                type: "address"
            }
        ],
        name: "NewResolver",
        type: "event"
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: true,
                internalType: "bytes32",
                name: "node",
                type: "bytes32"
            },
            {
                indexed: false,
                internalType: "address",
                name: "owner",
                type: "address"
            }
        ],
        name: "Transfer",
        type: "event"
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "owner",
                type: "address"
            },
            {
                internalType: "address",
                name: "operator",
                type: "address"
            }
        ],
        name: "isApprovedForAll",
        outputs: [
            {
                internalType: "bool",
                name: "",
                type: "bool"
            }
        ],
        stateMutability: "view",
        type: "function"
    },
    {
        inputs: [
            {
                internalType: "bytes32",
                name: "node",
                type: "bytes32"
            }
        ],
        name: "owner",
        outputs: [
            {
                internalType: "address",
                name: "",
                type: "address"
            }
        ],
        stateMutability: "view",
        type: "function"
    },
    {
        inputs: [
            {
                internalType: "bytes32",
                name: "node",
                type: "bytes32"
            }
        ],
        name: "recordExists",
        outputs: [
            {
                internalType: "bool",
                name: "",
                type: "bool"
            }
        ],
        stateMutability: "view",
        type: "function"
    },
    {
        inputs: [
            {
                internalType: "bytes32",
                name: "node",
                type: "bytes32"
            }
        ],
        name: "resolver",
        outputs: [
            {
                internalType: "address",
                name: "",
                type: "address"
            }
        ],
        stateMutability: "view",
        type: "function"
    },
    {
        inputs: [
            {
                internalType: "bytes32",
                name: "node",
                type: "bytes32"
            }
        ],
        name: "ttl",
        outputs: [
            {
                internalType: "uint64",
                name: "",
                type: "uint64"
            }
        ],
        stateMutability: "view",
        type: "function"
    }
];

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eRc7q":[function(require,module,exports) {
/*
This file is part of web3.js.

web3.js is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

web3.js is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/ // https://github.com/ensdomains/ens-contracts/blob/master/contracts/resolvers/PublicResolver.sol
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "PublicResolverAbi", ()=>PublicResolverAbi);
const PublicResolverAbi = [
    {
        anonymous: false,
        inputs: [
            {
                indexed: true,
                internalType: "bytes32",
                name: "node",
                type: "bytes32"
            },
            {
                indexed: false,
                internalType: "address",
                name: "a",
                type: "address"
            }
        ],
        name: "AddrChanged",
        type: "event"
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: true,
                internalType: "bytes32",
                name: "node",
                type: "bytes32"
            },
            {
                indexed: false,
                internalType: "uint256",
                name: "coinType",
                type: "uint256"
            },
            {
                indexed: false,
                internalType: "bytes",
                name: "newAddress",
                type: "bytes"
            }
        ],
        name: "AddressChanged",
        type: "event"
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: true,
                internalType: "address",
                name: "owner",
                type: "address"
            },
            {
                indexed: true,
                internalType: "address",
                name: "operator",
                type: "address"
            },
            {
                indexed: false,
                internalType: "bool",
                name: "approved",
                type: "bool"
            }
        ],
        name: "ApprovalForAll",
        type: "event"
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: true,
                internalType: "bytes32",
                name: "node",
                type: "bytes32"
            },
            {
                indexed: false,
                internalType: "bytes",
                name: "hash",
                type: "bytes"
            }
        ],
        name: "ContenthashChanged",
        type: "event"
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: true,
                internalType: "bytes32",
                name: "node",
                type: "bytes32"
            },
            {
                indexed: false,
                internalType: "bytes",
                name: "name",
                type: "bytes"
            },
            {
                indexed: false,
                internalType: "uint16",
                name: "resource",
                type: "uint16"
            },
            {
                indexed: false,
                internalType: "bytes",
                name: "record",
                type: "bytes"
            }
        ],
        name: "DNSRecordChanged",
        type: "event"
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: true,
                internalType: "bytes32",
                name: "node",
                type: "bytes32"
            },
            {
                indexed: false,
                internalType: "bytes",
                name: "name",
                type: "bytes"
            },
            {
                indexed: false,
                internalType: "uint16",
                name: "resource",
                type: "uint16"
            }
        ],
        name: "DNSRecordDeleted",
        type: "event"
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: true,
                internalType: "bytes32",
                name: "node",
                type: "bytes32"
            }
        ],
        name: "DNSZoneCleared",
        type: "event"
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: true,
                internalType: "bytes32",
                name: "node",
                type: "bytes32"
            },
            {
                indexed: false,
                internalType: "bytes",
                name: "lastzonehash",
                type: "bytes"
            },
            {
                indexed: false,
                internalType: "bytes",
                name: "zonehash",
                type: "bytes"
            }
        ],
        name: "DNSZonehashChanged",
        type: "event"
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: true,
                internalType: "bytes32",
                name: "node",
                type: "bytes32"
            },
            {
                indexed: true,
                internalType: "bytes4",
                name: "interfaceID",
                type: "bytes4"
            },
            {
                indexed: false,
                internalType: "address",
                name: "implementer",
                type: "address"
            }
        ],
        name: "InterfaceChanged",
        type: "event"
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: true,
                internalType: "bytes32",
                name: "node",
                type: "bytes32"
            },
            {
                indexed: false,
                internalType: "string",
                name: "name",
                type: "string"
            }
        ],
        name: "NameChanged",
        type: "event"
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: true,
                internalType: "bytes32",
                name: "node",
                type: "bytes32"
            },
            {
                indexed: false,
                internalType: "bytes32",
                name: "x",
                type: "bytes32"
            },
            {
                indexed: false,
                internalType: "bytes32",
                name: "y",
                type: "bytes32"
            }
        ],
        name: "PubkeyChanged",
        type: "event"
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: true,
                internalType: "bytes32",
                name: "node",
                type: "bytes32"
            },
            {
                indexed: true,
                internalType: "string",
                name: "indexedKey",
                type: "string"
            },
            {
                indexed: false,
                internalType: "string",
                name: "key",
                type: "string"
            }
        ],
        name: "TextChanged",
        type: "event"
    },
    {
        inputs: [
            {
                internalType: "bytes32",
                name: "node",
                type: "bytes32"
            },
            {
                internalType: "uint256",
                name: "contentTypes",
                type: "uint256"
            }
        ],
        name: "ABI",
        outputs: [
            {
                internalType: "uint256",
                name: "",
                type: "uint256"
            },
            {
                internalType: "bytes",
                name: "",
                type: "bytes"
            }
        ],
        stateMutability: "view",
        type: "function"
    },
    {
        inputs: [
            {
                internalType: "bytes32",
                name: "node",
                type: "bytes32"
            }
        ],
        name: "addr",
        outputs: [
            {
                internalType: "address payable",
                name: "",
                type: "address"
            }
        ],
        stateMutability: "view",
        type: "function"
    },
    {
        inputs: [
            {
                internalType: "bytes32",
                name: "node",
                type: "bytes32"
            },
            {
                internalType: "uint256",
                name: "coinType",
                type: "uint256"
            }
        ],
        name: "addr",
        outputs: [
            {
                internalType: "bytes",
                name: "",
                type: "bytes"
            }
        ],
        stateMutability: "view",
        type: "function"
    },
    {
        inputs: [
            {
                internalType: "bytes32",
                name: "node",
                type: "bytes32"
            }
        ],
        name: "contenthash",
        outputs: [
            {
                internalType: "bytes",
                name: "",
                type: "bytes"
            }
        ],
        stateMutability: "view",
        type: "function"
    },
    {
        inputs: [
            {
                internalType: "bytes32",
                name: "node",
                type: "bytes32"
            },
            {
                internalType: "bytes32",
                name: "name",
                type: "bytes32"
            },
            {
                internalType: "uint16",
                name: "resource",
                type: "uint16"
            }
        ],
        name: "dnsRecord",
        outputs: [
            {
                internalType: "bytes",
                name: "",
                type: "bytes"
            }
        ],
        stateMutability: "view",
        type: "function"
    },
    {
        inputs: [
            {
                internalType: "bytes32",
                name: "node",
                type: "bytes32"
            },
            {
                internalType: "bytes32",
                name: "name",
                type: "bytes32"
            }
        ],
        name: "hasDNSRecords",
        outputs: [
            {
                internalType: "bool",
                name: "",
                type: "bool"
            }
        ],
        stateMutability: "view",
        type: "function"
    },
    {
        inputs: [
            {
                internalType: "bytes32",
                name: "node",
                type: "bytes32"
            },
            {
                internalType: "bytes4",
                name: "interfaceID",
                type: "bytes4"
            }
        ],
        name: "interfaceImplementer",
        outputs: [
            {
                internalType: "address",
                name: "",
                type: "address"
            }
        ],
        stateMutability: "view",
        type: "function"
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "account",
                type: "address"
            },
            {
                internalType: "address",
                name: "operator",
                type: "address"
            }
        ],
        name: "isApprovedForAll",
        outputs: [
            {
                internalType: "bool",
                name: "",
                type: "bool"
            }
        ],
        stateMutability: "view",
        type: "function"
    },
    {
        inputs: [
            {
                internalType: "bytes32",
                name: "node",
                type: "bytes32"
            }
        ],
        name: "name",
        outputs: [
            {
                internalType: "string",
                name: "",
                type: "string"
            }
        ],
        stateMutability: "view",
        type: "function"
    },
    {
        inputs: [
            {
                internalType: "bytes32",
                name: "node",
                type: "bytes32"
            }
        ],
        name: "pubkey",
        outputs: [
            {
                internalType: "bytes32",
                name: "x",
                type: "bytes32"
            },
            {
                internalType: "bytes32",
                name: "y",
                type: "bytes32"
            }
        ],
        stateMutability: "view",
        type: "function"
    },
    {
        inputs: [
            {
                internalType: "bytes4",
                name: "interfaceID",
                type: "bytes4"
            }
        ],
        name: "supportsInterface",
        outputs: [
            {
                internalType: "bool",
                name: "",
                type: "bool"
            }
        ],
        stateMutability: "view",
        type: "function"
    },
    {
        inputs: [
            {
                internalType: "bytes32",
                name: "node",
                type: "bytes32"
            },
            {
                internalType: "string",
                name: "key",
                type: "string"
            }
        ],
        name: "text",
        outputs: [
            {
                internalType: "string",
                name: "",
                type: "string"
            }
        ],
        stateMutability: "view",
        type: "function"
    },
    {
        inputs: [
            {
                internalType: "bytes32",
                name: "node",
                type: "bytes32"
            }
        ],
        name: "zonehash",
        outputs: [
            {
                internalType: "bytes",
                name: "",
                type: "bytes"
            }
        ],
        stateMutability: "view",
        type: "function"
    }
];

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gUh3S":[function(require,module,exports) {
/*
This file is part of web3.js.

web3.js is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

web3.js is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "normalize", ()=>normalize);
parcelHelpers.export(exports, "namehash", ()=>namehash);
var _web3Utils = require("web3-utils");
// eslint-disable-next-line camelcase
var _ensNormalize = require("@adraffy/ens-normalize");
const normalize = (name)=>(0, _ensNormalize.ens_normalize)(name);
const namehash = (inputName)=>{
    // Reject empty names:
    let node = "";
    for(let i = 0; i < 32; i += 1)node += "00";
    if (inputName) {
        const name = normalize(inputName);
        const labels = name.split(".");
        for(let i = labels.length - 1; i >= 0; i -= 1){
            const labelSha = (0, _web3Utils.sha3Raw)(labels[i]).slice(2);
            node = (0, _web3Utils.sha3Raw)(`0x${node}${labelSha}`).slice(2);
        }
    }
    return `0x${node}`;
};

},{"web3-utils":"8WsWI","@adraffy/ens-normalize":"6hCeh","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6hCeh":[function(require,module,exports) {
// created 2023-09-12T22:05:14.211Z
// compressed base64-encoded blob for include-ens data
// source: https://github.com/adraffy/ens-normalize.js/blob/main/src/make.js
// see: https://github.com/adraffy/ens-normalize.js#security
// SHA-256: 0565ed049b9cf1614bb9e11ba7d8ac6a6fb96c893253d890f7e2b2884b9ded32
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ens_beautify", ()=>ens_beautify);
parcelHelpers.export(exports, "ens_emoji", ()=>ens_emoji);
parcelHelpers.export(exports, "ens_normalize", ()=>ens_normalize);
parcelHelpers.export(exports, "ens_normalize_fragment", ()=>ens_normalize_fragment);
parcelHelpers.export(exports, "ens_split", ()=>ens_split);
parcelHelpers.export(exports, "ens_tokenize", ()=>ens_tokenize);
parcelHelpers.export(exports, "is_combining_mark", ()=>is_combining_mark);
parcelHelpers.export(exports, "nfc", ()=>nfc);
parcelHelpers.export(exports, "nfd", ()=>nfd);
parcelHelpers.export(exports, "safe_str_from_cps", ()=>safe_str_from_cps);
parcelHelpers.export(exports, "should_escape", ()=>should_escape);
var COMPRESSED$1 = "";
const FENCED = new Map([
    [
        8217,
        "apostrophe"
    ],
    [
        8260,
        "fraction slash"
    ],
    [
        12539,
        "middle dot"
    ]
]);
const NSM_MAX = 4;
function decode_arithmetic(bytes) {
    let pos = 0;
    function u16() {
        return bytes[pos++] << 8 | bytes[pos++];
    }
    // decode the frequency table
    let symbol_count = u16();
    let total = 1;
    let acc = [
        0,
        1
    ]; // first symbol has frequency 1
    for(let i = 1; i < symbol_count; i++)acc.push(total += u16());
    // skip the sized-payload that the last 3 symbols index into
    let skip = u16();
    let pos_payload = pos;
    pos += skip;
    let read_width = 0;
    let read_buffer = 0;
    function read_bit() {
        if (read_width == 0) {
            // this will read beyond end of buffer
            // but (undefined|0) => zero pad
            read_buffer = read_buffer << 8 | bytes[pos++];
            read_width = 8;
        }
        return read_buffer >> --read_width & 1;
    }
    const N = 31;
    const FULL = 2 ** N;
    const HALF = FULL >>> 1;
    const QRTR = HALF >> 1;
    const MASK = FULL - 1;
    // fill register
    let register = 0;
    for(let i = 0; i < N; i++)register = register << 1 | read_bit();
    let symbols = [];
    let low = 0;
    let range = FULL; // treat like a float
    while(true){
        let value = Math.floor(((register - low + 1) * total - 1) / range);
        let start = 0;
        let end = symbol_count;
        while(end - start > 1){
            let mid = start + end >>> 1;
            if (value < acc[mid]) end = mid;
            else start = mid;
        }
        if (start == 0) break; // first symbol is end mark
        symbols.push(start);
        let a = low + Math.floor(range * acc[start] / total);
        let b = low + Math.floor(range * acc[start + 1] / total) - 1;
        while(((a ^ b) & HALF) == 0){
            register = register << 1 & MASK | read_bit();
            a = a << 1 & MASK;
            b = b << 1 & MASK | 1;
        }
        while(a & ~b & QRTR){
            register = register & HALF | register << 1 & MASK >>> 1 | read_bit();
            a = a << 1 ^ HALF;
            b = (b ^ HALF) << 1 | HALF | 1;
        }
        low = a;
        range = 1 + b - a;
    }
    let offset = symbol_count - 4;
    return symbols.map((x)=>{
        switch(x - offset){
            case 3:
                return offset + 0x10100 + (bytes[pos_payload++] << 16 | bytes[pos_payload++] << 8 | bytes[pos_payload++]);
            case 2:
                return offset + 0x100 + (bytes[pos_payload++] << 8 | bytes[pos_payload++]);
            case 1:
                return offset + bytes[pos_payload++];
            default:
                return x - 1;
        }
    });
}
// returns an iterator which returns the next symbol
function read_payload(v) {
    let pos = 0;
    return ()=>v[pos++];
}
function read_compressed_payload(s) {
    return read_payload(decode_arithmetic(unsafe_atob(s)));
}
// unsafe in the sense:
// expected well-formed Base64 w/o padding 
// 20220922: added for https://github.com/adraffy/ens-normalize.js/issues/4
function unsafe_atob(s) {
    let lookup = [];
    [
        ..."ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"
    ].forEach((c, i)=>lookup[c.charCodeAt(0)] = i);
    let n = s.length;
    let ret = new Uint8Array(6 * n >> 3);
    for(let i = 0, pos = 0, width = 0, carry = 0; i < n; i++){
        carry = carry << 6 | lookup[s.charCodeAt(i)];
        width += 6;
        if (width >= 8) ret[pos++] = carry >> (width -= 8);
    }
    return ret;
}
// eg. [0,1,2,3...] => [0,-1,1,-2,...]
function signed(i) {
    return i & 1 ? ~i >> 1 : i >> 1;
}
function read_deltas(n, next) {
    let v = Array(n);
    for(let i = 0, x = 0; i < n; i++)v[i] = x += signed(next());
    return v;
}
// [123][5] => [0 3] [1 1] [0 0]
function read_sorted(next, prev = 0) {
    let ret = [];
    while(true){
        let x = next();
        let n = next();
        if (!n) break;
        prev += x;
        for(let i = 0; i < n; i++)ret.push(prev + i);
        prev += n + 1;
    }
    return ret;
}
function read_sorted_arrays(next) {
    return read_array_while(()=>{
        let v = read_sorted(next);
        if (v.length) return v;
    });
}
// returns map of x => ys
function read_mapped(next) {
    let ret = [];
    while(true){
        let w = next();
        if (w == 0) break;
        ret.push(read_linear_table(w, next));
    }
    while(true){
        let w = next() - 1;
        if (w < 0) break;
        ret.push(read_replacement_table(w, next));
    }
    return ret.flat();
}
// read until next is falsy
// return array of read values
function read_array_while(next) {
    let v = [];
    while(true){
        let x = next(v.length);
        if (!x) break;
        v.push(x);
    }
    return v;
}
// read w columns of length n
// return as n rows of length w
function read_transposed(n, w, next) {
    let m = Array(n).fill().map(()=>[]);
    for(let i = 0; i < w; i++)read_deltas(n, next).forEach((x, j)=>m[j].push(x));
    return m;
}
// returns [[x, ys], [x+dx, ys+dy], [x+2*dx, ys+2*dy], ...]
// where dx/dy = steps, n = run size, w = length of y
function read_linear_table(w, next) {
    let dx = 1 + next();
    let dy = next();
    let vN = read_array_while(next);
    let m = read_transposed(vN.length, 1 + w, next);
    return m.flatMap((v, i)=>{
        let [x, ...ys] = v;
        return Array(vN[i]).fill().map((_, j)=>{
            let j_dy = j * dy;
            return [
                x + j * dx,
                ys.map((y)=>y + j_dy)
            ];
        });
    });
}
// return [[x, ys...], ...]
// where w = length of y
function read_replacement_table(w, next) {
    let n = 1 + next();
    let m = read_transposed(n, 1 + w, next);
    return m.map((v)=>[
            v[0],
            v.slice(1)
        ]);
}
function read_trie(next) {
    let ret = [];
    let sorted = read_sorted(next);
    expand(decode([]), []);
    return ret; // not sorted
    function decode(Q) {
        let S = next(); // state: valid, save, check
        let B = read_array_while(()=>{
            let cps = read_sorted(next).map((i)=>sorted[i]);
            if (cps.length) return decode(cps);
        });
        return {
            S,
            B,
            Q
        };
    }
    function expand({ S, B }, cps, saved) {
        if (S & 4 && saved === cps[cps.length - 1]) return;
        if (S & 2) saved = cps[cps.length - 1];
        if (S & 1) ret.push(cps);
        for (let br of B)for (let cp of br.Q)expand(br, [
            ...cps,
            cp
        ], saved);
    }
}
function hex_cp(cp) {
    return cp.toString(16).toUpperCase().padStart(2, "0");
}
function quote_cp(cp) {
    return `{${hex_cp(cp)}}`; // raffy convention: like "\u{X}" w/o the "\u"
}
/*
export function explode_cp(s) {
	return [...s].map(c => c.codePointAt(0));
}
*/ function explode_cp(s) {
    let cps = [];
    for(let pos = 0, len = s.length; pos < len;){
        let cp = s.codePointAt(pos);
        pos += cp < 0x10000 ? 1 : 2;
        cps.push(cp);
    }
    return cps;
}
function str_from_cps(cps) {
    const chunk = 4096;
    let len = cps.length;
    if (len < chunk) return String.fromCodePoint(...cps);
    let buf = [];
    for(let i = 0; i < len;)buf.push(String.fromCodePoint(...cps.slice(i, i += chunk)));
    return buf.join("");
}
function compare_arrays(a, b) {
    let n = a.length;
    let c = n - b.length;
    for(let i = 0; c == 0 && i < n; i++)c = a[i] - b[i];
    return c;
}
// created 2023-09-12T22:05:14.211Z
// compressed base64-encoded blob for include-nf data
// source: https://github.com/adraffy/ens-normalize.js/blob/main/src/make.js
// see: https://github.com/adraffy/ens-normalize.js#security
// SHA-256: a974b6f8541fc29d919bc85118af0a44015851fab5343f8679cb31be2bdb209e
var COMPRESSED = "AEUDTAHBCFQATQDRADAAcgAgADQAFAAsABQAHwAOACQADQARAAoAFwAHABIACAAPAAUACwAFAAwABAAQAAMABwAEAAoABQAIAAIACgABAAQAFAALAAIACwABAAIAAQAHAAMAAwAEAAsADAAMAAwACgANAA0AAwAKAAkABAAdAAYAZwDSAdsDJgC0CkMB8xhZAqfoC190UGcThgBurwf7PT09Pb09AjgJum8OjDllxHYUKXAPxzq6tABAxgK8ysUvWAgMPT09PT09PSs6LT2HcgWXWwFLoSMEEEl5RFVMKvO0XQ8ExDdJMnIgsj26PTQyy8FfEQ8AY8IPAGcEbwRwBHEEcgRzBHQEdQR2BHcEeAR6BHsEfAR+BIAEgfndBQoBYgULAWIFDAFiBNcE2ATZBRAFEQUvBdALFAsVDPcNBw13DYcOMA4xDjMB4BllHI0B2grbAMDpHLkQ7QHVAPRNQQFnGRUEg0yEB2uaJF8AJpIBpob5AERSMAKNoAXqaQLUBMCzEiACnwRZEkkVsS7tANAsBG0RuAQLEPABv9HICTUBXigPZwRBApMDOwAamhtaABqEAY8KvKx3LQ4ArAB8UhwEBAVSagD8AEFZADkBIadVj2UMUgx5Il4ANQC9AxIB1BlbEPMAs30CGxlXAhwZKQIECBc6EbsCoxngzv7UzRQA8M0BawL6ZwkN7wABAD33OQRcsgLJCjMCjqUChtw/km+NAsXPAoP2BT84PwURAK0RAvptb6cApQS/OMMey5HJS84UdxpxTPkCogVFITaTOwERAK5pAvkNBOVyA7q3BKlOJSALAgUIBRcEdASpBXqzABXFSWZOawLCOqw//AolCZdvv3dSBkEQGyelEPcMMwG1ATsN7UvYBPEGOwTJH30ZGQ/NlZwIpS3dDO0m4y6hgFoj9SqDBe1L9DzdC01RaA9ZC2UJ4zpjgU4DIQENIosK3Q05CG0Q8wrJaw3lEUUHOQPVSZoApQcBCxEdNRW1JhBirAsJOXcG+xr2C48mrxMpevwF0xohBk0BKRr/AM8u54WwWjFcHE9fBgMLJSPHFKhQIA0lQLd4SBobBxUlqQKRQ3BKh1E2HpMh9jw9DWYuE1F8B/U8BRlPC4E8nkarRQ4R0j6NPUgiSUwsBDV/LC8niwnPD4UMuXxyAVkJIQmxDHETMREXN8UIOQcZLZckJxUIIUaVYJoE958D8xPRAwsFPwlBBxMDtRwtEy4VKQUNgSTXAvM21S6zAo9WgAEXBcsPJR/fEFBH4A7pCJsCZQODJesALRUhABcimwhDYwBfj9hTBS7LCMdqbCN0A2cU52ERcweRDlcHpxwzFb8c4XDIXguGCCijrwlbAXUJmQFfBOMICTVbjKAgQWdTi1gYmyBhQT9d/AIxDGUVn0S9h3gCiw9rEhsBNQFzBzkNAQJ3Ee0RaxCVCOuGBDW1M/g6JQRPIYMgEQonA09szgsnJvkM+GkBoxJiAww0PXfuZ6tgtiQX/QcZMsVBYCHxC5JPzQycGsEYQlQuGeQHvwPzGvMn6kFXBf8DowMTOk0z7gS9C2kIiwk/AEkOoxcH1xhqCnGM0AExiwG3mQNXkYMCb48GNwcLAGcLhwV55QAdAqcIowAFAM8DVwA5Aq0HnQAZAIVBAT0DJy8BIeUCjwOTCDHLAZUvAfMpBBvDDBUA9zduSgLDsQKAamaiBd1YAo4CSTUBTSUEBU5HUQOvceEA2wBLBhPfRwEVq0rLGuNDAd9vKwDHAPsABTUHBUEBzQHzbQC3AV8LMQmis7UBTekpAIMAFWsB1wKJAN0ANQB/8QFTAE0FWfkF0wJPSQERMRgrV2EBuwMfATMBDQB5BsuNpckHHwRtB9MCEBsV4QLvLge1AQMi3xPNQsUCvd5VoWACZIECYkJbTa9bNyACofcCaJgCZgkCn4Q4GwsCZjsCZiYEbgR/A38TA36SOQY5dxc5gjojIwJsHQIyNjgKAm3HAm2u74ozZ0UrAWcA3gDhAEoFB5gMjQD+C8IADbUCdy8CdqI/AnlLQwJ4uh1c20WuRtcCfD8CesgCfQkCfPAFWQUgSABIfWMkAoFtAoAAAoAFAn+uSVhKWxUXSswC0QEC0MxLJwOITwOH5kTFkTIC8qFdAwMDrkvOTC0lA89NTE2vAos/AorYwRsHHUNnBbcCjjcCjlxAl4ECjtkCjlx4UbRTNQpS1FSFApP7ApMMAOkAHFUeVa9V0AYsGymVhjLheGZFOzkCl58C77JYIagAWSUClo8ClnycAKlZrFoJgU0AOwKWtQKWTlxEXNECmcsCmWRcyl0HGQKcmznCOp0CnBYCn5sCnriKAB0PMSoPAp3xAp6SALU9YTRh7wKe0wKgbgGpAp6fHwKeTqVjyGQnJSsCJ68CJn4CoPsCoEwCot0CocQCpi8Cpc4Cp/8AfQKn8mh8aLEAA0lqHGrRAqzjAqyuAq1nAq0CAlcdAlXcArHh1wMfTmyXArK9DQKy6Bds4G1jbUhfAyXNArZcOz9ukAMpRQK4XgK5RxUCuSp3cDZw4QK9GQK72nCWAzIRAr6IcgIDM3ECvhpzInNPAsPLAsMEc4J0SzVFdOADPKcDPJoDPb8CxXwCxkcCxhCJAshpUQLIRALJTwLJLgJknQLd0nh5YXiueSVL0AMYo2cCAmH0GfOVJHsLXpJeuxECz2sCz2wvS1PS8xOfAMatAs9zASnqA04SfksFAtwnAtuKAtJPA1JcA1NfAQEDVYyAiT8AyxbtYEWCHILTgs6DjQLaxwLZ3oQQhEmnPAOGpQAvA2QOhnFZ+QBVAt9lAt64c3cC4i/tFAHzMCcB9JsB8tKHAuvzAulweQLq+QLq5AD5RwG5Au6JAuuclqqXAwLuPwOF4Jh5cOBxoQLzAwBpA44WmZMC9xMDkW4DkocC95gC+dkC+GaaHJqruzebHgOdgwL++gEbADmfHJ+zAwWNA6ZqA6bZANHFAwZqoYiiBQkDDEkCwAA/AwDhQRdTARHzA2sHl2cFAJMtK7evvdsBiZkUfxEEOQH7KQUhDp0JnwCS/SlXxQL3AZ0AtwW5AG8LbUEuFCaNLgFDAYD8AbUmAHUDDgRtACwCFgyhAAAKAj0CagPdA34EkQEgRQUhfAoABQBEABMANhICdwEABdUDa+8KxQIA9wqfJ7+xt+UBkSFBQgHpFH8RNMCJAAQAGwBaAkUChIsABjpTOpSNbQC4Oo860ACNOME63AClAOgAywE6gTo7Ofw5+Tt2iTpbO56JOm85GAFWATMBbAUvNV01njWtNWY1dTW2NcU1gjWRNdI14TWeNa017jX9NbI1wTYCNhE1xjXVNhY2JzXeNe02LjY9Ni41LSE2OjY9Njw2yTcIBJA8VzY4Nt03IDcPNsogN4k3MAoEsDxnNiQ3GTdsOo03IULUQwdC4EMLHA8PCZsobShRVQYA6X8A6bABFCnXAukBowC9BbcAbwNzBL8MDAMMAQgDAAkKCwsLCQoGBAVVBI/DvwDz9b29kaUCb0QtsRTNLt4eGBcSHAMZFhYZEhYEARAEBUEcQRxBHEEcQRxBHEEaQRxBHEFCSTxBPElISUhBNkM2QTYbNklISVmBVIgBFLWZAu0BhQCjBcEAbykBvwGJAaQcEZ0ePCklMAAhMvAIMAL54gC7Bm8EescjzQMpARQpKgDUABavAj626xQAJP0A3etzuf4NNRA7efy2Z9NQrCnC0OSyANz5BBIbJ5IFDR6miIavYS6tprjjmuKebxm5C74Q225X1pkaYYPb6f1DK4k3xMEBb9S2WMjEibTNWhsRJIA+vwNVEiXTE5iXs/wezV66oFLfp9NZGYW+Gk19J2+bCT6Ye2w6LDYdgzKMUabk595eLBCXANz9HUpWbATq9vqXVx9XDg+Pc9Xp4+bsS005SVM/BJBM4687WUuf+Uj9dEi8aDNaPxtpbDxcG1THTImUMZq4UCaaNYpsVqraNyKLJXDYsFZ/5jl7bLRtO88t7P3xZaAxhb5OdPMXqsSkp1WCieG8jXm1U99+blvLlXzPCS+M93VnJCiK+09LfaSaBAVBomyDgJua8dfUzR7ga34IvR2Nvj+A9heJ6lsl1KG4NkI1032Cnff1m1wof2B9oHJK4bi6JkEdSqeNeiuo6QoZZincoc73/TH9SXF8sCE7XyuYyW8WSgbGFCjPV0ihLKhdPs08Tx82fYAkLLc4I2wdl4apY7GU5lHRFzRWJep7Ww3wbeA3qmd59/86P4xuNaqDpygXt6M85glSBHOCGgJDnt+pN9bK7HApMguX6+06RZNjzVmcZJ+wcUrJ9//bpRNxNuKpNl9uFds+S9tdx7LaM5ZkIrPj6nIU9mnbFtVbs9s/uLgl8MVczAwet+iOEzzBlYW7RCMgE6gyNLeq6+1tIx4dpgZnd0DksJS5f+JNDpwwcPNXaaVspq1fbQajOrJgK0ofKtJ1Ne90L6VO4MOl5S886p7u6xo7OLjG8TGL+HU1JXGJgppg4nNbNJ5nlzSpuPYy21JUEcUA94PoFiZfjZue+QnyQ80ekOuZVkxx4g+cvhJfHgNl4hy1/a6+RKcKlar/J29y//EztlbVPHVUeQ1zX86eQVAjR/M3dA9w4W8LfaXp4EgM85wOWasli837PzVMOnsLzR+k3o75/lRPAJSE1xAKQzEi5v10ke+VBvRt1cwQRMd+U5mLCTGVd6XiZtgBG5cDi0w22GKcVNvHiu5LQbZEDVtz0onn7k5+heuKXVsZtSzilkLRAUmjMXEMB3J9YC50XBxPiz53SC+EhnPl9WsKCv92SM/OFFIMJZYfl0WW8tIO3UxYcwdMAj7FSmgrsZ2aAZO03BOhP1bNNZItyXYQFTpC3SG1VuPDqH9GkiCDmE+JwxyIVSO5siDErAOpEXFgjy6PQtOVDj+s6e1r8heWVvmZnTciuf4EiNZzCAd7SOMhXERIOlsHIMG399i9aLTy3m2hRLZjJVDNLS53iGIK11dPqQt0zBDyg6qc7YqkDm2M5Ve6dCWCaCbTXX2rToaIgz6+zh4lYUi/+6nqcFMAkQJKHYLK0wYk5N9szV6xihDbDDFr45lN1K4aCXBq/FitPSud9gLt5ZVn+ZqGX7cwm2z5EGMgfFpIFyhGGuDPmso6TItTMwny+7uPnLCf4W6goFQFV0oQSsc9VfMmVLcLr6ZetDZbaSFTLqnSO/bIPjA3/zAUoqgGFAEQS4IhuMzEp2I3jJzbzkk/IEmyax+rhZTwd6f+CGtwPixu8IvzACquPWPREu9ZvGkUzpRwvRRuaNN6cr0W1wWits9ICdYJ7ltbgMiSL3sTPeufgNcVqMVWFkCPDH4jG2jA0XcVgQj62Cb29v9f/z/+2KbYvIv/zzjpQAPkliaVDzNrW57TZ/ZOyZD0nlfMmAIBIAGAI0D3k/mdN4xr9v85ZbZbbqfH2jGd5hUqNZWwl5SPfoGmfElmazUIeNL1j/mkF7VNAzTq4jNt8JoQ11NQOcmhprXoxSxfRGJ9LDEOAQ+dmxAQH90iti9e2u/MoeuaGcDTHoC+xsmEeWmxEKefQuIzHbpw5Tc5cEocboAD09oipWQhtTO1wivf/O+DRe2rpl/E9wlrzBorjJsOeG1B/XPW4EaJEFdNlECEZga5ZoGRHXgYouGRuVkm8tDESiEyFNo+3s5M5puSdTyUL2llnINVHEt91XUNW4ewdMgJ4boJfEyt/iY5WXqbA+A2Fkt5Z0lutiWhe9nZIyIUjyXDC3UsaG1t+eNx6z4W/OYoTB7A6x+dNSTOi9AInctbESqm5gvOLww7OWXPrmHwVZasrl4eD113pm+JtT7JVOvnCXqdzzdTRHgJ0PiGTFYW5Gvt9R9LD6Lzfs0v/TZZHSmyVNq7viIHE6DBK7Qp07Iz55EM8SYtQvZf/obBniTWi5C2/ovHfw4VndkE5XYdjOhCMRjDeOEfXeN/CwfGduiUIfsoFeUxXeQXba7c7972XNv8w+dTjjUM0QeNAReW+J014dKAD/McQYXT7c0GQPIkn3Ll6R7gGjuiQoZD0TEeEqQpKoZ15g/0OPQI17QiSv9AUROa/V/TQN3dvLArec3RrsYlvBm1b8LWzltdugsC50lNKYLEp2a+ZZYqPejULRlOJh5zj/LVMyTDvwKhMxxwuDkxJ1QpoNI0OTWLom4Z71SNzI9TV1iXJrIu9Wcnd+MCaAw8o1jSXd94YU/1gnkrC9BUEOtQvEIQ7g0i6h+KL2JKk8Ydl7HruvgWMSAmNe+LshGhV4qnWHhO9/RIPQzY1tHRj2VqOyNsDpK0cww+56AdDC4gsWwY0XxoucIWIqs/GcwnWqlaT0KPr8mbK5U94/301i1WLt4YINTVvCFBrFZbIbY8eycOdeJ2teD5IfPLCRg7jjcFTwlMFNl9zdh/o3E/hHPwj7BWg0MU09pPrBLbrCgm54A6H+I6v27+jL5gkjWg/iYdks9jbfVP5y/n0dlgWEMlKasl7JvFZd56LfybW1eeaVO0gxTfXZwD8G4SI116yx7UKVRgui6Ya1YpixqXeNLc8IxtAwCU5IhwQgn+NqHnRaDv61CxKhOq4pOX7M6pkA+Pmpd4j1vn6ACUALoLLc4vpXci8VidLxzm7qFBe7s+quuJs6ETYmnpgS3LwSZxPIltgBDXz8M1k/W2ySNv2f9/NPhxLGK2D21dkHeSGmenRT3Yqcdl0m/h3OYr8V+lXNYGf8aCCpd4bWjE4QIPj7vUKN4Nrfs7ML6Y2OyS830JCnofg/k7lpFpt4SqZc5HGg1HCOrHvOdC8bP6FGDbE/VV0mX4IakzbdS/op+Kt3G24/8QbBV7y86sGSQ/vZzU8FXs7u6jIvwchsEP2BpIhW3G8uWNwa3HmjfH/ZjhhCWvluAcF+nMf14ClKg5hGgtPLJ98ueNAkc5Hs2WZlk2QHvfreCK1CCGO6nMZVSb99VM/ajr8WHTte9JSmkXq/i/U943HEbdzW6Re/S88dKgg8pGOLlAeNiqrcLkUR3/aClFpMXcOUP3rmETcWSfMXZE3TUOi8i+fqRnTYLflVx/Vb/6GJ7eIRZUA6k3RYR3iFSK9c4iDdNwJuZL2FKz/IK5VimcNWEqdXjSoxSgmF0UPlDoUlNrPcM7ftmA8Y9gKiqKEHuWN+AZRIwtVSxye2Kf8rM3lhJ5XcBXU9n4v0Oy1RU2M+4qM8AQPVwse8ErNSob5oFPWxuqZnVzo1qB/IBxkM3EVUKFUUlO3e51259GgNcJbCmlvrdjtoTW7rChm1wyCKzpCTwozUUEOIcWLneRLgMXh+SjGSFkAllzbGS5HK7LlfCMRNRDSvbQPjcXaenNYxCvu2Qyznz6StuxVj66SgI0T8B6/sfHAJYZaZ78thjOSIFumNWLQbeZixDCCC+v0YBtkxiBB3jefHqZ/dFHU+crbj6OvS1x/JDD7vlm7zOVPwpUC01nhxZuY/63E7g";
// https://unicode.org/reports/tr15/
// for reference implementation
// see: /derive/nf.js
// algorithmic hangul
// https://www.unicode.org/versions/Unicode15.0.0/ch03.pdf (page 144)
const S0 = 0xAC00;
const L0 = 0x1100;
const V0 = 0x1161;
const T0 = 0x11A7;
const L_COUNT = 19;
const V_COUNT = 21;
const T_COUNT = 28;
const N_COUNT = V_COUNT * T_COUNT;
const S_COUNT = L_COUNT * N_COUNT;
const S1 = S0 + S_COUNT;
const L1 = L0 + L_COUNT;
const V1 = V0 + V_COUNT;
const T1 = T0 + T_COUNT;
function unpack_cc(packed) {
    return packed >> 24 & 0xFF;
}
function unpack_cp(packed) {
    return packed & 0xFFFFFF;
}
let SHIFTED_RANK, EXCLUSIONS, DECOMP, RECOMP;
function init$1() {
    //console.time('nf');
    let r = read_compressed_payload(COMPRESSED);
    SHIFTED_RANK = new Map(read_sorted_arrays(r).flatMap((v, i)=>v.map((x)=>[
                x,
                i + 1 << 24
            ]))); // pre-shifted
    EXCLUSIONS = new Set(read_sorted(r));
    DECOMP = new Map();
    RECOMP = new Map();
    for (let [cp, cps] of read_mapped(r)){
        if (!EXCLUSIONS.has(cp) && cps.length == 2) {
            let [a, b] = cps;
            let bucket = RECOMP.get(a);
            if (!bucket) {
                bucket = new Map();
                RECOMP.set(a, bucket);
            }
            bucket.set(b, cp);
        }
        DECOMP.set(cp, cps.reverse()); // stored reversed
    }
//console.timeEnd('nf');
// 20230905: 11ms
}
function is_hangul(cp) {
    return cp >= S0 && cp < S1;
}
function compose_pair(a, b) {
    if (a >= L0 && a < L1 && b >= V0 && b < V1) return S0 + (a - L0) * N_COUNT + (b - V0) * T_COUNT;
    else if (is_hangul(a) && b > T0 && b < T1 && (a - S0) % T_COUNT == 0) return a + (b - T0);
    else {
        let recomp = RECOMP.get(a);
        if (recomp) {
            recomp = recomp.get(b);
            if (recomp) return recomp;
        }
        return -1;
    }
}
function decomposed(cps) {
    if (!SHIFTED_RANK) init$1();
    let ret = [];
    let buf = [];
    let check_order = false;
    function add(cp) {
        let cc = SHIFTED_RANK.get(cp);
        if (cc) {
            check_order = true;
            cp |= cc;
        }
        ret.push(cp);
    }
    for (let cp of cps)while(true){
        if (cp < 0x80) ret.push(cp);
        else if (is_hangul(cp)) {
            let s_index = cp - S0;
            let l_index = s_index / N_COUNT | 0;
            let v_index = s_index % N_COUNT / T_COUNT | 0;
            let t_index = s_index % T_COUNT;
            add(L0 + l_index);
            add(V0 + v_index);
            if (t_index > 0) add(T0 + t_index);
        } else {
            let mapped = DECOMP.get(cp);
            if (mapped) buf.push(...mapped);
            else add(cp);
        }
        if (!buf.length) break;
        cp = buf.pop();
    }
    if (check_order && ret.length > 1) {
        let prev_cc = unpack_cc(ret[0]);
        for(let i = 1; i < ret.length; i++){
            let cc = unpack_cc(ret[i]);
            if (cc == 0 || prev_cc <= cc) {
                prev_cc = cc;
                continue;
            }
            let j = i - 1;
            while(true){
                let tmp = ret[j + 1];
                ret[j + 1] = ret[j];
                ret[j] = tmp;
                if (!j) break;
                prev_cc = unpack_cc(ret[--j]);
                if (prev_cc <= cc) break;
            }
            prev_cc = unpack_cc(ret[i]);
        }
    }
    return ret;
}
function composed_from_decomposed(v) {
    let ret = [];
    let stack = [];
    let prev_cp = -1;
    let prev_cc = 0;
    for (let packed of v){
        let cc = unpack_cc(packed);
        let cp = unpack_cp(packed);
        if (prev_cp == -1) {
            if (cc == 0) prev_cp = cp;
            else ret.push(cp);
        } else if (prev_cc > 0 && prev_cc >= cc) {
            if (cc == 0) {
                ret.push(prev_cp, ...stack);
                stack.length = 0;
                prev_cp = cp;
            } else stack.push(cp);
            prev_cc = cc;
        } else {
            let composed = compose_pair(prev_cp, cp);
            if (composed >= 0) prev_cp = composed;
            else if (prev_cc == 0 && cc == 0) {
                ret.push(prev_cp);
                prev_cp = cp;
            } else {
                stack.push(cp);
                prev_cc = cc;
            }
        }
    }
    if (prev_cp >= 0) ret.push(prev_cp, ...stack);
    return ret;
}
// note: cps can be iterable
function nfd(cps) {
    return decomposed(cps).map(unpack_cp);
}
function nfc(cps) {
    return composed_from_decomposed(decomposed(cps));
}
const HYPHEN = 0x2D;
const STOP = 0x2E;
const STOP_CH = ".";
const FE0F = 0xFE0F;
const UNIQUE_PH = 1;
// 20230913: replace [...v] with Array_from(v) to avoid large spreads
const Array_from = (x)=>Array.from(x); // Array.from.bind(Array);
function group_has_cp(g, cp) {
    // 20230913: keep primary and secondary distinct instead of creating valid union
    return g.P.has(cp) || g.Q.has(cp);
}
class Emoji extends Array {
    get is_emoji() {
        return true;
    }
}
let MAPPED, IGNORED, CM, NSM, ESCAPE, NFC_CHECK, GROUPS, WHOLE_VALID, WHOLE_MAP, VALID, EMOJI_LIST, EMOJI_ROOT;
function init() {
    if (MAPPED) return;
    let r = read_compressed_payload(COMPRESSED$1);
    const read_sorted_array = ()=>read_sorted(r);
    const read_sorted_set = ()=>new Set(read_sorted_array());
    MAPPED = new Map(read_mapped(r));
    IGNORED = read_sorted_set(); // ignored characters are not valid, so just read raw codepoints
    /*
	// direct include from payload is smaller than the decompression code
	const FENCED = new Map(read_array_while(() => {
		let cp = r();
		if (cp) return [cp, read_str(r())];
	}));
	*/ // 20230217: we still need all CM for proper error formatting
    // but norm only needs NSM subset that are potentially-valid
    CM = read_sorted_array();
    NSM = new Set(read_sorted_array().map((i)=>CM[i]));
    CM = new Set(CM);
    ESCAPE = read_sorted_set(); // characters that should not be printed
    NFC_CHECK = read_sorted_set(); // only needed to illustrate ens_tokenize() transformations
    let chunks = read_sorted_arrays(r);
    let unrestricted = r();
    const read_chunked = ()=>new Set(read_sorted_array().flatMap((i)=>chunks[i]).concat(read_sorted_array()));
    GROUPS = read_array_while((i)=>{
        // minifier property mangling seems unsafe
        // so these are manually renamed to single chars
        let N = read_array_while(r).map((x)=>x + 0x60);
        if (N.length) {
            let R = i >= unrestricted; // first arent restricted
            N[0] -= 32; // capitalize
            N = str_from_cps(N);
            if (R) N = `Restricted[${N}]`;
            let P = read_chunked(); // primary
            let Q = read_chunked(); // secondary
            let M = !r(); // not-whitelisted, check for NSM
            // *** this code currently isn't needed ***
            /*
			let V = [...P, ...Q].sort((a, b) => a-b); // derive: sorted valid
			let M = r()-1; // number of combining mark
			if (M < 0) { // whitelisted
				M = new Map(read_array_while(() => {
					let i = r();
					if (i) return [V[i-1], read_array_while(() => {
						let v = read_array_while(r);
						if (v.length) return v.map(x => x-1);
					})];
				}));
			}*/ return {
                N,
                P,
                Q,
                M,
                R
            };
        }
    });
    // decode compressed wholes
    WHOLE_VALID = read_sorted_set();
    WHOLE_MAP = new Map();
    let wholes = read_sorted_array().concat(Array_from(WHOLE_VALID)).sort((a, b)=>a - b); // must be sorted
    wholes.forEach((cp, i)=>{
        let d = r();
        let w = wholes[i] = d ? wholes[i - d] : {
            V: [],
            M: new Map()
        };
        w.V.push(cp); // add to member set
        if (!WHOLE_VALID.has(cp)) WHOLE_MAP.set(cp, w); // register with whole map
    });
    // compute confusable-extent complements
    for (let { V, M } of new Set(WHOLE_MAP.values())){
        // connect all groups that have each whole character
        let recs = [];
        for (let cp of V){
            let gs = GROUPS.filter((g)=>group_has_cp(g, cp));
            let rec = recs.find(({ G })=>gs.some((g)=>G.has(g)));
            if (!rec) {
                rec = {
                    G: new Set(),
                    V: []
                };
                recs.push(rec);
            }
            rec.V.push(cp);
            gs.forEach((g)=>rec.G.add(g));
        }
        // per character cache groups which are not a member of the extent
        let union = recs.flatMap((x)=>Array_from(x.G));
        for (let { G, V } of recs){
            let complement = new Set(union.filter((g)=>!G.has(g)));
            for (let cp of V)M.set(cp, complement);
        }
    }
    // compute valid set
    let union = new Set(); // exists in 1+ groups
    let multi = new Set(); // exists in 2+ groups
    const add_to_union = (cp)=>union.has(cp) ? multi.add(cp) : union.add(cp);
    for (let g of GROUPS){
        for (let cp of g.P)add_to_union(cp);
        for (let cp of g.Q)add_to_union(cp);
    }
    // dual purpose WHOLE_MAP: return placeholder if unique non-confusable
    for (let cp of union)if (!WHOLE_MAP.has(cp) && !multi.has(cp)) WHOLE_MAP.set(cp, UNIQUE_PH);
    VALID = new Set(Array_from(union).concat(Array_from(nfd(union)))); // possibly valid
    // decode emoji
    // 20230719: emoji are now fully-expanded to avoid quirk logic 
    EMOJI_LIST = read_trie(r).map((v)=>Emoji.from(v)).sort(compare_arrays);
    EMOJI_ROOT = new Map(); // this has approx 7K nodes (2+ per emoji)
    for (let cps of EMOJI_LIST){
        // 20230719: change to *slightly* stricter algorithm which disallows 
        // insertion of misplaced FE0F in emoji sequences (matching ENSIP-15)
        // example: beautified [A B] (eg. flag emoji) 
        //  before: allow: [A FE0F B], error: [A FE0F FE0F B] 
        //   after: error: both
        // note: this code now matches ENSNormalize.{cs,java} logic
        let prev = [
            EMOJI_ROOT
        ];
        for (let cp of cps){
            let next = prev.map((node)=>{
                let child = node.get(cp);
                if (!child) {
                    // should this be object? 
                    // (most have 1-2 items, few have many)
                    // 20230719: no, v8 default map is 4?
                    child = new Map();
                    node.set(cp, child);
                }
                return child;
            });
            if (cp === FE0F) prev.push(...next); // less than 20 elements
            else prev = next;
        }
        for (let x of prev)x.V = cps;
    }
}
// if escaped: {HEX}
//       else: "x" {HEX}
function quoted_cp(cp) {
    return (should_escape(cp) ? "" : `${bidi_qq(safe_str_from_cps([
        cp
    ]))} `) + quote_cp(cp);
}
// 20230211: some messages can be mixed-directional and result in spillover
// use 200E after a quoted string to force the remainder of a string from 
// acquring the direction of the quote
// https://www.w3.org/International/questions/qa-bidi-unicode-controls#exceptions
function bidi_qq(s) {
    return `"${s}"\u200E`; // strong LTR
}
function check_label_extension(cps) {
    if (cps.length >= 4 && cps[2] == HYPHEN && cps[3] == HYPHEN) throw new Error(`invalid label extension: "${str_from_cps(cps.slice(0, 4))}"`);
}
function check_leading_underscore(cps) {
    const UNDERSCORE = 0x5F;
    for(let i = cps.lastIndexOf(UNDERSCORE); i > 0;){
        if (cps[--i] !== UNDERSCORE) throw new Error("underscore allowed only at start");
    }
}
// check that a fenced cp is not leading, trailing, or touching another fenced cp
function check_fenced(cps) {
    let cp = cps[0];
    let prev = FENCED.get(cp);
    if (prev) throw error_placement(`leading ${prev}`);
    let n = cps.length;
    let last = -1; // prevents trailing from throwing
    for(let i = 1; i < n; i++){
        cp = cps[i];
        let match = FENCED.get(cp);
        if (match) {
            // since cps[0] isn't fenced, cps[1] cannot throw
            if (last == i) throw error_placement(`${prev} + ${match}`);
            last = i + 1;
            prev = match;
        }
    }
    if (last == n) throw error_placement(`trailing ${prev}`);
}
// create a safe to print string 
// invisibles are escaped
// leading cm uses placeholder
// quoter(cp) => string, eg. 3000 => "{3000}"
// note: in html, you'd call this function then replace [<>&] with entities
function safe_str_from_cps(cps, quoter = quote_cp) {
    //if (Number.isInteger(cps)) cps = [cps];
    //if (!Array.isArray(cps)) throw new TypeError(`expected codepoints`);
    let buf = [];
    if (is_combining_mark(cps[0])) buf.push("\u25CC");
    let prev = 0;
    let n = cps.length;
    for(let i = 0; i < n; i++){
        let cp = cps[i];
        if (should_escape(cp)) {
            buf.push(str_from_cps(cps.slice(prev, i)));
            buf.push(quoter(cp));
            prev = i + 1;
        }
    }
    buf.push(str_from_cps(cps.slice(prev, n)));
    return buf.join("");
}
// note: set(s) cannot be exposed because they can be modified
// note: Object.freeze() doesn't work
function is_combining_mark(cp) {
    init();
    return CM.has(cp);
}
function should_escape(cp) {
    init();
    return ESCAPE.has(cp);
}
// return all supported emoji as fully-qualified emoji 
// ordered by length then lexicographic 
function ens_emoji() {
    init();
    return EMOJI_LIST.map((x)=>x.slice()); // emoji are exposed so copy
}
function ens_normalize_fragment(frag, decompose) {
    init();
    let nf = decompose ? nfd : nfc;
    return frag.split(STOP_CH).map((label)=>str_from_cps(tokens_from_str(explode_cp(label), nf, filter_fe0f).flat())).join(STOP_CH);
}
function ens_normalize(name) {
    return flatten(split(name, nfc, filter_fe0f));
}
function ens_beautify(name) {
    let labels = split(name, nfc, (x)=>x); // emoji not exposed
    for (let { type, output, error } of labels){
        if (error) break; // flatten will throw
        // replace leading/trailing hyphen
        // 20230121: consider beautifing all or leading/trailing hyphen to unicode variant
        // not exactly the same in every font, but very similar: "-" vs "‐"
        /*
		const UNICODE_HYPHEN = 0x2010;
		// maybe this should replace all for visual consistancy?
		// `node tools/reg-count.js regex ^-\{2,\}` => 592
		//for (let i = 0; i < output.length; i++) if (output[i] == 0x2D) output[i] = 0x2010;
		if (output[0] == HYPHEN) output[0] = UNICODE_HYPHEN;
		let end = output.length-1;
		if (output[end] == HYPHEN) output[end] = UNICODE_HYPHEN;
		*/ // 20230123: WHATWG URL uses "CheckHyphens" false
        // https://url.spec.whatwg.org/#idna
        // update ethereum symbol
        // ξ => Ξ if not greek
        if (type !== "Greek") {
            let prev = 0;
            while(true){
                let next = output.indexOf(0x3BE, prev);
                if (next < 0) break;
                output[next] = 0x39E;
                prev = next + 1;
            }
        }
    // 20221213: fixes bidi subdomain issue, but breaks invariant (200E is disallowed)
    // could be fixed with special case for: 2D (.) + 200E (LTR)
    // https://discuss.ens.domains/t/bidi-label-ordering-spoof/15824
    //output.splice(0, 0, 0x200E);
    }
    return flatten(labels);
}
function ens_split(name, preserve_emoji) {
    return split(name, nfc, preserve_emoji ? (x)=>x.slice() : filter_fe0f); // emoji are exposed so copy
}
function split(name, nf, ef) {
    if (!name) return []; // 20230719: empty name allowance
    init();
    let offset = 0;
    // https://unicode.org/reports/tr46/#Validity_Criteria
    // 4.) "The label must not contain a U+002E ( . ) FULL STOP."
    return name.split(STOP_CH).map((label)=>{
        let input = explode_cp(label);
        let info = {
            input,
            offset
        };
        offset += input.length + 1; // + stop
        try {
            // 1.) "The label must be in Unicode Normalization Form NFC"
            let tokens = info.tokens = tokens_from_str(input, nf, ef);
            let token_count = tokens.length;
            let type;
            if (!token_count) //norm = [];
            //type = 'None'; // use this instead of next match, "ASCII"
            // 20230120: change to strict
            // https://discuss.ens.domains/t/ens-name-normalization-2nd/14564/59
            throw new Error(`empty label`);
            let norm = info.output = tokens.flat();
            check_leading_underscore(norm);
            let emoji = info.emoji = token_count > 1 || tokens[0].is_emoji; // same as: tokens.some(x => x.is_emoji);
            if (!emoji && norm.every((cp)=>cp < 0x80)) {
                // 20230123: matches matches WHATWG, see note 3.3
                check_label_extension(norm); // only needed for ascii
                // cant have fenced
                // cant have cm
                // cant have wholes
                // see derive: "Fastpath ASCII"
                type = "ASCII";
            } else {
                let chars = tokens.flatMap((x)=>x.is_emoji ? [] : x); // all of the nfc tokens concat together
                if (!chars.length) type = "Emoji";
                else {
                    // 5.) "The label must not begin with a combining mark, that is: General_Category=Mark."
                    if (CM.has(norm[0])) throw error_placement("leading combining mark");
                    for(let i = 1; i < token_count; i++){
                        let cps = tokens[i];
                        if (!cps.is_emoji && CM.has(cps[0])) // bidi_qq() not needed since emoji is LTR and cps is a CM
                        throw error_placement(`emoji + combining mark: "${str_from_cps(tokens[i - 1])} + ${safe_str_from_cps([
                            cps[0]
                        ])}"`);
                    }
                    check_fenced(norm);
                    let unique = Array_from(new Set(chars));
                    let [g] = determine_group(unique); // take the first match
                    // see derive: "Matching Groups have Same CM Style"
                    // alternative: could form a hybrid type: Latin/Japanese/...	
                    check_group(g, chars); // need text in order
                    check_whole(g, unique); // only need unique text (order would be required for multiple-char confusables)
                    type = g.N;
                // 20230121: consider exposing restricted flag
                // it's simpler to just check for 'Restricted'
                // or even better: type.endsWith(']')
                //if (g.R) info.restricted = true;
                }
            }
            info.type = type;
        } catch (err) {
            info.error = err; // use full error object
        }
        return info;
    });
}
function check_whole(group, unique) {
    let maker;
    let shared = [];
    for (let cp of unique){
        let whole = WHOLE_MAP.get(cp);
        if (whole === UNIQUE_PH) return; // unique, non-confusable
        if (whole) {
            let set = whole.M.get(cp); // groups which have a character that look-like this character
            maker = maker ? maker.filter((g)=>set.has(g)) : Array_from(set);
            if (!maker.length) return; // confusable intersection is empty
        } else shared.push(cp);
    }
    if (maker) // we have 1+ confusable
    // check if any of the remaining groups
    // contain the shared characters too
    for (let g of maker){
        if (shared.every((cp)=>group_has_cp(g, cp))) throw new Error(`whole-script confusable: ${group.N}/${g.N}`);
    }
}
// assumption: unique.size > 0
// returns list of matching groups
function determine_group(unique) {
    let groups = GROUPS;
    for (let cp of unique){
        // note: we need to dodge CM that are whitelisted
        // but that code isn't currently necessary
        let gs = groups.filter((g)=>group_has_cp(g, cp));
        if (!gs.length) {
            if (!GROUPS.some((g)=>group_has_cp(g, cp))) // the character was composed of valid parts
            // but it's NFC form is invalid
            // 20230716: change to more exact statement, see: ENSNormalize.{cs,java}
            // note: this doesn't have to be a composition
            // 20230720: change to full check
            throw error_disallowed(cp); // this should be rare
            else // there is no group that contains all these characters
            // throw using the highest priority group that matched
            // https://www.unicode.org/reports/tr39/#mixed_script_confusables
            throw error_group_member(groups[0], cp);
        }
        groups = gs;
        if (gs.length == 1) break; // there is only one group left
    }
    // there are at least 1 group(s) with all of these characters
    return groups;
}
// throw on first error
function flatten(split) {
    return split.map(({ input, error, output })=>{
        if (error) {
            // don't print label again if just a single label
            let msg = error.message;
            // bidi_qq() only necessary if msg is digits
            throw new Error(split.length == 1 ? msg : `Invalid label ${bidi_qq(safe_str_from_cps(input))}: ${msg}`);
        }
        return str_from_cps(output);
    }).join(STOP_CH);
}
function error_disallowed(cp) {
    // TODO: add cp to error?
    return new Error(`disallowed character: ${quoted_cp(cp)}`);
}
function error_group_member(g, cp) {
    let quoted = quoted_cp(cp);
    let gg = GROUPS.find((g)=>g.P.has(cp)); // only check primary
    if (gg) quoted = `${gg.N} ${quoted}`;
    return new Error(`illegal mixture: ${g.N} + ${quoted}`);
}
function error_placement(where) {
    return new Error(`illegal placement: ${where}`);
}
// assumption: cps.length > 0
// assumption: cps[0] isn't a CM
// assumption: the previous character isn't an emoji
function check_group(g, cps) {
    for (let cp of cps){
        if (!group_has_cp(g, cp)) // for whitelisted scripts, this will throw illegal mixture on invalid cm, eg. "e{300}{300}"
        // at the moment, it's unnecessary to introduce an extra error type
        // until there exists a whitelisted multi-character
        //   eg. if (M < 0 && is_combining_mark(cp)) { ... }
        // there are 3 cases:
        //   1. illegal cm for wrong group => mixture error
        //   2. illegal cm for same group => cm error
        //       requires set of whitelist cm per group: 
        //        eg. new Set([...g.P, ...g.Q].flatMap(nfc).filter(cp => CM.has(cp)))
        //   3. wrong group => mixture error
        throw error_group_member(g, cp);
    }
    //if (M >= 0) { // we have a known fixed cm count
    if (g.M) {
        let decomposed = nfd(cps);
        for(let i = 1, e = decomposed.length; i < e; i++)// 20230210: bugfix: using cps instead of decomposed h/t Carbon225
        /*
			if (CM.has(decomposed[i])) {
				let j = i + 1;
				while (j < e && CM.has(decomposed[j])) j++;
				if (j - i > M) {
					throw new Error(`too many combining marks: ${g.N} ${bidi_qq(str_from_cps(decomposed.slice(i-1, j)))} (${j-i}/${M})`);
				}
				i = j;
			}
			*/ // 20230217: switch to NSM counting
        // https://www.unicode.org/reports/tr39/#Optional_Detection
        if (NSM.has(decomposed[i])) {
            let j = i + 1;
            for(let cp; j < e && NSM.has(cp = decomposed[j]); j++)// a. Forbid sequences of the same nonspacing mark.
            for(let k = i; k < j; k++){
                if (decomposed[k] == cp) throw new Error(`duplicate non-spacing marks: ${quoted_cp(cp)}`);
            }
            // parse to end so we have full nsm count
            // b. Forbid sequences of more than 4 nonspacing marks (gc=Mn or gc=Me).
            if (j - i > NSM_MAX) // note: this slice starts with a base char or spacing-mark cm
            throw new Error(`excessive non-spacing marks: ${bidi_qq(safe_str_from_cps(decomposed.slice(i - 1, j)))} (${j - i}/${NSM_MAX})`);
            i = j;
        }
    }
// *** this code currently isn't needed ***
/*
	let cm_whitelist = M instanceof Map;
	for (let i = 0, e = cps.length; i < e; ) {
		let cp = cps[i++];
		let seqs = cm_whitelist && M.get(cp);
		if (seqs) { 
			// list of codepoints that can follow
			// if this exists, this will always be 1+
			let j = i;
			while (j < e && CM.has(cps[j])) j++;
			let cms = cps.slice(i, j);
			let match = seqs.find(seq => !compare_arrays(seq, cms));
			if (!match) throw new Error(`disallowed combining mark sequence: "${safe_str_from_cps([cp, ...cms])}"`);
			i = j;
		} else if (!V.has(cp)) {
			// https://www.unicode.org/reports/tr39/#mixed_script_confusables
			let quoted = quoted_cp(cp);
			for (let cp of cps) {
				let u = UNIQUE.get(cp);
				if (u && u !== g) {
					// if both scripts are restricted this error is confusing
					// because we don't differentiate RestrictedA from RestrictedB 
					if (!u.R) quoted = `${quoted} is ${u.N}`;
					break;
				}
			}
			throw new Error(`disallowed ${g.N} character: ${quoted}`);
			//throw new Error(`disallowed character: ${quoted} (expected ${g.N})`);
			//throw new Error(`${g.N} does not allow: ${quoted}`);
		}
	}
	if (!cm_whitelist) {
		let decomposed = nfd(cps);
		for (let i = 1, e = decomposed.length; i < e; i++) { // we know it can't be cm leading
			if (CM.has(decomposed[i])) {
				let j = i + 1;
				while (j < e && CM.has(decomposed[j])) j++;
				if (j - i > M) {
					throw new Error(`too many combining marks: "${str_from_cps(decomposed.slice(i-1, j))}" (${j-i}/${M})`);
				}
				i = j;
			}
		}
	}
	*/ }
// given a list of codepoints
// returns a list of lists, where emoji are a fully-qualified (as Array subclass)
// eg. explode_cp("abc💩d") => [[61, 62, 63], Emoji[1F4A9, FE0F], [64]]
// 20230818: rename for 'process' name collision h/t Javarome
// https://github.com/adraffy/ens-normalize.js/issues/23
function tokens_from_str(input, nf, ef) {
    let ret = [];
    let chars = [];
    input = input.slice().reverse(); // flip so we can pop
    while(input.length){
        let emoji = consume_emoji_reversed(input);
        if (emoji) {
            if (chars.length) {
                ret.push(nf(chars));
                chars = [];
            }
            ret.push(ef(emoji));
        } else {
            let cp = input.pop();
            if (VALID.has(cp)) chars.push(cp);
            else {
                let cps = MAPPED.get(cp);
                if (cps) chars.push(...cps); // less than 10 elements
                else if (!IGNORED.has(cp)) // 20230912: unicode 15.1 changed the order of processing such that
                // disallowed parts are only rejected after NFC
                // https://unicode.org/reports/tr46/#Validity_Criteria
                // this doesn't impact normalization as of today
                // technically, this error can be removed as the group logic will apply similar logic
                // however the error type might be less clear
                throw error_disallowed(cp);
            }
        }
    }
    if (chars.length) ret.push(nf(chars));
    return ret;
}
function filter_fe0f(cps) {
    return cps.filter((cp)=>cp != FE0F);
}
// given array of codepoints
// returns the longest valid emoji sequence (or undefined if no match)
// *MUTATES* the supplied array
// disallows interleaved ignored characters
// fills (optional) eaten array with matched codepoints
function consume_emoji_reversed(cps, eaten) {
    let node = EMOJI_ROOT;
    let emoji;
    let pos = cps.length;
    while(pos){
        node = node.get(cps[--pos]);
        if (!node) break;
        let { V } = node;
        if (V) {
            emoji = V;
            if (eaten) eaten.push(...cps.slice(pos).reverse()); // (optional) copy input, used for ens_tokenize()
            cps.length = pos; // truncate
        }
    }
    return emoji;
}
// ************************************************************
// tokenizer 
const TY_VALID = "valid";
const TY_MAPPED = "mapped";
const TY_IGNORED = "ignored";
const TY_DISALLOWED = "disallowed";
const TY_EMOJI = "emoji";
const TY_NFC = "nfc";
const TY_STOP = "stop";
function ens_tokenize(name, { nf = true } = {}) {
    init();
    let input = explode_cp(name).reverse();
    let eaten = [];
    let tokens = [];
    while(input.length){
        let emoji = consume_emoji_reversed(input, eaten);
        if (emoji) {
            tokens.push({
                type: TY_EMOJI,
                emoji: emoji.slice(),
                input: eaten,
                cps: filter_fe0f(emoji)
            });
            eaten = []; // reset buffer
        } else {
            let cp = input.pop();
            if (cp == STOP) tokens.push({
                type: TY_STOP,
                cp
            });
            else if (VALID.has(cp)) tokens.push({
                type: TY_VALID,
                cps: [
                    cp
                ]
            });
            else if (IGNORED.has(cp)) tokens.push({
                type: TY_IGNORED,
                cp
            });
            else {
                let cps = MAPPED.get(cp);
                if (cps) tokens.push({
                    type: TY_MAPPED,
                    cp,
                    cps: cps.slice()
                });
                else tokens.push({
                    type: TY_DISALLOWED,
                    cp
                });
            }
        }
    }
    if (nf) for(let i = 0, start = -1; i < tokens.length; i++){
        let token = tokens[i];
        if (is_valid_or_mapped(token.type)) {
            if (requires_check(token.cps)) {
                let end = i + 1;
                for(let pos = end; pos < tokens.length; pos++){
                    let { type, cps } = tokens[pos];
                    if (is_valid_or_mapped(type)) {
                        if (!requires_check(cps)) break;
                        end = pos + 1;
                    } else if (type !== TY_IGNORED) break;
                }
                if (start < 0) start = i;
                let slice = tokens.slice(start, end);
                let cps0 = slice.flatMap((x)=>is_valid_or_mapped(x.type) ? x.cps : []); // strip junk tokens
                let cps = nfc(cps0);
                if (compare_arrays(cps, cps0)) {
                    tokens.splice(start, end - start, {
                        type: TY_NFC,
                        input: cps0,
                        cps,
                        tokens0: collapse_valid_tokens(slice),
                        tokens: ens_tokenize(str_from_cps(cps), {
                            nf: false
                        })
                    });
                    i = start;
                } else i = end - 1; // skip to end of slice
                start = -1; // reset
            } else start = i; // remember last
        } else if (token.type !== TY_IGNORED) start = -1; // reset
    }
    return collapse_valid_tokens(tokens);
}
function is_valid_or_mapped(type) {
    return type == TY_VALID || type == TY_MAPPED;
}
function requires_check(cps) {
    return cps.some((cp)=>NFC_CHECK.has(cp));
}
function collapse_valid_tokens(tokens) {
    for(let i = 0; i < tokens.length; i++)if (tokens[i].type == TY_VALID) {
        let j = i + 1;
        while(j < tokens.length && tokens[j].type == TY_VALID)j++;
        tokens.splice(i, j - i, {
            type: TY_VALID,
            cps: tokens.slice(i, j).flatMap((x)=>x.cps)
        });
    }
    return tokens;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4npMl":[function(require,module,exports) {
/*
This file is part of web3.js.

web3.js is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

web3.js is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
//  Default public resolver
//  https://github.com/ensdomains/resolvers/blob/master/contracts/PublicResolver.sol
parcelHelpers.export(exports, "Resolver", ()=>Resolver);
var _web3Errors = require("web3-errors");
var _web3Utils = require("web3-utils");
var _web3Validator = require("web3-validator");
var _configJs = require("./config.js");
var _utilsJs = require("./utils.js");
var __awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
class Resolver {
    constructor(registry){
        this.registry = registry;
    }
    getResolverContractAdapter(ENSName) {
        return __awaiter(this, void 0, void 0, function*() {
            //  TODO : (Future 4.1.0 TDB) cache resolver contract if frequently queried same ENS name, refresh cache based on TTL and usage, also limit cache size, optional cache with a flag
            return this.registry.getResolver(ENSName);
        });
    }
    //  https://eips.ethereum.org/EIPS/eip-165
    // eslint-disable-next-line class-methods-use-this
    checkInterfaceSupport(resolverContract, methodName) {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function*() {
            if ((0, _web3Utils.isNullish)((0, _configJs.interfaceIds)[methodName])) throw new (0, _web3Errors.ResolverMethodMissingError)((_a = resolverContract.options.address) !== null && _a !== void 0 ? _a : "", methodName);
            const supported = yield resolverContract.methods.supportsInterface((0, _configJs.interfaceIds)[methodName]).call();
            if (!supported) throw new (0, _web3Errors.ResolverMethodMissingError)((_b = resolverContract.options.address) !== null && _b !== void 0 ? _b : "", methodName);
        });
    }
    supportsInterface(ENSName, interfaceId) {
        var _a;
        return __awaiter(this, void 0, void 0, function*() {
            const resolverContract = yield this.getResolverContractAdapter(ENSName);
            let interfaceIdParam = interfaceId;
            if (!(0, _web3Validator.isHexStrict)(interfaceIdParam)) {
                interfaceIdParam = (_a = (0, _web3Utils.sha3)(interfaceId)) !== null && _a !== void 0 ? _a : "";
                if (interfaceId === "") throw new Error("Invalid interface Id");
                interfaceIdParam = interfaceIdParam.slice(0, 10);
            }
            return resolverContract.methods.supportsInterface(interfaceIdParam).call();
        });
    }
    // eslint-disable-next-line @typescript-eslint/no-inferrable-types
    getAddress(ENSName, coinType = 60) {
        return __awaiter(this, void 0, void 0, function*() {
            const resolverContract = yield this.getResolverContractAdapter(ENSName);
            yield this.checkInterfaceSupport(resolverContract, (0, _configJs.methodsInInterface).addr);
            return resolverContract.methods.addr((0, _utilsJs.namehash)(ENSName), coinType).call();
        });
    }
    getPubkey(ENSName) {
        return __awaiter(this, void 0, void 0, function*() {
            const resolverContract = yield this.getResolverContractAdapter(ENSName);
            yield this.checkInterfaceSupport(resolverContract, (0, _configJs.methodsInInterface).pubkey);
            return resolverContract.methods.pubkey((0, _utilsJs.namehash)(ENSName)).call();
        });
    }
    getContenthash(ENSName) {
        return __awaiter(this, void 0, void 0, function*() {
            const resolverContract = yield this.getResolverContractAdapter(ENSName);
            yield this.checkInterfaceSupport(resolverContract, (0, _configJs.methodsInInterface).contenthash);
            return resolverContract.methods.contenthash((0, _utilsJs.namehash)(ENSName)).call();
        });
    }
}

},{"web3-errors":"jDvsn","web3-utils":"8WsWI","web3-validator":"6HK71","./config.js":"aV3WN","./utils.js":"gUh3S","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1awcp":[function(require,module,exports) {
/*
This file is part of web3.js.

web3.js is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

web3.js is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/ /**
 * The `web3-eth-personal` package allows you to interact with the Ethereum node’s accounts.
 *
 * **_NOTE:_**  Many of these functions send sensitive information like passwords. Never call these functions over a unsecured Websocket or HTTP provider, as your password will be sent in plain text!
 *
 * import Personal from 'web3-eth-personal';
 *
 * const personal = new Personal('http://localhost:8545');
 *
 * or using the web3 umbrella package
 *
 * import Personal from 'web3-eth-personal';
 * const web3 = new Web3('http://localhost:8545');
 * // web3.eth.personal
 */ /**
 * This comment _supports3_ [Markdown](https://marked.js.org/)
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _personalJs = require("./personal.js");
parcelHelpers.exportAll(_personalJs, exports);
exports.default = (0, _personalJs.Personal);

},{"./personal.js":"aJ8Vb","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aJ8Vb":[function(require,module,exports) {
/*
This file is part of web3.js.

web3.js is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

web3.js is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Personal", ()=>Personal);
var _web3Core = require("web3-core");
var _rpcMethodWrappersJs = require("./rpc_method_wrappers.js");
var __awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
class Personal extends (0, _web3Core.Web3Context) {
    /**
     *Returns a list of accounts the node controls by using the provider and calling the RPC method personal_listAccounts. Using `web3.eth.accounts.create()` will not add accounts into this list. For that use `web3.eth.personal.newAccount()`.
     * @returns - An array of addresses controlled by the node.
     * @example
     * ```ts
     *  const accounts = await personal.getAccounts();
     * console.log(accounts);
     * >
     * [
     * 	'0x79D7BbaC53C9aF700d0B250e9AE789E503Fcd6AE',
     * 	'0xe2597eB05CF9a87eB1309e86750C903EC38E527e',
     * 	'0x7eD0e85B8E1E925600B4373e6d108F34AB38a401',
     * 	'0xE4bEEf667408b99053dC147Ed19592aDa0d77F59',
     * 	'0x7AB80aeB6bb488B7f6c41c58e83Ef248eB39c882',
     * 	'0x12B1D9d74d73b1C3A245B19C1C5501c653aF1af9',
     * 	'0x1a6075A263Ee140e00Dbf8E374Fc5A443d097894',
     * 	'0x4FEC0A51024B13030D26E70904B066C6d41157A5',
     * 	'0x03095dc4857BB26f3a4550c5651Df8b7f6b6B1Ef',
     * 	'0xac0B9b6e8A17991cb172B2ABAF45Fb5eb769E540'
     * ]
     * ```
     */ getAccounts() {
        return __awaiter(this, void 0, void 0, function*() {
            return _rpcMethodWrappersJs.getAccounts(this.requestManager);
        });
    }
    /**
     * Creates a new account and returns its address.
     * **_NOTE:_**  This function sends a sensitive information like password. Never call this function over a unsecured Websocket or HTTP provider, as your password will be sent in plain text!
     * @param password - The password to encrypt the account with.
     * @returns - The address of the new account.
     * @example
     * ```ts
     * const addr = await web3.eth.personal.newAccount('password');
     * console.log(addr);
     * > '0x1234567891011121314151617181920212223456'
     * ```
     */ newAccount(password) {
        return __awaiter(this, void 0, void 0, function*() {
            return _rpcMethodWrappersJs.newAccount(this.requestManager, password);
        });
    }
    /**
     * Unlocks an account for a given duration.
     * @param address - The address of the account to unlock.
     * @param password - The password of the account to unlock.
     * @param unlockDuration - The duration in seconds to unlock the account for.
     * @example
     * ```ts
     * await personal.unlockAccount(
     * 	"0x0d4aa485ecbc499c70860feb7e5aaeaf5fd8172e",
     * 	"123456",
     * 	600
     * );
     * ```
     */ unlockAccount(address, password, unlockDuration) {
        return __awaiter(this, void 0, void 0, function*() {
            return _rpcMethodWrappersJs.unlockAccount(this.requestManager, address, password, unlockDuration);
        });
    }
    /**
     * Locks the given account
     * @param address - The address of the account to lock.
     * @returns - `true` if the account was locked, otherwise `false`.
     * @example
     * ```ts
     * await personal.lockAccount(
     * 	"0x0d4aa485ecbc499c70860feb7e5aaeaf5fd8172e"
     * );
     */ lockAccount(address) {
        return __awaiter(this, void 0, void 0, function*() {
            return _rpcMethodWrappersJs.lockAccount(this.requestManager, address);
        });
    }
    /**
     * Imports the given private key into the key store, encrypting it with the passphrase.
     * @param keyData - An unencrypted private key (hex string).
     * @param passphrase  - The password of the account
     * @returns - The address of the new account.
     * @example
     * ```ts
     * const accountAddress = await personal.importRawKey(
     * 	"abe40cb08850da918ee951b237fa87946499b2d8643e4aa12b0610b050c731f6",
     * 	"123456"
     * );
     *
     * console.log(unlockTx);
     * > 0x8727a8b34ec833154b72b62cac05d69f86eb6556
     * ```
     */ importRawKey(keyData, passphrase) {
        return __awaiter(this, void 0, void 0, function*() {
            return _rpcMethodWrappersJs.importRawKey(this.requestManager, keyData, passphrase);
        });
    }
    /**
     * This method sends a transaction over the management API.
     * **_NOTE:_** Sending your account password over an unsecured HTTP RPC connection is highly unsecure.
     * @param tx - The transaction options
     * @param passphrase - The passphrase of the current account
     * @returns - The transaction hash
     * @example
     * ```ts
     * const txHash = personal
     * .sendTransaction({
     *  	from: "0x0d4aa485ecbc499c70860feb7e5aaeaf5fd8172e",
     * 	gasPrice: "20000000000",
     * 	gas: "21000",
     * 	to: "0x3535353535353535353535353535353535353535",
     * 	value: "1000000",
     * 	data: "",
     * 	nonce: 0,
     * },
     * "123456");
     *
     * console.log(txHash);
     * > 0x9445325c3c5638c9fe425b003b8c32f03e9f99d409555a650a6838ba712bb51b
     * ```
     */ sendTransaction(tx, passphrase) {
        return __awaiter(this, void 0, void 0, function*() {
            return _rpcMethodWrappersJs.sendTransaction(this.requestManager, tx, passphrase);
        });
    }
    /**
     * Signs a transaction. This account needs to be unlocked.
     * **_NOTE:_** Sending your account password over an unsecured HTTP RPC connection is highly unsecure.
     * @param tx - The transaction data to sign. See {@link sendTransaction}  for more information.
     * @param passphrase - The password of the `from` account, to sign the transaction with.
     * @returns - The RLP encoded transaction. The `raw` property can be used to send the transaction using {@link sendSignedTransaction}.
     * @example
     * ```ts
     * const tx = personal
     * .signTransaction({
     * 	from: "0x0d4aa485ecbc499c70860feb7e5aaeaf5fd8172e",
     * 	gasPrice: "20000000000",
     * 	gas: "21000",
     * 	to: "0x3535353535353535353535353535353535353535",
     * 	value: "1000000000000000000",
     * 	data: "",
     * 	nonce: 0,
     * },
     * "123456");
     *
     * console.log(tx);
     *
     * > {
     * 	raw: '0xf86e808504a817c800825208943535353535353535353535353535353535353535880de0b6b3a764000080820a95a0c951c03238fe930e6e69ab9d6af9f29248a514048e44884f0e60c4de40de3526a038b71399bf0c8925749ab79e91ce6cd2fc068c84c18ff6a197b48c4cbef01e00',
     * 	tx: {
     * 	type: '0x0',
     * 	nonce: '0x0',
     * 	gasPrice: '0x4a817c800',
     * 	maxPriorityFeePerGas: null,
     * 	maxFeePerGas: null,
     * 	gas: '0x5208',
     * 	value: '0xde0b6b3a7640000',
     * 	input: '0x',
     * 	v: '0xa95',
     * 	r: '0xc951c03238fe930e6e69ab9d6af9f29248a514048e44884f0e60c4de40de3526',
     * 	s: '0x38b71399bf0c8925749ab79e91ce6cd2fc068c84c18ff6a197b48c4cbef01e00',
     * 	to: '0x3535353535353535353535353535353535353535',
     * 	hash: '0x65e3df790ab2a32068b13cff970b26445b8995229ae4abbed61bd996f09fce69'
     * 	}
     * }
     * ```
     */ signTransaction(tx, passphrase) {
        return __awaiter(this, void 0, void 0, function*() {
            return _rpcMethodWrappersJs.signTransaction(this.requestManager, tx, passphrase);
        });
    }
    /**
     * Calculates an Ethereum specific signature with:
     * sign(keccak256("\x19Ethereum Signed Message:\n" + dataToSign.length + dataToSign)))
     * Adding a prefix to the message makes the calculated signature recognisable as an Ethereum specific signature.
     *
     * If you have the original message and the signed message, you can discover the signing account address using web3.eth.personal.ecRecover
     * **_NOTE:_** Sending your account password over an unsecured HTTP RPC connection is highly unsecure.
     * @param data - The data to sign.
     * @param address - The address to sign with.
     * @param passphrase - The passphrase to decrypt the account with.
     * @returns - The signature.
     * @example
     * ```ts
     * const sig = await personal .sign("Hello world", "0x0D4Aa485ECbC499c70860fEb7e5AaeAf5fd8172E", "123456")
     * console.log(sig)
     * > 0x5d21d01b3198ac34d0585a9d76c4d1c8123e5e06746c8962318a1c08ffb207596e6fce4a6f377b7c0fc98c5f646cd73438c80e8a1a95cbec55a84c2889dca0301b
     * ```
     */ sign(data, address, passphrase) {
        return __awaiter(this, void 0, void 0, function*() {
            return _rpcMethodWrappersJs.sign(this.requestManager, data, address, passphrase);
        });
    }
    /**
     * Recovers the account that signed the data.
     * @param signedData - Data that was signed. If String it will be converted using {@link utf8ToHex}
     * @param signature - The signature
     * @returns - The address of the account that signed the data.
     * @example
     * ```ts
     *  const address = await personal.ecRecover(
     * 	"Hello world",
     * 	"0x5d21d01b3198ac34d0585a9d76c4d1c8123e5e06746c8962318a1c08ffb207596e6fce4a6f377b7c0fc98c5f646cd73438c80e8a1a95cbec55a84c2889dca0301b"
     * );
     * console.log(address);
     * > 0x0d4aa485ecbc499c70860feb7e5aaeaf5fd8172e
     * ```
     */ ecRecover(signedData, signature) {
        return __awaiter(this, void 0, void 0, function*() {
            return _rpcMethodWrappersJs.ecRecover(this.requestManager, signedData, signature);
        });
    }
}

},{"web3-core":"4Uu6H","./rpc_method_wrappers.js":"kRP4c","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kRP4c":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getAccounts", ()=>getAccounts);
parcelHelpers.export(exports, "newAccount", ()=>newAccount);
parcelHelpers.export(exports, "unlockAccount", ()=>unlockAccount);
parcelHelpers.export(exports, "lockAccount", ()=>lockAccount);
parcelHelpers.export(exports, "importRawKey", ()=>importRawKey);
parcelHelpers.export(exports, "sendTransaction", ()=>sendTransaction);
parcelHelpers.export(exports, "signTransaction", ()=>signTransaction);
parcelHelpers.export(exports, "sign", ()=>sign);
parcelHelpers.export(exports, "ecRecover", ()=>ecRecover);
var _web3Utils = require("web3-utils");
var _web3Eth = require("web3-eth");
var _web3Types = require("web3-types");
var _web3Validator = require("web3-validator");
var _web3RpcMethods = require("web3-rpc-methods");
var __awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
const getAccounts = (requestManager)=>__awaiter(void 0, void 0, void 0, function*() {
        const result = yield (0, _web3RpcMethods.personalRpcMethods).getAccounts(requestManager);
        return result.map((0, _web3Utils.toChecksumAddress));
    });
const newAccount = (requestManager, password)=>__awaiter(void 0, void 0, void 0, function*() {
        (0, _web3Validator.validator).validate([
            "string"
        ], [
            password
        ]);
        const result = yield (0, _web3RpcMethods.personalRpcMethods).newAccount(requestManager, password);
        return (0, _web3Utils.toChecksumAddress)(result);
    });
const unlockAccount = (requestManager, address, password, unlockDuration)=>__awaiter(void 0, void 0, void 0, function*() {
        (0, _web3Validator.validator).validate([
            "address",
            "string",
            "uint"
        ], [
            address,
            password,
            unlockDuration
        ]);
        return (0, _web3RpcMethods.personalRpcMethods).unlockAccount(requestManager, address, password, unlockDuration);
    });
const lockAccount = (requestManager, address)=>__awaiter(void 0, void 0, void 0, function*() {
        (0, _web3Validator.validator).validate([
            "address"
        ], [
            address
        ]);
        return (0, _web3RpcMethods.personalRpcMethods).lockAccount(requestManager, address);
    });
const importRawKey = (requestManager, keyData, passphrase)=>__awaiter(void 0, void 0, void 0, function*() {
        (0, _web3Validator.validator).validate([
            "string",
            "string"
        ], [
            keyData,
            passphrase
        ]);
        return (0, _web3RpcMethods.personalRpcMethods).importRawKey(requestManager, keyData, passphrase);
    });
const sendTransaction = (requestManager, tx, passphrase)=>__awaiter(void 0, void 0, void 0, function*() {
        const formattedTx = (0, _web3Eth.formatTransaction)(tx, (0, _web3Types.ETH_DATA_FORMAT));
        return (0, _web3RpcMethods.personalRpcMethods).sendTransaction(requestManager, formattedTx, passphrase);
    });
const signTransaction = (requestManager, tx, passphrase)=>__awaiter(void 0, void 0, void 0, function*() {
        const formattedTx = (0, _web3Eth.formatTransaction)(tx, (0, _web3Types.ETH_DATA_FORMAT));
        return (0, _web3RpcMethods.personalRpcMethods).signTransaction(requestManager, formattedTx, passphrase);
    });
const sign = (requestManager, data, address, passphrase)=>__awaiter(void 0, void 0, void 0, function*() {
        (0, _web3Validator.validator).validate([
            "string",
            "address",
            "string"
        ], [
            data,
            address,
            passphrase
        ]);
        const dataToSign = (0, _web3Validator.isHexStrict)(data) ? data : (0, _web3Utils.utf8ToHex)(data);
        return (0, _web3RpcMethods.personalRpcMethods).sign(requestManager, dataToSign, address, passphrase);
    });
const ecRecover = (requestManager, signedData, signature)=>__awaiter(void 0, void 0, void 0, function*() {
        (0, _web3Validator.validator).validate([
            "string",
            "string"
        ], [
            signedData,
            signature
        ]);
        const signedDataString = (0, _web3Validator.isHexStrict)(signedData) ? signedData : (0, _web3Utils.utf8ToHex)(signedData);
        return (0, _web3RpcMethods.personalRpcMethods).ecRecover(requestManager, signedDataString, signature);
    });

},{"web3-utils":"8WsWI","web3-eth":"k52UE","web3-types":"g7Ztk","web3-validator":"6HK71","web3-rpc-methods":"eT6LI","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8HU1J":[function(require,module,exports) {
/*
This file is part of web3.js.

web3.js is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

web3.js is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _web3EthAbi = require("web3-eth-abi");
/**
 * The object for `web3.abi`
 */ exports.default = {
    encodeEventSignature: (0, _web3EthAbi.encodeEventSignature),
    encodeFunctionCall: (0, _web3EthAbi.encodeFunctionCall),
    encodeFunctionSignature: (0, _web3EthAbi.encodeFunctionSignature),
    encodeParameter: (0, _web3EthAbi.encodeParameter),
    encodeParameters: (0, _web3EthAbi.encodeParameters),
    decodeParameter: (0, _web3EthAbi.decodeParameter),
    decodeParameters: (0, _web3EthAbi.decodeParameters),
    decodeLog: (0, _web3EthAbi.decodeLog)
};

},{"web3-eth-abi":"bZbSL","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jm2wV":[function(require,module,exports) {
/*
This file is part of web3.js.

web3.js is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

web3.js is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "initAccountsForContext", ()=>initAccountsForContext);
var _web3Types = require("web3-types");
var _web3Utils = require("web3-utils");
var _web3Eth = require("web3-eth");
var _web3EthAccounts = require("web3-eth-accounts");
var __awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
const initAccountsForContext = (context)=>{
    const signTransactionWithContext = (transaction, privateKey)=>__awaiter(void 0, void 0, void 0, function*() {
            const tx = yield (0, _web3Eth.prepareTransactionForSigning)(transaction, context);
            const privateKeyBytes = (0, _web3Utils.format)({
                format: "bytes"
            }, privateKey, (0, _web3Types.ETH_DATA_FORMAT));
            return (0, _web3EthAccounts.signTransaction)(tx, privateKeyBytes);
        });
    const privateKeyToAccountWithContext = (privateKey)=>{
        const account = (0, _web3EthAccounts.privateKeyToAccount)(privateKey);
        return Object.assign(Object.assign({}, account), {
            signTransaction: (transaction)=>__awaiter(void 0, void 0, void 0, function*() {
                    return signTransactionWithContext(transaction, account.privateKey);
                })
        });
    };
    const decryptWithContext = (keystore, password, options)=>__awaiter(void 0, void 0, void 0, function*() {
            var _a;
            const account = yield (0, _web3EthAccounts.decrypt)(keystore, password, (_a = options === null || options === void 0 ? void 0 : options.nonStrict) !== null && _a !== void 0 ? _a : true);
            return Object.assign(Object.assign({}, account), {
                signTransaction: (transaction)=>__awaiter(void 0, void 0, void 0, function*() {
                        return signTransactionWithContext(transaction, account.privateKey);
                    })
            });
        });
    const createWithContext = ()=>{
        const account = (0, _web3EthAccounts.create)();
        return Object.assign(Object.assign({}, account), {
            signTransaction: (transaction)=>__awaiter(void 0, void 0, void 0, function*() {
                    return signTransactionWithContext(transaction, account.privateKey);
                })
        });
    };
    const wallet = new (0, _web3EthAccounts.Wallet)({
        create: createWithContext,
        privateKeyToAccount: privateKeyToAccountWithContext,
        decrypt: decryptWithContext
    });
    return {
        signTransaction: signTransactionWithContext,
        create: createWithContext,
        privateKeyToAccount: privateKeyToAccountWithContext,
        decrypt: decryptWithContext,
        recoverTransaction: (0, _web3EthAccounts.recoverTransaction),
        hashMessage: (0, _web3EthAccounts.hashMessage),
        sign: (0, _web3EthAccounts.sign),
        recover: (0, _web3EthAccounts.recover),
        encrypt: (0, _web3EthAccounts.encrypt),
        wallet,
        privateKeyToAddress: (0, _web3EthAccounts.privateKeyToAddress),
        parseAndValidatePrivateKey: (0, _web3EthAccounts.parseAndValidatePrivateKey),
        privateKeyToPublicKey: (0, _web3EthAccounts.privateKeyToPublicKey)
    };
};

},{"web3-types":"g7Ztk","web3-utils":"8WsWI","web3-eth":"k52UE","web3-eth-accounts":"4gQAz","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1xGaw":[function(require,module,exports) {
/* eslint-disable header/header */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Web3PkgInfo", ()=>Web3PkgInfo);
const Web3PkgInfo = {
    version: "4.3.0"
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bgjGn":[function(require,module,exports) {
/*
This file is part of web3.js.

web3.js is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

web3.js is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"GnyZJ":[function(require,module,exports) {
/*
This file is part of web3.js.

web3.js is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

web3.js is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "abi", ()=>_web3EthAbi);
parcelHelpers.export(exports, "accounts", ()=>_web3EthAccounts);
parcelHelpers.export(exports, "contract", ()=>_web3EthContract);
parcelHelpers.export(exports, "ens", ()=>_web3EthEns);
parcelHelpers.export(exports, "personal", ()=>_web3EthPersonal);
parcelHelpers.export(exports, "iban", ()=>_web3EthIban);
var _web3Eth = require("web3-eth");
parcelHelpers.exportAll(_web3Eth, exports);
var _web3EthAbi = require("web3-eth-abi");
var _web3EthAccounts = require("web3-eth-accounts");
var _web3EthContract = require("web3-eth-contract");
var _web3EthEns = require("web3-eth-ens");
var _web3EthPersonal = require("web3-eth-personal");
var _web3EthIban = require("web3-eth-iban");

},{"web3-eth":"k52UE","web3-eth-abi":"bZbSL","web3-eth-accounts":"4gQAz","web3-eth-contract":"arHxy","web3-eth-ens":"hsBVO","web3-eth-personal":"1awcp","web3-eth-iban":"kmwjX","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6bQ3D":[function(require,module,exports) {
/*
This file is part of web3.js.

web3.js is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

web3.js is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Eip1193Provider", ()=>(0, _web3Utils.Eip1193Provider));
parcelHelpers.export(exports, "SocketProvider", ()=>(0, _web3Utils.SocketProvider));
parcelHelpers.export(exports, "http", ()=>_web3ProvidersHttp);
parcelHelpers.export(exports, "ws", ()=>_web3ProvidersWs);
var _web3Utils = require("web3-utils");
var _web3ProvidersHttp = require("web3-providers-http");
var _web3ProvidersWs = require("web3-providers-ws");

},{"web3-utils":"8WsWI","web3-providers-http":"a3cbP","web3-providers-ws":"8zbJW","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}]},["69IND"], null, "parcelRequiree8ef")

//# sourceMappingURL=login.189cd996.js.map
